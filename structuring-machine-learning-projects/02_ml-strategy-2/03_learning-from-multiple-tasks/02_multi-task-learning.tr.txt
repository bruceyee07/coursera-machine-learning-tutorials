Transfer öğrenmesinde görev A'dan öğrenip bunu görev B'ye aktardığınız ardışık bir süreciniz varken, çoklu görev öğrenmesinde aynı anda başlıyor ve bir sinir ağının aynı anda birden çok şey yapmasını sağlamaya çalışıyorsunuz. Ve sonra bu görevlerden her biri umuyoruz ki tüm diğer görevlere yardımcı olyor. Bir örneğe bakalım. Diyelim ki, otonom bir araç inşa ediyorsunuz, bir sürücüsüz araba inşa ediyorsunuz. O zaman sürücüsüz aracınızın yayalar, diğer araçlar, dur işaretleri gibi birden fazla değişik şeyi tespit etmesi gerekecektir. Ve aynı zamanda trafik ışıklarını ve diğer şeyleri de. Yani örneğin, soldaki bu örnekte, bu görselde bir dur işareti var ve bu görselde bir araba var ama trafik ışığı veya yaya yok. Yani eğer bu görsel bir örnek için girdi ise, x(i), o zaman bir tane y(i) etiketi yerine aslında 4 etikeniz olurdu. Bu örnekte, yaya yok, bir araba var, bir dur işareti var ve trafik lambası yok. Ve eğer diğer şeyleri de sezimlemek isterseniz, o zaman belki de y(i)nin daha da fazla boyutu olurdu. Ama şimdilik bu dört ile kalalım. Şimdi, y(i) 4e 1lik bir yöney. Ve eğer eğitim test etiketlerine bir bütün olarak bakarsanız o zaman daha önce olduğu gibi, eğitim verisinin etiketlerini y(1) den y(m)ye olacak şekilde dikey olarak yığarız. Ancak şimdi y(i) 4e 1lik bir yöney ve bunların her biri uzun bir kolon yöneyi. Ve bu Y dizeyi şimdi 4e mlik bir dizey, halbuki daha önce y tek bir sayı iken, bu 1e mlik bir dizey olurdu. İşte şimdi yapabileceğiniz sinir ağınızı y'nin bu değerlerini öngörmek için eğitmektir. Böylece bir sinir ağı girdiniz x ve şimdi dört boyutlu bir değeri olan y çıktınız olabilir. Dikkat edin ki burada çıktı için dört düğüm çizdim. Ve böylece tahminlemeye çalıştığımızda ilk düğüm burada bir yaya olup olmadığı. İkinci çıktı orada bir araba olup olmadığını tahmin edecek, orada bir dur levhası olup olmadığını tahmin edecek ve belki de orada bir trafik ışığı olup olmadığını tahmin edecek. Yani buradaki şapkalı y dört boyutlu. Yani bu sinir ağını eğitmek için, sinir ağındaki yitimi tanımlamanız gerekiyor. sinir ağında uyumludur. Ve böylece, tahmin edilmiş çıktı şapkalı y i, ki bu 4e 1 boyutludur, ile tüm eğitim kümeniz üzerinden ortalama kayıp i=1 den m'ye kadar 1 üzeri m'nin toplamının münferit tahminlerin yitiminin j=1 den 4e kadar toplamı olacaktır. Yani, sadece 4 bileşen olan yaya, araba, dur levhası ve trafik ışığı üzerinden toplam. Ve bu yazı L de olağan s biçimli kayıp. Yani bunu yazmak için, bu yj i log şapkalı y ji 1-y log şapkalı 1-y. Ve daha önceki değer atama sınıflandırma örneğine kıyasla temel farkı şimdi j eşittir 1 den 4e kadar toplamını alıyor olmanız. Ve bu ve eşiksiz en büyük bağıntı arasındaki temel fark da, tek bir örneğe tek bir etiket atayan eşiksiz en büyük bağıntıdan farklı olarak bu bir görselin birden fazla etiketi olabilir. Yani, her bir görselin bir yaya resmi veya araba resmi, stop levhası resmi trafik ışığı resmi olup olmadığını söylemiyorsunuz. Her bir resim için, yaya var mı veya araba veya stop levhası veya trafik lambası var mı diye soruyorsunuz ve bir görselde birden fazla cisim bulunabiliyor. Aslında, bir önceki slayttaki örnekte görselde hem bir arabamız hem de bir dur levhamız vardı ama yaya ve trafik ışığı yoktu. Yani görsele tek bir etiket atamıyorsunuz, bütün sınıfların üzerinden, bu sınıf, bu tip bir nesne görselde yer alıyor mu diye sorarak geçiyorsunuz. İşte bu yüzden bu ayarla diyorum ki, bir görselin birden fazla etiketi olabilir. Eğer bir sinir ağını yitim fonksiyonunu en aza indirmek için eğitiyorsanız, çoklu görev öğrenme uyguluyorsunuz demektir. Çünkü yaptığnız her bir görsele bakan ve basitçe dört sorunu çözen tek bir sinir ağı inşa etmektir. Size her bir görselin için bu dört nesneden her biri var mı bunu söylemeye çalışıyor. Ve yapabileceğiniz bir şey de, bir sinir ağını dört şey yapmak için eğitmek yerine 4 ayrı sinir ağı eğitmektir. Ama eğer sinir ağındaki daha önceki özelliklerden bazıları bu değişik tipteki nesneler arasında paylaştırılabilirse, o zaman dört tamamen ayrı sinir ağını ayrı ayrı dört görev yapmak için eğitmek yerine bir sinir ağını dört şey yapmak için eğitmenin performans açısından daha iyi sonuç verdğini göreceksiniz. İşte bu da çoklu görev öğrenmesinin gücüdür. Ve bir detay daha, Şimdiye kadar bu algoritmayı sanki her görselde her bir etiket varmış gibi tanımladım. Ortaya çıkıyor ki, çoklu görev öğrenmeleri bazı görsellerde sadece bazı nesneleri etiketlesek bile çalışıyor. Şimdi, ilk eğitim örneği, diyelim ki biri, etiketleyiciniz, orada bir yaya olduğunu, bir araba olmadığını ama bir dur levhası veya trafik ışığı olup olmadığını etiketlemekle uğraşmadıklarını söyledi. Ve belki ikinci bir örnek olarak, bir yaya var, bir araba var ama yine etiketleyici bu görsele bakınca, bir dur levhası veya bir trafik ışığı olup olmadığını etiketlememiş, bunun gibi. Ve belki bazı örnekler tamamen etiketlenmiştir ve belki bazı örneklerde onlar sadece arabaların varlığını ve yokluğunu etiketliyorlardır, böylece bazı soru işaretleri var, ve buna benzer. İşte buna benzer bir veri kümesi ile halen öğrenme algoritmanızı aynı anda dört görev yapmak için eğitebilirsiniz, bazı görseller etiketlerin sadece bir altkümesine sahip olsa ve bazıları soru işareti veya önemsememe içerse de. Ve algoritmayı eğitme yolunuz, bu etiketlerin bazıları soru işaretleri olsa veya gerçekten etiketlenmemiş olsa da bu j 1den 4e kadar toplamdır, sadece j nin 0 veya 1 etiketine sahip olduğu değerler üzerinden toplayacaksınız. Yani, soru işareti olduğu durumlarda sadece bu terimi toplama dahil etmeyeceksiniz ama sadece etiketin olduğu yerlerdeki değerler üzerinden toplayacaksınız. Ve böylece bu durum bu şekildeki veri kümelerini kullanmanıza da müsaade eder. O halde, çoklu görev öğrenmesi ne zaman bir anlam ifade ediyor? O halde, çoklu görev öğrenmesi ne zaman bir anlam ifade ediyor? Bence genelde üç şeyin doğru olduğu zamanlarda mantıklı olur. Birincisi eğer düşük seviyeli özellikleri paylaşıyor olmaktan fayda sağlayacak görevler kümesi üzerinde eğitiyorsanız. Yani sürücüsüz araç örneği için, trafik ışıkları ve arabalar ve yayaları tanımak mantıklıdır, bunların aynı zamanda dur levhalarını tanımanızı sağlayacak benzer özellikleri de olmalıdır, çünkü tüm bunlar yolların özellikleridir. İkincisi, bu pek de katı ve hızlı bir kural değildir bu yüzden her zaman doğru değildir. Ama, birçok başarılı çoklu görev öğrenmesi ortamından gördüğüm kadarıyla her bir görev için elinizde olan veri miktarı oldukça benzerdir. Yani eğer transfer öğrenmesinden hatırlarsanız, bir A görevinden öğreniyor ve bir B görevine aktarıyorsunuz. Yani, eğer A görevinden bir milyon örnek varsa ve B örneği için 1.000 örnek varsa, o zaman bu bir milyon örnekten öğrendiğiniz tüm bilgi B görevi için sahip olduğunuz daha küçük veri kümesini arttırmanıza yardımcı olabilir. Peki ya Çoklu Görev Öğrenmesi(multi-tast learning)? Çoklu görev öğrenmesinde, genellikle ikiden çok daha fazla görev vardır. Öncesinde 4 görevimiz vardı fakat diyelim ki 100 göreviniz var ve diyelim ki 100 farklı nesneyi aynı anda tanımlamak için çoklu-görev öğrenmesini kullanacaksınız Görev başı 1000 örneğe sahip olabilirsiniz ve eğer sadece bir görevin performansına odaklanırsanız, diyelim ki 100.görevin performansına odaklanalım eğer bu 100.görevi tek başına yapmaya çalışırsanız, bu örneği eğitmek için sadece 1000 örneğiniz olmuş olur, -buradaki 100 örnekten biri-, fakat diğer 99 örnek üzerinde eğitirseniz bunlar 99.000 eğitim örneği anlamına gelir ve bu da önemli bir artış sağlar, bu A100 görevi için göreceli olarak küçük, 1000 örnekten oluşan eğitim setini artırmak için önemli bilgi avantajı sağlayabilir ve simetrik olarak 99 görevin her biri ,listedeki diğer 100 görev için veri ya da bilgi sağlayabilir İkinci kural çok katı bir kural değil fakat benim burda baktığım şey, eğer herhangi bir göreve odaklanırsanız, bu görev için çoklu görev öğrenmesinde önemli artış kaydetmek istiyorsanız, diğer görevler toplandığında, sadece o görev için olan veriden çok daha fazla veri oluşturmalıdır ve bunu sağlamanın bir yolu bizim buradaki örneğimizde olduğu gibi bütün görevlerdeki veri miktarının benzer miktarda olmasıdır fakat buradaki asıl anahtar nokta ise eğer 1 görev için 1000 örneğiniz varsa ve eğer diğer görevlerin bu görevde yardım etmesini hedefliyorsanız diğer görevlerde 1000'den çok daha fazla örnek olması gerekir Son olarak, çoklu-görev öğrenmesi tüm görevlerde iyi sonuç alabilmek için yeterli büyüklükte sinir ağıyla eğitildiğinde daha fazla anlama sahip olmaktadır. Çoklu-görev öğrenmesine olabilecek alternatif her bir görev için ayrı sinir ağı eğitmek olacaktır. Dolayısıyla, yaya,araba,dur işareti ve trafik ışıkları için sadece bir sinir ağı eğitmek yerine yaya belirleme için bir sinir ağı, araba belirleme için bir sinir ağı,dur işareti için bir sinir ağı, trafik ışıkları için bir sinir ağı eğitebilirsiniz. Bir araştırmacının, -Rich Carona, yıllar önce bulduğu şey çoklu-görev öğrenmesinin ayrı sinir ağları eğitmeyle karşılaştırıldığında performansı olumsuz etkilediği tek zaman sinir ağınızın büyüklüğünün yeterli olmadığı durumdur fakat eğer yeteri kadar büyük bir sinir ağı eğitebilirseniz, çoklu-görev öğrenmesi ya performansı olumsuz etkilemez ya da çok nadir olumsuz etkiler ve sinir ağılarının bu görevleri ayrı ayrı yapması için eğitilmesine nazaran daha iyi performans sergilemesini bekleriz. Çoklu-görev öğrenmesi bu kadardı. Pratikte çoklu-görev öğrenmesi, öğrenme transferinden(transfer learning) çok daha az kullanılmaktadır. Bir probleminizin olduğu ve bunu az miktarda veriyle çözmeniz gerektiği durumlarda kullanılan Öğrenme Transferinin kullanıldığı bir çok uygulama görüyorum bu durumda birçok veriye sahip olan başka bir problem bulıyorsunuz ve bunu yeni probleminize transfer ediyorsunuz fakat birçok farklı göreve sahip olduğunuz, iyi bir performans vermesini istediğiniz ve tüm görevleri aynı anda eğittiğiniz çoklu-görev öğrenmesi daha nadir olarak kullanılmaktadır. Belki bir örneği bilgisayarlı görüdür. Nesne belirlemede, bir sinir ağının birçok nesneyi aynı anda belirlemeye çalıştığı çoklu-görev öğrenmesi nesnelerin ayrı ayrı sinir ağlarıyla belirlenmesinden daha iyi çalışmaktadır fakat ortalama olarak diyebilirim ki Öğrenme Transferi, Çoklu-Görev Öğrenmesinden daha sık kullanılmaktadır yine de ikisinin de cephanenizde yer etmesi faydalı olacaktır. Dolayısıyla özetlemek gerekirse, çoklu-görev öğrenmesi birçok görev için tek bir sinir ağı eğitmenize olanak sağlar ve bu size görevleri ayrı ele almanızdan daha iyi performans getirir Dikkat edilmesi gereken bir şey, pratikte öğrenme transferi, çoklu-görev öğrenmesinden çok daha sık kullanılır. Makine öğrenimi probleminizi çözmek istediğiniz fakat göreceli olarak az miktarda veriye sahip olduğunuz birçok durum mevcut ve bu durumda öğrenme transferi gerçekten yardımcı olabilir. Burada çok daha büyük bir verisetine sahip olan benzer bir probleminiz olduğunda buradan devralıp az miktardaki verinizin olduğu probleminize transfer etmiş olursunuz. Dolayısıyla öğrenme transferi günümüzde çok sık kullanılmakta. Çoklu-görev öğrenmesinin de kullanıldığı bazı uygulamalar mevcut fakat çoklu-görev öğrenmesi öğrenme transferinden çok daha nadir kullanılmakta ve belki de bir istisna bilgisayarlı görüdüdeki nesne belirlemedir, burada birçok farklı nesneyi tanımlamak için tek bir sinir ağının eğitildiğini görürsünüz ve bu ayrı ayrı eğitmekten ve görsel nesneleri tanımlamaktan daha iyi çalışmaktadır fakat genel olarak öğrenme transferi ve çoklu-görev öğrenmesi benzer bir şekilde anlatılmasına rağmen, pratikte öğrenme transferinin çoklu-görev öğrenmesinden çok daha fazla uygulaması mevcuttur. Sanıyorum ki bence bu birçok farklı görevi aynı sinir ağında eğitmek isteyeceğiniz görev sayısının azlığından kaynaklanmakta. Tekrar etmek gerekirse, bazı bilgisayarlı görü ve nesne belirleme uygulamaları örnekleri en göze çarpan örnekler arasında Çoklu-görev öğrenmesi bu kadardı. Çoklu-görev öğrenmesi ve öğrenme transferinin ikisi de araç çantanızda bulunması gereken önemli araçlardır. Ve son olarak, uçtan uca derin öğrenmeyi tartışmaya geiş yapmak istiyorum. Hadi bir sonraki videoda uçtan uca derin öğrenmeyi tartışalım.
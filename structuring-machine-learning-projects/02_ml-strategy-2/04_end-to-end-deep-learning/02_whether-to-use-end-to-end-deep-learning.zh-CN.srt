1
00:00:00,000 --> 00:00:02,820
比方说，构建一个机器学习系统时，

2
00:00:02,820 --> 00:00:05,690
你想决定是否要使用端到端的方法

3
00:00:05,690 --> 00:00:08,250
让我们先来看一下端到端深度学习的优缺点

4
00:00:08,250 --> 00:00:10,770
这样你可以获得一些准则

5
00:00:10,770 --> 00:00:12,690
来判断

6
00:00:12,690 --> 00:00:17,040
端到端的方法是否适用于你的系统

7
00:00:17,040 --> 00:00:20,265
这里列举了使用端到端学习方法的一些好处

8
00:00:20,265 --> 00:00:25,435
第一点就是端到端学习真正地让数据发挥主导作用

9
00:00:25,435 --> 00:00:29,010
所以如果你有足够的(X, Y)的数据

10
00:00:29,010 --> 00:00:33,450
那么不论那个能最好地将X映射到Y的函数是什么样子

11
00:00:33,450 --> 00:00:35,475
只要你有足够大的神经网络

12
00:00:35,475 --> 00:00:38,395
顺利的话，神经网络都能拟合出来

13
00:00:38,395 --> 00:00:41,040
通过单纯的使用机器学习方法

14
00:00:41,040 --> 00:00:44,550
你的神经网络能够更好从输入的X->Y中

15
00:00:44,550 --> 00:00:48,540
学习到数据内在的统计学特性

16
00:00:48,540 --> 00:00:52,800
而不是被迫去反映人的先见

17
00:00:52,800 --> 00:00:55,695
所以，比如拿语音识别来举例

18
00:00:55,695 --> 00:00:58,530
早起的语音识别系统有“音素“这样一个概念

19
00:00:58,530 --> 00:01:01,260
“音素“是声音中的基本单元

20
00:01:01,260 --> 00:01:04,240
比如C，A，T的发音组成了cat这个单词

21
00:01:04,240 --> 00:01:09,890
我认为“音素“是人类语言学创造的产物

22
00:01:09,890 --> 00:01:12,120
实际上我认为“音素“是语言学家虚构的

23
00:01:12,120 --> 00:01:15,690
用来合理描述语言的产物

24
00:01:15,690 --> 00:01:21,785
但是你并不清楚，强迫你的学习算法使用“音素“的概念，是不是有利的

25
00:01:21,785 --> 00:01:25,895
如果你让你的学习算法，不加限制地学习任何可能学习到的表示形式

26
00:01:25,895 --> 00:01:30,675
而不是强迫你的学习算法去使用音素作为一种表示形式

27
00:01:30,675 --> 00:01:34,645
那么系统的整体表现可能会变的更好

28
00:01:34,645 --> 00:01:37,140
使用端到端深度学习的第二个好处就是

29
00:01:37,140 --> 00:01:40,480
所需的人类动手设计的组件变的更少了

30
00:01:40,480 --> 00:01:43,960
所以这可以简化你的设计工作流程

31
00:01:43,960 --> 00:01:47,655
意味着你不需要话大量的时间去动手设计特征

32
00:01:47,655 --> 00:01:51,040
手工设计这些中间表示形式

33
00:01:51,040 --> 00:01:52,650
那么端到端学习的缺点呢？

34
00:01:52,650 --> 00:01:54,335
下面是它的一些缺点

35
00:01:54,335 --> 00:01:57,010
第一，端到端学习需要大量的数据

36
00:01:57,010 --> 00:02:00,225
所以为了使用机器学习直接得出X到Y的映射

37
00:02:00,225 --> 00:02:03,030
你或许需要大量的(X，Y)数据

38
00:02:03,030 --> 00:02:06,600
就像我们在前面视频中看到的

39
00:02:06,600 --> 00:02:10,720
可以为你的子任务获得大量数据的例子

40
00:02:10,720 --> 00:02:13,675
比如拿面部识别来说

41
00:02:13,675 --> 00:02:17,310
我们需要大量的数据去学习在图像中寻找面孔

42
00:02:17,310 --> 00:02:20,510
和辨别你找到的面孔

43
00:02:20,510 --> 00:02:24,780
但是对于整个端到端的任务来说你能获得的数据是不够的

44
00:02:24,780 --> 00:02:32,989
比如说X是你的端到端学习的输入端，而Y是你的输出端

45
00:02:32,989 --> 00:02:36,180
所以，你需要有关输入输出端的所有的(X，Y)数据

46
00:02:36,180 --> 00:02:40,540
去训练你的系统

47
00:02:40,540 --> 00:02:45,100
这就是为什么我们叫它端到端的学习，因为你正在学习的是

48
00:02:45,100 --> 00:02:52,690
一个从系统一端一直到系统另一端的直接映射

49
00:02:52,690 --> 00:02:58,960
另一个缺点就是它排除了一些具有潜在用途的手工设计组件

50
00:02:58,960 --> 00:03:04,510
所以机器学习研究人员往往会轻视手工设计的组件

51
00:03:04,510 --> 00:03:06,880
但是如果你没有足够的数据

52
00:03:06,880 --> 00:03:09,490
那么你的学习算法就不能够洞悉你数据中的规律

53
00:03:09,490 --> 00:03:13,450
如果你的训练集很小

54
00:03:13,450 --> 00:03:17,080
所以手工设计的组件的确是一条可行之路

55
00:03:17,080 --> 00:03:21,138
去将人工知识融入到算法中

56
00:03:21,138 --> 00:03:24,035
而且这并不总是个坏主意

57
00:03:24,035 --> 00:03:28,060
我认为学习算法有两个主要的知识来源

58
00:03:28,060 --> 00:03:33,590
一个是数据，另一个是你手工设计的东西

59
00:03:33,590 --> 00:03:37,070
这些东西可以是算法中的组件，或者是特征，或者是其他的东西

60
00:03:37,070 --> 00:03:39,840
所以如果你有很多很多的数据

61
00:03:39,840 --> 00:03:44,125
手工设计就没那么重要了，但是如果你没有那么多的数据

62
00:03:44,125 --> 00:03:49,170
那么有一个精心手工设计的系统实际上可以让人们向

63
00:03:49,170 --> 00:03:51,555
算法中注入人类关于这个问题的知识

64
00:03:51,555 --> 00:03:54,985
而且这会是非常有用的

65
00:03:54,985 --> 00:03:58,200
所以端到端学习的一个缺点就是

66
00:03:58,200 --> 00:04:02,605
它排除了可能潜在有用的手工设计的成分

67
00:04:02,605 --> 00:04:06,490
如果设计良好，手工设计的成分会带来有很大的帮助

68
00:04:06,490 --> 00:04:09,660
如果它们限制了你算法的表现，它们也会变的有害

69
00:04:09,660 --> 00:04:12,960
例如，当你强迫你的算法去以音素的方式思考

70
00:04:12,960 --> 00:04:16,770
但是它已经自己找到一个更好的表示形式的时候

71
00:04:16,770 --> 00:04:19,110
所以这是一把双刃剑，它又可能有害

72
00:04:19,110 --> 00:04:21,660
也有可能有利，但是它的确倾向于有利的方面

73
00:04:21,660 --> 00:04:26,320
当你在一个很小的训练集上训练的时候，手工设计的成分更有可能帮助到你

74
00:04:26,320 --> 00:04:29,250
比如你正在构建一个新的机器学习系统，你正在尝试去决定

75
00:04:29,250 --> 00:04:32,535
是否要使用端到端的深度学习

76
00:04:32,535 --> 00:04:34,500
我认为关键的问题是

77
00:04:34,500 --> 00:04:37,330
你是否有足够的数据去学习出

78
00:04:37,330 --> 00:04:41,340
具有能够映射X到Y所需复杂度的方程

79
00:04:41,340 --> 00:04:44,790
我没有一个关于这个表达的正式的定义

80
00:04:44,790 --> 00:04:49,170
关于所需的复杂度，但是从直观上讲

81
00:04:49,170 --> 00:04:52,140
如果你尝试去学习出一个X->Y的方程

82
00:04:52,140 --> 00:04:54,685
比如说当观察这样的一张图片

83
00:04:54,685 --> 00:04:57,495
需要识别出骨头在这张图像中的位置

84
00:04:57,495 --> 00:05:01,435
或许这看起来像一个比较简单的问题

85
00:05:01,435 --> 00:05:06,030
去识别图像中的骨骼，
为了这个任务算法可能需要这么多数据

86
00:05:06,030 --> 00:05:12,020
亦或是给定一个人的照片

87
00:05:12,020 --> 00:05:18,995
或许在这张图片中找到那个人的脸不像是一个难题

88
00:05:18,995 --> 00:05:23,420
所以你不需要太多的数据去学习找到一个人的脸

89
00:05:23,420 --> 00:05:28,465
或者至少你可以找到足够的数据来解决这个任务,
而相比之下,

90
00:05:28,465 --> 00:05:34,210
观看手的图片并把这个图片映射到儿童的年龄所需的方程

91
00:05:34,210 --> 00:05:38,995
似乎看起来是一个更为复杂的问题，直觉上来说也许你需要

92
00:05:38,995 --> 00:05:45,815
更多的数据去学习，如果你使用端到端学习的方法

93
00:05:45,815 --> 00:05:50,185
让我来以一个更复杂的例子结束这个视频

94
00:05:50,185 --> 00:05:52,645
你或许知道我曾经花过一些时间去帮助

95
00:05:52,645 --> 00:05:55,360
一个自动驾驶公司，Drive.ai

96
00:05:55,360 --> 00:06:00,108
所以，其实我对自动驾驶非常感兴趣

97
00:06:00,108 --> 00:06:03,950
所以我们怎么能建造一个自己驾驶自己的车呢

98
00:06:03,950 --> 00:06:06,065
这有一种办法你可以尝试

99
00:06:06,065 --> 00:06:08,795
而这不是一种端到端的深度学习方法

100
00:06:08,795 --> 00:06:15,620
你可以将汽车前面的图像作为输入

101
00:06:15,620 --> 00:06:17,075
例如雷达，车载点烟器或其他的传感器

102
00:06:17,075 --> 00:06:20,030
但是为了简化表示

103
00:06:20,030 --> 00:06:24,700
我们只用一张有关你的车前面或者周围的图像

104
00:06:24,700 --> 00:06:28,430
为了能够安全地驾驶

105
00:06:28,430 --> 00:06:33,135
你需要监测其他的车辆和行人

106
00:06:33,135 --> 00:06:35,840
当然，你还需要监测其他的东西

107
00:06:35,840 --> 00:06:39,033
但是我们在这里仅仅展示一个简化的模型

108
00:06:39,033 --> 00:06:42,625
在检测到其他的车辆和行人的位置后

109
00:06:42,625 --> 00:06:48,783
你需要为你的车辆规划路径

110
00:06:48,783 --> 00:06:50,305
换言之换言之

111
00:06:50,305 --> 00:06:54,880
如果你监测到其他的车辆的位置

112
00:06:54,880 --> 00:06:58,300
或者行人的位置，你需要决定如何行驶你的车辆

113
00:06:58,300 --> 00:07:02,110
以及在下面的几秒中按照什么路线驾驶

114
00:07:02,110 --> 00:07:08,185
在已经为你的车辆规划好确切的路径之后

115
00:07:08,185 --> 00:07:14,725
我们从一个俯视的角度来看一条路，这个是你的车

116
00:07:14,725 --> 00:07:17,625
或许你已经决定了驾驶路线

117
00:07:17,625 --> 00:07:18,750
这个就是你的路径

118
00:07:18,750 --> 00:07:25,405
然后你需要生成正确的转角来沿这条路径行驶

119
00:07:25,405 --> 00:07:28,850
当然还需要有正确的加速和刹车指令

120
00:07:28,850 --> 00:07:34,030
因此从接收你的图像或传感器输入到监测车辆和行人

121
00:07:34,030 --> 00:07:37,630
这些任务就可以使用深度学习来实现

122
00:07:37,630 --> 00:07:40,870
但是当你已经明确了其他车辆和行人要去哪里

123
00:07:40,870 --> 00:07:45,220
选择一条正确的路径去驾驶你的车辆

124
00:07:45,220 --> 00:07:47,420
这件事通常不是用深度学习实现的

125
00:07:47,420 --> 00:07:51,715
相反，这项任务是由一个叫做“运动规划”的软件实现的

126
00:07:51,715 --> 00:07:55,420
如果你参加过一门机器人学习的课程，
你会更了解运动计划

127
00:07:55,420 --> 00:07:59,240
当你决定了你想驾驶车辆形式的路线

128
00:07:59,240 --> 00:08:00,880
会有一些其他的算法

129
00:08:00,880 --> 00:08:06,355
我们说这是一种控制算法，来作出准确的决策，

130
00:08:06,355 --> 00:08:09,040
来决定到底要转多少方向

131
00:08:09,040 --> 00:08:13,160
和需要做多少加速或者减速

132
00:08:13,160 --> 00:08:16,990
所以，我认为这个例子说明的是

133
00:08:16,990 --> 00:08:21,340
当你想用机器学习或者深度学习

134
00:08:21,340 --> 00:08:30,640
来学习一些单独的组成部分，当应用监督式学习

135
00:08:30,640 --> 00:08:37,650
你应该认真选择一种X到Y的映射类型

136
00:08:37,650 --> 00:08:44,745
根据你想要学习的任务

137
00:08:44,745 --> 00:08:48,875
能否得到数据

138
00:08:48,875 --> 00:08:51,765
相比之下，我们很高兴去讨论

139
00:08:51,765 --> 00:08:54,435
单纯的端对端学习，当你输入一张图像

140
00:08:54,435 --> 00:08:57,180
然后直接得到驾驶方向

141
00:08:57,180 --> 00:09:04,570
但是根据数据的可用性

142
00:09:04,570 --> 00:09:08,140
和我们如今可以用神经网络学习东西的类型

143
00:09:08,140 --> 00:09:12,880
这个其实并不是最有希望的方式

144
00:09:12,880 --> 00:09:18,170
或者不是我认为团队能得到的最好方法

145
00:09:18,170 --> 00:09:22,780
我认为这种纯粹的端对端学习方式

146
00:09:22,780 --> 00:09:27,170
比这种复杂的方式，可行性更低

147
00:09:27,170 --> 00:09:32,260
考虑到数据可用性和我们现在训练神经网络的能力

148
00:09:32,260 --> 00:09:35,055
以上就是端对端深度学习

149
00:09:35,055 --> 00:09:38,380
它有时候可以工作的很好

150
00:09:38,380 --> 00:09:42,453
但是你也必须注意在何处使用

151
00:09:42,453 --> 00:09:46,985
最后，感谢并恭喜你学习到这里

152
00:09:46,985 --> 00:09:50,290
如果你完成了上周和本周的视频

153
00:09:50,290 --> 00:09:53,860
我相信你已经变得更聪明、更具战略性

154
00:09:53,860 --> 00:09:57,250
并且能更好的做出正确的优先级决策

155
00:09:57,250 --> 00:10:01,138
来进一步完成你的机器学习项目

156
00:10:01,138 --> 00:10:03,520
甚至优于很多机器学习工程师

157
00:10:03,520 --> 00:10:06,310
和我在硅谷看到的很多研究人员

158
00:10:06,310 --> 00:10:11,320
所以恭喜你所学到的一切，我希望你也看一看

159
00:10:11,320 --> 00:10:13,480
这周的作业问题，这将给你提供了另一个机会

160
00:10:13,480 --> 00:10:18,770
来实践这些想法，并确保你学会了。
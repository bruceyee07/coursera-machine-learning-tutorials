比方说，构建一个机器学习系统时， 你想决定是否要使用端到端的方法 让我们先来看一下端到端深度学习的优缺点 这样你可以获得一些准则 来判断 端到端的方法是否适用于你的系统 这里列举了使用端到端学习方法的一些好处 第一点就是端到端学习真正地让数据发挥主导作用 所以如果你有足够的(X, Y)的数据 那么不论那个能最好地将X映射到Y的函数是什么样子 只要你有足够大的神经网络 顺利的话，神经网络都能拟合出来 通过单纯的使用机器学习方法 你的神经网络能够更好从输入的X->Y中 学习到数据内在的统计学特性 而不是被迫去反映人的先见 所以，比如拿语音识别来举例 早起的语音识别系统有“音素“这样一个概念 “音素“是声音中的基本单元 比如C，A，T的发音组成了cat这个单词 我认为“音素“是人类语言学创造的产物 实际上我认为“音素“是语言学家虚构的 用来合理描述语言的产物 但是你并不清楚，强迫你的学习算法使用“音素“的概念，是不是有利的 如果你让你的学习算法，不加限制地学习任何可能学习到的表示形式 而不是强迫你的学习算法去使用音素作为一种表示形式 那么系统的整体表现可能会变的更好 使用端到端深度学习的第二个好处就是 所需的人类动手设计的组件变的更少了 所以这可以简化你的设计工作流程 意味着你不需要话大量的时间去动手设计特征 手工设计这些中间表示形式 那么端到端学习的缺点呢？ 下面是它的一些缺点 第一，端到端学习需要大量的数据 所以为了使用机器学习直接得出X到Y的映射 你或许需要大量的(X，Y)数据 就像我们在前面视频中看到的 可以为你的子任务获得大量数据的例子 比如拿面部识别来说 我们需要大量的数据去学习在图像中寻找面孔 和辨别你找到的面孔 但是对于整个端到端的任务来说你能获得的数据是不够的 比如说X是你的端到端学习的输入端，而Y是你的输出端 所以，你需要有关输入输出端的所有的(X，Y)数据 去训练你的系统 这就是为什么我们叫它端到端的学习，因为你正在学习的是 一个从系统一端一直到系统另一端的直接映射 另一个缺点就是它排除了一些具有潜在用途的手工设计组件 所以机器学习研究人员往往会轻视手工设计的组件 但是如果你没有足够的数据 那么你的学习算法就不能够洞悉你数据中的规律 如果你的训练集很小 所以手工设计的组件的确是一条可行之路 去将人工知识融入到算法中 而且这并不总是个坏主意 我认为学习算法有两个主要的知识来源 一个是数据，另一个是你手工设计的东西 这些东西可以是算法中的组件，或者是特征，或者是其他的东西 所以如果你有很多很多的数据 手工设计就没那么重要了，但是如果你没有那么多的数据 那么有一个精心手工设计的系统实际上可以让人们向 算法中注入人类关于这个问题的知识 而且这会是非常有用的 所以端到端学习的一个缺点就是 它排除了可能潜在有用的手工设计的成分 如果设计良好，手工设计的成分会带来有很大的帮助 如果它们限制了你算法的表现，它们也会变的有害 例如，当你强迫你的算法去以音素的方式思考 但是它已经自己找到一个更好的表示形式的时候 所以这是一把双刃剑，它又可能有害 也有可能有利，但是它的确倾向于有利的方面 当你在一个很小的训练集上训练的时候，手工设计的成分更有可能帮助到你 比如你正在构建一个新的机器学习系统，你正在尝试去决定 是否要使用端到端的深度学习 我认为关键的问题是 你是否有足够的数据去学习出 具有能够映射X到Y所需复杂度的方程 我没有一个关于这个表达的正式的定义 关于所需的复杂度，但是从直观上讲 如果你尝试去学习出一个X->Y的方程 比如说当观察这样的一张图片 需要识别出骨头在这张图像中的位置 或许这看起来像一个比较简单的问题 去识别图像中的骨骼，
为了这个任务算法可能需要这么多数据 亦或是给定一个人的照片 或许在这张图片中找到那个人的脸不像是一个难题 所以你不需要太多的数据去学习找到一个人的脸 或者至少你可以找到足够的数据来解决这个任务,
而相比之下, 观看手的图片并把这个图片映射到儿童的年龄所需的方程 似乎看起来是一个更为复杂的问题，直觉上来说也许你需要 更多的数据去学习，如果你使用端到端学习的方法 让我来以一个更复杂的例子结束这个视频 你或许知道我曾经花过一些时间去帮助 一个自动驾驶公司，Drive.ai 所以，其实我对自动驾驶非常感兴趣 所以我们怎么能建造一个自己驾驶自己的车呢 这有一种办法你可以尝试 而这不是一种端到端的深度学习方法 你可以将汽车前面的图像作为输入 例如雷达，车载点烟器或其他的传感器 但是为了简化表示 我们只用一张有关你的车前面或者周围的图像 为了能够安全地驾驶 你需要监测其他的车辆和行人 当然，你还需要监测其他的东西 但是我们在这里仅仅展示一个简化的模型 在检测到其他的车辆和行人的位置后 你需要为你的车辆规划路径 换言之换言之 如果你监测到其他的车辆的位置 或者行人的位置，你需要决定如何行驶你的车辆 以及在下面的几秒中按照什么路线驾驶 在已经为你的车辆规划好确切的路径之后 我们从一个俯视的角度来看一条路，这个是你的车 或许你已经决定了驾驶路线 这个就是你的路径 然后你需要生成正确的转角来沿这条路径行驶 当然还需要有正确的加速和刹车指令 因此从接收你的图像或传感器输入到监测车辆和行人 这些任务就可以使用深度学习来实现 但是当你已经明确了其他车辆和行人要去哪里 选择一条正确的路径去驾驶你的车辆 这件事通常不是用深度学习实现的 相反，这项任务是由一个叫做“运动规划”的软件实现的 如果你参加过一门机器人学习的课程，
你会更了解运动计划 当你决定了你想驾驶车辆形式的路线 会有一些其他的算法 我们说这是一种控制算法，来作出准确的决策， 来决定到底要转多少方向 和需要做多少加速或者减速 所以，我认为这个例子说明的是 当你想用机器学习或者深度学习 来学习一些单独的组成部分，当应用监督式学习 你应该认真选择一种X到Y的映射类型 根据你想要学习的任务 能否得到数据 相比之下，我们很高兴去讨论 单纯的端对端学习，当你输入一张图像 然后直接得到驾驶方向 但是根据数据的可用性 和我们如今可以用神经网络学习东西的类型 这个其实并不是最有希望的方式 或者不是我认为团队能得到的最好方法 我认为这种纯粹的端对端学习方式 比这种复杂的方式，可行性更低 考虑到数据可用性和我们现在训练神经网络的能力 以上就是端对端深度学习 它有时候可以工作的很好 但是你也必须注意在何处使用 最后，感谢并恭喜你学习到这里 如果你完成了上周和本周的视频 我相信你已经变得更聪明、更具战略性 并且能更好的做出正确的优先级决策 来进一步完成你的机器学习项目 甚至优于很多机器学习工程师 和我在硅谷看到的很多研究人员 所以恭喜你所学到的一切，我希望你也看一看 这周的作业问题，这将给你提供了另一个机会 来实践这些想法，并确保你学会了。
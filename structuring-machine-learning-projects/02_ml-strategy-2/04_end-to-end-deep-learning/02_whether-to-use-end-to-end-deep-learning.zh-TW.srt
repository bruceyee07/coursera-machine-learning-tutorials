1
00:00:00,000 --> 00:00:02,820
假設在建立一個
機器學習系統時您試著

2
00:00:02,820 --> 00:00:05,690
決定是否要使用端對端方式

3
00:00:05,690 --> 00:00:08,250
讓我們看看一些優點跟缺點

4
00:00:08,250 --> 00:00:10,770
對於端對端深度學習，您可以

5
00:00:10,770 --> 00:00:12,690
有一些準則來看

6
00:00:12,690 --> 00:00:17,040
端對端方式
對您的應用是否有希望

7
00:00:17,040 --> 00:00:20,265
這裡是一些應用
端對端學習的好處

8
00:00:20,265 --> 00:00:25,435
首先，端對端學習真的讓資料說話

9
00:00:25,435 --> 00:00:29,010
如果您有足夠的 X,Y 資料

10
00:00:29,010 --> 00:00:33,450
不管如何，
最合適對應從 X 到 Y 的函數

11
00:00:33,450 --> 00:00:35,475
如果您訓練足夠大的神經網路

12
00:00:35,475 --> 00:00:38,395
期望神經網路會找到（這個函數）

13
00:00:38,395 --> 00:00:41,040
而使用單純的機器學習方式

14
00:00:41,040 --> 00:00:44,550
您個神經網路學習從輸入 X 到 Y

15
00:00:44,550 --> 00:00:48,540
或許比較能夠抓住資料的統計資訊

16
00:00:48,540 --> 00:00:52,800
而不是被人為成見
迫使反應

17
00:00:52,800 --> 00:00:55,695
舉個例子，在語音辨識中

18
00:00:55,695 --> 00:00:58,530
早期的語音系統有

19
00:00:58,530 --> 00:01:01,260
音素的記號，是基本的單位聲音像是 C,

20
00:01:01,260 --> 00:01:04,240
Ah, Te 對於 "cat" 這個字

21
00:01:04,240 --> 00:01:09,890
我想音素是人類語言學家所創造出來的

22
00:01:09,890 --> 00:01:12,120
我實際上這樣想，音素是

23
00:01:12,120 --> 00:01:15,690
語言的想像，
是合理的方式來描述語言

24
00:01:15,690 --> 00:01:21,785
但您想強迫您的學習演算法
用音素來思考是不明確的

25
00:01:21,785 --> 00:01:25,895
而如果您讓您的學習演算法學習，
不管它想用什麼代表

26
00:01:25,895 --> 00:01:30,675
而不是強迫您的學習演算法
使用音素來代表

27
00:01:30,675 --> 00:01:34,645
那整體的表現會更佳

28
00:01:34,645 --> 00:01:37,140
第二種好處是端對端深度學習是

29
00:01:37,140 --> 00:01:40,480
需要比較少
手工設計的元件

30
00:01:40,480 --> 00:01:43,960
而這可以簡化
您的設計工作流程

31
00:01:43,960 --> 00:01:47,655
您不需要花很多的時間
在手工設計特徵

32
00:01:47,655 --> 00:01:51,040
手工設計這些中間代表物

33
00:01:51,040 --> 00:01:52,650
而缺點如何？

34
00:01:52,650 --> 00:01:54,335
這裡有一些缺點

35
00:01:54,335 --> 00:01:57,010
首先，它需要大量的資料

36
00:01:57,010 --> 00:02:00,225
為了學習從 Ｘ直接對應到 Ｙ

37
00:02:00,225 --> 00:02:03,030
您或許需要很多的資料  Ｘ，Ｙ

38
00:02:03,030 --> 00:02:06,600
我們在前面的影片看到一些例子

39
00:02:06,600 --> 00:02:10,720
您可以獲取很多子任務的資料

40
00:02:10,720 --> 00:02:13,675
像是人臉辨識

41
00:02:13,675 --> 00:02:17,310
我們可以找到很多資料來
從影像中找出人臉

42
00:02:17,310 --> 00:02:20,510
同時認出這個人臉
當您找到人臉時

43
00:02:20,510 --> 00:02:24,780
但就是比較少的資料
來做整體端對端的任務

44
00:02:24,780 --> 00:02:32,989
所以在端對端學習中 Ｘ是輸入端，Ｙ是輸出端

45
00:02:32,989 --> 00:02:36,180
所以您需要很多  Ｘ，Ｙ的資料

46
00:02:36,180 --> 00:02:40,540
在輸入端跟輸出端來訓練這個系統

47
00:02:40,540 --> 00:02:45,100
這也是為甚麼稱為端對端學習，因為您學習

48
00:02:45,100 --> 00:02:52,690
直接對應從系統的一端
一直到系統的另一端

49
00:02:52,690 --> 00:02:58,960
其他的缺點是這排除了
潛在有用的手工設計元件

50
00:02:58,960 --> 00:03:04,510
機器學習的研究人員往往會
輕蔑手工設計的東西

51
00:03:04,510 --> 00:03:06,880
但如果您沒有很多資料

52
00:03:06,880 --> 00:03:09,490
您的學習演算法沒辦法

53
00:03:09,490 --> 00:03:13,450
從您的資料得到太多的洞見，
如果您的資料集很小的話

54
00:03:13,450 --> 00:03:17,080
所以手工設計的元件
可能真的是一種方式

55
00:03:17,080 --> 00:03:21,138
來注入手工知識到演算法中

56
00:03:21,138 --> 00:03:24,035
而這並不一定是壞事

57
00:03:24,035 --> 00:03:28,060
我想學習演算法有
兩種主要的知識來源

58
00:03:28,060 --> 00:03:33,590
一是資料，一是您的手工設計

59
00:03:33,590 --> 00:03:37,070
是元件，特徵或者其他東西

60
00:03:37,070 --> 00:03:39,840
所以當您有很多很多資料

61
00:03:39,840 --> 00:03:44,125
手工設計比較不重要，
但當您沒有很多資料

62
00:03:44,125 --> 00:03:49,170
小心使用手工設計系統
真的可以讓人們注入

63
00:03:49,170 --> 00:03:51,555
很多的知識到這個問題上

64
00:03:51,555 --> 00:03:54,985
進入演算法，
這會很有幫助

65
00:03:54,985 --> 00:03:58,200
在端對端的一個缺點是

66
00:03:58,200 --> 00:04:02,605
它排除了潛在有用的
手工設計元件

67
00:04:02,605 --> 00:04:06,490
而手工設計元件可能會很有用
如果好好設計的話

68
00:04:06,490 --> 00:04:09,660
它們也有可能是有害的，限制您的效能

69
00:04:09,660 --> 00:04:12,960
就像如果您強迫演算法
用音素來思考

70
00:04:12,960 --> 00:04:16,770
當或許它自己可以
找到更棒的表示方法

71
00:04:16,770 --> 00:04:19,110
所以這像是劍的雙刃

72
00:04:19,110 --> 00:04:21,660
可能會傷害，也可能有所幫助

73
00:04:21,660 --> 00:04:26,320
當您的訓練在小的訓練集上時，
手工設計元件傾向於有幫助

74
00:04:26,320 --> 00:04:29,250
如果您建立一個新的機器學學習系統，
您試著

75
00:04:29,250 --> 00:04:32,535
決定要不要用
端對端深度學習

76
00:04:32,535 --> 00:04:34,500
我想關鍵問題會是

77
00:04:34,500 --> 00:04:37,330
您有足夠的資料來學習

78
00:04:37,330 --> 00:04:41,340
複雜的函數從Ｘ對應到Ｙ？

79
00:04:41,340 --> 00:04:44,790
我並沒有正式的定義對於這段話

80
00:04:44,790 --> 00:04:49,170
會有些複雜，但直覺上

81
00:04:49,170 --> 00:04:52,140
如果您試著學習一個函數從Ｘ到Ｙ

82
00:04:52,140 --> 00:04:54,685
像是看這張影像

83
00:04:54,685 --> 00:04:57,495
而辨識骨頭的位置
在這張影像上

84
00:04:57,495 --> 00:05:01,435
或許這似乎是相對的比較簡單的問題

85
00:05:01,435 --> 00:05:06,030
來辨識影像中骨頭的位置，
或許您需要這樣多的資料來完成這個任務

86
00:05:06,030 --> 00:05:12,020
或者給一個人的照片

87
00:05:12,020 --> 00:05:18,995
或許找尋影像中人臉的部分，
似乎不是很難的問題

88
00:05:18,995 --> 00:05:23,420
所以或許您不需要
太多的資料來找出人臉

89
00:05:23,420 --> 00:05:28,465
或者至少您可以找到足夠的資料
來解決這個任務，而相對的

90
00:05:28,465 --> 00:05:34,210
求一個函數來從看手骨
直接對應到小孩子的年紀

91
00:05:34,210 --> 00:05:38,995
似乎是比較複雜的問題，直觀上或許您需要

92
00:05:38,995 --> 00:05:45,815
更多的資料來學習，如果您要應用
純粹端對端深度學習方式

93
00:05:45,815 --> 00:05:50,185
所以讓我用一個更複雜的例子
來結束這段影片

94
00:05:50,185 --> 00:05:52,645
您或許知道我花了一些時間
在幫忙

95
00:05:52,645 --> 00:05:55,360
一個自動駕駛公司，Drive.ai

96
00:05:55,360 --> 00:06:00,108
我其實對自動駕駛很興奮

97
00:06:00,108 --> 00:06:03,950
所以您如何建立一個車子
會自動駕駛？

98
00:06:03,950 --> 00:06:06,065
有一件事情您可以做

99
00:06:06,065 --> 00:06:08,795
而這不是端對端深度學習方式

100
00:06:08,795 --> 00:06:15,620
您可以拿您車子前面的影像當輸入，
或許用雷達，來達 (LiDAR - Light Detection and Ranging)

101
00:06:15,620 --> 00:06:17,075
或其他感測器

102
00:06:17,075 --> 00:06:20,030
但為了簡化描述

103
00:06:20,030 --> 00:06:24,700
假設您拍了一張
在您前面或者周邊的照片

104
00:06:24,700 --> 00:06:28,430
而為了安全的駕駛，您需要偵測

105
00:06:28,430 --> 00:06:33,135
其他車輛，而您也需要偵測行人

106
00:06:33,135 --> 00:06:35,840
當然，您需要偵測其他東西

107
00:06:35,840 --> 00:06:39,033
但，我們簡化這個例子

108
00:06:39,033 --> 00:06:42,625
找到了其他車輛跟行人

109
00:06:42,625 --> 00:06:48,783
您需要規劃您的路徑

110
00:06:48,783 --> 00:06:50,305
換句話說

111
00:06:50,305 --> 00:06:54,880
如果您看到其他車輛在哪裡

112
00:06:54,880 --> 00:06:58,300
行人在哪裡，您需要決定
如何來駕駛您的車子

113
00:06:58,300 --> 00:07:02,110
操縱方向盤向哪一個路徑
在接下來幾秒鐘

114
00:07:02,110 --> 00:07:08,185
而決定了您將往哪一個路徑開

115
00:07:08,185 --> 00:07:14,725
或許這是一個從上往下看
的角度看您的車子

116
00:07:14,725 --> 00:07:17,625
或許您決定往這個路徑開

117
00:07:17,625 --> 00:07:18,750
這是所謂的路徑

118
00:07:18,750 --> 00:07:25,405
您需要產生適當的操縱方向盤
來執行這個任務

119
00:07:25,405 --> 00:07:28,850
跟加速以及煞車指令

120
00:07:28,850 --> 00:07:34,030
所以從您的影像或者感測器輸入
來偵測車輛跟行人

121
00:07:34,030 --> 00:07:37,630
這個使用深度學習
可以做得很好

122
00:07:37,630 --> 00:07:40,870
但要找出其他的車輛跟行人怎麼走

123
00:07:40,870 --> 00:07:45,220
來選擇這個路徑，
準確地知道如何移動您的車輛

124
00:07:45,220 --> 00:07:47,420
通常這不會使用深度學習

125
00:07:47,420 --> 00:07:51,715
取而代之，會使用一種軟體稱為移動規劃

126
00:07:51,715 --> 00:07:55,420
而如果您學過機器人課程，您會學到移動規劃

127
00:07:55,420 --> 00:07:59,240
而決定了往哪一個路徑，
您需要操縱方向盤來移動

128
00:07:59,240 --> 00:08:00,880
這會有其他種演算法

129
00:08:00,880 --> 00:08:06,355
我們稱之為控制演算法來
產生正確的決定

130
00:08:06,355 --> 00:08:09,040
來決定到底要轉多少的方向盤

131
00:08:09,040 --> 00:08:13,160
跟多少的加速或者煞車

132
00:08:13,160 --> 00:08:16,990
所以我想這個例子描述的是

133
00:08:16,990 --> 00:08:21,340
您希望使用機器學習
或者使用深度學習來

134
00:08:21,340 --> 00:08:30,640
學習一些獨自的元件，而當您應用監督式學習

135
00:08:30,640 --> 00:08:37,650
您應該小心選擇哪一種Ｘ，Ｙ對應您想要

136
00:08:37,650 --> 00:08:44,745
的學習，根據

137
00:08:44,745 --> 00:08:48,875
您可以得到的資料做什麼任務

138
00:08:48,875 --> 00:08:51,765
而相對的，談到

139
00:08:51,765 --> 00:08:54,435
純粹端對端深度學習很令人興奮，您

140
00:08:54,435 --> 00:08:57,180
拿一個影像然後
直接輸出到方向盤

141
00:08:57,180 --> 00:09:04,570
但現有的資料

142
00:09:04,570 --> 00:09:08,140
跟我們可以從神經網路學習的型態

143
00:09:08,140 --> 00:09:12,880
這不會是最有希望的方式，或者說

144
00:09:12,880 --> 00:09:18,170
這不是做得最好的團隊的作法

145
00:09:18,170 --> 00:09:22,780
而我想這純粹端對端深度學習方式，實際上

146
00:09:22,780 --> 00:09:27,170
比起這種比較複雜的方式較少希望

147
00:09:27,170 --> 00:09:32,260
根據現有的資料跟我們今天
能夠訓練出的神經網路

148
00:09:32,260 --> 00:09:35,055
所以這是端對端深度學習

149
00:09:35,055 --> 00:09:38,380
它有時可以很好地工作, 但你也必須

150
00:09:38,380 --> 00:09:42,453
注意你在哪裡可以應用端對端的深度學習

151
00:09:42,453 --> 00:09:46,985
最後，謝謝您跟恭喜您
跟我走了這麼遠

152
00:09:46,985 --> 00:09:50,290
如果您完成了上一週
跟這一週的影片

153
00:09:50,290 --> 00:09:53,860
我認為您已經更聰明也更有策略

154
00:09:53,860 --> 00:09:57,250
更能夠做好的優先順序決策

155
00:09:57,250 --> 00:10:01,138
在如何讓您的機器學習專案往前邁進

156
00:10:01,138 --> 00:10:03,520
甚至比起很多機器學習工程師

157
00:10:03,520 --> 00:10:06,310
跟我在矽谷看到的研究人員

158
00:10:06,310 --> 00:10:11,320
所以恭喜您至今所學到的，
我希望您現在能夠看一下

159
00:10:11,320 --> 00:10:13,480
這個禮拜的功課，應該給您

160
00:10:13,480 --> 00:10:18,770
另一種機會來練習這些想法，
確定您能夠掌握他們
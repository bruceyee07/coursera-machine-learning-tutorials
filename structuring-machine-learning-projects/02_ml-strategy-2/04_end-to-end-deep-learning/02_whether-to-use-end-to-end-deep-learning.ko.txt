여러분이 기계 학습 시스템을 구축할 때, 여러분이 엔드 투 엔드 접근법을 사용해야 할지 말지를 결정하려고 한다고 가정해 봅시다 엔드 투 엔드 접근 방식이 여러분의 응용 분야에 유망한지 아닌지에 대한 몇가지 지침을 없앨 수 있도록 엔드 투 엔드 심층 학습의 장단점을 살펴봅시다 다음은 완벽한 학습을 적용할 때 얻을 수 있는 몇가지 이점입니다. 첫번째는 완벽한 학습을 통해 데이터가 말을 할 수 있도록 하는 것입니다. 만일 여러분이 충분한 X, Y데이터를 가지고 있다면, X에서 Y에 이르기까지 가장 적절한 기능 지도를 만들어 낼 것입니다. 만일 여러분이 충분히 큰 신경계 네트워크를 훈련시킨다면, 아마도 신경계 네트워크가 그것을 알아낼 것입니다. 순수한 기계 학습 접근법을 사용하면, X에서 Y에 이르기까지 신경계 학습 입력이 인간의 선입관을 반영하게 하여 데이터에 있는 모든 통계를 캡처할 수 있을 것입니다. 예를 들어, 이전의 언어 인식 시스템에서는 고양이라는 단어의 기본 단위인 C, A, T와 같은 발음의. 단위를 가지고 있었습니다 저는 음성학이 인간 언어학자들이 만들어 낸 유물이라고 생각합니다. 사실 저는 음성학이 언어학에 대한 환상이라고 생각합니다. 언어학자들이 언어를 합리적으로 묘사하는 것이죠. 하지만, 여러분의 학습 알고리즘이 음성학으로 생각하도록 하고 싶지는 않습니다. 그리고 만약 여러분이 여러분의 학습 알고리즘이 여러분의 학습 알고리즘이 표현으로 음성들을 사용하도록 강요하는 것보다 어떤 표현을 배우기를 원하는 지 배우게 한다면, 그것의 전체적인 성과는 더 나아 질 것입니다. 엔드 투 엔드 심층 학습의 두번째 이점은 필요한 구성품의 수동 설계가 더 적다는 것입니다. 이렇게 하면 설계 작업 흐름을 단순화할 수 있습니다. 그래서 손으로 특성을 설계하고 중간 표현을 설계하는 데 많은 시간을 들이지 않아도 됩니다. 단점은 어떻게 될까요? 여기 몇가지 단점이 있습니다. 첫째, 데이터가 많이 필요할 수 있습니다. 이 X-Y매핑을 직접 확인하려면 많은 X, Y데이터가 필요합니다. 이전 비디오에서는 하위 작업을 위해 많은 데이터를 가져올 수 있는 몇가지 예를 보았습니다. 예를 들어, 얼굴 인식을 위해 우리는 이미지에 있는 얼굴을 발견하고, 일단 얼굴을 발견하면 그 얼굴을 식별하기 위해 많은 데이터를 발견할 수 있지만, 전체적인 과제에 사용할 수 있는 데이터는 거의 없었습니다. X, 이것이 엔드 투 엔드 학습의 입력 끝이고 Y는 출력 끝입니다. 그래서 이런 시스템들을 훈련시키기 위해서는 입력과 출력이 모두 나오는 모든 데이터 XY가 필요하고, 이것이 바로 우리가 이런 것을 엔드 투 엔드 학습값 이라고 부르는 이유이고 시스템의 한쪽 끝에서 다른 쪽 끝까지 다이렉트 매핑을 습득하기 때문입니다. 또 다른 단점은 유용하게 설계된 수동 구성품을 배제한다는 점입니다. 그래서 기계 학습 연구원들은 손으로 물건을 디자인하는 것에 대해 경멸적으로 말하는 경향이 있습니다. 하지만 데이터가 많지 않다면, 훈련 세트가 작을 경우 데이터에서 얻을 수 있는 통찰력이 부족한 것입니다. 따라서 수동으로 부품을 설계하는 것이. 알고리즘에 수동 지식을 주입하는 방법이 될 수 있습니다. 하지만 이것이 항상 나쁜 것만은 아닙니다 지식의 두 가지 주요 출처를 갖는 학습 알고리즘을 생각합니다. 하나는 데이터이고, 다른 하나는 여러분이 어떤 것을 디자인하든, 그것의 요소나 특징, 또는 다른 것들이 될 수 있습니다. 따라서 엄청난 양의 데이터가있을 때 핸드 디자인 작업하는 것이 덜 중요하지만 데이터가 많지 않을 때는 조심스럽게 손으로 설계 한 시스템을 사용하면 실제로 인간이 문제에 대한 많은 지식을 알고리즘 데크에 투입 할 수 있고, 매우 도움이 될 것 입니다. 그래서 엔드 투 엔드 심층 학습의 단점 중 하나는 유용한 수동 설계 요소를 배제한다는 점입니다. 그리고 손으로 설계된 구성 요소는 잘 설계된 경우 매우 유용할 수 있습니다. 그것들은 또한 만약 그것이 여러분의 수행을 제한한다면, 예를 들어 만약 여러분이 그것이 스스로 더 나은 표현을 발견했을 수도 있었을 때, 음성학으로 생각하도록 알고리즘을 강제한다면 해로울 수 있다. 그래서 이것은 날이 양날의 칼 같은 것으로 다치게 할 수도 있고 도움이 될 수도 있지만, 손으로 디자인한 부품들은 작은 훈련 세트에서 훈련을 받을 때 더 도움이 되는 경향이 있습니다. 그래서 만약 여러분이 새로운 기계 학습 시스템을 구축하고 있고 깊이 있는 학습을 사용할지 여부를 결정하기 위해 노력하고 있다면, 중요한 질문은, X에서 Y에 이르기까지 지도를 그리는데 필요한 복잡성의 함수를 배울 수 있는 충분한 데이터가 있는가 하는 것입니다. 저는 이 표현이 필요하다는 것을 공식적으로 정의하지는 않지만, 직관적으로 만약 X부터 Y까지의 기능을 배우려고 한다면, 이런 이미지를 보면서 뼈의 위치를 인지하려고 할 것입니다. 문제는 영상의 골격을 확인하는 데 상대적으로 간단한 문제처럼 보이나 해당 작업에 필요한 데이터가 그만큼 필요할 수 있습니다. 또는 어떤 사람의 사진을 보면, 그 사람의 얼굴을 찾는 것이 그렇게 어려운 문제가 아닌 것처럼 보일 수도 있습니다. 그래서 그 사람의 얼굴을 찾는데 너무 많은 데이터가 필요하지 않습니다. 아니면 적어도 이 과제를 해결하기 위해 충분한 데이터를 찾을 수 있을지도 모르죠. 반면에, 손과 지도를 아이의 나이에 직접적으로 연결하기 위해 필요한 기능은, 직관적으로 배우기 위해 직관적으로 필요할 수도있는 훨씬 복잡한 문제처럼 보입니다. 순수한 엔드 투 엔드 딥 러닝 접근법을 적용하는 경우 더 많은 데이터를 학습 할 수 있습니다. 이 비디오를 좀 더 복잡한 예시로 마무리 하겠습니다. 여러분은 제가 자율 주행 회사인 Drive.ai.에 도움을 주고 있다는 것을 아실 겁니다. 그래서 저는 자율 주행관련하여 매우 기대가 됩니다. 어떻게 자율 주행 차를 만들 수 있을까요? 여기 제가 할 수 있는 것이 하나 있는데요 이것은 엔드 투 엔드 팁 러닝 접근 방법이 아닙니다. 여러분은 자동차 앞에 있는 것의 이미지를 입력하여 레이더, 라이터, 다른 센서 수치를 입력할 수도 있습니다. 하지만 설명을 단순화하기 위해, 여러분이 앞에 무엇이 있는지 혹은 여러분의 차 주위에 무엇이 있는지 사진을 찍었다고 가정해 봅시다. 그리고 안전하게 차를 운전하기 위해서는 다른 차들도 감지해야 하고 보행자들도 감지해야 해요. 물론 다른 것들도 감지해야 하지만 간단한 예를 하나 들어 보겠습니다. 다른 차들과 보행자들이 어디에 있는지 알아낸 후에, 여러분은 여러분만의 길을 계획할 필요가 있어요. 다시 말해, 자 다시 말해 다른 차들이 어디에 있는지, 보행자들이 어디에 있는지, 어떻게 차를 조종할지, 몇초 동안 어떤 길로 갈지를 결정해야 합니다. 특정 도로를 운전하기로 결정했다면, 아마도 이것은 가장 위에 있는 도로의 전경일 것이고, 이것이 바로 여러분의 자동차일 것입니다. 이 경로를 선택했을 수도 있습니다. 경로가 바로 그런 경로입니다. 그런 다음 적절한 스티어링을 생성하고 가속 및 제동 명령을 실행해야 합니다. 이미지나 감각적 입력에서 깊이 있는 학습을 통해 자동차와 보행자를 감지하고, 어디로 가는지 알아내는 것이죠. 다른 자동차와 보행자들이 가고 싶어 하는 길을 알아내고, 차를 움직일지에 대해 이 경로를 선택하는 겁니다 보통은 깊은 학습을 하지 않습니다. 대신에 모션 플랜이라는 소프트웨어를 사용합니다. 그리고 만약 여러분이 로봇 공학 수업을 듣는다면 여러분은 모션 계획에 대해 배우게 될 것입니다. 그리고 어떤 경로로 차를 통과시켜야 하는지 결정했다면, 몇가지 다른 알고리즘이 있을 것입니다 우리는 정확한 결정을 내리는 제어 알고리즘이 있다고 말할 것입니다. 그러면 정확하게 스티어링 휠을 얼마나 돌려야 하는지, 그리고 가속 페달을 얼마나 밟아야 하는지 또는 브레이크 페달을 얼마나 밟아야 하는지를 결정하게 됩니다. 이 예제에서는 기계 학습을 사용하거나 심층 학습을 사용하여 개별 구성 요소를 배우고 감독 학습을 적용 할 때 어떤 작업을 할 수 있는지에 따라 배울 X와 Y 매핑 유형을 신중하게 선택해야한다는 것을 보여줍니다. 대조적으로, 순수한 엔드 투 엔드 학문 접근법에 대해 이야기하는 것은 흥미롭습니다. 그 방법은 이미지를 입력하고 스티어링을 직접 출력하는 것입니다. 하지만 데이터 가용성과 오늘날 신경 네트워크를 통해 배울 수 있는 것들의 종류를 고려해 볼 때, 이것은 사실 가장 장래성 있는 접근 방식이 아니거나 팀이 가장 잘 해낸 접근 방식이 아닙니다. 저는 이런 순수한 엔드 투 엔드 학문 접근 방식이 오늘날 우리가 신경계 네트워크를 훈련시킬 수 있는 능력과 데이터 가용성을 고려할 때 이와 같은 보다 더 복잡한 접근 방식보다 덜 유망하다고 생각합니다. 이것이 바로 완벽한 깊이의 학습을 위한 것입니다. 그것은 때때로 정말로 효과가 있을 수 있지만, 여러분은 또한 어디에 여러분이 엔드 투 엔드 깊은 학습을 적용하는지를 염두 해 두어야 합니다. 마지막으로, 이렇게 먼 길을 저와 함께 해 주셔서 감사합니다. 지난주의 비디오와 이번 주의 비디오를 보시면, 여러분은 이미 훨씬 더 현명하고 전략적이며 제가 여기서 배운 기계 학습 프로젝트를 어떻게 진행할지에 대해 훨씬 더 좋은 우선 순위 결정을 내리실 것이라고 생각합니다. 심지어 내가 여기 실리콘 밸리에서 보는 많은 기계 학습 엔지니어와 연구원들과 비교해도 말이죠. 지금까지 배운 모든 것에 대해 감사 드리며, 이번 주의 숙제 문제에 대해서도 살펴보시기 바랍니다. 이 문제는 여러분이 이런 생각을 연습해 보고, 여러분이 이 문제들에 숙달되도록 해 줄 또 다른 기회를 줄것입니다.
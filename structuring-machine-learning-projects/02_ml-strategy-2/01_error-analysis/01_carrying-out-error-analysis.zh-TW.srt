1
00:00:00,350 --> 00:00:02,080
嗨,歡迎回來.

2
00:00:02,080 --> 00:00:06,550
如果您要您的學習演算法
像人類工作一般

3
00:00:06,550 --> 00:00:10,490
而如果您的學習算法
還沒達到人類的表現

4
00:00:10,490 --> 00:00:13,790
那手工檢查您的演算法
犯的錯誤

5
00:00:13,790 --> 00:00:16,240
可以讓您洞察
下一步要怎麼做

6
00:00:16,240 --> 00:00:19,040
這個步驟稱為誤差分析

7
00:00:19,040 --> 00:00:20,890
讓我們先從一個例子開始

8
00:00:20,890 --> 00:00:24,520
假設您做一個貓的分類器
正確率為 90%

9
00:00:24,520 --> 00:00:29,390
或者說 10% 的錯誤率
在您的開發集上

10
00:00:29,390 --> 00:00:32,820
假設說這比您想要的還差

11
00:00:32,820 --> 00:00:36,740
也許您的一位隊員看到一些
演算法誤判的例子

12
00:00:36,740 --> 00:00:42,340
而注意到它
誤判了一些狗成為貓

13
00:00:42,340 --> 00:00:46,080
如果您看這兩隻狗
也許看起來有點像貓

14
00:00:46,080 --> 00:00:47,628
至少乍看之下

15
00:00:47,628 --> 00:00:51,160
或許您的團隊建議您

16
00:00:51,160 --> 00:00:56,110
如何讓演算法更好
特別對於狗的辨識, 對吧?

17
00:00:56,110 --> 00:01:01,080
您可以想像重點放在於
或許收集更多的狗的照片

18
00:01:01,080 --> 00:01:04,680
或許針對狗設計一些特徵
或者其他

19
00:01:04,680 --> 00:01:07,833
為了讓您的貓咪分類器
比較能辨識狗

20
00:01:07,833 --> 00:01:11,070
然後停止把狗當成貓

21
00:01:11,070 --> 00:01:13,980
問題是
您應不應該這樣做

22
00:01:13,980 --> 00:01:18,080
開一個專案聚焦在狗的問題上嗎?

23
00:01:19,325 --> 00:01:23,740
這或許會是很多個月的工作
為了要讓您的演算法

24
00:01:23,740 --> 00:01:25,890
在狗的照片上犯比較少的錯誤

25
00:01:27,280 --> 00:01:29,550
這樣的努力值得嗎?

26
00:01:29,550 --> 00:01:32,475
好了, 與其花了幾個月做這個

27
00:01:32,475 --> 00:01:36,175
只在最終發現
這個沒有幫助

28
00:01:36,175 --> 00:01:40,605
這裡有錯誤分析流程
讓您很快的知道

29
00:01:40,605 --> 00:01:43,055
是否值得您去花更多功夫

30
00:01:43,055 --> 00:01:45,180
我這樣建議您

31
00:01:45,180 --> 00:01:51,860
首先，先拿 100 個標錯的開發集例子
然後手工一一檢驗

32
00:01:51,860 --> 00:01:56,380
一次數一個
看有多少這些標錯

33
00:01:56,380 --> 00:01:59,338
的例子在開發集上
實際上是狗的照片

34
00:01:59,338 --> 00:02:02,160
假設實際上

35
00:02:02,160 --> 00:02:07,700
在 100 個標錯的開發集中
有 5% 是狗的照片

36
00:02:07,700 --> 00:02:12,740
也就是
 100 個其中 5 個

37
00:02:12,740 --> 00:02:18,231
標錯的開發集中是狗的照片
這個意思是這 100 個例子

38
00:02:18,231 --> 00:02:23,217
典型的 標錯的 100 個例子
即使您

39
00:02:23,217 --> 00:02:28,807
完全解決狗的問題
您只會讓 100 個中間的 5 個更正確

40
00:02:28,807 --> 00:02:33,802
換句話說, 您的錯誤中只有 5% 
是狗的照片, 也就是

41
00:02:33,802 --> 00:02:38,076
您期望最佳的狀況下, 如果您花很多的時間
在狗的問題上

42
00:02:38,076 --> 00:02:43,256
您的錯誤或許
從 10% 錯誤率

43
00:02:43,256 --> 00:02:46,635
降到 9.5% 錯誤, 對吧?

44
00:02:46,635 --> 00:02:53,455
所以這個 5% 相對減少的誤差
從 10% 降為 9.5%

45
00:02:53,455 --> 00:02:58,220
所以您可以合理的決定
這不是利用您時間的最佳方式

46
00:02:58,220 --> 00:03:02,743
或者也許是, 
但至少這會給您一個上限,

47
00:03:02,743 --> 00:03:08,566
您可以提高多少效能的極限
在處理狗的問題上

48
00:03:08,566 --> 00:03:09,150
對吧?

49
00:03:10,800 --> 00:03:15,870
在機器學習中, 有時候
稱這個為效能極限

50
00:03:15,870 --> 00:03:17,818
也就是, 最佳狀況是怎樣 ?

51
00:03:17,818 --> 00:03:20,720
在處理狗的問題上
能夠幫助您多少 ?

52
00:03:22,690 --> 00:03:25,310
現在, 假設另一種情況

53
00:03:25,310 --> 00:03:28,590
假設看您的 100 個
標錯的開發集中

54
00:03:28,590 --> 00:03:32,340
您發現其中 50 個其實是狗的照片

55
00:03:32,340 --> 00:03:35,620
所以 50% 是狗的照片

56
00:03:35,620 --> 00:03:39,760
現在您可以比較樂觀地
將時間花在處理狗的問題上

57
00:03:39,760 --> 00:03:42,807
這個情況下
如果您真的解決了狗問題

58
00:03:42,807 --> 00:03:47,158
您的錯誤可以從 10% 下降到可能 5%

59
00:03:47,158 --> 00:03:52,260
這樣您或許會決定
減低一半的錯誤值得您花時間

60
00:03:52,260 --> 00:03:56,150
聚焦於減低標錯的狗照片上

61
00:03:56,150 --> 00:04:00,446
我知道在機器學習裡
有時候我們不屑談到

62
00:04:00,446 --> 00:04:03,660
手工工程
或者用太多洞察

63
00:04:03,660 --> 00:04:09,280
但如果您建立一個實用的系統
那這會是一個簡單的計算流程

64
00:04:09,280 --> 00:04:12,120
誤差分析
可以省下您很多時間

65
00:04:12,120 --> 00:04:14,740
在決定什麼是重點

66
00:04:14,740 --> 00:04:17,309
或者聚焦在最有利的方向

67
00:04:19,739 --> 00:04:24,263
實際上如果您檢查
這 100 個標錯的開發集例子

68
00:04:24,263 --> 00:04:27,620
或許花 5 到 10 分鐘

69
00:04:27,620 --> 00:04:29,930
手工一一檢查這 100 個例子

70
00:04:29,930 --> 00:04:32,860
手工去數有多少是狗的照片

71
00:04:32,860 --> 00:04:36,212
而根據數出來的結果
是接近於 5%

72
00:04:36,212 --> 00:04:37,570
或者 50%, 或者其他

73
00:04:37,570 --> 00:04:39,580
只花您 5 到 10 分鐘

74
00:04:39,580 --> 00:04:44,310
給您一個預估
這個方向值不值得

75
00:04:44,310 --> 00:04:46,430
幫助您做比較好的決策
是否

76
00:04:46,430 --> 00:04:51,470
要花數個月
聚焦於試著

77
00:04:51,470 --> 00:04:54,180
找到解決標錯狗的照片的方法

78
00:04:54,180 --> 00:04:58,120
在這張投影片中, 我們解釋了使用
誤差分析來衡量是否

79
00:04:58,120 --> 00:05:02,380
一個想法, 像這個例子是有關狗的照片
值不值得做

80
00:05:02,380 --> 00:05:08,260
有時您也可以平行衡量
多個想法使用錯誤分析

81
00:05:08,260 --> 00:05:12,920
舉個例子， 假設您有多個
想法來改進您的貓分類器

82
00:05:12,920 --> 00:05:16,460
也許您可以改進狗照片的效能

83
00:05:16,460 --> 00:05:19,785
也許您注意到有時候
被稱作"大貓"

84
00:05:19,785 --> 00:05:22,332
像是獅子，豹，獵豹等等

85
00:05:22,332 --> 00:05:25,758
他們會被歸類於
小貓或者說家貓

86
00:05:25,758 --> 00:05:28,031
或許您可以
找個方式解決它

87
00:05:28,031 --> 00:05:32,632
又或許您發現您的照片模糊
如果

88
00:05:32,632 --> 00:05:36,489
您可以設計來讓它更會處理模糊的照片

89
00:05:37,560 --> 00:05:39,280
或許您有一些想法來處理這個問題

90
00:05:41,480 --> 00:05:45,430
所以如果您使用錯誤分析
來衡量這三個想法

91
00:05:45,430 --> 00:05:48,430
我會造一的表格像這樣

92
00:05:50,760 --> 00:05:53,940
我通常用試算表這樣做

93
00:05:53,940 --> 00:05:56,520
但是用平常的文字檔也可以

94
00:05:57,610 --> 00:05:58,605
在左邊

95
00:05:58,605 --> 00:06:02,430
這是一個個照片
您計劃用手工檢查

96
00:06:02,430 --> 00:06:06,010
所以這會是從 1 到 100 
如果您檢查 100 張照片

97
00:06:06,010 --> 00:06:09,910
而這個試算表
表格的欄位

98
00:06:09,910 --> 00:06:12,570
相對於您要衡量的想法

99
00:06:12,570 --> 00:06:18,490
像是 狗的問題,
大貓的問題, 模糊的照片

100
00:06:18,490 --> 00:06:23,870
我通常在試算表留一點空間來寫註解

101
00:06:23,870 --> 00:06:25,724
所以請記得, 在錯誤分析時

102
00:06:25,724 --> 00:06:29,610
您只觀察開發集上
您的演算法錯誤標示的例子

103
00:06:30,670 --> 00:06:34,640
所以如果您發現第一個
誤標的照片是狗的照片

104
00:06:34,640 --> 00:06:36,550
我會放一個核取記號

105
00:06:36,550 --> 00:06:39,540
為了幫助我記得這些照片

106
00:06:39,540 --> 00:06:41,830
有時候我會加一些註解

107
00:06:41,830 --> 00:06:44,380
或許像是鬥牛犬這樣

108
00:06:44,380 --> 00:06:48,110
如果第二張照片是模糊的
標註一下

109
00:06:48,110 --> 00:06:53,317
如果第三張是一頭
獅子在下雨天的動物園裡被誤標

110
00:06:53,317 --> 00:06:56,030
那這會是一張大貓
再加上模糊

111
00:06:56,030 --> 00:07:00,920
註解一下
下雨天的動物園

112
00:07:00,920 --> 00:07:03,620
因為下雨變得模糊
等等

113
00:07:05,670 --> 00:07:08,616
最後
一一檢查完這些照片

114
00:07:08,616 --> 00:07:11,508
我會計算這些演算法的比例

115
00:07:11,508 --> 00:07:16,951
或者說每一種錯誤
歸因於狗的照片

116
00:07:16,951 --> 00:07:19,360
或者大貓， 模糊照片的類別

117
00:07:19,360 --> 00:07:26,484
或許 8% 的這些照片
您檢查後發現是狗的照片

118
00:07:26,484 --> 00:07:32,390
43% 是大貓, 61% 因為模糊

119
00:07:32,390 --> 00:07:34,720
這只是說順著每一個欄位

120
00:07:34,720 --> 00:07:39,290
計算著有多少個核取記號的比例

121
00:07:39,290 --> 00:07:41,567
當您進行這個流程時

122
00:07:41,567 --> 00:07:44,420
有時候您會發現
其他類別的錯誤

123
00:07:44,420 --> 00:07:50,240
舉個例子, 您發現因為
Instagram 的濾鏡功能

124
00:07:50,240 --> 00:07:55,420
這些巧妙的濾鏡功能
搞亂了您的分類器

125
00:07:55,420 --> 00:07:55,940
這個情況下

126
00:07:55,940 --> 00:08:00,240
沒有關係, 在流程進行中
增加多一個欄位像這樣

127
00:08:00,240 --> 00:08:03,125
像是多重顏色濾鏡
Instagram 的濾鏡

128
00:08:03,125 --> 00:08:04,650
跟 Snapchat 濾鏡

129
00:08:04,650 --> 00:08:07,900
然後也照樣一一檢查完

130
00:08:07,900 --> 00:08:11,050
計算從這個新的錯誤類別的百分比

131
00:08:12,170 --> 00:08:16,640
這個流程的結論是
給您一個預估值不值得

132
00:08:16,640 --> 00:08:19,880
處理這不同類別的錯誤

133
00:08:19,880 --> 00:08:23,820
舉個例子, 在這個例子情況下
很多的錯誤來自於模糊

134
00:08:23,820 --> 00:08:28,780
照片, 也有很多來自於
大貓的照片

135
00:08:28,780 --> 00:08:35,750
所以這個分析的結果
並不是說您必須要處理模糊的問題

136
00:08:35,750 --> 00:08:39,360
這並不是給您一個僵化的數學公式
告訴您怎麼做

137
00:08:39,360 --> 00:08:43,140
但會給您一些感覺
如何去做選擇

138
00:08:43,140 --> 00:08:44,650
這也告訴您, 舉個例子

139
00:08:44,650 --> 00:08:50,490
不管您處理狗的問題或者
Instagram 濾鏡的問題有多好

140
00:08:50,490 --> 00:08:55,130
這個例子您能增加的效能
或許是8% 或者 12%

141
00:08:55,130 --> 00:08:57,700
相對於您可以在大貓的照片或者

142
00:08:57,700 --> 00:09:00,246
模糊的照片上得到
更多的改進效能

143
00:09:00,246 --> 00:09:03,730
也就是有一些上限對於
您可以改進的效能

144
00:09:03,730 --> 00:09:05,390
是比較高的

145
00:09:05,390 --> 00:09:09,010
因此, 取決於你有多少想法對於
處理大貓的問題來提高性能

146
00:09:09,010 --> 00:09:10,320
或者模糊的照片

147
00:09:10,320 --> 00:09:13,856
或許您會選擇其中之一
或者您團隊有足夠的人力

148
00:09:13,856 --> 00:09:15,630
或許您可以有兩個不同的團隊

149
00:09:15,630 --> 00:09:18,629
一個團隊處理
大貓的錯誤

150
00:09:18,629 --> 00:09:22,120
另一個團隊處理
改進模糊照片的錯誤

151
00:09:27,184 --> 00:09:31,280
但這個快速計算的流程
通常您只要最多

152
00:09:31,280 --> 00:09:33,130
花幾個小時

153
00:09:33,130 --> 00:09:36,200
可以幫助您做
最佳的優先順序決策

154
00:09:36,200 --> 00:09:39,410
瞭解這些不同的方式
值不值得做

155
00:09:40,940 --> 00:09:44,670
總結一下, 使用誤差分析
您要找一組

156
00:09:44,670 --> 00:09:48,731
誤標的例子在
您的開發集上

157
00:09:48,731 --> 00:09:53,420
看看這些誤標的例子是
偽陽性或者偽陰性

158
00:09:53,420 --> 00:09:56,378
只要計算有多少錯誤歸類於不同的

159
00:09:56,378 --> 00:09:57,629
種類

160
00:09:57,629 --> 00:10:01,916
進行中, 您或許激發
產生一些新的錯誤類別

161
00:10:01,916 --> 00:10:02,597
像我們看到的

162
00:10:02,597 --> 00:10:06,016
如果您一一檢查這些例子
哇, 有很多 Instagram

163
00:10:06,016 --> 00:10:09,071
 濾鏡, 或者 Snapchat 濾鏡
來搞亂您的分類器

164
00:10:09,071 --> 00:10:11,600
在過程裡
您可以建立一個新的類別

165
00:10:11,600 --> 00:10:14,740
用這樣子來計算
有多少的例子被

166
00:10:14,740 --> 00:10:17,375
不同方式誤標
通常會幫助您決定優順序

167
00:10:17,375 --> 00:10:21,140
或者給您新方向的靈感

168
00:10:21,140 --> 00:10:23,074
在您進行誤差分析的時候

169
00:10:23,074 --> 00:10:27,600
有時候您發現有一些
您開發集的例子原本就誤標了

170
00:10:27,600 --> 00:10:29,380
您要怎麼辦?

171
00:10:29,380 --> 00:10:31,020
我們到下一個影片來談論這個問題
만약 여러분이 완전 새로운 러닝 어플을 작업하고 계신다면, 제가 개인적으로 사람들에게 조언드리는 부분은, 첫번째 시스템을 먼저 빨리 만들고 반복테스트 업무를 진행하라는 것입니다. 어떤 말인지 설명드리겠습니다. 저는 음성인식 기능 관련하여 수년간 작업했었는데요, 만약 여러분이 새로운 음성인식 시스템을 만들 생각 중에 계시면, 진행하는데 있어 여러가지 추진할 수 있는 방향이 있고 또한 우선순위를 정할 수 있는 것들 또한 많습니다. 예를 들어, 시끄러운 주변환경에서 강성으로 작동하는 음성인식 시스템을 만들 수 있는 특정 테크닉이 있는데요. 시끄러운 주변환경이란, 커피숍에서의 소음, 예를 들어, 여러 사람이 떠는는 환경, 또는 자동차 소음, 고속도로에서 주행하는 자동차소리 등이 있겠습니다. 억양이 포함된 음성이 더 잘 인식되게 하기 위한 여러가지 다양한 방법들이 있는데요. 스피커가 마이크와 멀리 떨어져 있는 경우에 발생하는 구체적인 문제들이 있습니다. 이런 것을 far-field speech recognition이라고 하는데요. 특히 어린 유아들의 음성이 특별한 과제로 남습니다. 유아들이 낱말 단어를 어떻게 발음하는지와 단어 선정에 있어서 말이죠. 그리고 만약 스피커가 버벅거리거나 "oh"나 "um" 같은 의미가 없는 문구를 사용하는 경우, 더 자연스럽고 부드럽게 표기 스크립트 결과값을 만들기 위한 여러가지 방법이 있습니다. 이러 것들이나 또는 더 많은 방법을 통해 음성인식 시스템을 개선할 수 있습니다. 더 일반적으로는, 거의 모든 머신 러닝 어플에서 접근할 수 있는 50가지 다른 방향이 있을 수 있는데 이런 방향들은 모두 합리적이고 시스템 개선에 도움이 될 수 있는 부분이라고
말할 수 있습니다. 하지만 과제는, 정확히 어떤 방법을 골라서 집중을 하느냐입니다. 저도 물론 음성 인식 분야에서 다년간 업무를 해왔지만 만약 제가 새로운 어플리케이션 도메인을 만드는 경우에는, 문제에 대해서 시간을 갖고 생각하지 않는 이상 쉽게 고르지 못할 것입니다. 그러므로 제가 여러분께 권장드리는 것은 만약 여러분이 완전히 새로운 러닝 어플을 만든다고 하면, 첫번째 시스템을 빨리 만들고 반복 테스트를 진행하라고 말씀드리겠습니다. 구체적으로 무슨 뜻이냐면, 먼저 첫째로 가장 dev/test set와 그 매트릭을 셋업하라는 것입니다. 이건 결국에 여러분이 어디에 목표를 둘지를 결정라는 과정입니다. 만약 여러분이 틀린 경우, 언제든지 나중시점에 바꿀 수 있습니다. 일단 먼저 그 목표를 어디든 설정을 하십시요. 그 다음, 처음 머신 러닝 시스템을 만드는 것입니다. 트레이닝 세트를 찾으시고, 트레이닝 시키고 결과를 지켜보십시요. 여러분의 dev/test set 그리고 값과 매트릭을 상대로 얼마나 잘 작동하는지 지켜보고 이해를 먼저 하십시요. 여러분이 처음 시스템을 만들때, 드디어 이전에 배웠던 편향/편차 분석에 관한 내용을 적용할 수 있습니다. 이 내용은 몇개 이전 비디오에서 강의했었죠. 오류분석에 대한 내용과 함께요. 다음 단계에 대한 우선순위를 정하기 위한 방법에 대해 배웠었습니다. 특히, 오류 분석을 통해 오류의 원인 상당부분이 스피커가 마이크로부터 멀리 떨어져 있어 발생하는 것이면 음성인식 기능이 취약하기도 한 부분인데요, 그러면 far-field speech recognition 라고 하는 테크닉에 집중할 만한 좋은 경우일 것입니다. far-field speech recognition 은 한마디로 얘기해서 스피커가 마이크와 멀리
떨어져 있을때 핸들링하는 경우를 이야기합니다. 이 초기 이니셜 시스템을 도입하는 것의 가치를 제쳐두고 도입이 빠르고 지저분할 수 있습니다. 너무 많이 생각하지 마십시요. 하지만 초기 이니셜 시스템의 가치는 학습이 완료된 시스템의 구축, 그리하여 학습완료된 시스템을 통해 편향/편차를 조절, 그리고 우선순위를 결정하는 것, 오류 분석을 가능케하고, 실수를 보고, 이에 맞는 수많은 접근 방식과 방향성을 알아내서, 어떤 부분이 가장 값어치가 있는지 알아내는 것입니다. 복습하자면, 제가 여러분께 권장드리는 부분은 시스템을 먼저 만들고, 테스트를 반복하라는 것입니다. 이런 조언이 어쩌면 덜 적용될 수 있는 분야도 있습니다. 이전에 특정 어플에 경험이 있는 경우엔 말이죠. 또, 덜 적용될 만한 분야는 바로 학술문학 분야가 많이 적용된 경우인데요, 이런 경우에는 여러분이 만드는 문제에 똑같이 학술 분야 내용을 덧붙혀서 그려나가면 되기 때문입니다. 예로 들자면, 얼굴인식에 대한 학술 문학이 있습니다. 만약 여러분이 얼굴 인식하는 것을 만들려고 하면, 애초에 더 복잡한 시스템을 만들면 됩니다. 이 아주 큰 학술문학위에 말이죠. 하지만 여러분이 처음으로 문제를 해결해나가는 과정이라고 하면 너무 많은 생각을 하시지 말고 또 너무 처음으로 만드는 시스템을 복잡하게 만들지 말라고 격려드리고 싶습니다. 그냥 일단 지저분하더라고 빨리 시스템을 만들고 이 것을 바탕으로 시스템의 우선순위를 정해 개선해 나가는 방식으로 접근하십시요. 저는 여러가지 다앙한 머신러닝 프로젝트를 접해왔는데요, 이런 과정에서 많은 팀들이 해결책에 대해 너무 많이 생각하고 너무 복잡한 시스템을 만드는 것을 보았습니다. 또, 너무 생각을 안하고 너무 심플하게 만드는 경우도 보았습니다. 평균적으로는 너무 많이 생각하고 복잡한 시스템을 만드는 팀이 더 많았습니다. 너무 심플하게 만드는 팀도 있기는 하지만요. 이 내용이 여러분께 도움이 됐으면 좋겠습니다. 여러분의 머신러닝 알고리즘에 새로운 어플을 적용시키는 경우라면, 그리고 주 목표가 잘 작동하는 시스템을 만드는 것이라면, 여러분의 목표가 완전 새로운 머신러닝 알고리즘을 창조하겠다는 목표가 아니라면, 주 목표는 아주 잘 작동하는 시스템을 만드는 것일 겁니다. 저는 여러분께 빨리 지저분하게라도 시스템을 일단 만들라고 말씀드리고 싶습니다. 이 시스템을 이용해서 편향/편차 분석을 진행하고, 오류분석을 하고, 이런 분석 결과값으로 다음 단계의 우선순위를 결정하십시요.
Merhaba, tekrar hoş geldiniz. İnsanların yapabileceği bir işi yapmak için bir öğrenme algoritması elde etmeye çalışıyorsanız ve eğer öğrenme algoritmanız henüz bir insanın performansında değilse o zaman algoritmanızın yaptığı hataları manuel olarak incelemek bir sonraki adımda ne yapacağınız konusunda size fikir verebilir. Bu sürece hata analizi denir. Bir örnek ile başlayalım. Kedi sınıflandırıcınız üzerinde çalıştığınızı ve geliştirme kümenizde %90 doğruluk veya eşdeğerde %10 hata elde ettiğinizi varsayalım. Ve diyelim ki bu yapmayı umduğunuzdan çok daha kötü. Belki de takım arkadaşlarınızdan biri algoritmanın yanlış sınıflandırdığı bazı örneklere bakar ve bazı köpekleri kediler olarak yanlış kategorize ettiğini fark eder. Ve eğer bu iki köpeğe bakarsanız, belki de en azından ilk bakışta bir kediye benziyorlar. Bu yüzden, takım arkadaşınız algoritmanın nasıl daha iyi, özellikle köpeklerde nasıl daha iyi çalışacağına dair bir teklifle size gelebilir, değil mi? Belki daha fazla köpek fotoğrafı toplamak, ya da belki köpeklere özel bir şeyler tasarlamak üzere odaklanma çabası yaratmayı hayal edebilirsiniz Böylelikle kedi sınıflandırıcınızın köpekler üzerinde daha iyi olmasını sağlar ve bu köpekleri yanlışlıkla kediler olarak tanımasını engellersiniz. Öyleyse soru şu ki, devam etmeli ve köpek problemine odaklanmaya başlamalı mısınız? Algoritmanızın köpek resimlerinde çok az hata ile çalışmasını sağlamak için birkaç ay çalışmanız gerekebilir. Peki bu çabalarınıza değer mi? Sonunda bu kadar yardımcı olmadığına karar vereceğiniz bir riski almak için birkaç ay harcamak yerine, çabanıza değip değmeyeceğini çabucak anlamanızı sağlayan bir hata analizi prosedürü var İşte tavsiye ettiğim şey: Öncelikle, 100 tane yanlış etiketlenmiş geliştirme kümesi örneği alın, sonra bunları manuel olarak inceleyin. Bu geliştirme kümenizdeki yanlış etiketlenmiş örneklerin kaç tanesinin aslında köpek resimleri olduğunu görmek için her defasında birer birer sayın. Şimdi, 100 yanlış etiketlenmiş geliştirme kümesi örneklerinizin %5'inin köpek resimleri olduğunu varsayın. Yani, eğer bu yanlış etiketlenmiş geliştirme kümesi örneklerinden 100'ünün 5'i köpek ise, Bunun anlamı, 100 örnekten oluşan tipik bir kümenin 100 örneğini yanlış anlamanızdır. köpek problemini tamamen çözdüyseniz bile, sadece 100'ün 5'ini daha doğru elde edebilirsiniz. Diğer bir deyişle, eğer hatalarınızın sadece % 5'i köpek resimleri ise yapabileceğiniz en iyi şey, köpek problemine çok fazla zaman harcadığınız takdirde, Hatanız % 10 hatadan % 9,5 hataya düşebilir, değil mi? Yani bu % 10'luk bir nispi düşüş hatası,% 10'dan % 9.5'e düştü. Ve bu şekilde zamanınızı en iyi şekilde kullanmadığınıza kanaat getirebilirsiniz en iyi şekilde kullanıyorsanız bile, en azından bu size en üst sınırı veriyor, değil mi? Köpek problemi üzerinde çalışarak performansı nasıl artırabileceğinize dair üst sınır, değil mi? Makine öğrenmesinde bazen buna performanstaki tavan diyoruz. Bu da en iyi durumun ne olduğu, köpek problemi üzerinde çalışmanın size ne kadar yardımcı olabileceği demektir. Ama şimdi, başka bir şey olduğunu varsayalım. 100 yanlış etiketlenmiş geliştirme kümesi örneğine baktığımızı varsayalım bunların 50'sinin aslında köpek resimleri olduğunu görüyorsunuz. Yani % 50'si köpek resimleri. Artık köpek sorununa zaman ayırma konusunda daha iyimser olabilirsiniz. Bu durumda, eğer köpek problemini gerçekten çözüyorsanız, hatanızın % 10'dan aşağıya % 5'lik bir hataya düşmesine sebep olabilirsiniz. Ve hatanızın yarıya indirilmesinin çok çaba gerektireceğini görebilirsiniz Yanlış etiketlenmiş köpeklerin sorununu azaltmaya odaklanın. Biliyorum ki, makine öğrenmesinde, bazen el işçiliğiyle ilgili şeylerden ya da çok fazla değer içgörüsünden bahsediyoruz. Ancak, uygulanmış sistemler oluşturuyorsanız, bu basit sayım prosedürü, -hata analizi- size çok fazla zaman kazandırabilir. Neyin en önemli olduğuna ya da odaklanmak için en umut verici yönün ne olduğuna karar verme açısından. Aslında, 100 yanlış etiketlenmiş geliştirme kümesi örneklerine baktığınızda, Manuel olarak, 100 örneği kontrol etmek ve hangilerinin köpek olduğunu belirlemek, -sonuca bağlı olarak, % 5 veya % 50 veya başka bir oran daha fazla olsun- belki de 5 ila 10 dakikalık bir çabadır. belki de 5 ila 10 dakikalık bir çabadır. Bu, sadece 5 ila 10 dakika içinde, bu yönün ne kadar değerli olduğunun bir tahminini verir. Yanlış işaretlenmiş köpeklerin sorununu çözmek için çözümler bulmaya çalışırken, gelecek birkaç ayı harcayacağınız veya harcamayacağınız konusunda daha iyi bir karar vermenize yardımcı olabilir. Bu slaytta, tek bir fikrin -bu durumda köpeklerin- üzerinde çalışılmaya değer olup olmadığını değerlendirmek için hata analizini kullanarak açıklama yapacağız. Bazen paralel olarak birden fazla fikri hata analizi yaparak değerlendirebilirsiniz. Örneğin, kedi dedektörünüzü geliştirmek için birkaç fikriniz olduğunu varsayalım. Belki köpekler üzerindeki performansı artırabilirsiniz? Ya da bazen; kediler, panterler, çitalar gibi büyük kediler olarak adlandırılan kedilerin küçük kediler veya ev kedileri olarak kabul edildiğini fark edebilirsiniz. Belki bunun üzerinde çalışmanın bir yolunu bulabilirsiniz. Ya da belki bazı resimlerinizin bulanık olduğunu fark ediyorsunuz ve bulanık görüntülerde daha iyi çalışan bir şey tasarlarsanız iyi olur. Ve belki bunun nasıl yapılacağı hakkında bazı fikirleriniz vardır Bu üç düşünceyi değerlendirmek için hata analizi yaparsak, yapacağım şey böyle bir tablo oluşturmaktır. Ve genellikle bunu bir e-tabloda yaparım, ancak sıradan bir metin dosyası kullanmak da işe yarayacaktır. Ve sol tarafta, Bu, manuel olarak bakmayı düşündüğünüz görüntüler kümesinden geçer. Yani 100 resme bakarsanız bu belki 1'den 100'e kadar gider. E-tablodaki bu tablonun sütunları, değerlendirmekte olduğunuz fikirlere karşılık gelecektir. Köpek problemi, büyük kediler sorunu ve bulanık görüntüler. Ayrıca genellikle e-tabloya yorum yazmak için boşluk bırakırım. Hatırlarsanız, hata analizi sırasında sadece algoritmanızın yanlış tanıdığı geliştirme kümesi örneklerine bakıyorsunuz. Eğer ilk yanlış tanınan görüntünün bir köpeğin resmi olduğunu görürseniz, o zaman ben oraya bir onay işareti koyardım. Ve bu görüntüleri hatırlamama yardımcı olması için, bazen yorumlarda not alacağım. Yani belki bu bir pitbull resmiydi. İkinci resim bulanıksa, o zaman not edin. Üçüncüsü, yağmurlu bir günde, hayvanat bahçesinde, yanlış tanınan bir aslan olsaydı. O zaman bu harika bir kedi ve bulanık veriler demektir Yorum bölümüne not alın. Hayvanat bahçesindeki yağmurlu bir gündü, ve onu bulanık yapan yağmurdu, vb. Son olarak, bir dizi görüntüden geçtikten sonra, bu algoritmaların yüzde kaçının veya bu hata kategorilerinin her birinin yüzde kaçının köpeklere veya büyük kedilere, bulanık kategorisine atfedildiğini hesaplardım. Belki incelediğiniz bu görüntülerin % 8'i köpekler, % 43'ü büyük kediler, % 61'i bulanıktı. Yani bu sadece her bir sütundan aşağı inip ve görüntülerin yüzde kaçının bu sütunda bir onay işaretinin olduğunu saymak demektir. Bu sürecin bir kısmında, bazen diğer hata kategorilerini görürsünüz. Örneğin, Instagram stili filtrelerin -bu fantezi görüntü filtrelerinin- bile sınıflandırıcınızı karıştırdığını görebilirsiniz. İlginç birkaç nokta daha var. Sürecin bir yerinde başka bir sütun eklemenin bir sakıncası yoktur. Çok renkli filtreler, Instagram filtreleri ve Snapchat filtreleri için. Ve sonra devam edin ve bunları da sayın ve bu yeni hata kategorisinden yüzde kaçının geldiğini öğrenin. Bu sürecin sonucu size, bu farklı hata kategorilerinin her biri üzerinde çalışmanın ne kadar değerli olabileceğine dair bir tahmin sunar. Örneğin, mesela bu örnekte, bulanık görüntüler üzerinde birçok hata ve büyük kedi görüntülerinde yine çok fazla hata yapıldı. Bu analizin sonucu, bulanık görüntüler üzerinde çalışmanız gerektiği değildir. Bu size ne yapacağınızı söyleyen kesin bir matematiksel formül vermez, ancak takip etmeniz için size en iyi seçenekleri sunar. Örneğin, köpek resimlerinde veya Instagram resimlerinde ne kadar iyi olursanız olun, bu örneklerde performansı en fazla % 8 veya % 12 oranında artırabileceğinizi söyler. Büyük kedi görüntülerinde veya bulanık görüntülerde, potansiyel iyileştirmede daha iyi olabilirsiniz. Şimdi bu, performansı ne kadar artırabileceğinizi gösteren tavan çok daha yüksektir. Bu nedenle; büyük kedilerdeki, bulanık görüntülerdeki performansı artırmak için ne kadar fikriniz olduğuna bağlı olarak, belki ikisinden birini seçebilirsiniz, ya da takımınızda yeterli personel varsa, belki iki farklı takımınız olabilir. Bir ekibin büyük kedilerdeki hataları düzeltmek için çalışmasını sağlayın ve bulanık görüntülerdeki hataları düzeltmeye yönelik ise farklı bir ekip çalışması yapın. Ancak, genellikle az bir sürede yapabileceğiniz bu hızlı sayım prosedürü, gerçekten çok daha iyi önceliklendirme kararları vermenize farklı yaklaşımların üzerinde çalışmanın ne kadar umut verici olduğunu anlamanıza yardımcı olabilir. Özetlemek gerekirse, hata analizi yapmak için, geliştirme kümenizde yanlış etiketlenmiş örnekler bulmalısınız. yanlış pozitif ve yanlış negatifler için yanlış etiketlenmiş örneklere bakmanız gerekir ve farklı kategorilere giren hataların sayısını sayın sadece. Bu süreçte, gördüğümüz gibi yeni hata kategorileri oluşturmak için ilham almış olabilirsiniz. Örnekleri inceliyorsanız, görüyorsunuzdur ki çok fazla Instagram filtresi veya Snapchat filtresi var ve bunlar da sınıflandırıcımı karıştırıyor. Bu süreçte yeni kategoriler oluşturabilirsiniz. Ancak, farklı şekillerde yanlış etiketlenmiş örneklerin sayısını hesaplamak, çoğu zaman bu öncelikleri belirlemenize yardımcı olacak ya da yeni fırsatları denemeniz için size bir ilham kaynağı olacaktır. Şimdi siz hata analizi yaparken, bazen geliştirme kümelerinizdeki bazı örneklerin yanlış etiketlendiğini fark ediyorsunuz. Peki bu konuda ne yapıyorsunuz? Hadi bunu bir sonraki videoda tartışalım.
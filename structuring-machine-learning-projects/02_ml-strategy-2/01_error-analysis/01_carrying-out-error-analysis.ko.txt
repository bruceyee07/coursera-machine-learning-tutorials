안녕하세요, 환영합니다. 여러분이 만약 러닝 알고리즘이 인간이 수행가능한 업무를
할 수 있도록 만들고 싶으면, 또는 현재 시점에서 여러분의 러닝 알고리즘이
인간의 성능에 아직 못 미치는 경우에, 수동으로 알고리즘이 범하는 실수들을
점검하는 것이 다음은 어떻게 해야할지 알려줄만한
인사이트를 제공해줄 것입니다. 이런 절차를 오류 분석이라고 합니다. 예제로 시작해보겠습니다. 우선 예제를 봅시다. 고양이 분류기를 작업하고 있고 
90퍼센트 정확도를 획득했다고 가정해봅시다. 즉, dev set에서의10퍼센트
오류라고도 할 수 있죠. 그리고 이 수치가 여러분이 원하는 수치보다 
더 높은 수치라고 가정해봅시다. 이런 경우, 팀의 인원은 알고리즘의 example들을 보면서 틀리게 분류하는 것들을 찾을 수도 있는데요,
강아지를 고양이로 잘못 카테고리화하는 경우를 찾는 것이죠. 이 2가지 경우의 강아지를 보면, 
2개의 사진의 경우 강아지들이 약간 고양이처럼 보일 수도 있겠죠. 적어도 처음 볼때는 말이죠. 여러분의 팀원이 이것을 보고 강아지에 대해서 알고리즘을 강화하는 방법을 
제안할 수도 있습니다. focus effort를 만드는 경우를 생각하면 되는데요,
강아지 사진을 더 모은다거나 강아지에 특화된 디자인을 만드는 방법이 있겠습니다. 고양이 분류기에서 강아지 사진을 상대로 더 잘 작동할 수 있도록 하기 위해서, 강아지를 고양이로 틀리게 인식하는 경우를 방지하기 위해서, 강아지 문제에 대해서 project focus를 시작할지 가 여러분이 질문할 수 있는 부분입니다. 여러분이 알고리즘에서 강아지 사진을 잘못 인식하는 것을 수정 작업하는데 수개월이 걸릴 수 있습니다. 이런 노력이 과연 값어치가 있을까요? 이런 과정을 진행하는데 수개월을 소비한 뒤, 별로 수정 결과가 좋지 않고
도움이 되지 않다는 것을 발견할 수 있습니다. 여기 이 오류분석 절차가 
여러분이 노력을 쏟을만한 값어치가 있는지 알려줍니다. 여러분에게 추천드리는 부분은 이렇습니다. 첫번째로, 대략 100개의 미스레이블된 dev set 샘플을 가지고와서
수동으로 검사합니다. 1개씩 숫자를 세구요, 
이 중에 몇개가 미스레이블 샘플인지 dev set에서 확인하고 강아지 사진을 걸러냅니다. 그리고 100개의 잘못 레이블된 dev set 샘플 중 5퍼센트가 강아지 이미지라고 해봅시다. 즉, 100개의 잘못 레이블된 dev set 샘플 중 5개가 강아지의 사진인 것입니다.
이 뜻은 100 개의 example중, 일반적인 100개의 example중, 
틀린것을 완벽히 해결하게 되더라도 
100개중 5개만 수정을할 수 있다는 것입니다. 다시 말해서, 만약 오류의 5퍼센트만이
강아지 사진이라고 했을 때, 가장 잘할 수 있는 것은, 
강아지 문제에 많은 시간을 투자하는 것입니다. 여러분의 오류는 
10퍼센트 오류에서 9.5퍼센트로 내려갈 수도 있는데요, 이것은 상대적으로 5퍼센트가 줄어든 것입니다.
10퍼센트에서 9.5퍼센트로 줄어든 것이 말이죠. 그러므로 여러분은 합리적으로 생각했을때,
이것이 효율적인 시간 투자가 아니라고 생각할 수도 있습니다. 또는, 적어도 이것이 상한선을 이야기해줄 수도 있죠. 맞죠? 강아지 문제에 대한 위의 상한선을 제시해서 얼마나 성능을 개선할 수 있는지 말이죠. 맞죠? 그렇죠? 머신러닝에서는, 이것을 ceiling on performance라고 합니다. 이것은 어떤게 가장 좋은 케이스일까요? 를 뜻합니다. 강아지 문제에 작업을 진행하는 것이 얼마나 도움이 될까요? 
등의 문제에 대한 가이드라인을 제시해줍니다. 그럼 이제, 다른 일이 벌어진다고 생각해봅시다. 100개의 잘못 레이블된 example을 본다고 해봅시다. 이 중, 50장이 강아지 이미지입니다. 즉, 50퍼센트가 강아지 사진인 것입니다. 여러분이 이런 경우, 강아지 문제에 시간을 투자하는 것이 
조금 더 긍정적으로 다가올 것입니다. 이 같은 케이스의 경우,
강아지 문제를 푸는 경우, 오류가 10퍼센트에서 5퍼센트로 줄 수 있기 때문이죠. 그러면 오류를 반으로 줄이는 것에대해 
많은 노력이 그 값어치를 한다고 생각할 수 있습니다. 잘못 레이블된 강아지 이미지를 줄이는데 집중하는 것을 말이죠. 머신러닝에서는 사람들이 가끔씩 hand engineering에 대해 폄하하거나 너무 많은 value insight를 사용한다고 생각하는데요, 하지만 적용시스템을 만드는 경우, 
이렇게 간단히 숫자를 세는 과정이 , 오류 분석이 많은 시간을 절약할 수 있게 해줍니다. 어떤 것이 가장 중요한지 여부를 결정하는데에 있어, 또는 가장 유망한 방향은 어떤지, 집중해햐하는 방향을 결정하는데 있어 말이죠. 100개의 잘못 레이블된 dev set example을 본다고 하면, 이것을 어쩌면 5 에서 10분 정도의 노력일 수 있습니다. 수동으로 100개의 샘플을 확인해서 수동으로 강아지 사진의 수를 세는데 소요되는 시간이 말이죠. 결과에 따라서, 5퍼센트인지, 50퍼센트인지 확인도 가능합니다. 이러한 절차를 5에서 10분내 하는 것이죠. 업무방향의 효용성을 예측하는데 드는 시간 말이죠. 이렇게해서 훨씬 더 나은 결정을 내리실 수 있습니다. 잘못 레이블된 강아지 이미지를 수개월간 수정작업할지 결정하는데 말이죠. 이번 슬라이드에서는 하나의 다루는 아이디어가, 이번 사례에서는 강아지가 되겠죠,
이것을 오류분석으로 평가해보겠습니다. 가끔은 여러가지 아이디어를 parallel 방식의 오류 분석을 진행해서 
평가를 할 수도 있습니다. 예를 들어, 고양이 이미지를 감지하는데 몇가지 아이디어가 있다고 해봅시다. 강아지 이미지 인식 성능을 개선하는 방법이 있겠죠? 또는 great cat이라고도 하는 사자,표범, 치타를 인식 개선하는 방법도 있습니다. 이런 사진들이 작은 고양이나 house 고양이로 인식되는 경우를 막는거죠. 이점을 개선하는 방법에 중점을 둘 수 있습니다. 또는 이미지가 흐릿한 경우에 대비해, 선명하지 않은 이미지에서 잘 작동하는 알고리즘을 
디자인할 수도 있습니다. 이런 방안들을 진행하기 위한 아이디어가 있으실 수도 있겠죠. 이런 3가지의 아이디어를 평가하기위해 
오류분석을 진행하려면 저같은 경우, 이렇게 생긴 테이블을 
만들 것입니다. 저는 보통 스프레드시트에서 진행하는데요, 일반 텍스트파일을 사용하셔도 됩니다. 왼쪽에서는, 이것이 여러분이 수동으로 작업하려는 이미지들로 들어가는데요, 이게 아마 1에서 100으로 갈텐데요, 
100개의 사진을 검사하는 경우에 말이죠. 이 테이블의 세로줄은, 스프레드시트에서. 평가하려는 아이디어에 해당하는 사항입니다. 즉, 강아지 문제, great cat, 흐릿한 이미지에 해당합니다. 저는 보통 스프레드시트에서 코멘트를 위한 공간을 남겨둡니다. 기억하셔야할 부분은, 오류분석을 진행한다는 것은, 알고리즘이 잘못 카테고리화한 것들에 대해서
dev set example을 보는 것이라는 것 말이죠. 만약 첫번째로 잘못 인식된 이미지가 강아지 사진이였을 경우에, 여기에다 체크로 표시할 것입니다. 그리고 이 이미지를 기억하기위해, 여기 이렇게 코멘트란에 노트를 남겨둘 것입니다. 이것은 핏불 사진이였을 수 있죠. 두번째 사진이 흐릿하다고하면 
여기 노트를 하십시요. 세번째 사진이 비오는 날 동물원에서 찍은 사자의 이미지면, 
잘못 인식된 것입니다. 이것은 great cat이고, 또 이것은 흐릿한 데이터겠죠. 노트를 이렇게 적을 수 있겠죠. 
비오는 날 동물원, 비오는 날씨로 인해 흐릿하게 이미지 나옴
이라고 말이죠. 마지막으로, 이미지 세트를 리뷰하셨다면, 알고리즘의 몇 퍼센트가, 알고리즘의 오류 카테고리 중 몇 퍼센트가 
강아지에 관련한 상황인지, 또는 great cat 인지 또는 흐릿한 이미지인지 개수를 셀 것입니다. 8퍼센트에 해당하는 수치는 강아지 사진일수도 있는데요, 43퍼센트 수치는 great cats, 61퍼센트는 흐릿한 이미지이구요. 이 것은, 세로줄을 단계별로 내려가시면서 몇 퍼센트의 이미지가 체크마크가 되어있는지 
개수를 세면서 확인하는 것입니다. 이 절차를 어느정도 진행하셨으면, 또 다른 카테고리의 실수를 발견할 수 있는데요. 예를 들어, Instagram style filter와 같은 화려한 필터들이 여러분의 분류기를 망가트리는 경우가 있을 것입니다. 그런 경우, 괜찮습니다만, 진행 과정에서 세로줄을 이렇게 추가하셔도 됩니다. 멀티칼라 필터인 인스타그램 필터들과 스냅필터를 말이죠. 그런 뒤에 개수를 다시 세고, 새로운 오류 카테고리에서 몇 퍼센트의 오류가 발생하는지 
확인을 합니다. 이런 절차를 모두 마치면, 이렇게 다른 종류의 오류 카테고리에 대해서 수정작업을 하는 것이 얼마나
값어치가 있는지 추정할 수 있습니다. 예를 들어, 이 예제에서보면 분명히 알 수 있는 것은 
흐릿한 이미지에서 많은 오류가 있었고, great cat에 대한 오분류도 꽤 많았습니다. 그렇게해서, 분석의 결과는 
흐릿한 이미지를 작업해야한다는 직접적인 결과가 아닙니다. 이런 결과는 단순한 수학 공식처럼 무엇을 어떻게 하라고 알려주는 
것이 아닙니다. 대신에 전반적으로 가장 선택하기 좋은 옵션에 대한 
감각적인 부분을 제시해주는 것이죠. 또한 예를 들어 이런 내용도 말해줍니다. 아무리 강아지에 대한 인식을 잘해도, 도는 인스타그램에서 분류를 잘해도 8퍼센트까지 밖에 성능개선을 못한다, 또는 12퍼센트 개선 가능하다 이런식으로 
말이죠. 아니면 great cat 이미지 또는 흐릿한 이미지는 잠정적인 개선 부분이 있지만 이 부분은 이정도 밖에 개선이 안된다라는 부분을 
말해줄 수 있습니다. 성능을 개선하고 증가시키는 부분에 있어서 특정 한계치가 있는데요, great cat에 대해 성능개선을 하는 idea가 얼마나 있는지에 따라 흐릿한 이미지의 idea가 얼마나 있는지에 따라서 말이죠 둘 중 한가지를 고르는 방법도 있습니다.또는
팀원이 충분하다고 하면, 2개의 다른 팀으로 구성하는 방법도 있습니다. 한팀은 great cat에 대한 오류를 개선하고, 다른 한팀은 흐릿한 이미지를 개선하는 것입니다. 이렇게 빠르게 수동으로 세는 작업은, 주로 몇시간이면 처리가 가능한데요, 그럼에도 불구하고 우선순위를 정하는데에 
많은 도움을 줍니다. 또한, 다양한 접근 방식에 대해서 그 효용성도 측정할 수 있는 
좋은 방법이기도 합니다. 요약하자면, 오류 분석을 실행하는데에는 먼저 dev set나 devleopment set에서 잘못 레이블된 example을 찾고, 이러한 잘못 레이블된 example들을 찾아서 
false positives와 false negatives를 찾습니다. 그리하여 다양한 카테고리에 대한 오류의 총 개수를 각각 카테고리별로 찾아냅니다. 이런 진행과정에서 새로운 오류 관련 카테고리를 보신것과 같이 생성하기 원할 수 있는데요. example들을 보면서 "우와, 인스타그램 필터가 많네, 또는 스냅쳇 필터가 많네, " 라고 하며 분류기를 망친다는 생각이 드시면, 진행 와중에 새로운 카테고리를 생성하실 수 있습니다. 다양한 사유로 잘못 레이블된 example들을 직접 세면서 그 비율을 계산하면 우선순위를 정하는데 도움이 될 것입니다. 아니면 새로운 방향을 갖도록 자극제 역할을 해줄 수도 있구요. 오류 분석을 하면서, 가끔 여러분의 dev set example들이 mislabel된 경우가 
있을텐데요, 이럴 경우 어떻게 해야될까요? 다음 비디오에서 다루도록 하겠습니다.
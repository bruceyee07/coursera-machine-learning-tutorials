1
00:00:00,000 --> 00:00:02,700
만약 학습셋이 dev셋과 test 셋과는 

2
00:00:02,700 --> 00:00:04,135
다른 분포를 갖는다면

3
00:00:04,135 --> 00:00:09,623
그리고 에러를 분석해보았을 때 데이터 불일치를 보인다면 무엇을 할수 있을까요?

4
00:00:09,623 --> 00:00:13,105
이것에 대해서 시스템적인 해결책이 있고 

5
00:00:13,105 --> 00:00:15,520
시도 해 볼수 있는 것을 알아봅시다.

6
00:00:15,520 --> 00:00:19,107
만약 교육 세트가 당신의 개발과 테스트 세트와 다른 분포에서 왔다면, 그리고 오류 분석을 통해 데이터 불일치 문제가 있다는 것을 알 수 있다면 어떻게 하시겠습니까? 여기엔 완전히 체계적인 해결책이 있습니다. 당신이 시도해 볼만한 것들을 한번 살펴 봅시다. 데이터 불일치가 큰 문제가 있는 경우엔,

7
00:00:19,107 --> 00:00:23,865
제가 주로 하는 일은 수동 오류 분석을 수행하고

8
00:00:23,865 --> 00:00:31,865
교육 세트와 개발과 테스트 세트의 차이점을 이해하려고 노력합니다.

9
00:00:31,865 --> 00:00:34,272
테스트 세트가 과도하게 설치되지 않도록 하려면,

10
00:00:34,272 --> 00:00:35,800
기술적으로 오류 분석을 하기위해

11
00:00:35,800 --> 00:00:40,030
테스트 세트가 아닌 개발 세트만 수동으로 확인해야 합니다.

12
00:00:40,030 --> 00:00:42,040
하지만 구체적인 예로

13
00:00:42,040 --> 00:00:47,020
음성 작동 백 미러 응용 프로그램을 구축하고 있다면,

14
00:00:47,020 --> 00:00:50,020
보시면 아시겠지만, 아니면 말로 하면

15
00:00:50,020 --> 00:00:53,230
개발 세트가 교육 세트와 어떻게 다른지 확인하기 위해

16
00:00:53,230 --> 00:00:56,885
시도할 개발 세트의 예를 들어보면,

17
00:00:56,885 --> 00:00:58,890
예를 들어, 당신은

18
00:00:58,890 --> 00:01:03,745
많은 개발 사례가 소음이 심하고 자동차 소음이 심하다는 점을 발견하게 될지도 모릅니다.

19
00:01:03,745 --> 00:01:08,485
이것이 개발 세트가 교육 세트와 다른 하나의 방식입니다.

20
00:01:08,485 --> 00:01:11,350
그리고 어쩌면 다른 범주의 오류도 발견될 수 있습니다.

21
00:01:11,350 --> 00:01:17,095
예를 들어, 당신의 차 안에 있는 음성 작동 백 미러로

22
00:01:17,095 --> 00:01:20,650
아마 가끔 주소 번호가 잘못 인식된 것을

23
00:01:20,650 --> 00:01:22,600
발견한 적이 있을 것 입니다.

24
00:01:22,600 --> 00:01:25,450
거리 주소를 찾기 위한 수많은 질문들이 있기 때문입니다.

25
00:01:25,450 --> 00:01:28,420
따라서, 거리 번호를 바르게 정하는 것은 정말 중요합니다.

26
00:01:28,420 --> 00:01:31,110
개발 세트 오류의 특성을 파악할 수 있다면

27
00:01:31,110 --> 00:01:33,960
아니면 개발세트가 교육 세트와 어떻게 다른지와 얼마나 더 어려운지에

28
00:01:33,960 --> 00:01:37,055
대한 특성을 파악할 수 있다면

29
00:01:37,055 --> 00:01:41,645
당신은 후에 교육 데이터를 보다 유사하게 만들 수 있는 방법을 찾습니다.

30
00:01:41,645 --> 00:01:47,290
또는 개발 및 테스트 세트와 유사한 데이터를 더 수집해 보십시오.

31
00:01:47,290 --> 00:01:53,940
예를 들어, 뒤에서 들리는 자동차 소음이 가장 큰 오류 원인이라는 것을 알게 되면

32
00:01:53,940 --> 00:02:00,120
당신이 취할 수 있는 하나의 방법은, 차량 내에서 잡음이 심한 데이터를 시뮬레이션할 수 있습니다.

33
00:02:00,120 --> 00:02:03,580
다음 슬라이드에서 이 작업을 어떻게 하는지에 대해 좀 더 알아보겠습니다.

34
00:02:03,580 --> 00:02:06,710
아니면 거리 번호를 알아차리기 힘들거나

35
00:02:06,710 --> 00:02:10,280
아니면 당신은 고의적으로 가서 큰 목소리로 말하는 사람들의 데이터를 더 수집하고

36
00:02:10,280 --> 00:02:15,150
당신의 교육 세트에 추가합니다.

37
00:02:15,150 --> 00:02:20,555
자, 이 슬라이드에 여러분이 시도해 볼 수 있는 것들에 대한 대략적인 지침이 나와 있다는 것을 인지할 수 있습니다

38
00:02:20,555 --> 00:02:23,525
이것은 체계적인 과정이 아니고

39
00:02:23,525 --> 00:02:27,720
제 생각에는 당신이 발전을 이루기 위해 필요한 통찰력을 얻는다는 것이 보장되지 않는다고 생각합니다.

40
00:02:27,720 --> 00:02:32,045
하지만, 저는 이 수동적 통찰은

41
00:02:32,045 --> 00:02:35,870
함께 데이터가 더 비슷한 차원으로

42
00:02:35,870 --> 00:02:39,765
종종 많은 문제들을 해결하는 데에 도움을 준다고 생각합니다.

43
00:02:39,765 --> 00:02:46,010
따라서 교육 데이터를 개발 세트와 더 유사하게 만드는 것이 목표라면

44
00:02:46,010 --> 00:02:48,620
당신이 할 수 있는 것은 무엇입니까?

45
00:02:48,620 --> 00:02:50,270
당신이 사용할 수 있는 기술 중 하나는

46
00:02:50,270 --> 00:02:52,970
인공 데이터 통합과

47
00:02:52,970 --> 00:02:56,810
자동차 소음 문제를 해결하는 맥락에서 토론해봅시다.

48
00:02:56,810 --> 00:02:59,240
그래서, 음성 인식 시스템을 만들기 위해서는,

49
00:02:59,240 --> 00:03:01,970
아마 사실 당신이 들은 것 중에 차 안에서 들리는 소음과

50
00:03:01,970 --> 00:03:05,030
고속 도로의 배경 소음 등에서

51
00:03:05,030 --> 00:03:07,040
실제로 녹음된 음성은 많지 않을 것 입니다.

52
00:03:07,040 --> 00:03:09,440
하지만, 이것을 합성할 방법이 있다는 것이 밝혀졌습니다.

53
00:03:09,440 --> 00:03:11,435
당신이

54
00:03:11,435 --> 00:03:15,620
차 배경 소음이 없는 다량의 깨끗한 오디오를 녹음했다고 가정합시다.

55
00:03:15,620 --> 00:03:20,400
자, 여기 여러분이 여러분의 교육 세트에 가지고 있을지도 모를 동영상 한개가 있습니다.

56
00:03:21,190 --> 00:03:26,340
그런데 이 문장은 AI에서

57
00:03:26,340 --> 00:03:30,590
에서 Z까지 모든 알파벳을 포함하는 짧은 문장이기 때문에 테스할 때 쓰이는 문장입니다.

58
00:03:30,590 --> 00:03:32,745
그래서 이 문장이 많이 보입니다.

59
00:03:32,745 --> 00:03:36,540
하지만" 빠른 갈색 여우가 게으른 개를 뛰어넘는다"는 주어진 문장의 녹음을 고려해 볼 때,

60
00:03:36,540 --> 00:03:46,455
당신은 이렇게 자동차 소음을 녹음할 수도 있습니다.

61
00:03:46,455 --> 00:03:49,010
그러니까 차 안은 이렇게 소리가 나고

62
00:03:49,010 --> 00:03:50,595
아무 말도 하지 않고 운전한다면

63
00:03:50,595 --> 00:03:53,460
이 두개의 오디오 영상을 가지고 둘이 합친다면

64
00:03:53,460 --> 00:03:55,595
당신은 그 후에

65
00:03:55,595 --> 00:03:58,835
"빠른 갈색 여우가 게으른 개를 뛰어넘는다"는 문장을 합성할 수 있습니다.

66
00:03:58,835 --> 00:04:06,870
만약 당신이 시끄러운 차안에서 그 말을 했다면 이렇게 들릴 것입니다.

67
00:04:06,870 --> 00:04:10,980
이것은 상대적으로 간단한 음성 합성 예입니다.

68
00:04:10,980 --> 00:04:14,210
실제로는 다음과 같은 다른 오디오 효과를 합성할 수 있습니다.

69
00:04:14,210 --> 00:04:16,370
차 벽에서 튀어 나오는 듯한

70
00:04:16,370 --> 00:04:19,700
당신의 목소리의 반향 같은 것이죠.

71
00:04:19,700 --> 00:04:22,370
하지만 인공 데이터 합성을 통해

72
00:04:22,370 --> 00:04:26,900
당신은 유사하게 들리는 데이터를 더 빨리 생성할 수 있을 것입니다.

73
00:04:26,900 --> 00:04:32,540
차 안에서 기록이 되어 있어서 밖에 나가서 엄청난 양의 자료를 모을 필요 없습니다.

74
00:04:32,540 --> 00:04:34,850
아마도 수천 또는 수만시간

75
00:04:34,850 --> 00:04:37,700
차 안에 있는 데이터를 찾아야 합니다.

76
00:04:37,700 --> 00:04:41,210
그래서, 만약 당신의 오류 분석이 당신이 하려고 노력해야 한다는 것을 보여 준다면

77
00:04:41,210 --> 00:04:45,050
차 안에서 녹음된 것처럼 들리게 하고

78
00:04:45,050 --> 00:04:47,705
이 방법이

79
00:04:47,705 --> 00:04:51,310
이러한 유형의 데이터를 동기화하여 학습 알고리즘을 제공합니다.

80
00:04:51,310 --> 00:04:54,380
여기서 한가지 주의할 점이 있습니다.

81
00:04:54,380 --> 00:04:57,855
인공 데이터 합성, 즉

82
00:04:57,855 --> 00:05:04,814
예를 들어, 10,000시간 동안 조용한 배경에 기록된 데이터가 있다고 가정해봅시다.

83
00:05:04,814 --> 00:05:11,915
예를 들어, 자동차 소음이 한시간이면 된다고 합시다.

84
00:05:11,915 --> 00:05:14,940
한가지 시도해 볼 만한 건

85
00:05:14,940 --> 00:05:17,820
자동차 소음을 발생시키고 10,000번 반복합니다.

86
00:05:17,820 --> 00:05:24,695
조용한 환경에서 녹음된이 10,000시간의 데이터에 추가하기 위해서죠.

87
00:05:24,695 --> 00:05:29,355
그렇게 하면, 그 소리는 인간의 귀에 완벽하게 들릴 것 입니다.

88
00:05:29,355 --> 00:05:30,600
하지만 기회는 있습니다.

89
00:05:30,600 --> 00:05:38,790
학습 알고리즘이 차량 소음에 1시간 이상 걸릴 위험이 있습니다.

90
00:05:38,790 --> 00:05:44,325
그리고, 특히, 만약 이것이

91
00:05:44,325 --> 00:05:52,460
차 안에서 녹음할 수 있는 모든 소리이거나,

92
00:05:52,460 --> 00:05:56,195
당신이 상상할 수 있는 모든 자동차 소음 배경들의 세트라면,

93
00:05:56,195 --> 00:05:59,285
자동차 소음 배경이 한시간이면

94
00:05:59,285 --> 00:06:03,660
이 공간의 아주 작은 부분 집합만 시뮬레이션할 수 있습니다.

95
00:06:03,660 --> 00:06:09,010
이 공간의 매우 작은 하위 집합에서 합성할 수 있습니다.

96
00:06:09,010 --> 00:06:10,870
그리고 인간의 귀에는

97
00:06:10,870 --> 00:06:13,990
이 모든 소리는 괜찮습니다.

98
00:06:13,990 --> 00:06:18,030
한 시간 동안의 여느 자동차 소음과 유사하게 인간의 귀에 들리기 때문입니다.

99
00:06:18,030 --> 00:06:23,880
하지만 이 공간의 아주 작은 부분에서 데이터를 합성하고 있을 수도 있습니다.

100
00:06:23,880 --> 00:06:25,840
그리고 신경망이

101
00:06:25,840 --> 00:06:30,530
과도한 차 소음을 한시간 이상 감지했습니다.

102
00:06:30,530 --> 00:06:33,355
자동차 소음 1만 시간을

103
00:06:33,355 --> 00:06:37,090
저렴하게 수집하는 것이 현실적으로 가능할지 모르겠지만,

104
00:06:37,090 --> 00:06:39,310
1만 시간의 자동차 소음를 반복할 필요가 없습니다.

105
00:06:39,310 --> 00:06:42,550
1만 시간의 독특한 자동차 소음 때문에

106
00:06:42,550 --> 00:06:48,024
깨끗한 배경에 대해 1만 시간의 독특한 오디오 녹음을 할 수 있습니다.

107
00:06:48,024 --> 00:06:50,900
이것은 장담은 못하지만 가능합니다.

108
00:06:50,900 --> 00:06:56,710
하지만 한시간이 아니라 만시간을 자동차 소음으로

109
00:06:56,710 --> 00:07:01,167
러닝 알고리즘을 통해 더 나은 성과를 가져올 수 있습니다.

110
00:07:01,167 --> 00:07:05,650
인공 데이터를 합성해야 하는 도전 과제는 인간의 귀에 있습니다.

111
00:07:05,650 --> 00:07:07,340
당신의 귀에 들리는 한,

112
00:07:07,340 --> 00:07:10,850
이 10,000시간 은 이 한시간과 같은 소리를 내고 있습니다.

113
00:07:10,850 --> 00:07:13,175
어쩌면, 당신도 모르게

114
00:07:13,175 --> 00:07:16,310
작은 하위 집합에서 매우 낮은 품질의

115
00:07:16,310 --> 00:07:19,890
합성 데이터를 세트를 생성하게 될 것입니다.

116
00:07:19,890 --> 00:07:23,265
여기 인공 데이터 통합의 또 다른 예가 있습니다.

117
00:07:23,265 --> 00:07:26,495
만약에 당신이 무인 자동차를 만들어서

118
00:07:26,495 --> 00:07:31,260
이렇게 생긴 차량들을 바운딩 박스에 둘러 놓으면 어떨까요?

119
00:07:31,260 --> 00:07:34,550
많은 사람들이 논의해 온 한가지 아이디어는

120
00:07:34,550 --> 00:07:39,070
왜 당신은 자동차의 이미지를 컴퓨터 그래픽을 사용해서 시뮬레이션해야 하는가?

121
00:07:39,070 --> 00:07:41,045
그리고 사실, 여기에 컴퓨터 그래픽을 사용하여 만들어진 자동차들의

122
00:07:41,045 --> 00:07:44,045
사진들이 두장 있습니다.

123
00:07:44,045 --> 00:07:46,970
사실 이러한 그래픽 효과는 꽤 좋다고 생각합니다.

124
00:07:46,970 --> 00:07:50,210
그리고 전 이런 사진들을 합성해서

125
00:07:50,210 --> 00:07:54,510
당신은 자동차 감지를 위한 꽤 좋은 컴퓨터 비전 시스템을 교육시킬 수 있다고 생각합니다.

126
00:07:54,510 --> 00:07:56,570
불행하게도 내가 이전 슬라이드에서 그린

127
00:07:56,570 --> 00:08:00,740
사진은 이 설정에 다시 적용됩니다.

128
00:08:00,740 --> 00:08:05,075
이건 모든 차의 세트일지도 모르고,

129
00:08:05,075 --> 00:08:10,200
이 차들을 아주 작은 부품으로 만들면

130
00:08:10,200 --> 00:08:12,775
인간의 눈으로 보면,

131
00:08:12,775 --> 00:08:15,145
어쩌면 합성된 이미지가 좋아 보일지도 모릅니다.

132
00:08:15,145 --> 00:08:18,985
하지만 현재 합성 중인 작은 하위 집합에 과도하게 맞출 수 있습니다.

133
00:08:18,985 --> 00:08:23,590
특히, 많은 사람들이 독립적으로 키운 한 아이디어는,

134
00:08:23,590 --> 00:08:26,950
당신이 좋은 컴퓨터 그래픽을 가진 자동차 비디오 게임을 찾았다면

135
00:08:26,950 --> 00:08:31,115
그들로부터 이미지를 얻고 자동차의 거대한 데이터 세트를 얻습니다.

136
00:08:31,115 --> 00:08:33,805
비디오 게임을 보면

137
00:08:33,805 --> 00:08:38,065
비디오 게임이 단지 비디오 게임 안에 20개의 유일한 차를 가지고 있다면,

138
00:08:38,065 --> 00:08:39,700
그러면 비디오 게임은 괜찮아 보인다.

139
00:08:39,700 --> 00:08:42,190
비디오 게임을 하면서 돌아다니다가

140
00:08:42,190 --> 00:08:47,065
20대의 다른 차들을 살펴보면 꽤 사실적인 시뮬레이션 같습니다.

141
00:08:47,065 --> 00:08:51,715
하지만 이 세상에는 20개 이상의 독특한 자동차 디자인이 있습니다.

142
00:08:51,715 --> 00:08:56,200
합성된 교육 세트 전체에 20대의 차만 있다면

143
00:08:56,200 --> 00:09:00,485
그러면 신경망이 이 차 20대를 초과하게 될 것 입니다.

144
00:09:00,485 --> 00:09:03,985
그런 건 쉽게 말하기 힘들지만,

145
00:09:03,985 --> 00:09:06,130
이 사진들이 현실적으로 보일지라도,

146
00:09:06,130 --> 00:09:11,780
가능한 모든 차들을 이렇게 아주 작은 부품으로 만들어 놨습니다.

147
00:09:11,780 --> 00:09:15,310
요약하자면, 데이터 불일치 문제가 있다고 생각하시면,

148
00:09:15,310 --> 00:09:17,640
오류 분석을 할 것을 권합니다.

149
00:09:17,640 --> 00:09:18,820
아니면 교육 세트를 보는 것을 권하고,

150
00:09:18,820 --> 00:09:20,785
이 수치를 시험해 보려면 개발 세트를 보세요

151
00:09:20,785 --> 00:09:24,685
이 두 데이터 분포가 어떻게 다를 수 있는지에 대한 통찰력을 얻으려면

152
00:09:24,685 --> 00:09:26,950
그럼 다른 방법을 찾아서

153
00:09:26,950 --> 00:09:30,025
개발 세트와 약간 유사한 교육 데이터를 수집할 방법을 찾으세요.

154
00:09:30,025 --> 00:09:33,185
우리가 얘기했던 방법 중 하나는 인공 데이터 합성입니다.

155
00:09:33,185 --> 00:09:35,515
인공 데이터 합성도 효과가 있습니다.

156
00:09:35,515 --> 00:09:39,630
음성 인식에서 저는 인공 데이터 합성이 이미 매우 좋은 음성 인식 시스템의 성능을

157
00:09:39,630 --> 00:09:43,870
크게 향상시켰다는 것을 알았습니다.

158
00:09:43,870 --> 00:09:45,505
그래서 그것은 잘 작동할 수 있습니다.

159
00:09:45,505 --> 00:09:47,675
하지만 인공 데이터를 사용하고 있다면

160
00:09:47,675 --> 00:09:51,505
단지 조심하고 당신이 실수를 했는지 아닌지를 명심하십시오.

161
00:09:51,505 --> 00:09:57,105
가능한 모든 예제 공간의 작은 하위 집합에서만 데이터를 시뮬레이션하십시오.

162
00:09:57,105 --> 00:10:01,990
바로 이것이 데이터 불일치를 해결하는 방법입니다.

163
00:10:01,990 --> 00:10:04,690
다음으로, 여러분과 몇가지 생각을 나누고 싶습니다.

164
00:10:04,690 --> 00:10:08,390
여러 유형의 데이터에서 동시에 학습하는 방법에 대해 설명합니다.
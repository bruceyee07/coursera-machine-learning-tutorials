1
00:00:00,560 --> 00:00:04,440
딥 러닝 알고리즘은 훈련 자료를 수집하고자하는 엄청난 갈망이 있습니다.

2
00:00:04,440 --> 00:00:06,970
그것들은 당신이 충분한 훈련 자료 레이블을

3
00:00:06,970 --> 00:00:10,294
훈련 세트에 넣었을 때에 가장 잘 작동합니다.

4
00:00:10,294 --> 00:00:14,154
이것은 많은 팀들이 종종 찾을 수 있는 모든 데이터를 수집하고

5
00:00:14,154 --> 00:00:18,120
그것을 훈련 세트에 밀어 넣기만 하면 더 많은 훈련 자료를 얻게되는 결과를 초래하게 되었습니다.

6
00:00:18,120 --> 00:00:21,720
이 데이터 중 일부 혹은 어쩌면 많은 데이터가

7
00:00:21,720 --> 00:00:25,870
같은 분포에서 나오지 않을 수도 있습니다. 개발이나 테스트 데이터로 사용할 수 있습니다.

8
00:00:25,870 --> 00:00:30,330
그러므로 데이터 러닝 시대에서는, 더 많은 팀들이

9
00:00:30,330 --> 00:00:34,325
다른 분포에서 오는 개발 및 테스트 세트보다 큰 성능을 제공합니다.

10
00:00:34,325 --> 00:00:37,385
몇가지 세부사항이 있고 당신이 훈련받을 때에

11
00:00:37,385 --> 00:00:41,825
대처하기 위한 몇가지 모범 사례와 시험분포는 서로 다릅니다. 그럼 한번 살펴봅시다.

12
00:00:41,825 --> 00:00:43,315
한번 자세히 살펴볼까요.

13
00:00:43,315 --> 00:00:48,630
자, 그럼 당신이 사용자가 그들의 핸드폰으로 찍은 사진을

14
00:00:48,630 --> 00:00:51,970
업로드 시키는 앱을 만든다고 가정해봅시다. 그리고, 당신은 그들이 앱을 통해 업로드한 사진들이

15
00:00:51,970 --> 00:00:56,470
고양이인지 아닌지 인식하고 싶다고 해봅시다.

16
00:00:56,470 --> 00:00:59,580
자, 이제 당신은 두가지 데이터 자원을 얻게 됩니다.

17
00:00:59,580 --> 00:01:03,940
한개는 당신이 정말 관심을 갖는 분포 데이터 입니다.

18
00:01:03,940 --> 00:01:07,940
오른쪽과 같은 핸드폰 앱의 데이터는 좀 덜 전문적이고,

19
00:01:07,940 --> 00:01:12,800
덜 프레임되고, 어쩌면 더 희미하게 보일 수도 있습니다. 그 사진은 아마추어 사용자들이 찍은 것이기 떄문이죠.

20
00:01:12,800 --> 00:01:16,760
그리고 나머지 데이터 자원은 이 사례를 예로 들면

21
00:01:16,760 --> 00:01:21,635
당신은 웹을 기어디나고 그저 다운 받을 수 있습니다. 당시이 매우 전문적으로 프레임된,

22
00:01:21,635 --> 00:01:27,250
고해상도의 전문적으로 찍힌 고양이 사진은 다운 받을 수 있다고 가정합시다.

23
00:01:27,250 --> 00:01:29,950
그리고 당신의 앱 사용자가 아직 그리 많지 않다고 가정합시다.

24
00:01:29,950 --> 00:01:35,632
당신은 어쩌면 10,000개의 사진들을 핸드폰 앱에 업로드했을지도 모릅니다.

25
00:01:35,632 --> 00:01:40,320
그러나 웹을 기어다님으로 당신은 대량의 고양이 사진을 다울 받을 수 있고,

26
00:01:40,320 --> 00:01:45,322
어쩌면 당신은 인터넷에서 200,000 사진들을 다운 받을 수 있습니다.

27
00:01:48,079 --> 00:01:53,296
그러니까 당신이 진짜 걱정하는 부분은 최종 시스템이

28
00:01:53,296 --> 00:01:58,311
모바일 앱 이미지의 분포에서 잘 작동하는거 맞죠?

29
00:01:58,311 --> 00:02:01,594
결국 당신은 사용자들은 오른쪽과 같이

30
00:02:01,594 --> 00:02:04,230
사진들을 업로드하고 당신은 그것을 위해 당신의 분류자들이 잘 작동하길 원하기 떄문이죠.

31
00:02:04,230 --> 00:02:08,500
하지만 당신은 지금 약간의 딜레마에 빠졌어요. 당신의 데이터 세트는 비교적 작기 때문이죠.

32
00:02:08,500 --> 00:02:12,970
그 분포에서 나온 10,000개의 예 정도죠.

33
00:02:12,970 --> 00:02:16,754
그리고 다른 분포에서 그려진 훨씬 더 큰 데이터 세트가 있죠.

34
00:02:16,754 --> 00:02:19,986
당신이 원하는 이미지와는 다른 외형이 있습니다.

35
00:02:19,986 --> 00:02:24,505
그러니 당신은 단지 10,000개의 이미지만 사용하고 싶지는 않을거에요. 왜냐하면 그것은

36
00:02:24,505 --> 00:02:27,330
당신에게 비교적 작은 훈련 세트를 줄 것이기 때문입니다.

37
00:02:28,466 --> 00:02:31,724
그리고, 200,000개의 이미지는 도움이 될 것처럼 보이지만,

38
00:02:31,724 --> 00:02:37,550
딜레마는 이 200,000개의 이미지는 당신이 원하는 분포와는 다릅니다. 그럼 당신은 무엇을 할 수 있을까요?

39
00:02:37,550 --> 00:02:38,496
여러분은 뭘 할 수 있을까요?

40
00:02:38,496 --> 00:02:43,340
자, 여기 하나의 옵션이 있습니다.

41
00:02:43,340 --> 00:02:47,669
당신이 할 수 있는 하나의 방법은 두개의 데이터 세트를 함께 연결하여

42
00:02:47,669 --> 00:02:50,910
210,000 이미지를 갖게되는거죠.

43
00:02:50,910 --> 00:02:56,835
그리고 당신은 210,000 이지미를 찍고

44
00:02:56,835 --> 00:03:03,470
임의적으로 섞어 연습하고, 발전 시키고, 테스트 합니다.

45
00:03:03,470 --> 00:03:07,020
논쟁을 위해 당신의 개발과 테스트 세트가

46
00:03:07,020 --> 00:03:11,380
각각 2,500개의 예를 갖고 있다고 가정합시다.

47
00:03:11,380 --> 00:03:16,360
당신의 트레이닝 세트는 205,000개입니다.

48
00:03:17,450 --> 00:03:23,520
이제 이런 방식으로 당신의 데이터를 설치하는 것은 몇몇의 장점이 있지만, 단점도 있습니다.

49
00:03:23,520 --> 00:03:26,910
장점은 이제 당신은 훈련하고, 개발하고 테스트하여

50
00:03:26,910 --> 00:03:30,400
모든 것이 같은 분포도로 오고 관리하기 쉽다는 것이다.

51
00:03:30,400 --> 00:03:33,470
그러나 단점은, 매우 큰 단점은,

52
00:03:33,470 --> 00:03:38,010
당신의 이 2,500개의 개발 세트를 보면

53
00:03:38,010 --> 00:03:43,570
이 많은 것들은 당신이 진정 관심 있는 앱의

54
00:03:43,570 --> 00:03:46,660
이미지 보다 웹페이지의 분포에서 올 것이다.

55
00:03:48,520 --> 00:03:53,150
그리하여 당신의 총 데이터는 200,000개이고,

56
00:03:53,150 --> 00:03:57,309
나는 그것을 간략하게 줄여 210,000개 중 200K라고 하겠습니다.

57
00:03:57,309 --> 00:04:01,169
우리는 그것을 210K라고 쓰겠습니다. 그것은 웹페이지에서 쓰인 것이져.

58
00:04:01,169 --> 00:04:06,951
그리하여 이 모든 2,500개의 예들을 예상한 것들입니다.

59
00:04:06,951 --> 00:04:13,430
제 생각에 2,381개는 웹 페이지에서 올 것이고,

60
00:04:13,430 --> 00:04:17,580
이것들은 예상한 것들입니다. 정확한 숫자는

61
00:04:17,580 --> 00:04:20,290
임의로 섞는 방식에 따라 달라질 것 입니다

62
00:04:20,290 --> 00:04:25,250
그러나, 평균적으로 오로지 119개만 모바일 앱 업로드에 이용될 것입니다.

63
00:04:27,600 --> 00:04:32,630
그러니 개발 시스템이 당신의 팀이 어디에

64
00:04:32,630 --> 00:04:33,800
목표를 두는지 기억하십시오.

65
00:04:33,800 --> 00:04:35,150
그리고 당신이 목표를 정하는 방식,

66
00:04:35,150 --> 00:04:38,080
그리고 당신은 웹페이지 이미지 분포에 최적화 된 시간을 사용하는 것이란 말이죠.

67
00:04:38,080 --> 00:04:41,550
그것은 당신이 진짜 원하는 것이 아니에요.

68
00:04:42,780 --> 00:04:45,430
그래서 저는 옵션 1을 추천하지는 않습니다.

69
00:04:45,430 --> 00:04:50,010
개발 세트에 당신의 팀이

70
00:04:50,010 --> 00:04:53,160
다른 분포의 데이터에 최적화 되게 하고

71
00:04:54,210 --> 00:04:56,018
그렇게 하는 대신에,

72
00:04:56,018 --> 00:05:01,704
저는 당신이 다음과 같은 다른 옵션을 취하기를 추천합니다.

73
00:05:01,704 --> 00:05:08,487
훈련 세트가 여전히 205,000 이미지라고 합시다.

74
00:05:08,487 --> 00:05:15,985
저는 트레이닝 세트가 웹에서 온 200,000개의 이미지로 하겠습니다.

75
00:05:15,985 --> 00:05:21,970
그 후에 당신이 원한다면 5,000개의 이미지를 모바일 앱에서 추가할 수 있습니다.

76
00:05:21,970 --> 00:05:24,344
그 후에 당신의 개발과 테스트 세트를 위해,

77
00:05:24,344 --> 00:05:27,599
제 생각에 저의 데이터 크기는 규모에 맞게 그려지지 않습니다.

78
00:05:27,599 --> 00:05:34,993
당신의 개발과 테스트 세트는 모두 모바일 앱 이미지일 것 입니다.

79
00:05:38,870 --> 00:05:44,405
그래서 훈련 세트는 웹에서의 200,000개의 이미지를 포함시킬 것입니다.

80
00:05:44,405 --> 00:05:46,560
그리고 5,000개의 모바일 앱에서 포함시킬 것 입니다.

81
00:05:46,560 --> 00:05:51,990
개발 세트는 모바일 앱에서 2,500개,

82
00:05:51,990 --> 00:05:58,680
테스트 세트는 모바일 앱에서 2,500개일 것입니다.

83
00:05:58,680 --> 00:06:03,480
당신의 데이터를 이처럼 훈련, 개발, 테스트 방식으로 나누는 것의 장점은

84
00:06:03,480 --> 00:06:07,410
이제 당신은 어디에 목표을 두는지에 있습니다.

85
00:06:07,410 --> 00:06:12,930
당신은 당신의 팀에 저의 개발 세트가 모바일 앱에 업로드될 데이터가 있다고 합니다.

86
00:06:12,930 --> 00:06:15,570
그리고 그것은 당신이 정말 관심있어하는 분포의 이미지입니다.

87
00:06:15,570 --> 00:06:19,110
그럼 이제 모바일 앱 이미지 분포에서 잘 작동하는

88
00:06:19,110 --> 00:06:21,750
머신 러닝 시스템을 만들어 봅시다.

89
00:06:21,750 --> 00:06:25,190
당연히 단점은 당신의 훈련 분포가

90
00:06:25,190 --> 00:06:30,870
당신의 개발과 테스트 세트 분포와 다르다는 것 입니다.

91
00:06:30,870 --> 00:06:34,724
그러나 이 데이터가 훈련 개발,

92
00:06:34,724 --> 00:06:38,227
테스트로 나누어게 된 결과는 장기적으로 당신에게 훨씬 더 좋은 성과를 가져다 줄 것입니다.

93
00:06:38,227 --> 00:06:42,475
그리고 우리는 나중에 개발과 테스트 세트와 다른 분포에서 온

94
00:06:42,475 --> 00:06:47,160
훈련 세트를 다루는 상세한 테크닉에 대해 토론해보겠습니다. 또 다른 예 하나를 살펴보겠습니다.

95
00:06:47,160 --> 00:06:49,110
다른 예제를 보시죠.

96
00:06:49,110 --> 00:06:53,553
당신이 자동차의 음성 작동 백미러

97
00:06:53,553 --> 00:06:58,610
최신형 상품을 만든다고 가정해봅시다.

98
00:06:58,610 --> 00:07:01,368
이것은 중국에서 진짜 시행되는 제품입니다.

99
00:07:01,368 --> 00:07:05,668
다른 나라에 진충해서 백미러를 만들어서

100
00:07:05,668 --> 00:07:10,034
이 작은 것을 대체하면 백미러와 이야기할 수 있게 됩니다.

101
00:07:10,034 --> 00:07:13,488
기본적으로 백미러라고 하는데, 백 미러야,

102
00:07:13,488 --> 00:07:17,760
가장 가까운 주유소로 가는 방향을 알려줘 라고 하면 그것은 도움을 주고 해결해 줄 것입니다.

103
00:07:19,620 --> 00:07:22,750
그래서 이것은 진짜 제품입니다. 이제, 이것을

104
00:07:22,750 --> 00:07:23,530
당신의 나라를 위해 만든다고 합시다.

105
00:07:27,160 --> 00:07:31,720
그럼 당신은 어떻게 데이터를 갖고와서

106
00:07:31,720 --> 00:07:32,489
이 제품의 음성 인식 시스템을 훈련하겠습니까?

107
00:07:32,489 --> 00:07:36,137
어쩌면 당신은 음성인식 시스템에 장시간 일해왔을 수 있습니다.

108
00:07:36,137 --> 00:07:39,785
그리하여 다른 음성인식 앱에 대한 데이터들이 많을 수 있죠.

109
00:07:39,785 --> 00:07:43,185
백미러의 음성 인식 시스템이 아닐 뿐이죠.

110
00:07:43,185 --> 00:07:47,164
여기에 당신이 당신의 훈련 데이터를 개발과 테스트 세트로 나눌 수 있는 방법에 있습니다.

111
00:07:47,164 --> 00:07:50,780
훈련을 위해, 당신이 갖고 있는 일을

112
00:07:50,780 --> 00:07:54,180
통해 축적해온 모든 음성 데이터들, 예를 들어

113
00:07:54,180 --> 00:07:59,060
몇년동안 구매한 다양한 음성인식 데이터 공급 업체들을 취할 수 있습니다.

114
00:07:59,060 --> 00:08:03,410
그리고 오늘날 당신은 실제로 x, y쌍으로 된 공급업체의 데이터를 구매할 수 있습니다.

115
00:08:03,410 --> 00:08:06,130
x는 오디오 영상이고 y는 기록입니다.

116
00:08:06,130 --> 00:08:10,832
혹은 어쩌면 당신은 스마트 음성 지원하는 스피커 스마트 스피커에 대해 관련된 일을 해봤을 수도 있죠. 그래서

117
00:08:10,832 --> 00:08:12,990
그에 관련된 데이터들을 갖고있을 수 있죠.

118
00:08:12,990 --> 00:08:17,040
어쩌면 당신은 키보드 음성지원이나 그 외의 것들에 관련된 일을 해봤을 수 있겠죠.

119
00:08:17,040 --> 00:08:21,515
이 논쟁을 위해서, 50만 개의

120
00:08:21,515 --> 00:08:25,330
음성이 있다고 합시다.

121
00:08:25,330 --> 00:08:30,078
개발 및 테스트 세트의 경우 실제로 음성인식된 백미러에서 사용된 것보다

122
00:08:30,078 --> 00:08:33,892
훨씬 더 작은 데이터 세트가 있습니다.

123
00:08:34,950 --> 00:08:38,316
사용자가 방향에 대한 질문 혹은

124
00:08:38,316 --> 00:08:41,590
다양한 장소의 방향을 찾으려고 시도하게 때문에

125
00:08:41,590 --> 00:08:46,560
이 데이터 세트에는 많은 데이터가 포함될 수 있습니다. 더 많은 거리 주소가 필요하겠죠?

126
00:08:46,560 --> 00:08:49,250
다음 주소로 이동할 수 있도록 도와 주십시오. 또는,

127
00:08:49,250 --> 00:08:51,980
이 주유소로 가는 길 좀 안내해 주세요.

128
00:08:51,980 --> 00:08:56,040
그래서 이 데이타의 분배는 왼쪽의 이것들과는 매우 다르다.

129
00:08:58,140 --> 00:09:01,780
하지만 이것이 당신이 관심을 가지는 진짜 데이터입니다.

130
00:09:01,780 --> 00:09:08,082
이것이 당신의 제품이 잘 작동되데하고, 강신의 개발과 테스트가 잘 되게 하는 것이니까요.

131
00:09:08,082 --> 00:09:12,868
이 예에서는 당신의 훈련 세트는

132
00:09:12,868 --> 00:09:16,960
왼쪽 500,000개의 발언과

133
00:09:16,960 --> 00:09:21,847
개발 및 테스트들을 저는 축약해서 D와 T라고 하겠습니다.

134
00:09:21,847 --> 00:09:26,380
이것들은 아마도 한 사람당 10,000 마디일 것입니다.

135
00:09:26,380 --> 00:09:31,064
그것은 실제 음성인식 백미러에서 따온 것 입니다.

136
00:09:31,064 --> 00:09:35,600
아니면, 당신이 20,000개의 모든 예를

137
00:09:35,600 --> 00:09:38,498
음성인식 백미러의 개발과 테스트세트에서

138
00:09:38,498 --> 00:09:42,470
넣을 필요가 없다고 생각하면, 그것의 반만 훈련 세트에 넣어도 됩니다.

139
00:09:43,730 --> 00:09:49,085
그럼 훈련 세트는 거기서 온 500명을 포함하여 백미러의 10,000건과

140
00:09:49,085 --> 00:09:55,662
510,000개의 의 발언이 가능하고

141
00:09:58,046 --> 00:10:04,500
그런 다음 개발 및 테스트 세트에서 각각 5,000건 정도 될 것 입니다

142
00:10:04,500 --> 00:10:09,934
그러니까 20,000번의 발언 중에서 아마 10k는 훈련 세트에 들어가서

143
00:10:09,934 --> 00:10:14,490
개발 세트에 5k 시험 세트에 5천개가 될 것 입니다.

144
00:10:14,490 --> 00:10:18,870
그리하여 이것은 또다른 합리적인

145
00:10:18,870 --> 00:10:20,360
데이터를 훈련, 개발, 테스트로 나누는 방법입니다.

146
00:10:20,360 --> 00:10:26,258
그리고 이것은 당신에게 훨씬 더 큰 500,000건이 넘는 음성 세트를 제공합니다.

147
00:10:26,258 --> 00:10:31,297
이는 단지 훈련 세트을 위해 음성 활성화 된 백미러 데이터를 사용하는 경우에만 해당됩니다.

148
00:10:31,297 --> 00:10:35,880
이 영상에서 당신은 언제 당신의

149
00:10:35,880 --> 00:10:38,790
훈련세트가 다른 개발과

150
00:10:38,790 --> 00:10:41,980
테스트를 허용하여 훨씬 더 많은

151
00:10:41,980 --> 00:10:45,990
그리고 이 예들에서 당신의 러닝 알고리즘이 더 잘 수행되게 할 것이고,

152
00:10:45,990 --> 00:10:50,100
당신이 갖을 수 있는 질문은 당신이 갖고있는 모든 데이터를 항상 다 쓸 것인가?일 것입니다.

153
00:10:50,100 --> 00:10:52,850
대답은 미묘합니다. 항상 그렇지는 않습니다.

154
00:10:52,850 --> 00:10:54,910
다음 비디오에서는 반대되는 예를 보겠습니다.
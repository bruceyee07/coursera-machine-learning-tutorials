Derin öğrenme algoritmaları, deneme verisine oldukça istek duymaktadır. Derin öğrenme algoritmaları genellikle test verisine yalnızca yeteri miktarda deneme verisi uygulayabildiğimizde en iyi çalışmaktadır. Bu durum pek çok takımda, bulabileceği her türlü veriyi almak ve yalnızca daha fazla deneme verisi elde etmek için onu deneme setinde göstermek ile sonuçlanmaktadır. Gelişim ve test verisi gibi, bu verinin bazısı ya da hatta bu verinin belki pek çoğu aynı dağılıma sahip olmasalar bile. Bu nedenle bir derin öğrenme çağında takımlar, gelişim ve test setlerinin dağılımlarından farklı bir dağılıma sahip veri üzerinde halen çok daha fazla deneme yapmaktadırlar. Deneme ve test verisinin dağılımları birbirinden farklı olduğunda bazı incelikler ve bazı en iyi uygulamalar vardır. Hadi inceleyelim. Diyelim ki kullanıcıların cep telefonlarından çekindiği fotoğrafları yükleyeceği bir mobil uygulama geliştiriyorsunuz ve kullanıcılarınızın mobil uygulamadan yükledikleri fotoğrafların kedi olup olmadığını tanımak istiyorsunuz. Bu durumda, iki veri kaynağı elde edebilirsiniz. Birisi, daha az profesyonelce çekimiş sağdaki gibi mobil uygulamadan gelen, amatör kullanıcılar tarafından çekildiği için belki daha fazla bulanık, sizin gerçekten dikkate aldığınız verinin dağılımdır. Diğer veri kaynağını elde etme yolu ise internetten arama yapmak ve bu örneğin anlaşılması için farz edelim ki; profesyonelce çerçevelenmiş, yüksek çözünürlükte ve profesyonelce çekilmiş pek çok kedi fotoğrafını sadece indirmektir. Mobil uygulamanız için çok fazla sayıda kullanıcılarınızın olmadığını varsayalım. Bu yüzden, mobil uygulamadan yüklenmiş 10,000 fotoğraf elde etmiş olabilirsiniz. Ancak, internetten arama yaparak çok fazla sayıda kedi fotoğrafları indirebilirsiniz. İnternetten indirerek 200,000 kedi fotoğrafı elde etmiş olabilirsiniz. Bu yüzden dikkate alacağınız şey; son adımınızda, fotoğrafların mobil uygulama dağılımının üzerinde iyi çalışıp çalışmadığıdır, değil mi? Çünkü en son adımda, kullanıcılarınız sağdaki gibi fotoğrafları yükleyecek ve sınıflayıcınızın bu fotoğraflar üzerinde iyi çalışmasına ihtiyaç duyacaksınız. Ancak şuan küçük bir ikileme düşebilirsiniz. Çünkü, göreceli olarak daha az, dağılımdan çekilmiş yalnızca 10,000 örnekli, bir veri setine sahip olabilirsiniz. Öte yandan, farklı bir dağılımdan çekilmiş daha fazla sayıda, daha büyük bir veri setine sahipsiniz. Sizin aslında istediğinizden daha farklı bir fotoğraf görüntüsü bulunmakta. Bu durum göreceli olarak az sayıda eğitim seti almanız ile sonuçlanacağı için sadece bu 10,000 fotoğrafı kullanmak istemezsiniz. Bu 200,000 fotoğrafı kullanmak yardımcı gibi görünür. Ancak, bu 200,000 fotoğrafın sizin tam olarak istediğiniz dağılımdan olmaması bir ikilemdir. Bu durumda ne yapabilirsiniz? Bir seçenek şu şekildedir. Yapacağınız ilk şey bu iki veri setinin her ikisini de birlikte ele almaktır. Bundan dolayı hali hazırda 210,000 fotoğrafınız olacaktır. Daha sonra, bu 210,000 fotoğrafı ele alabilir ve bu fotoğrafları eğitim, gelişim ve test setine rastgele olarak dağıtabilirsiniz. Farz edelim ki; gelişim ve test setlerinizin her birinde 2,500 örnek yer alacak olsun. Demek ki, 205,000 örnek eğitim setiniz olacaktır. Bu durumda, verinizi bu şekilde düzenlemenin bazı avantajları olduğu gibi ve dezavantajları da olacaktır. Eğitim, gelişim ve test setlerinizin hali hazırda aynı dağılıma sahip olacak olması avantajdır. Dolayısı ile, bu durum düzenlemeyi kolaylaştırmaktadır. Ancak dezavantajı ki bu büyük bir dezavantajdır; 2,500 örnekten oluşan gelişim veri setinize baktığınızda, asıl dikkate aldığınız olan fotoğrafların mobil uygulaması dağılımından ziyade, bunun büyük bir kısmının fotoğrafların internet sayfası dağılımından gelecek olmasıdır. Bunun sonucunda, web sayfasından gelen verinizin toplamı 200,000 olacaktır. Bu yüzden 200k olarak kısaltacağım. 210,000 üzerinden, ve 210k olarak yazacağım. Beklenildiği üzere bu 2,500 fotoğrafın sanırım 2,381 tanesi web sayfasından gelecektir. Bu beklenti üzerinedir, kesin sayı rastgele dağıtma işleminin nasıl olduğuna bağlı olarak değişecektir. Fakat ortalama olarak, yalnızca 119 fotoğraf mobil uygulama yüklemelerinden gelecektir. Bu yüzden gelişim setinizi ayarlamanın takımınızın nereye hedef olarak yöneleceğini söylediğini unutmayın Hedefinize yöneliş yönteminiz, aslında hiç istemediğiniz şey olan, zamanın büyük bir kısmını fotoğrafların internet sayfası dağılımı için optimize etmeye harcadığınızı söylüyorsunuz. Birinci seçeneğe karşı olmayı tavsiye ederim, çünkü bu takımınıza aslında dikkat etmeniz gereken şeyden ziyade verinin farklı bir dağılımını optimize etmek için gelişim setinde ayarlama yapmaktır. Bu yüzden bunu yapmak yerine, Takip eden diğer bir seçeneği ele almanızı tavsiye ederim. Eğitim seti, farzedelim ki halen 205,000 fotoğraf, Eğitim setini, internetten alınan tüm 200,000 fotoğraf olarak alırdım. Daha sonra, eğer istersen, telefon uygulamasından alınan 5,000 fotoğrafı da ekleyebilirsin. Sonrasında gelişim ve test setlerin için, Tahminimce, benim veri setlerimin büyüklüğü ölçeklendirmek için çekilmezler. Gelişim ve test setleriniz tüm telefon uygulaması fotoğrafları olabilir. Bu yüzden, eğitim veri seti internetten gelen 200,000 ve telefon uygulamasından gelen 5,0000 fotoğrafı. içerecektir. Gelişim seti, telefon uygulamasından gelen 2,500 ve test seti de telefon uygulamasından gelen 2,500 fotoğraf olacaktır. Bu şekilde verinizi eğitim, gelişim ve test olarak bölmenin avantajı, olmasını istediğiniz gibi hedefe yönelmiş olmanızdır. Takımınıza, gelişim setim gerçekte dikkat etmeniz gereken fotoğrafların dağılımı olan telefon uygulamasından yüklenen veriden oluşmaktadır, bu yüzden fotoğrafların telefon uygulaması üzerinde gerçekten iyi olan bir makine öğrenmesi yöntemi geliştirelim diyorsunuz. Tabi ki dezavantaj; hali hazırda eğitim veri setinizin dağılımı gelişim ve test setlerinin dağılımlarından farklıdır. Ancak, verinizi eğitim, gelişim ve test olarak bölmeniz uzun vadede daha iyi performans almanızı sağlar. Gelişim ve test setlerinin dağılımlarından farklı dağılıma sahip eğitim setleriniz ile baş etmeniz için daha sonra bazı spesifik teknikleri tartışacağız. Bir diğer örneğe birlikte bakalım. Farz edelim ki; yeni bir ürün markası geliştiriyorsunuz, bir araba için aktif konuşan bir dikiz aynası Bu Çin' de gerçek bir üründür. Diğer ülkelere gidiyor, ancak sen bu küçük şeyi orada yerine geçmesi için yeni bir dikiz aynası geliştirebilirsin, Bu sayede, dikiz aynası ile konuşabilirsin ve temel olarak, sevgili dikiz aynası, lütfen navigasyonel yönleri kullanarak en yakın benzin istasyonunu bulmama yardımcı olabilir misin diyebilirsiniz ve dikiz aynası gerekeni yapacaktır. Dolayısı ile, bu gerçek bir üründür, ve farz edelim ki sen bu ürünü kendi ülken için geliştirmeyi deneyeceksin. Bu durumda, bu ürün için bir ses tanıma sistemini eğitmede veriyi nasıl elde edeceksin? Uzun bir süredir ses tanıma üzerine çalışıyor olabilirsin, bu yüzden, yalnızca aktif konuşan bir dikiz aynasından gelmeyen diğer ses tanıma uygulamalarından çok sayıda veriye sahip olabilirsin. Eğitim, gelişim ve test setlerini işte nasıl bölebileceğin. Sahip olduğun, çeşitli ses tanıma verisi sağlayıcılarından yıllardır satın aldığın gibi diğer ses problemleri üzerinde çalışıyorken topladığın tüm ses verisini eğitim setin için ele alabilirsin. Aslında, x in bir ses klibi ve y nin bir transkript olduğu x, y çiftlerinin sağlayıcılarından bu gün veri satın alabilirsin. Ya da akıllı hoparlörler, akıllı ses aktif hoparlörler üzerine çalışıyor olabilirsin bu yüzden, bunlardan bazı verilerin olabilir. Ses ile aktif hale gelen klavyeler üzerine çalışıyor olabilirsin İşlenen konu bakımından, tüm bu kaynaklardan 500,000 sese sahip olabilirsin. Gelişim ve test setlerin için, aslında aktif konuşan bir dikiz aynasından gelen daha az sayıda veri setin olabilir. Çünkü kullanıcılar, navigasyonel sorguları için ya da çeşitli yerlere yönleri bulmak için soru sorarlar. Bu veri seti oldukça fazla cadde adresine sahip olabilir, değil mi? Lütfen, bu caddeye gitmeme yardımcı ol, ya da lütfen, bu benzin istasyonuna gitmeme yardımcı ol. Bundan dolayı, bu veri seti soldakinden oldukça farklı olacaktır. Ancak, bu gerçekte dikkate aldığın veridir, çünkü bu ürününü daha iyi yapmak için ihtiyacın olan şeydir, bu yüzden, bu senin gelişim ve test setin olarak ayarladığın veridir. Bunun üzerine, bu örnekte yaptığın şey, soldaki 500,000 sesi eğitim setin olarak ayarlamaktır. Daha sonra, D ve T olarak kısaltacağım gelişim ve test setlerin herbirinde 10,000 ses olabilir. Bunlar aktif konuşan dikiz aynasından alınmıştır. Ya da alternatif olarak, eğer tüm 20,000 örneğini aktif konuşan dikiz aynasından gelişim ve test setlerine koyma ihtiyacı duymuyorsan, bunun yarısını alıp eğitim setine koyabilirsin. Böylelikle sonrasında, eğitim setin tüm 500,000 tanesi eğitim setini ve 10,000 tanesi de dikiz aynasını içeren 510,000 ses olabilir. Daha sonra, gelişim ve test setlerinin her biri 5,000 olabilir. Öyleyse 20,000 sesin, 10k tanesi eğitim setine ve 5k tanesi gelişim setine ve 5,0000 tanesi de test setine ayrılabilir. Bu verini eğitim, gelişim ve test olarak bölmek için makul diğer bir çözüm olabilir. Daha sonra, eğitim setin için aktif konuşan dikiz aynası verisi kullandıysan. Bu sana, çok daha büyük eğitim seti, 500,000 sesten daha fazla, verir. Böylelikle bu videoda, daha fazla eğitim seti elde etmenizi sağlayan, gelişim ve test setlerinizden farklı dağılımlara sahip eğitim seti verisini hesaba katan birkaç örneği görmüş oldunuz. Bu örneklerde, öğrenme algoritmanızın daha iyi performans göstermesine neden olacaktır. Halen sormak isteyebileceğiniz bir soru, sahip olduğunuz tüm veriyi her zaman kullanmalı mısınız? olabilir. Yanıt zordur, her zaman yanıt evet değildir. Bir sonraki videodaki bir sayaç örneğine bakalım.
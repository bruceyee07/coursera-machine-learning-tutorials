만약 학습셋이 dev셋과 test 셋과는 다른 분포를 갖는다면 그리고 에러를 분석해보았을 때 데이터 불일치를 보인다면 무엇을 할수 있을까요? 이것에 대해서 시스템적인 해결책이 있고 시도 해 볼수 있는 것을 알아봅시다. 만약 교육 세트가 당신의 개발과 테스트 세트와 다른 분포에서 왔다면, 그리고 오류 분석을 통해 데이터 불일치 문제가 있다는 것을 알 수 있다면 어떻게 하시겠습니까? 여기엔 완전히 체계적인 해결책이 있습니다. 당신이 시도해 볼만한 것들을 한번 살펴 봅시다. 데이터 불일치가 큰 문제가 있는 경우엔, 제가 주로 하는 일은 수동 오류 분석을 수행하고 교육 세트와 개발과 테스트 세트의 차이점을 이해하려고 노력합니다. 테스트 세트가 과도하게 설치되지 않도록 하려면, 기술적으로 오류 분석을 하기위해 테스트 세트가 아닌 개발 세트만 수동으로 확인해야 합니다. 하지만 구체적인 예로 음성 작동 백 미러 응용 프로그램을 구축하고 있다면, 보시면 아시겠지만, 아니면 말로 하면 개발 세트가 교육 세트와 어떻게 다른지 확인하기 위해 시도할 개발 세트의 예를 들어보면, 예를 들어, 당신은 많은 개발 사례가 소음이 심하고 자동차 소음이 심하다는 점을 발견하게 될지도 모릅니다. 이것이 개발 세트가 교육 세트와 다른 하나의 방식입니다. 그리고 어쩌면 다른 범주의 오류도 발견될 수 있습니다. 예를 들어, 당신의 차 안에 있는 음성 작동 백 미러로 아마 가끔 주소 번호가 잘못 인식된 것을 발견한 적이 있을 것 입니다. 거리 주소를 찾기 위한 수많은 질문들이 있기 때문입니다. 따라서, 거리 번호를 바르게 정하는 것은 정말 중요합니다. 개발 세트 오류의 특성을 파악할 수 있다면 아니면 개발세트가 교육 세트와 어떻게 다른지와 얼마나 더 어려운지에 대한 특성을 파악할 수 있다면 당신은 후에 교육 데이터를 보다 유사하게 만들 수 있는 방법을 찾습니다. 또는 개발 및 테스트 세트와 유사한 데이터를 더 수집해 보십시오. 예를 들어, 뒤에서 들리는 자동차 소음이 가장 큰 오류 원인이라는 것을 알게 되면 당신이 취할 수 있는 하나의 방법은, 차량 내에서 잡음이 심한 데이터를 시뮬레이션할 수 있습니다. 다음 슬라이드에서 이 작업을 어떻게 하는지에 대해 좀 더 알아보겠습니다. 아니면 거리 번호를 알아차리기 힘들거나 아니면 당신은 고의적으로 가서 큰 목소리로 말하는 사람들의 데이터를 더 수집하고 당신의 교육 세트에 추가합니다. 자, 이 슬라이드에 여러분이 시도해 볼 수 있는 것들에 대한 대략적인 지침이 나와 있다는 것을 인지할 수 있습니다 이것은 체계적인 과정이 아니고 제 생각에는 당신이 발전을 이루기 위해 필요한 통찰력을 얻는다는 것이 보장되지 않는다고 생각합니다. 하지만, 저는 이 수동적 통찰은 함께 데이터가 더 비슷한 차원으로 종종 많은 문제들을 해결하는 데에 도움을 준다고 생각합니다. 따라서 교육 데이터를 개발 세트와 더 유사하게 만드는 것이 목표라면 당신이 할 수 있는 것은 무엇입니까? 당신이 사용할 수 있는 기술 중 하나는 인공 데이터 통합과 자동차 소음 문제를 해결하는 맥락에서 토론해봅시다. 그래서, 음성 인식 시스템을 만들기 위해서는, 아마 사실 당신이 들은 것 중에 차 안에서 들리는 소음과 고속 도로의 배경 소음 등에서 실제로 녹음된 음성은 많지 않을 것 입니다. 하지만, 이것을 합성할 방법이 있다는 것이 밝혀졌습니다. 당신이 차 배경 소음이 없는 다량의 깨끗한 오디오를 녹음했다고 가정합시다. 자, 여기 여러분이 여러분의 교육 세트에 가지고 있을지도 모를 동영상 한개가 있습니다. 그런데 이 문장은 AI에서 에서 Z까지 모든 알파벳을 포함하는 짧은 문장이기 때문에 테스할 때 쓰이는 문장입니다. 그래서 이 문장이 많이 보입니다. 하지만" 빠른 갈색 여우가 게으른 개를 뛰어넘는다"는 주어진 문장의 녹음을 고려해 볼 때, 당신은 이렇게 자동차 소음을 녹음할 수도 있습니다. 그러니까 차 안은 이렇게 소리가 나고 아무 말도 하지 않고 운전한다면 이 두개의 오디오 영상을 가지고 둘이 합친다면 당신은 그 후에 "빠른 갈색 여우가 게으른 개를 뛰어넘는다"는 문장을 합성할 수 있습니다. 만약 당신이 시끄러운 차안에서 그 말을 했다면 이렇게 들릴 것입니다. 이것은 상대적으로 간단한 음성 합성 예입니다. 실제로는 다음과 같은 다른 오디오 효과를 합성할 수 있습니다. 차 벽에서 튀어 나오는 듯한 당신의 목소리의 반향 같은 것이죠. 하지만 인공 데이터 합성을 통해 당신은 유사하게 들리는 데이터를 더 빨리 생성할 수 있을 것입니다. 차 안에서 기록이 되어 있어서 밖에 나가서 엄청난 양의 자료를 모을 필요 없습니다. 아마도 수천 또는 수만시간 차 안에 있는 데이터를 찾아야 합니다. 그래서, 만약 당신의 오류 분석이 당신이 하려고 노력해야 한다는 것을 보여 준다면 차 안에서 녹음된 것처럼 들리게 하고 이 방법이 이러한 유형의 데이터를 동기화하여 학습 알고리즘을 제공합니다. 여기서 한가지 주의할 점이 있습니다. 인공 데이터 합성, 즉 예를 들어, 10,000시간 동안 조용한 배경에 기록된 데이터가 있다고 가정해봅시다. 예를 들어, 자동차 소음이 한시간이면 된다고 합시다. 한가지 시도해 볼 만한 건 자동차 소음을 발생시키고 10,000번 반복합니다. 조용한 환경에서 녹음된이 10,000시간의 데이터에 추가하기 위해서죠. 그렇게 하면, 그 소리는 인간의 귀에 완벽하게 들릴 것 입니다. 하지만 기회는 있습니다. 학습 알고리즘이 차량 소음에 1시간 이상 걸릴 위험이 있습니다. 그리고, 특히, 만약 이것이 차 안에서 녹음할 수 있는 모든 소리이거나, 당신이 상상할 수 있는 모든 자동차 소음 배경들의 세트라면, 자동차 소음 배경이 한시간이면 이 공간의 아주 작은 부분 집합만 시뮬레이션할 수 있습니다. 이 공간의 매우 작은 하위 집합에서 합성할 수 있습니다. 그리고 인간의 귀에는 이 모든 소리는 괜찮습니다. 한 시간 동안의 여느 자동차 소음과 유사하게 인간의 귀에 들리기 때문입니다. 하지만 이 공간의 아주 작은 부분에서 데이터를 합성하고 있을 수도 있습니다. 그리고 신경망이 과도한 차 소음을 한시간 이상 감지했습니다. 자동차 소음 1만 시간을 저렴하게 수집하는 것이 현실적으로 가능할지 모르겠지만, 1만 시간의 자동차 소음를 반복할 필요가 없습니다. 1만 시간의 독특한 자동차 소음 때문에 깨끗한 배경에 대해 1만 시간의 독특한 오디오 녹음을 할 수 있습니다. 이것은 장담은 못하지만 가능합니다. 하지만 한시간이 아니라 만시간을 자동차 소음으로 러닝 알고리즘을 통해 더 나은 성과를 가져올 수 있습니다. 인공 데이터를 합성해야 하는 도전 과제는 인간의 귀에 있습니다. 당신의 귀에 들리는 한, 이 10,000시간 은 이 한시간과 같은 소리를 내고 있습니다. 어쩌면, 당신도 모르게 작은 하위 집합에서 매우 낮은 품질의 합성 데이터를 세트를 생성하게 될 것입니다. 여기 인공 데이터 통합의 또 다른 예가 있습니다. 만약에 당신이 무인 자동차를 만들어서 이렇게 생긴 차량들을 바운딩 박스에 둘러 놓으면 어떨까요? 많은 사람들이 논의해 온 한가지 아이디어는 왜 당신은 자동차의 이미지를 컴퓨터 그래픽을 사용해서 시뮬레이션해야 하는가? 그리고 사실, 여기에 컴퓨터 그래픽을 사용하여 만들어진 자동차들의 사진들이 두장 있습니다. 사실 이러한 그래픽 효과는 꽤 좋다고 생각합니다. 그리고 전 이런 사진들을 합성해서 당신은 자동차 감지를 위한 꽤 좋은 컴퓨터 비전 시스템을 교육시킬 수 있다고 생각합니다. 불행하게도 내가 이전 슬라이드에서 그린 사진은 이 설정에 다시 적용됩니다. 이건 모든 차의 세트일지도 모르고, 이 차들을 아주 작은 부품으로 만들면 인간의 눈으로 보면, 어쩌면 합성된 이미지가 좋아 보일지도 모릅니다. 하지만 현재 합성 중인 작은 하위 집합에 과도하게 맞출 수 있습니다. 특히, 많은 사람들이 독립적으로 키운 한 아이디어는, 당신이 좋은 컴퓨터 그래픽을 가진 자동차 비디오 게임을 찾았다면 그들로부터 이미지를 얻고 자동차의 거대한 데이터 세트를 얻습니다. 비디오 게임을 보면 비디오 게임이 단지 비디오 게임 안에 20개의 유일한 차를 가지고 있다면, 그러면 비디오 게임은 괜찮아 보인다. 비디오 게임을 하면서 돌아다니다가 20대의 다른 차들을 살펴보면 꽤 사실적인 시뮬레이션 같습니다. 하지만 이 세상에는 20개 이상의 독특한 자동차 디자인이 있습니다. 합성된 교육 세트 전체에 20대의 차만 있다면 그러면 신경망이 이 차 20대를 초과하게 될 것 입니다. 그런 건 쉽게 말하기 힘들지만, 이 사진들이 현실적으로 보일지라도, 가능한 모든 차들을 이렇게 아주 작은 부품으로 만들어 놨습니다. 요약하자면, 데이터 불일치 문제가 있다고 생각하시면, 오류 분석을 할 것을 권합니다. 아니면 교육 세트를 보는 것을 권하고, 이 수치를 시험해 보려면 개발 세트를 보세요 이 두 데이터 분포가 어떻게 다를 수 있는지에 대한 통찰력을 얻으려면 그럼 다른 방법을 찾아서 개발 세트와 약간 유사한 교육 데이터를 수집할 방법을 찾으세요. 우리가 얘기했던 방법 중 하나는 인공 데이터 합성입니다. 인공 데이터 합성도 효과가 있습니다. 음성 인식에서 저는 인공 데이터 합성이 이미 매우 좋은 음성 인식 시스템의 성능을 크게 향상시켰다는 것을 알았습니다. 그래서 그것은 잘 작동할 수 있습니다. 하지만 인공 데이터를 사용하고 있다면 단지 조심하고 당신이 실수를 했는지 아닌지를 명심하십시오. 가능한 모든 예제 공간의 작은 하위 집합에서만 데이터를 시뮬레이션하십시오. 바로 이것이 데이터 불일치를 해결하는 방법입니다. 다음으로, 여러분과 몇가지 생각을 나누고 싶습니다. 여러 유형의 데이터에서 동시에 학습하는 방법에 대해 설명합니다.
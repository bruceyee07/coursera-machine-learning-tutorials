1
00:00:00,000 --> 00:00:03,505
在前面的影片你看到了，
如何設定開發集和衡量指標

2
00:00:03,505 --> 00:00:07,170
就像是放一個靶，讓你的團隊去瞄準它

3
00:00:07,170 --> 00:00:09,330
不過有時計畫進行到一半

4
00:00:09,330 --> 00:00:12,040
你可能會發現你的靶擺錯位置了

5
00:00:12,040 --> 00:00:14,365
如果是這樣的話，你必須移動你的目標

6
00:00:14,365 --> 00:00:16,156
我們來看一個例子

7
00:00:16,156 --> 00:00:21,210
假設你在做一個貓貓分類器，可以找出很多貓的圖片

8
00:00:21,210 --> 00:00:26,850
給你的愛貓使用者看。
你想用的衡量指標是錯誤率

9
00:00:26,850 --> 00:00:29,655
如果演算法 A 和 B 分別有

10
00:00:29,655 --> 00:00:32,025
3% 的錯誤和 5% 的錯誤

11
00:00:32,025 --> 00:00:34,955
看起來似乎 A 方法比較好

12
00:00:34,955 --> 00:00:38,290
可是假設你自己試了這些方法，觀察後發現

13
00:00:38,290 --> 00:00:43,760
基於某種原因，方法 A 也顯示了很多色情圖片

14
00:00:43,760 --> 00:00:46,985
所以如果你就推出了 A，那使用者

15
00:00:46,985 --> 00:00:51,185
的確會看到比較多的貓貓圖片，因為辨認貓時只有 3% 錯誤率

16
00:00:51,185 --> 00:00:53,280
但是他也會給使用者

17
00:00:53,280 --> 00:00:57,465
一些色情圖片；你的公司完全沒辦法接受

18
00:00:57,465 --> 00:00:59,455
你的使用者也是。

19
00:00:59,455 --> 00:01:03,620
相較之下，方法 B 有 5% 的錯誤率

20
00:01:03,620 --> 00:01:08,720
所以會認出比較少的貓圖片，
但是並沒有色情圖片

21
00:01:08,720 --> 00:01:10,845
所以從公司角度來說

22
00:01:10,845 --> 00:01:13,530
也從使用者容忍程度來說

23
00:01:13,530 --> 00:01:15,920
方法 B 實際上比較好

24
00:01:15,920 --> 00:01:19,305
因為他不會給大家色情圖片。

25
00:01:19,305 --> 00:01:22,165
所以在這種情況，

26
00:01:22,165 --> 00:01:25,590
演算法 A 從指標來看表現比較好

27
00:01:25,590 --> 00:01:29,990
他只有 3% 錯誤，但是，其實它比較差

28
00:01:29,990 --> 00:01:33,150
在這個例子，以衡量的指標 + 開發集

29
00:01:33,150 --> 00:01:38,460
會傾向選擇方法 A，因為

30
00:01:38,460 --> 00:01:43,860
你看 A 的錯誤率比較低，這是你訂的指標

31
00:01:43,860 --> 00:01:51,010
不過你和使用者會比較喜歡 B，因為他不會讓色情圖片通過。

32
00:01:51,010 --> 00:01:52,780
因此在這種時候

33
00:01:52,780 --> 00:01:55,785
當你的衡量指標

34
00:01:55,785 --> 00:01:59,530
已經不能正確地把各種演算法排優劣

35
00:01:59,530 --> 00:02:04,020
在這例子，他會誤判 A 是比較好的演算法

36
00:02:04,020 --> 00:02:05,970
那麼，這就是叫你

37
00:02:05,970 --> 00:02:13,500
改變衡量的指標，
或者可能是開發集或測試集。

38
00:02:13,500 --> 00:02:16,840
以這個例子而言，
本來的錯誤率

39
00:02:16,840 --> 00:02:20,340
可以寫成這樣：m_dev 分之一

40
00:02:20,340 --> 00:02:23,870
(m_dev 是開發集的大小)

41
00:02:23,870 --> 00:02:30,091
i 從 1 到 m_dev 的某個加總

42
00:02:30,091 --> 00:02:37,190
也就是對第 i 筆資料的預測

43
00:02:37,190 --> 00:02:44,995
是否會和他真正的分類一樣

44
00:02:44,995 --> 00:02:50,390
— 這個意思是預測的值

45
00:02:50,390 --> 00:02:51,990
也就是 0 或 1

46
00:02:51,990 --> 00:02:54,795
而這個叫指示函數

47
00:02:54,795 --> 00:03:00,595
他會數出裡面那個條件為真的數目

48
00:03:00,595 --> 00:03:06,533
所以這個公式會數出被認錯的資料有多少。

49
00:03:06,533 --> 00:03:09,360
這個衡量指標的問題在於，

50
00:03:09,360 --> 00:03:13,957
他把色情和非色情的圖片一視同仁

51
00:03:13,957 --> 00:03:18,750
可是你所想要的，
是不要將色情圖片給錯認

52
00:03:18,750 --> 00:03:21,470
也就是把一張色情圖片誤認為貓

53
00:03:21,470 --> 00:03:24,605
所以不小心顯示給使用者

54
00:03:24,605 --> 00:03:31,727
讓他們措手不及，很不開心。

55
00:03:31,727 --> 00:03:38,590
所以一種改進這個指標的方法是，加一個權重

56
00:03:38,590 --> 00:03:48,385
我們稱之為 w(i)：如果 x(i) 不是色情

57
00:03:48,385 --> 00:03:53,950
那他就會等於 1；

58
00:03:53,950 --> 00:04:00,925
如果 x(i) 是色情圖片，那他會是 10 或更高的 100 之類的

59
00:04:00,925 --> 00:04:05,095
這樣的話，對那些色情圖片的資料

60
00:04:05,095 --> 00:04:09,220
你會給予很大的權重，
所以這邊錯誤的值會超高

61
00:04:09,220 --> 00:04:12,800
— 如果你的演算法

62
00:04:12,800 --> 00:04:16,931
誤把色情圖片認成貓。

63
00:04:16,931 --> 00:04:19,390
如果改成這樣

64
00:04:19,390 --> 00:04:25,355
正確辨認出色情圖片時，獎賞會是 10 倍

65
00:04:25,355 --> 00:04:27,465
要訂正這個正規常數的話

66
00:04:27,465 --> 00:04:30,743
理論上這要變成 w(i) 加起來分之一

67
00:04:30,743 --> 00:04:35,633
這樣整個值還是會在 0 和 1 之間

68
00:04:35,633 --> 00:04:40,630
這個加權的細節不是太重要；要實作這樣的加權

69
00:04:40,630 --> 00:04:43,690
你必須看過所有的開發和測試集

70
00:04:43,690 --> 00:04:47,415
把色情圖片標出來

71
00:04:47,415 --> 00:04:50,960
這樣你才能算出這個加權的函數

72
00:04:50,960 --> 00:04:53,095
總括來說，重點是

73
00:04:53,095 --> 00:04:56,965
如果你發現你的衡量指標

74
00:04:56,965 --> 00:05:01,405
並不能正確排出哪些演算法好或不好

75
00:05:01,405 --> 00:05:06,880
那就要考慮定義一個新的衡量指標。

76
00:05:06,880 --> 00:05:12,200
這邊只是其中一種可能的手法

77
00:05:12,200 --> 00:05:15,220
衡量指標的目的在於能精確地告訴你

78
00:05:15,220 --> 00:05:20,154
在你的應用中，兩個分類器的哪一個會比較好

79
00:05:20,154 --> 00:05:21,650
以現在這影片來說

80
00:05:21,650 --> 00:05:25,863
你不用太在意如何定義
新的誤差指標

81
00:05:25,863 --> 00:05:29,255
重點在於，如果你不滿意原本的衡量指標

82
00:05:29,255 --> 00:05:33,050
就不要執著在這個指標上

83
00:05:33,050 --> 00:05:36,260
而是去嘗試新的指標，你覺得比較能夠

84
00:05:36,260 --> 00:05:39,659
符合你的需求，能夠分辨何為較好的演算法。

85
00:05:39,659 --> 00:05:42,890
你可能發現到一件事：到目前為止我們只提到

86
00:05:42,890 --> 00:05:46,255
如何定義指標來衡量分類器

87
00:05:46,255 --> 00:05:50,450
也就是我們定義一個指標來幫助我們

88
00:05:50,450 --> 00:05:53,780
為分類器的優劣排序

89
00:05:53,780 --> 00:05:57,887
例如他們秀出色情圖片的多寡。

90
00:05:57,887 --> 00:06:01,505
實際上這是一個 orthogonalization (正交法) 的例子

91
00:06:01,505 --> 00:06:05,480
我認為你應該把一個機器學習的問題分解成若干步驟

92
00:06:05,480 --> 00:06:14,525
其中一步是，想辦法定義一個能
反映出你問題的衡量指標

93
00:06:14,525 --> 00:06:21,677
然後我才會另外花心思，
要怎麼在這個指標上做到好

94
00:06:21,677 --> 00:06:26,480
所以把這個任務想成
兩個不同的步驟

95
00:06:26,480 --> 00:06:28,145
如果用射靶來比喻

96
00:06:28,145 --> 00:06:32,890
第一步是放好標靶

97
00:06:32,890 --> 00:06:37,777
定義好你想瞄準什麼，
這是完全獨立的一個步驟

98
00:06:37,777 --> 00:06:40,340
想成這是一個旋鈕

99
00:06:40,340 --> 00:06:44,005
用來調整要怎麼定好目標。
而另一個獨立的問題，

100
00:06:44,005 --> 00:06:48,854
想成另一個旋鈕，
調整該怎麼達到這個目標

101
00:06:48,854 --> 00:06:58,888
要怎麼精確瞄準、射向目標。

102
00:06:58,888 --> 00:07:06,200
第一步定義衡量指標，
再來做其他事

103
00:07:06,200 --> 00:07:08,140
以射向目標來說

104
00:07:08,140 --> 00:07:11,910
或許你的學習演算法會對
這種成本函數做最佳化

105
00:07:11,910 --> 00:07:21,907
你想要訓練資料的某種損失最小

106
00:07:21,907 --> 00:07:25,880
那麼，一種可能的手法是

107
00:07:25,880 --> 00:07:28,160
將權重也混入這式子內

108
00:07:28,160 --> 00:07:31,070
也可能需要改一下這個正規化的常數

109
00:07:31,070 --> 00:07:34,240
變成 w(i) 總和分之一

110
00:07:34,240 --> 00:07:36,990
再次強調，詳細要怎麼去定義 J 不重要

111
00:07:36,990 --> 00:07:42,050
重點是，照著 orthogonalization 的思想，

112
00:07:42,050 --> 00:07:48,456
把放置目標當成一個步驟，
射向目標是另一個步驟，分開進行

113
00:07:48,456 --> 00:07:49,975
換句話說，我鼓勵你這樣做：

114
00:07:49,975 --> 00:07:55,225
把定義衡量指標是一個步驟，定義好了以後

115
00:07:55,225 --> 00:07:57,640
再來思考要怎麼在這指標上做好

116
00:07:57,640 --> 00:08:00,745
有可能是改變你的
神經網路最佳化的成本函數

117
00:08:00,745 --> 00:08:03,675
在繼續之前，讓我們看另一個例子。

118
00:08:03,675 --> 00:08:08,135
假設你有兩個貓貓分類器 A 和 B

119
00:08:08,135 --> 00:08:13,300
在開發資料上分別有 3% 和 5% 的錯誤率

120
00:08:13,300 --> 00:08:17,725
甚至在你的測試資料上也一樣
 — 假設是網路上下載的圖片

121
00:08:17,725 --> 00:08:19,615
是高品質、構圖佳的圖片

122
00:08:19,615 --> 00:08:21,760
但是當你推出產品

123
00:08:21,760 --> 00:08:24,895
你可能發現方法 B 表現得比較好

124
00:08:24,895 --> 00:08:27,865
即使在開發集表現好的是 A

125
00:08:27,865 --> 00:08:30,820
然後你發覺，你一直在拿網路上

126
00:08:30,820 --> 00:08:33,640
那種非常高品質的圖片來訓練

127
00:08:33,640 --> 00:08:36,985
但是當你把模型放到手機的 APP

128
00:08:36,985 --> 00:08:39,620
使用者會上傳各式各樣的照片：構圖不佳、

129
00:08:39,620 --> 00:08:42,835
貓只有一半、表情很奇特好笑、

130
00:08:42,835 --> 00:08:44,778
照片可能很模糊

131
00:08:44,778 --> 00:08:51,745
當你的演算法受到考驗，
你發現其實方法 B 比較好

132
00:08:51,745 --> 00:08:58,755
那麼，這是另一個案例，
你的指標和開發/測試集失敗了

133
00:08:58,755 --> 00:09:01,140
問題在於，你拿來評估的

134
00:09:01,140 --> 00:09:04,265
開發和測試資料是非常優、高畫質

135
00:09:04,265 --> 00:09:06,830
構圖佳的圖片。可是你的使用者

136
00:09:06,830 --> 00:09:09,750
關心的是你能否在他們的圖片上做得好

137
00:09:09,750 --> 00:09:15,935
那可能是業餘的、模糊的、構圖不好的

138
00:09:15,935 --> 00:09:17,655
所以準則是：

139
00:09:17,655 --> 00:09:20,030
如果你根據你的衡量指標

140
00:09:20,030 --> 00:09:23,455
在你目前的開發/測試資料做得好

141
00:09:23,455 --> 00:09:27,845
如果這樣子並無法讓你真正的應用程式表現好

142
00:09:27,845 --> 00:09:32,695
那麼，就改變你的指標和開發/測試資料

143
00:09:32,695 --> 00:09:38,490
也就是說，例如你發現
你的開發和測試資料是高畫質的圖片

144
00:09:38,490 --> 00:09:41,960
但是拿這種開發/測試集評估

145
00:09:41,960 --> 00:09:45,915
並無法預測你的應用在真實世界表現如何

146
00:09:45,915 --> 00:09:47,300
因為你的 APP 要處理低畫質的照片

147
00:09:47,300 --> 00:09:51,335
如果這樣，就該改變你的開發/測試資料

148
00:09:51,335 --> 00:09:56,875
讓他們能好好反映出
你實際想做好的資料類型

149
00:09:56,875 --> 00:10:00,560
總之，如果你用來做評估的指標和資料

150
00:10:00,560 --> 00:10:04,905
並不能讓你把想做的事做好的話

151
00:10:04,905 --> 00:10:07,820
那就改變你的指標、開發/測試資料

152
00:10:07,820 --> 00:10:11,206
讓他們更能代表你想做好的事

153
00:10:11,206 --> 00:10:14,690
有了評估的指標和開發資料，就能讓你

154
00:10:14,690 --> 00:10:18,685
更快在演算法 A 和 B 之間作取捨

155
00:10:18,685 --> 00:10:22,485
讓你們能很快地不斷進行實驗

156
00:10:22,485 --> 00:10:24,110
因此，我的建議是

157
00:10:24,110 --> 00:10:28,220
就算你無法定義一個
很完美的指標和開發集也沒關係

158
00:10:28,220 --> 00:10:32,780
只要先快快設定一下，
用這個來帶動你們的步調

159
00:10:32,780 --> 00:10:36,060
如果之後你發現這個指標/資料並不好

160
00:10:36,060 --> 00:10:39,675
你有更好的主意，
就馬上改變他，完全沒問題

161
00:10:39,675 --> 00:10:42,230
不過對大多數人，我建議千萬不要

162
00:10:42,230 --> 00:10:45,800
太久沒有衡量指標和開發資料

163
00:10:45,800 --> 00:10:48,500
因為這會減緩

164
00:10:48,500 --> 00:10:52,750
你們持續改進演算法的進度

165
00:10:52,750 --> 00:10:58,795
那麼，這些就是關於
何時要改變衡量指標和開發/測試集

166
00:10:58,795 --> 00:11:02,480
我希望這些準則能幫助你的團隊來

167
00:11:02,480 --> 00:11:07,370
設定明確的目標，讓你們能不斷地改進成效
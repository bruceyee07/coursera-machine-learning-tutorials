Bir geliştirme kümesi ve değerlendirme ölçevi oluşturmanın bir nevi takımınız için bir yer hedeflemek olduğunu gördünüz Ama bazen bir projenin bir noktasında, hedefinizi yanlış yere koyduğunuzu fark edebilirsiniz. Bu durumda hedefinizin yerini değiştirmelisiniz. Gelin bir örnekle bunu inceleyelim. Kedi seven kullanıcılara gösterilmek üzere çok sayıda kedi fotoğrafı bulmayı denemek için bir kedi sınıflandırıcısı hazırladığınızı ve kullanmaya karar verdiğiniz ölçevin sınıflandırma hatası olduğunu varsayalım. A ve B algoritmaları sırasıyla yüzde 3 hata ve yüzde 5 hataya sahipler Öyle görünüyor ki algoritma A daha iyi çalışıyor Bu algoritmaları denediğinizi varsayalım, bu algoritmalara bakıyorsunuz ve bir şekilde Algoritma A'nın bir çok pornografik görüntüye izin verdiğini görüyorsunuz. Eğer Algoritma A'yı kaydırırsanız, kullanıcılar daha fazla kedi görüntüsü görecektir, çünkü yüzde 3'lük bir hata göreceksiniz ve kedileri tanımlayabileceksiniz. Ancak, aynı zamanda, hem şirketiniz hem de kullanıcılarınız için kabul edilmesi mümkün olmayan bir durum olan bazı pornografik görüntüleri de kullanıcılara gösterecektir. Aksine, Algoritma B yüzde 5 hataya sahiptir, bu yüzden daha az görüntü sınıflandırır, ancak pornografik görüntüleri içermemektedir. Bu nedenle, hem şirketinizin açısından hem de kullanıcı kabulü açısından, herhangi bir pornografik görüntüye izin vermediği için Algoritma B aslında çok daha iyi bir algoritmadır. Yani, bu örnekten anladığımız şey, Algoritma A'nın değerlendirme ölçevi hususunda daha iyi bir performans gösterdiğidir. Yüzde 3 hata değerine sahip olmasına rağmen aslında daha kötü bir algoritma. Değerlendirme ölçevi ve geliştirme kümesi Algoritma A'yı tercih ediyorlar çünkü bir nevi diyorlar ki: Bakın, kullandığınız ölçev olan algoritma A daha düşük bir hataya sahiptir ancak siz ve kullanıcılarınız, pornografik görüntülere izin vermediği için Algoritma B'yi tercih ediyorsunuz. Yani böyle bir durumda, değerlendirme ölçeviniz algoritmalar arasındaki sıralanmış tercihleri artık doğru bir şekilde dahil etmiyorsa -ki bu durumda Algoritma A'nın daha iyi bir algoritma olduğu hakkında yanlış tahminde bulunuyor- o zaman bu, değerlendirme ölçevinizi belki de geliştirme kümenizi veya sınama kümenizi değiştirmeniz gerektiğine dair bir işarettir. Bu durumda, kullandığınız yanlış sınıflandırma hatası metriği şu şekilde yazılabilir: 1 bölü m_dev "m_dev" geliştirme kümenizdeki örneklerin sayısıdır toplam i=1'den m_dev'e kadar Bu geliştirme kümesindeki örneklerin sayısı, geliştirme kümenizdeki örnek i'nin tahmininin, tahmini değerini belirtmek için kullandıkları notasyon olan "asıl etiket" i'ye eşit olup olmadığının göstergesidir. Evet, bunlar sıfır. Bu bir fonksiyon notasyonu. bu fonksiyon parantez içinin doğru olduğu örneklerin sayısını sayar. Yani bu formül sadece yanlış sınıflandırılmış örneklerin sayısını hesaplar. Bu değerlendirme ölçevindeki sorun, pornografik ve pornografik olmayan görüntüleri eşit şekilde ele almalarıdır. Ancak siz, sınıflandırıcınızın pornografik görüntüleri yanlış etiketlemesini istemiyorsunuz. Örneğin, kedi görüntüsündeki pornografik bir görüntünün kuşkulanılmayan kullanıcıya gösterilmesi durumunda, beklenmedik bir şekilde porno gösterilmesinden dolayı rahatsızlık duyarsınız. Bu değerlendirme ölçevini değiştirmenin bir yolu şu olabilir. Eğer buraya ağırlık terimini eklerseniz, -ki biz buna w^(i) diyoruz- x^(i) porno değilse, w^(i) 1'e, x^(i) porno ise w^(i) belki 10 ya da belki de 100 gibi büyük bir sayıya eşit olacak. Bu şekilde pornografik olan örneklere çok daha büyük bir ağırlık değeri atamış oluyorsunuz, böylece algoritma bir pornografik görüntüyü bir kedi görüntüsü olarak sınıflandırırken bir hata yaparsa hata terimi çok daha fazla artar. Bu örnekte, pornografik görüntüleri doğru şekilde sınıflandırmak için 10 kat büyüklükte ağırlık değeri verin. Bu normalizasyon sabitini istiyorsanız, -teknik olarak bu 1 bölü w^(i)'lerin toplamına eşittir- bu durumda bu hata hala sıfır ile bir arasında olacaktır. Bu ağırlık değeri atamanın detayı pek de önemli değil, ancak bu değeri atamayı gerçekleştirmek için, geliştirme ve sınama kümelerinizi incelemeniz, ve bu geliştirme ve sınama kümelerindeki pornografik görüntüleri etiketlemeniz gerekir. böylece bu ağırlık atama fonksiyonunu uygulamaya koyabilirsiniz. Altı çizilmesi gereken mesele şu ki: Değerlendirme ölçevinin, aslında daha iyi bir algoritma için doğru sıralama tercihlerini vermediğini tespit ederseniz, o zaman yeni bir değerlendirme ölçevi tanımlamanın zamanı gelmiştir diye düşünmek gerekir. Ve bu, bir değerlendirme ölçevi tanımlayabilmenizin sadece bir yolu. Değerlendirme ölçütünün amacı, iki sınıflandırıcı verildiğinde, uygulamanız için hangisinin daha iyi olduğunu size doğru bir şekilde bildirmektir. Şimdilik bu video boyunca, yeni bir hata ölçevini nasıl tanımladığımızın ayrıntıları konusunda düşünmenize gerek yok. Önemli olan nokta şu ki, eğer eski hata ölçevinizden memnun değilseniz, memnun olmadığınız bir hata ölçeviyle devam etmeye çalışmayın. Bunun yerine, daha iyi bir algoritmanın ne olduğu açısından tercihlerinizi daha iyi gösterdiğini düşündüğünüz yeni bir hata ölçevi tanımlamaya çalışın. Fark edeceğiniz üzere, şimdiye kadar yalnızca sınıflandırıcıları değerlendirmek için bir ölçevi nasıl tanımlayacağımız hakkında konuştuk. Yani, pornografi akışı açısından sıralama sınıflandırıcılarını, farklı seviyelerde performans gösterdiklerinde daha iyi sıralamamıza yardımcı olan bir değerlendirme ölçevi belirledik. Bu aslında bir makine öğrenimi problemini ele alırken problemi önce farklı adımlara bölmenizi düşündüğüm bir ortogonalizasyon örneğidir. Birinci adım, ne yapmak istediğinizi gösteren bir ölçevi tanımlamak olacaktır. ve bu ölçev üzerinde nasıl daha iyi çalışılacağına dair olan meseleyi ayrı olarak ele alacağım. Bu nedenle, makine öğrenimi görevini iki farklı adım olarak düşünün. Hedef benzetmeyi kullanmak için, ilk adım hedefi yerleştirmek olacaktır. Hedeflemek istediğiniz yeri tanımlayın, daha sonra tamamen ayrı bir adım olarak-ki siz bunu ayarlayabilirsiniz- tamamen ayrı bir sorun olarak hedefi nasıl yerleştireceğinizi belirleyin. Bunu, bu algoritmada nasıl iyi çalışılacağını, doğru bir şekilde nasıl hedef koyulacağını ve hedefin tam 12'den nasıl vurulacağını belirlemek için ayrı bir adım olarak düşünün. Ölçevi tanımlamak ilk yapmanız gerekendir ve başka bir şeyi ikinci adımınızda yaparsınız. Hedefe ulaşma noktasında, belki de öğrenme algoritmanız, eğitim kümenizde bazı kayıpları en aza indirdiğiniz bunun gibi bazı maliyet fonksiyonlarını optimize eder. Bu durumda yapabileceğiniz şeylerden biri, bu ağırlıkları birleştirmeniz için bunu değiştirmeniz gerektiğidir. ve belki bu normalleştirme sabitini de değiştirmeniz gerekebilir. Bu da sadece 1 bölü w^(i)'lerin toplamıdır. Yine, J'yi nasıl tanımladığınızın detayları önemli değil. Ancak asıl nokta, -ortogonalizasyon felsefesi ile- hedefi belirlemenin bir adım, hedefe ulaşmanın ve ona nişan almanın ayrı atmanız gereken başka bir adım olduğunu bilmeniz. Başka bir deyişle, ölçevi ilk adım olarak tanımlamanızı ve yalnızca ölçevi tanımladıktan sonra, sinir ağınızın optimize ettiği J maliyet fonksiyonunu değiştirebilecek ölçevin nasıl iyi çalışacağını anlamanızı öneririm. Devam etmeden önce, sadece bir örneğe daha bakalım. İki kedi sınıflandırıcılarınız olan A ve B'nin geliştirme kümenizde değerlendirildiği üzere sırasıyla yüzde 3 ve yüzde 5 hataları olduğunu varsayalım. Ya da belki internetten indirilmiş, yüksek kaliteli, iyi çerçevelenmiş görüntüleri içeren sınama kümenizde. Algoritma ürününüzü etkin biçimde kullandığınızda B algoritmasının aslında daha iyi performans gösterdiğini sansanız da geliştirme kümenizde A daha iyi çalışıyor. Ve siz internetten indirilmiş, çok iyi, yüksek kaliteli görüntüler üzerinde çalışmaya alıştığınızı farkediyorsunuz, ancak bunları mobil uygulamaya aktardığınız zaman, kullanıcılar her türlü resmi yüklüyorlar, çok daha az çerçeveli, kedinin sadece bir kısmının göründüğü, komik yüz ifadelerinin olduğu, bazen çok bulanık görüntüler. ve algoritmalarınızı test ettiğinizde, Algoritma B'nin aslında daha iyi olduğunu görürsünüz. Dolayısıyla bu, ölçevinizin ve geliştirme-sınama kümelerinizin işe yaramadığını gösteren bir başka örnek. Mesele şu ki, siz geliştirme ve sınama kümeleriniz üzerinde çok güzel, yüksek çözünürlüklü, iyi çerçeveli görüntüleri değerlendiriyorsunuz. Ancak, kullanıcılarınızın gerçekten önemsedikleri şey, yükledikleri pek profesyonel olmayan, bulanık ve daha az çerçeveli resimlerde dahi iyi performans sergileyebiliyor olmanız. yükledikleri pek profesyonel olmayan, bulanık ve daha az çerçeveli resimlerde dahi iyi performans sergileyebiliyor olmanız. Dolayısıyla kuralınız, ölçevinizde ve geçerli geliştirme kümelerinizde veya geliştirme ve sınama kümelerinizin dağılımında iyi performans göstermesine rağmen sizin için asıl önemli olan uygulamada iyi performans göstermiyorsa, ölçevinizi ve geliştirme-sınama kümelerinizi değiştirmek olmalıdır. Başka bir deyişle, geliştirme-sınama kümenizin bu çok yüksek kaliteli görüntülere sahip olduğunu, ancak bu geliştirme-sınama kümesinde yapılan değerlendirmenin uygulamanızın gerçekte ne kadar iyi performans gösterdiğine dair öngörüde bulunamadığını farkederseniz, -çünkü uygulamanızın daha düşük kaliteli resimlerle uğraşması gerekiyor- o zaman geliştirme-sınama kümenizi değiştirmenin tam zamanıdır, böylece verileriniz iyi bir şekilde çalışmasını istediğiniz veri türünü daha iyi yansıtmış olacaktır. Ancak genel takip edeceğiniz yol şu olmalı: Şu anki ölçeviniz ve üzerinde değerlendirme yaptığınız veriler, sizin asıl önem verdiğiniz şeyle uyumlu bir şekilde çalışmıyorsa, daha iyi bir performans elde etmeniz açısından algoritmanıza gerekli gördüğünüz şeyi etkin kılmak için ölçevlerinizi ve/veya geliştirme/sınama kümenizi değiştirin. Bir değerlendirme ölçevine ve geliştirme kümesine sahip olmanız, Algoritma A veya Algoritma B'den hangisinin daha iyi olduğu sonucuna çok daha hızlı bir şekilde varmanızı sağlar. Bu, siz ve ekibinizin işlemi ne kadar hızlı bir şekilde tekrarlayabileceğinizi hızlandırıyor. Benim tavsiyem, her ne kadar mükemmel bir değerlendirme ölçevi ve geliştirme kümesi tanımlayamasanız bile, sadece bir şeyleri hızlı bir şekilde kurun ve bunu ekibinizin tekrarlama hızını arttırmak için kullanın. Ve eğer sürecin ilerleyen zamanlarında, bunun pek de iyi olmadığına karar verirseniz, daha iyi bir fikriniz varsa, bunu hemen o zaman değiştirin, kesinlikle bunda bir sakınca yok. Ama çoğu ekip için önerdiğim şey, herhangi bir değerlendirme ölçevi ve geliştirme kümesi mevcut olmadan çok uzun bir süre devam etmenizdir çünkü bunlar, ekibinizin tekrarının ve algoritmanızı geliştirmesinin verimliliğini azaltabilirler. Yani bu, değerlendirme ölçevinizi ve/veya geliştirme ve sınama kümelerini ne zaman değiştireceğinizi haber veriyor. Umarım bu kılavuz kurallar; tüm ekibinizin, performansı iyileştirmek adına verimli bir şekilde tekrarlayabileceğiniz, iyi tanımlanmış bir hedefe sahip olmasını sağlamanıza yardımcı olur.
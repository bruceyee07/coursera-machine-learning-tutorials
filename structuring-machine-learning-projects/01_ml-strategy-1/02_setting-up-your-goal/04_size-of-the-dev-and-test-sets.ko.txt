이전 비디오에선, dev set와 테스트 세트가 같은 분포도에서 와야 한다는 것을 배웠는데요. 그렇다면 길이는 얼마 정도면 될까요? dev 와 테스트 세트를 설정하는 가이드라인이 딥러닝 시대에 변화되어 가고 있습니다. 선진유형을 한번 보도록 하겠습니다. 경험에 입각한 규칙을 들어보셨을 텐데요, 머신러닝에서는 가지고 있는 데이터를 모두 사용하여 트레이닝세트와 테스트 세트에 각각 70 대 30으로 나누는 것입니다. 트레이닝 dev와 테스트 세트일 설정해야 하는 경우, 트레이닝에 60%, dev에 20%, 그리고 테스트에 20% 사용하는 것입니다. 머신러닝 초기에는 이것이 합리적인 편이였는데, 특히, 데이터세트 크기가 그리 크지 않았을 때 말이죠. 그래서 만약 총 100개의 예시가 있었다고 하면 70대 30 또는 60대20대20 과 같은 경험에 의거한 규칙이 합리적이었을 것입니다. 만약 1000개의 예시가 있었다거나, 만개의 예시가 있었거나 하는 경우에는 합리적인 비율이 아니라고 보기도 힘들겠죠. 하지만 최근 머신러닝 시대에서는 훨씬 더 큰 데이터와 세트 크기에 익숙해져 있습니다. 그러므로 백만 개의 트레이닝 샘플이 있다고 가정해봅시다. 이런 경우에는 98%를 트레이닝 세트로 설정하고 1%는 dev, 나머지 1%는 테스트로 분배하는 것이 합리적일 수 있습니다. 그리고 dev와 테스트 세트를 줄이기 위해 DNT를 쓸 때도 말이죠. 만약 백만 개의 사례가 있다고 하면 그것의 1%는 10,000개의 사례입니다, 이것은 dev와 테스트 세트로는 충분한 양입니다. 그래서, 최근 데이터세트의 양이 훨씬 더 큰 딥러닝 세대에서는 데이터나 dev set, 그리고 테스트 세트에 20% 또는 30% 미만으로 구성하는 것이 합리적인 편이라고 볼 수 있습니다. 딥러닝의 알고리즘 또한 데이터를 필요로 하기 때문에, 큰 데이터 세트를 보유하고 있는 것에 대한 문제점이 상당부분 트레이닝 세트로 이전됩니다. 그렇다면 테스트 세트는 어떨까요? 테스트 세트의 목적은 시스템 개발을 마친 이후로는, 테스트 세트가 마지막 시스템이 얼마나 좋은지 평가하는데 도움을 줍니다. 가이드라인은 테스트 세트를 적당히 크게 하여 전반적인 시스템의 성능의 컨피던스 레벨이 높을 수 있도록 하는 것입니다. 그렇기 때문에 마지막 최후 시스템이 얼마나 잘 작동하는지 매우 자세히 알아야 하는 것이 아니라고 하면 수백만 개의 example이 필요치 않을 것입니다. 또한 여러분의 어플이 만개의 example을 통해 십만 개의 성능을 찾는 것에 정확성이 있는 결과를 알려준다고 하면 그것으로 충분할 수 있습니다. 이것은 예를 들어, 전체 데이터의 30%도 못 미치는 수치인데요 물론 보유하고 있는 데이터에 따라 그 수치는 약간씩 다를 수 있습니다. 특정 어플에서는, 마지막 시스템의 전반적인 성능에 대한 높은 신뢰수준이 필요하지 않을 수 있습니다. 필요한 것은 트레이닝과 dev set가 전부일수도 있습니다. 제가 생각하기엔 테스트 세트가 없는 것도 괜찮을 수 있습니다. 실제로, 어떤 일이 벌어졌냐 면, 사람들이 train test split을 이용하는 것을 이야기했었는데 실제로는 테스트 세트를 계속 반복하고 있었습니다. 그래서 테스트 세트보다는 테스트 세트 없이 train dev split만 있었습니다. 이 세트에 만약 정말로 튜닝을 한다면, 이 dev set와 테스트 세트에 말이죠, dev set를 부르는 것이 더 나은 것일 수도 있습니다. 머신러닝의 역사를 바탕으로는 모든 사람이 청렴하게 기록하지는 않았는데요, dev set를 부르는 것에 대해서 말이죠. 실제로 테스트 세트로 다루어져야 하는 경우에도요. 하지만 여러분이 오로지 트레인 시킬 데이터만 관심이 있는 경우, 튜닝할 데이터만 필요로 하는 경우, 그리고 마지막 시스템을 흔들거나 바꿀 경우에는 얼마나 잘 작동했는지 걱정하지 않고 싶은 경우 그냥 train dev set라고 부르는 것이 괜찮을 것 같습니다. 이렇게 하면 테스트 세트가 없다는 것을 인정하는 것이니까요. 흔한 일은 아닌가요? 시스템을 구축할 때 테스트 세트를 설치하지 않는 것은 절대 추천하지 않습니다. 저는 개인적으로 테스트 세트를 따로 두는 것이 안심이 된다고 생각하는데요. 변형 이전에 어떻게 했는지 공정한 평가 수치를 받을 수 있는데요 만약 아주 큰 dev set를 가지고 있어서 dev set를 심하게 overfit하지 않을 것이라 생각되면 train dev set를 갖는 것이 합리적인 방법이 아니라고 하기 어렵습니다. 물론 제가 일반적으로 추천하는 것은 아니지만요. 요약하자면, 빅데이터 시대에서 오래 전의 70대30 비율의 경험규칙은 더 이상 적용되지 않는 것 같습니다. 그리고 트레이닝에는 더 많은 데이터를 사용하고 dev와 테스트에는 더 적은 데이터를 사용하는 트렌드가 있었습니다. 특히 더 큰 데이터를 다룰 때 말이죠. 결함 기반 규칙은 dev set를 목적에 맞는 크기로 설정하는 것인데요, 여러 아이디어를 평가할 수 있도록 그리고, AOP에서 잘 픽업되도록 하는 것입니다. 테스트 세트의 목적은 최종 비용을 평가하는 데 도움이 됩니다. 단순히 이 목적에 맞게 적당한 크기로 테스트 세트를 설정하면 됩니다. 이렇게 하는 것은, 총 데이터의 30% 미만일 수 있습니다. 이제 여러분이 딥러닝의 시대에서 dev와 테스트 세트를 설정하는데 어느 정도의 가이드라인이 생기셨길 바랍니다. 가끔씩은, 머신러닝 문제를 해결하는 도중에, 평가 매트릭을 바꾸고 싶을 수도 있습니다. 아니면 dev와 테스트 세트를 바꾸고 싶을 수 있습니다. 언제 이렇게 바꾸고 싶을지 다음에 이야기해보도록 하겠습니다.
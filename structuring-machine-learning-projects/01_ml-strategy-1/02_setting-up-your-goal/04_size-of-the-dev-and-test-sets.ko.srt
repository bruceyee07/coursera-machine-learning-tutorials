1
00:00:00,000 --> 00:00:01,370
이전 비디오에선,

2
00:00:01,370 --> 00:00:05,445
dev set와 테스트 세트가 같은 분포도에서 와야 한다는 것을 배웠는데요.

3
00:00:05,445 --> 00:00:07,370
그렇다면 길이는 얼마 정도면 될까요?

4
00:00:07,370 --> 00:00:08,780
dev 와 테스트 세트를 설정하는 가이드라인이

5
00:00:08,780 --> 00:00:11,955
딥러닝 시대에 변화되어 가고 있습니다.

6
00:00:11,955 --> 00:00:14,645
선진유형을 한번 보도록 하겠습니다.

7
00:00:14,645 --> 00:00:17,870
경험에 입각한 규칙을 들어보셨을 텐데요,

8
00:00:17,870 --> 00:00:20,489
머신러닝에서는 가지고 있는 데이터를 모두 사용하여

9
00:00:20,489 --> 00:00:26,495
트레이닝세트와 테스트 세트에 각각 70 대 30으로 나누는 것입니다.

10
00:00:26,495 --> 00:00:30,800
트레이닝 dev와 테스트 세트일 설정해야 하는 경우,

11
00:00:30,800 --> 00:00:42,705
트레이닝에 60%, dev에 20%, 그리고 테스트에 20% 사용하는 것입니다.

12
00:00:42,705 --> 00:00:47,200
머신러닝 초기에는

13
00:00:47,200 --> 00:00:50,155
이것이 합리적인 편이였는데,

14
00:00:50,155 --> 00:00:54,550
특히, 데이터세트 크기가 그리 크지 않았을 때 말이죠.

15
00:00:54,550 --> 00:00:57,085
그래서 만약 총 100개의 예시가 있었다고 하면

16
00:00:57,085 --> 00:01:03,555
70대 30 또는 60대20대20 과 같은 경험에 의거한 규칙이 합리적이었을 것입니다.

17
00:01:03,555 --> 00:01:05,485
만약 1000개의 예시가 있었다거나,

18
00:01:05,485 --> 00:01:09,070
만개의 예시가 있었거나 하는 경우에는

19
00:01:09,070 --> 00:01:13,070
합리적인 비율이 아니라고 보기도 힘들겠죠.

20
00:01:13,070 --> 00:01:16,255
하지만 최근 머신러닝 시대에서는

21
00:01:16,255 --> 00:01:20,310
훨씬 더 큰 데이터와 세트 크기에 익숙해져 있습니다.

22
00:01:20,310 --> 00:01:26,430
그러므로 백만 개의 트레이닝 샘플이 있다고 가정해봅시다.

23
00:01:26,430 --> 00:01:29,490
이런 경우에는 98%를 트레이닝 세트로 설정하고

24
00:01:29,490 --> 00:01:33,810
1%는 dev, 나머지 1%는 테스트로 분배하는 것이

25
00:01:33,810 --> 00:01:40,437
합리적일 수 있습니다.

26
00:01:40,437 --> 00:01:44,590
그리고 dev와 테스트 세트를 줄이기 위해 DNT를 쓸 때도 말이죠.

27
00:01:44,590 --> 00:01:46,710
만약 백만 개의 사례가 있다고 하면

28
00:01:46,710 --> 00:01:48,285
그것의 1%는

29
00:01:48,285 --> 00:01:54,800
10,000개의 사례입니다, 이것은 dev와 테스트 세트로는 충분한 양입니다.

30
00:01:54,800 --> 00:02:00,255
그래서, 최근 데이터세트의 양이 훨씬 더 큰 딥러닝 세대에서는

31
00:02:00,255 --> 00:02:04,020
데이터나 dev set, 그리고 테스트 세트에 20% 또는

32
00:02:04,020 --> 00:02:07,785
30% 미만으로 구성하는 것이 합리적인 편이라고 볼 수 있습니다.

33
00:02:07,785 --> 00:02:12,690
딥러닝의 알고리즘 또한 데이터를 필요로 하기 때문에,

34
00:02:12,690 --> 00:02:16,020
큰 데이터 세트를 보유하고 있는 것에 대한 문제점이

35
00:02:16,020 --> 00:02:20,430
상당부분 트레이닝 세트로 이전됩니다.

36
00:02:20,430 --> 00:02:24,447
그렇다면 테스트 세트는 어떨까요?

37
00:02:24,447 --> 00:02:28,930
테스트 세트의 목적은

38
00:02:28,930 --> 00:02:30,865
시스템 개발을 마친 이후로는,

39
00:02:30,865 --> 00:02:34,360
테스트 세트가 마지막 시스템이 얼마나 좋은지 평가하는데 도움을 줍니다.

40
00:02:34,360 --> 00:02:37,690
가이드라인은 테스트 세트를 적당히 크게 하여

41
00:02:37,690 --> 00:02:41,150
전반적인 시스템의 성능의 컨피던스 레벨이 높을 수 있도록 하는 것입니다.

42
00:02:41,150 --> 00:02:43,690
그렇기 때문에

43
00:02:43,690 --> 00:02:48,090
마지막 최후 시스템이 얼마나 잘 작동하는지 매우 자세히 알아야 하는 것이 아니라고 하면

44
00:02:48,090 --> 00:02:54,059
수백만 개의 example이 필요치 않을 것입니다.

45
00:02:54,059 --> 00:02:57,640
또한 여러분의 어플이 만개의 example을 통해

46
00:02:57,640 --> 00:03:00,545
십만 개의 성능을 찾는 것에 정확성이 있는 결과를 알려준다고 하면

47
00:03:00,545 --> 00:03:03,725
그것으로 충분할 수 있습니다.

48
00:03:03,725 --> 00:03:05,260
이것은 예를 들어,

49
00:03:05,260 --> 00:03:07,340
전체 데이터의 30%도 못 미치는 수치인데요

50
00:03:07,340 --> 00:03:08,440
물론 보유하고 있는 데이터에 따라 그 수치는 약간씩 다를 수 있습니다.

51
00:03:08,440 --> 00:03:13,250
특정 어플에서는,

52
00:03:13,250 --> 00:03:18,320
마지막 시스템의 전반적인 성능에 대한 높은 신뢰수준이 필요하지 않을 수 있습니다.

53
00:03:18,320 --> 00:03:23,055
필요한 것은 트레이닝과 dev set가 전부일수도 있습니다.

54
00:03:23,055 --> 00:03:29,230
제가 생각하기엔 테스트 세트가 없는 것도 괜찮을 수 있습니다.

55
00:03:29,230 --> 00:03:31,685
실제로, 어떤 일이 벌어졌냐 면,

56
00:03:31,685 --> 00:03:33,965
사람들이 train test split을 이용하는 것을 이야기했었는데

57
00:03:33,965 --> 00:03:40,580
실제로는 테스트 세트를 계속 반복하고 있었습니다.

58
00:03:40,580 --> 00:03:42,250
그래서 테스트 세트보다는

59
00:03:42,250 --> 00:03:46,415
테스트 세트 없이 train dev split만 있었습니다.

60
00:03:46,415 --> 00:03:48,604
이 세트에 만약 정말로 튜닝을 한다면,

61
00:03:48,604 --> 00:03:50,390
이 dev set와 테스트 세트에 말이죠,

62
00:03:50,390 --> 00:03:53,205
dev set를 부르는 것이 더 나은 것일 수도 있습니다.

63
00:03:53,205 --> 00:03:56,335
머신러닝의 역사를 바탕으로는

64
00:03:56,335 --> 00:03:59,875
모든 사람이 청렴하게 기록하지는 않았는데요,

65
00:03:59,875 --> 00:04:03,895
dev set를 부르는 것에 대해서 말이죠. 실제로 테스트 세트로 다루어져야 하는 경우에도요.

66
00:04:03,895 --> 00:04:07,485
하지만 여러분이 오로지 트레인 시킬 데이터만 관심이 있는 경우,

67
00:04:07,485 --> 00:04:09,150
튜닝할 데이터만 필요로 하는 경우,

68
00:04:09,150 --> 00:04:11,682
그리고 마지막 시스템을 흔들거나 바꿀 경우에는

69
00:04:11,682 --> 00:04:15,710
얼마나 잘 작동했는지 걱정하지 않고 싶은 경우

70
00:04:15,710 --> 00:04:17,940
그냥 train dev set라고 부르는 것이 괜찮을 것 같습니다.

71
00:04:17,940 --> 00:04:20,700
이렇게 하면 테스트 세트가 없다는 것을 인정하는 것이니까요.

72
00:04:20,700 --> 00:04:22,720
흔한 일은 아닌가요?

73
00:04:22,720 --> 00:04:26,970
시스템을 구축할 때 테스트 세트를 설치하지 않는 것은 절대 추천하지 않습니다.

74
00:04:26,970 --> 00:04:30,225
저는 개인적으로 테스트 세트를 따로 두는 것이 안심이 된다고 생각하는데요.

75
00:04:30,225 --> 00:04:33,900
변형 이전에 어떻게 했는지 공정한 평가 수치를 받을 수 있는데요

76
00:04:33,900 --> 00:04:37,770
만약 아주 큰 dev set를 가지고 있어서

77
00:04:37,770 --> 00:04:41,650
dev set를 심하게 overfit하지 않을 것이라 생각되면

78
00:04:41,650 --> 00:04:45,200
train dev set를 갖는 것이 합리적인 방법이 아니라고 하기 어렵습니다.

79
00:04:45,200 --> 00:04:48,800
물론 제가 일반적으로 추천하는 것은 아니지만요.

80
00:04:48,800 --> 00:04:51,600
요약하자면, 빅데이터 시대에서

81
00:04:51,600 --> 00:04:54,500
오래 전의 70대30 비율의 경험규칙은

82
00:04:54,500 --> 00:04:56,275
더 이상 적용되지 않는 것 같습니다.

83
00:04:56,275 --> 00:05:01,035
그리고 트레이닝에는 더 많은 데이터를 사용하고 dev와 테스트에는 더 적은 데이터를 사용하는 트렌드가 있었습니다.

84
00:05:01,035 --> 00:05:03,220
특히 더 큰 데이터를 다룰 때 말이죠.

85
00:05:03,220 --> 00:05:06,960
결함 기반 규칙은 dev set를 목적에 맞는 크기로 설정하는 것인데요,

86
00:05:06,960 --> 00:05:11,110
여러 아이디어를 평가할 수 있도록 그리고, AOP에서 잘 픽업되도록 하는 것입니다.

87
00:05:11,110 --> 00:05:15,450
테스트 세트의 목적은 최종 비용을 평가하는 데 도움이 됩니다.

88
00:05:15,450 --> 00:05:18,590
단순히 이 목적에 맞게 적당한 크기로 테스트 세트를 설정하면 됩니다.

89
00:05:18,590 --> 00:05:21,710
이렇게 하는 것은, 총 데이터의 30% 미만일 수 있습니다.

90
00:05:21,710 --> 00:05:24,810
이제 여러분이 딥러닝의 시대에서 dev와 테스트 세트를 설정하는데

91
00:05:24,810 --> 00:05:28,710
어느 정도의 가이드라인이 생기셨길 바랍니다.

92
00:05:28,710 --> 00:05:30,595
가끔씩은,

93
00:05:30,595 --> 00:05:32,640
머신러닝 문제를 해결하는 도중에,

94
00:05:32,640 --> 00:05:34,800
평가 매트릭을 바꾸고 싶을 수도 있습니다.

95
00:05:34,800 --> 00:05:36,615
아니면 dev와 테스트 세트를 바꾸고 싶을 수 있습니다.

96
00:05:36,615 --> 00:05:38,250
언제 이렇게 바꾸고 싶을지 다음에 이야기해보도록 하겠습니다.
1
00:00:00,000 --> 00:00:03,505
我们已经学习了如何设置开发集和评估指标

2
00:00:03,505 --> 00:00:07,170
这就好比确定你的团队要瞄准的靶子

3
00:00:07,170 --> 00:00:09,330
可有时候 项目进行到一半 你可能会发现

4
00:00:09,330 --> 00:00:12,040
靶子放错了位置

5
00:00:12,040 --> 00:00:14,365
这时候 就应该移动你的靶子

6
00:00:14,365 --> 00:00:16,156
让我们看一个例子

7
00:00:16,156 --> 00:00:21,210
假设你决定构建一个猫分类器

8
00:00:21,210 --> 00:00:26,850
用于寻找猫的图像 并展现给爱猫的用户<br />你决定使用分类误差作为评估指标

9
00:00:26,850 --> 00:00:29,655
算法A和算法B分别有

10
00:00:29,655 --> 00:00:32,025
3%和5%的误差

11
00:00:32,025 --> 00:00:34,955
看起来算法A表现得更好

12
00:00:34,955 --> 00:00:38,290
可是当你实际测试和检查这些算法时

13
00:00:38,290 --> 00:00:43,760
发现算法A由于某些原因 会将很多色情图片也分类为猫

14
00:00:43,760 --> 00:00:46,985
假如你将算法A投入使用 用户们的确

15
00:00:46,985 --> 00:00:51,185
可以看到更多猫的图片 毕竟它只有3%的误差

16
00:00:51,185 --> 00:00:53,280
可是与此同时 该算法也会向用户

17
00:00:53,280 --> 00:00:57,465
展示一些色情图片 不论是对你的公司还是客户来说

18
00:00:57,465 --> 00:00:59,455
这都是无法容忍的

19
00:00:59,455 --> 00:01:03,620
相比之下 算法B有5%的误差

20
00:01:03,620 --> 00:01:08,720
虽然能得到的猫的图片较少 但是不会有色情图片

21
00:01:08,720 --> 00:01:10,845
所以无论是从你的公司的角度

22
00:01:10,845 --> 00:01:13,530
还是从用户的角度来看

23
00:01:13,530 --> 00:01:15,920
算法B实际上是一个更好的算法

24
00:01:15,920 --> 00:01:19,305
因为它不会让色情图像通过

25
00:01:19,305 --> 00:01:22,165
在这个例子中

26
00:01:22,165 --> 00:01:25,590
尽管算法A在评估指标上表现得更好

27
00:01:25,590 --> 00:01:29,990
只有3%的误差 可实际上这个算法很糟糕

28
00:01:29,990 --> 00:01:33,150
在这个例子中 评估指标和开发集

29
00:01:33,150 --> 00:01:38,460
都倾向于选择算法A 因为根据评估指标

30
00:01:38,460 --> 00:01:43,860
算法A的误差更低 效果更好 然而你和你的用户

31
00:01:43,860 --> 00:01:51,010
更倾向于选择算法B 因为它不会让色情图片通过

32
00:01:51,010 --> 00:01:52,780
在这种情况下

33
00:01:52,780 --> 00:01:55,785
当你的评估指标

34
00:01:55,785 --> 00:01:59,530
无法正确地对算法的优劣进行排序时

35
00:01:59,530 --> 00:02:04,020
就像此例中错误地判断算法A更优秀

36
00:02:04,020 --> 00:02:05,970
这时你就应该

37
00:02:05,970 --> 00:02:13,500
修改评估指标 可能也要修改开发集或测试集

38
00:02:13,500 --> 00:02:16,840
在这个例子中 所使用的分类误差指标

39
00:02:16,840 --> 00:02:20,340
可以写为如下的形式 1除以m_dev

40
00:02:20,340 --> 00:02:23,870
m_dev是开发集中的样例数量

41
00:02:23,870 --> 00:02:30,091
从i等于1到m_dev

42
00:02:30,091 --> 00:02:37,190
对开发集中第i个样例的预测

43
00:02:37,190 --> 00:02:44,995
是否不等于实际标签进行求和

44
00:02:44,995 --> 00:02:50,390
y_pred这个符号表示预测值

45
00:02:50,390 --> 00:02:51,990
取值为0或1

46
00:02:51,990 --> 00:02:54,795
这个符号表示一个函数

47
00:02:54,795 --> 00:03:00,595
用来统计使括号里的式子为真的样例的数量

48
00:03:00,595 --> 00:03:06,533
这个公式统计了分类错误的样例的数量

49
00:03:06,533 --> 00:03:09,360
这个评价指标的问题在于

50
00:03:09,360 --> 00:03:13,957
它对色情图片和非色情图片一视同仁

51
00:03:13,957 --> 00:03:18,750
然而实际上 你不希望分类器错误地标记色情图片

52
00:03:18,750 --> 00:03:21,470
例如将一张色情图片分类为猫

53
00:03:21,470 --> 00:03:24,605
然后展现给毫无防备的用户

54
00:03:24,605 --> 00:03:31,727
用户看到这样的图片一定会非常不满

55
00:03:31,727 --> 00:03:38,590
改良这个评估指标的一种方法是 在这里加入一个权重项

56
00:03:38,590 --> 00:03:48,385
称为w^(i) 当x^(i)不是色情图片时 令w^(i)=1

57
00:03:48,385 --> 00:03:53,950
当图片是色情图片时

58
00:03:53,950 --> 00:04:00,925
令w^(i)=10 或者更大 比如100

59
00:04:00,925 --> 00:04:05,095
这样 你对色情图片的样例

60
00:04:05,095 --> 00:04:09,220
赋予了更大的权重 当算法错误地将

61
00:04:09,220 --> 00:04:12,800
色情图像分类为猫时

62
00:04:12,800 --> 00:04:16,931
将产生更大的误差值

63
00:04:16,931 --> 00:04:19,390
在这个例子中

64
00:04:19,390 --> 00:04:25,355
我们为色情图像的分类加上了10倍的权重

65
00:04:25,355 --> 00:04:27,465
如果需要归一化常数

66
00:04:27,465 --> 00:04:30,743
这一项会变成对w(i)求和

67
00:04:30,743 --> 00:04:35,633
从而令误差值仍在0和1之间。

68
00:04:35,633 --> 00:04:40,630
这里权重的细节并不重要 实际上 要实现这个权重

69
00:04:40,630 --> 00:04:43,690
你需要检查一遍开发集和测试集

70
00:04:43,690 --> 00:04:47,415
将其中的色情图片标记出来

71
00:04:47,415 --> 00:04:50,960
这样才能实现这个权重函数

72
00:04:50,960 --> 00:04:53,095
需要记住的是

73
00:04:53,095 --> 00:04:56,965
当你发现评估指标

74
00:04:56,965 --> 00:05:01,405
无法对算法的优劣给出正确的排序时

75
00:05:01,405 --> 00:05:06,880
那么就需要考虑定义一个新的评估指标

76
00:05:06,880 --> 00:05:12,200
这里的例子只是定义评估指标的一种方法

77
00:05:12,200 --> 00:05:15,220
评价指标的目的是为了能够准确地告诉你

78
00:05:15,220 --> 00:05:20,154
给出两个分类器 哪一个更适合你的应用

79
00:05:20,154 --> 00:05:21,650
就本次视频的目标而言

80
00:05:21,650 --> 00:05:25,863
大家不需要太关心如何定义新的误差指标

81
00:05:25,863 --> 00:05:29,255
重点是 如果你对原有的误差指标不满意

82
00:05:29,255 --> 00:05:33,050
那就不要将就着使用这个你不满意的指标

83
00:05:33,050 --> 00:05:36,260
而是定义一个新的指标 使其能够更好地

84
00:05:36,260 --> 00:05:39,659
反应你的偏好 以符合你对更好的算法的定义

85
00:05:39,659 --> 00:05:42,890
也许你已经注意到了 目前为止我们只讨论了

86
00:05:42,890 --> 00:05:46,255
如何定义一个指标来评估分类器

87
00:05:46,255 --> 00:05:50,450
我们定义了一个评估指标 来帮助我们

88
00:05:50,450 --> 00:05:53,780
更好地对分类器进行排序

89
00:05:53,780 --> 00:05:57,887
以区别它们在区分色情图片上的不同水平

90
00:05:57,887 --> 00:06:01,505
这其实就是正交化思想的一个例子

91
00:06:01,505 --> 00:06:05,480
我认为 应该将机器学习问题分解成独立的步骤

92
00:06:05,480 --> 00:06:14,525
第一步是确定一个指标
以衡量分类器在你的目标上的性能

93
00:06:14,525 --> 00:06:21,677
然后我再单独地考虑 如何在这个指标上得到很好的性能

94
00:06:21,677 --> 00:06:26,480
所以 可以把机械学习任务看成是两个独立的步骤

95
00:06:26,480 --> 00:06:28,145
用靶子来比喻

96
00:06:28,145 --> 00:06:32,890
第一步是摆放靶子

97
00:06:32,890 --> 00:06:37,777
确定你要瞄准的地方 这是一个完全独立的步骤

98
00:06:37,777 --> 00:06:40,340
这就像是一个你可以调节的旋钮

99
00:06:40,340 --> 00:06:44,005
用于独立地调整靶子摆放的位置

100
00:06:44,005 --> 00:06:48,854
至于如何准确地瞄准和射中这个靶子

101
00:06:48,854 --> 00:06:58,888
则由另一个独立的旋钮进行调节

102
00:06:58,888 --> 00:07:06,200
第一步先定义评估指标 第二步再做别的事情

103
00:07:06,200 --> 00:07:08,140
就像射靶

104
00:07:08,140 --> 00:07:11,910
也许你的学习算法在优化这样一个代价函数

105
00:07:11,910 --> 00:07:21,907
在训练集上对损失之和进行最小化

106
00:07:21,907 --> 00:07:25,880
你也可以修改这个代价函数

107
00:07:25,880 --> 00:07:28,160
来引入这些权重

108
00:07:28,160 --> 00:07:31,070
可能最后还要修改这个归一化常数

109
00:07:31,070 --> 00:07:34,240
修改为1除以对w^(i)求和

110
00:07:34,240 --> 00:07:36,990
再次强调 如何定义代价函数J并不是重点

111
00:07:36,990 --> 00:07:42,050
重点是这种正交化的思想 放置靶子是第一步

112
00:07:42,050 --> 00:07:48,456
瞄准和射击靶子是另一个独立的步骤 单独地进行

113
00:07:48,456 --> 00:07:49,975
换句话说 我建议大家

114
00:07:49,975 --> 00:07:55,225
将定义指标看成是一步 在定义了指标之后

115
00:07:55,225 --> 00:07:57,640
再考虑如何在这个指标上做好

116
00:07:57,640 --> 00:08:00,745
有时可能需要修改神经网络所优化的代价函数J

117
00:08:00,745 --> 00:08:03,675
在进入下一个章节前 让我们再看一个例子

118
00:08:03,675 --> 00:08:08,135
假设我们有两个猫分类器 A和B

119
00:08:08,135 --> 00:08:13,300
它们在开发集上的误差分别为3%和5%

120
00:08:13,300 --> 00:08:17,725
或者是在测试集上的误差 其中的图片是从网上下载的

121
00:08:17,725 --> 00:08:19,615
高质量 取景很好的图片

122
00:08:19,615 --> 00:08:21,760
可是当你实际部署算法产品的时候

123
00:08:21,760 --> 00:08:24,895
你却发现实际上算法B的表现更好

124
00:08:24,895 --> 00:08:27,865
尽管它在开发集上的表现不佳

125
00:08:27,865 --> 00:08:30,820
你发现训练使用的图片

126
00:08:30,820 --> 00:08:33,640
是从网上下载的高质量图片

127
00:08:33,640 --> 00:08:36,985
而当你部署到手机应用上时

128
00:08:36,985 --> 00:08:39,620
用户会上传各种各样的图片 例如取景很不好

129
00:08:39,620 --> 00:08:42,835
猫没被照全 或者猫的表情很奇怪

130
00:08:42,835 --> 00:08:44,778
或者图像很模糊

131
00:08:44,778 --> 00:08:51,745
当你对算法进行实际测试时 发现其实算法B的表现更好

132
00:08:51,745 --> 00:08:58,755
这是另一个评价指标和开发/测试集出了问题的例子

133
00:08:58,755 --> 00:09:01,140
问题在于 评估时使用的

134
00:09:01,140 --> 00:09:04,265
开发集和测试集中都是非常精美 高分辨率

135
00:09:04,265 --> 00:09:06,830
取景很好的图片 而你的用户

136
00:09:06,830 --> 00:09:09,750
真正关心的是 能否正确识别他们上传的图片

137
00:09:09,750 --> 00:09:15,935
这些图片往往拍得不那么专业 比较模糊 取景不好

138
00:09:15,935 --> 00:09:17,655
指导方针是

139
00:09:17,655 --> 00:09:20,030
如果在你的指标上

140
00:09:20,030 --> 00:09:23,455
以及在当前开发集和测试集的分布上表现得很好

141
00:09:23,455 --> 00:09:27,845
不能对应于 在你真正关心的应用场景上也表现得很好

142
00:09:27,845 --> 00:09:32,695
这时就需要修改指标 和/或开发集和测试集

143
00:09:32,695 --> 00:09:38,490
换句话说 当我们发现 在具有非常高质量图片的

144
00:09:38,490 --> 00:09:41,960
开发集和测试集上进行评估

145
00:09:41,960 --> 00:09:45,915
无法正确预测你的应用的实际表现情况

146
00:09:45,915 --> 00:09:47,300
因为你的应用实际需要处理的是

147
00:09:47,300 --> 00:09:51,335
低质量的图片 那么就应该修改你的开发集和测试集

148
00:09:51,335 --> 00:09:56,875
让你的数据能够更好地反应
实际中你真正关心的数据的情况

149
00:09:56,875 --> 00:10:00,560
整体的方针是 如果在你当前使用的指标和数据上

150
00:10:00,560 --> 00:10:04,905
获得很好的性能 并不对应于做好你真正关心的事情

151
00:10:04,905 --> 00:10:07,820
那就需要修改你的指标 和/或你的开发集和测试集

152
00:10:07,820 --> 00:10:11,206
让它们能更好地反应 你真正需要算法做好的事情

153
00:10:11,206 --> 00:10:14,690
通过评估指标和开发集 你可以

154
00:10:14,690 --> 00:10:18,685
更快地对算法A还是算法B更好做出决定

155
00:10:18,685 --> 00:10:22,485
可以确实地提高你和你的团队进行迭代的速度

156
00:10:22,485 --> 00:10:24,110
所以我的建议是

157
00:10:24,110 --> 00:10:28,220
即便你无法定义一个完美的评估指标和开发集

158
00:10:28,220 --> 00:10:32,780
你也应该尽快将它们确定下来
以此来驱动你们团队的迭代速度

159
00:10:32,780 --> 00:10:36,060
如果之后发现选的不好

160
00:10:36,060 --> 00:10:39,675
你有了更好的想法 你完全可以再进行修改

161
00:10:39,675 --> 00:10:42,230
对于大对数团队 我不建议

162
00:10:42,230 --> 00:10:45,800
在没有任何评估指标和开发集的情况下

163
00:10:45,800 --> 00:10:48,500
进行长时间的开发 因为这实际上会

164
00:10:48,500 --> 00:10:52,750
降低你们团队进行迭代和改善算法的效率

165
00:10:52,750 --> 00:10:58,795
以上我们讲了什么时候需要修改你的评估指标
和/或开发集和测试集

166
00:10:58,795 --> 00:11:02,480
我希望这些指导方针能够帮助你为你的整个团队

167
00:11:02,480 --> 00:11:07,370
设立一个明确的目标
从而能更有效率地朝着改善性能的方向进行迭代
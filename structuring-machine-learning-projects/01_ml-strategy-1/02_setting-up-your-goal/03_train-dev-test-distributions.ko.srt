1
00:00:00,050 --> 00:00:03,050
트레이닝dev나

2
00:00:03,050 --> 00:00:04,195
개발 세트 또는 테스트세트를 어떻게 설정하는지에 따라

3
00:00:04,195 --> 00:00:06,810
본인이나 팀이 얼마나 신속히 머신러닝 프로젝트를

4
00:00:06,810 --> 00:00:09,985
진행하고 앞으로 나아갈 수 있는지 큰 영향을 끼칩니다.

5
00:00:09,985 --> 00:00:12,895
팀에 따라, 심지어 대기업에 소속되어 있는 기업 팀도

6
00:00:12,895 --> 00:00:15,540
데이터세트를 어떻게 만드느냐에 따라서 느리게 설정할 수도 있기 때문에

7
00:00:15,540 --> 00:00:18,125
프로젝트를 빨리 진행하기보다는 느리게 진행될 수도 있습니다.

8
00:00:18,125 --> 00:00:20,130
어떻게 하면 데이터세트를 잘 만들어서

9
00:00:20,130 --> 00:00:23,433
팀의 생산성을 최대화할 수 있는지 알아보도록 하겠습니다.

10
00:00:23,433 --> 00:00:28,325
이번 비디오에서는 dev set와 테스트세트를 설정하는 방법에 대해 집중적으로 설명하도록 하겠습니다.

11
00:00:28,325 --> 00:00:33,020
dev set는 development set라고도 불리는데요,

12
00:00:33,020 --> 00:00:36,940
간혹 hold out cross-validation set라고 부르는 경우도 있습니다.

13
00:00:36,940 --> 00:00:42,265
일반적인 머신러닝의 업무 플로우는 다양한 아이디어를 시도해보고,

14
00:00:42,265 --> 00:00:44,200
다양한 모델을 트레이닝세트에서 트레이닝 시켜보고,

15
00:00:44,200 --> 00:00:47,950
dev set를 기반으로 생각해왔던 여러 가지 아이디어를 평가해보고 그 중 가장 잘 구현되는 것을 고르는 것입니다.

16
00:00:47,950 --> 00:00:51,280
그렇게 해서 지속적으로 발전시키고 dev set의 성능을 개선해나가면서 마지막에는

17
00:00:51,280 --> 00:00:56,240
한가지 마음에 드는 항목을 선정하여 테스트세트에서 평가해보는 것입니다.

18
00:00:56,240 --> 00:00:59,800
예시를 통해서,

19
00:00:59,800 --> 00:01:01,995
cat crossfire를 만들고 있다고 해봅시다.

20
00:01:01,995 --> 00:01:05,500
미국, 영국, 그리고 유럽,남아메리카

21
00:01:05,500 --> 00:01:07,720
인도, 중국, 그리고 나머지 동양국가들과 호주에서

22
00:01:07,720 --> 00:01:10,490
운영을 하고 있다고 생각해봅시다.

23
00:01:10,490 --> 00:01:14,529
과연 dev set와 테스트세트를 어떻게 설정해야 하는 것일까요?

24
00:01:14,529 --> 00:01:19,285
한가지 방법으로는 앞서 언급한 대륙 중에서 4가지를 고르는 것입니다.

25
00:01:19,285 --> 00:01:22,555
4가지 대륙을 통해, 물론 무작위로 선별된 대륙일 수 있겠죠.

26
00:01:22,555 --> 00:01:25,705
4가지 지역에서 수집된 데이터가 dev set로 이관될 텐데요,

27
00:01:25,705 --> 00:01:28,580
나머지 4개의 지역은, 이 4개 대륙을 이용하겠습니다.

28
00:01:28,580 --> 00:01:30,530
또 무작위로 선별하면 되는데요,

29
00:01:30,530 --> 00:01:33,350
이 4가지 지역은 테스트세트로 이동시키도록 하겠습니다.

30
00:01:33,350 --> 00:01:36,940
지금 보니 이번 예시에서는 이렇게 선정하는 것이 아주 좋지 않은 아이디어인 것 같습니다.

31
00:01:36,940 --> 00:01:40,780
dev set와 테스트세트들이 모두 다른 분포도를 갖고 있기 때문이죠.

32
00:01:40,780 --> 00:01:44,345
이와 다르게 저는 여러분이 dev set와 테스트세트가 같은 분포도에서 온 것을

33
00:01:44,345 --> 00:01:49,555
이용할 수 있도록 권장 드립니다. 정확히 무슨 뜻인지 알려드리죠.

34
00:01:49,555 --> 00:01:51,590
제 생각에 알아두셔 야할 것 중에 한가지는,

35
00:01:51,590 --> 00:01:54,530
dev set를 설정하는 방법과, 플러스

36
00:01:54,530 --> 00:01:57,662
single role number 평가 지표를 설정하는 것입니다.

37
00:01:57,662 --> 00:01:59,840
이것은 마치 목표를 설정하고 팀에게

38
00:01:59,840 --> 00:02:03,395
목표 과녁의 중심이 어딘지 알려주는 것과 유사합니다.

39
00:02:03,395 --> 00:02:07,165
dev set와 metric을 수립하고 나서 생기는 일은,

40
00:02:07,165 --> 00:02:09,925
프로젝트 팀이 빠르게 혁신하고, 많은 아이디어를 기반으로 시도해보고,

41
00:02:09,925 --> 00:02:13,100
실험도 해보고, dev set를 신속히 이용하고 매트릭을 사용하여

42
00:02:13,100 --> 00:02:16,997
crossfire를 평가하고 가장 좋은 것을 고를 수 있습니다.

43
00:02:16,997 --> 00:02:21,720
그러므로, 머신러닝 팀은 많은 수의 화살을 과녁을 향해 쏘는 것을 잘합니다.

44
00:02:21,720 --> 00:02:26,732
혁신하기 위해 과녁의 중심에 계속 화살을 쏘면서 맞힐 확률을 높여가도록 말이죠.

45
00:02:26,732 --> 00:02:30,173
그렇게 하여 dev set 매트릭에서 잘할 수 있도록 하는 것입니다.

46
00:02:30,173 --> 00:02:32,040
왼쪽 예시에서 보이는 dev set와 테스트세트에서

47
00:02:32,040 --> 00:02:34,680
설정한 방법의 문제점은,

48
00:02:34,680 --> 00:02:39,450
여러분의 팀이 수개월 dev set를 혁신하기 위해 소비할 수 있지만,

49
00:02:39,450 --> 00:02:41,570
테스트세트에서 시현해볼 때,

50
00:02:41,570 --> 00:02:45,900
이 4개의 국가에서 얻은 데이터나 밑에 4가지 지역에서 수집한 데이터가

51
00:02:45,900 --> 00:02:49,520
dev set와 굉장히 많이 다를 수 있습니다.

52
00:02:49,520 --> 00:02:51,765
자칫하면 이런 끔찍한 서프라이즈를 통해 깨달을 수도 있죠,

53
00:02:51,765 --> 00:02:54,690
dev set를 최적화시키기 위해 허비한 수개월의 시간이,

54
00:02:54,690 --> 00:02:58,800
테스트세트에서 좋은 성능을 보이지 못하고 있는 것을 말이죠.

55
00:02:58,800 --> 00:03:03,180
분포도가 다른 곳에서 만들어진 dev set와 테스트세트를 갖는 것은 마치 목표를

56
00:03:03,180 --> 00:03:06,525
향하여 수개월 동안 과녁의 중심을 맞추기 위해 계속 시도하는 것과 비슷합니다.

57
00:03:06,525 --> 00:03:08,865
수개월 열심히 일을 하고 나서 뒤늦게 깨닫는 경우,

58
00:03:08,865 --> 00:03:10,550
“잠깐만, 테스트를 위해.

59
00:03:10,550 --> 00:03:12,005
목표를 이쪽으로 이동해야겠어”

60
00:03:12,005 --> 00:03:14,160
팀은 “잠깐만.. 그러면 애초에

61
00:03:14,160 --> 00:03:18,320
과녁이 다른 것에 수개월 동안 시간을 허비하게 만든 거야?

62
00:03:18,320 --> 00:03:21,950
과녁의 중심이 다른 곳으로 이동될 수 있는데 뭣 하러 그렇게 열심히 일한거지?” 라고 반문할 수 있죠.

63
00:03:21,950 --> 00:03:23,010
이런 일이 생기지 않기 위해선,

64
00:03:23,010 --> 00:03:24,510
여러분께 권장 드리는 부분이 있는데요,

65
00:03:24,510 --> 00:03:29,985
이렇게 무작위로 섞인 데이터를 dev 와 테스트세트에 반영합니다.

66
00:03:29,985 --> 00:03:33,917
이렇게 되면 dev set와 테스트세트 모두 8개의 지역에서 수집된 데이터를 갖게 됩니다.

67
00:03:33,917 --> 00:03:38,205
또한, dev 와 테스트세트 모두 같은 푼 포도에서 만들어진 것들이죠.

68
00:03:38,205 --> 00:03:41,490
이 분포도는 모든 데이터들이 섞인 데이터 분포도라고 할 수 있습니다.

69
00:03:41,490 --> 00:03:43,766
또 다른 예시를 말씀 드리겠습니다. 이것은

70
00:03:43,766 --> 00:03:46,200
사실 실화입니다만, 상세 내용은 조금 변화된 내용인데요.

71
00:03:46,200 --> 00:03:48,210
제가 알고 있는 팀 중에 한 팀은

72
00:03:48,210 --> 00:03:50,610
dev set를 최적화시키는데 수개월의 시간을 소비했는데요,

73
00:03:50,610 --> 00:03:55,400
이 dev set는 중산층의 우편번호와 대출 승인 내역으로 이루어져 있었는데요,

74
00:03:55,400 --> 00:03:57,465
구체적으로 머신러닝의 문제는,

75
00:03:57,465 --> 00:04:00,805
“X라는 대출 신청 입력 값의 조건으로

76
00:04:00,805 --> 00:04:02,820
대출 금액을 어떻게

77
00:04:02,820 --> 00:04:04,907
갚을 수 있을지 예상할 수 있을까요?” 이였습니다.

78
00:04:04,907 --> 00:04:07,760
이를 통해서 대출 신청 내역을 승인할지 여부를 결정하는데 도움을 주는 것이죠.

79
00:04:07,760 --> 00:04:11,370
그러므로, dev set는 대출 신청으로부터 만들어진 것입니다.

80
00:04:11,370 --> 00:04:13,565
중산층의 우편번호로 만들어진 것이죠.

81
00:04:13,565 --> 00:04:16,870
Zip code는 미국에서 사용하는 것인데요, 보통 다른 나라의 우편번호와 동일한 것입니다.

82
00:04:16,870 --> 00:04:18,990
이 팀은 몇 개월 작업을 한 이후에,

83
00:04:18,990 --> 00:04:21,555
갑자기 저소득층 우편번호 데이터로 테스트 해보기로

84
00:04:21,555 --> 00:04:24,650
마음을 먹었습니다.

85
00:04:24,650 --> 00:04:27,595
당연히 중산층의 우편번호 분포 데이터와 저소득층의 우편번호

86
00:04:27,595 --> 00:04:30,900
데이터는 많이 달랐습니다.

87
00:04:30,900 --> 00:04:34,810
그렇게 하여 crossfire, 수개월 전자 사례에서 최적화하는데 소비한 시간에도 불구하고

88
00:04:34,810 --> 00:04:39,165
후자 사례에서 적혀 잘 작동하지 않았습니다.

89
00:04:39,165 --> 00:04:42,750
결과적으로 이 팀은 약 3개월이라는 시간을 낭비하고,

90
00:04:42,750 --> 00:04:47,053
다시 돌아가서 많은 작업을 다시 실행해야 했습니다.

91
00:04:47,053 --> 00:04:48,540
어떤 일이 벌어졌냐 면,

92
00:04:48,540 --> 00:04:52,035
이 팀은 3개월 오로지 한가지 목표를 향해 일했고,

93
00:04:52,035 --> 00:04:54,060
3개월 이후,

94
00:04:54,060 --> 00:04:55,490
매니저가

95
00:04:55,490 --> 00:04:57,750
“이렇게 다른 목표를 설정하는데 괜찮은 것인가?”

96
00:04:57,750 --> 00:04:59,340
이것은 완전이 다른 지역이었던 것이죠.

97
00:04:59,340 --> 00:05:02,306
이 경험은 이 팀에게 굉장히 짜증스럽고 곤혹스러운 경험이 되고 말았습니다.

98
00:05:02,306 --> 00:05:05,530
그러므로 제가 권장 드리는 것은, dev set와 테스트세트를 설정할 때,

99
00:05:05,530 --> 00:05:08,520
미래에 어떤 데이터를 반영시킬 지와 어떤 것을 중요시 여길지를 고려하여

100
00:05:08,520 --> 00:05:11,535
그렇게 하기 위해 적합한 dev set와 테스트세트를 고르는 것입니다.

101
00:05:11,535 --> 00:05:14,850
그리고 구체적으로, 여기 있는 dev set와 테스트세트는

102
00:05:14,850 --> 00:05:20,338
모두 같은 분포도에서 만들어져야 합니다.

103
00:05:20,338 --> 00:05:23,660
그러므로 미래에 어떤 유형의 데이터를 다루게 되더라도,

104
00:05:23,660 --> 00:05:25,415
어떤 데이터가 좋은 것이 될지 여부와는 별도로,

105
00:05:25,415 --> 00:05:27,745
이렇게 생긴 데이터를 수집할 수 있도록 하십시오.

106
00:05:27,745 --> 00:05:29,050
이 데이터가 어떤 유형의 데이터이단간에,

107
00:05:29,050 --> 00:05:32,245
dev set와 테스트세트에 모두 넣으세요.

108
00:05:32,245 --> 00:05:33,920
이렇게 해서 여러분이 원하는

109
00:05:33,920 --> 00:05:36,440
목표를 원하는 곳에 설정할 수 있는 것입니다.

110
00:05:36,440 --> 00:05:40,705
그렇게 하여 팀이 효율적으로 혁신할 수 있도록, 같은 목표를 타깃 할 수 있도록 해주는 것입니다.

111
00:05:40,705 --> 00:05:41,826
가능하면 똑같은 목표를 맞출 수 있게 말이죠.

112
00:05:41,826 --> 00:05:45,965
트레이닝세트를 어떻게 설정하는지는 아직 이야기 하지 않았기 때문에

113
00:05:45,965 --> 00:05:48,790
이후 비디오 강의에서 다루도록 하겠습니다.

114
00:05:48,790 --> 00:05:51,335
이번 강의에서 잊지 않으셔야 할 중요한 부분은

115
00:05:51,335 --> 00:05:53,690
dev set를 설정하는 방법과

116
00:05:53,690 --> 00:05:56,300
validation metric입니다.

117
00:05:56,300 --> 00:05:59,780
이것들이 어떠한 목표를 타깃 하는지 정의할 수 있는 것이지요.

118
00:05:59,780 --> 00:06:04,145
가능하면 dev set와 테스트세트를 같은 분포도로 설정하여

119
00:06:04,145 --> 00:06:08,659
여러분은 머신러닝팀이 목표하는 어떠한 타깃도 맞출 수 있도록 하는 것입니다.

120
00:06:08,659 --> 00:06:10,870
여러분이 어떻게 트레이닝 세트를 설정하는가에 따라서

121
00:06:10,870 --> 00:06:14,510
얼마나 잘 목표를 맞추는지 결정지을 수 있습니다.

122
00:06:14,510 --> 00:06:18,400
이 내용은 나중에 비디오 강의를 통해 추가로 이야기하도록 하겠습니다.

123
00:06:18,400 --> 00:06:20,830
이렇게 저는 엄청나게 많은 시간을 아낄 수 있었던 머신러닝팀을 조금 알고 있는데요,

124
00:06:20,830 --> 00:06:23,825
그 팀들이 이 비디오를 봤다면 많은 시간을 절약할 수 있었겠죠.

125
00:06:23,825 --> 00:06:26,235
그러므로 이 가이드라인이 여러분에게 많은 도움이 되길 바랍니다.

126
00:06:26,235 --> 00:06:29,666
다음으로는 여러분의 dev와 테스트세트의 크기가,

127
00:06:29,666 --> 00:06:31,015
어떻게 이 크기를 결정하는지.

128
00:06:31,015 --> 00:06:33,391
이 방법이 딥러닝의 분야를 바꾸고 있습니다.

129
00:06:33,391 --> 00:06:35,290
이와 같은 내용을 다음 비디오에서 더 이야기 해보겠습니다.
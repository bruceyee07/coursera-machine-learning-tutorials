머신러닝 시스템의 구축하는데 가장 큰 과제 중 하나는 시도할 수 있는 일이 굉장히 많고, 바꿀 수 있는 일도 많다는 점입니다. 예를 들어, 튜닝할 수 있는 하이퍼 파라미터가 엄청 많습니다. 머신러닝 업무를 가장 효과적으로 수행하시는 분들은 제가 봤을 때, 무엇을 튜닝할 것인지 굉장히 뚜렷한 안목을 가지고 있습니다. 하나의 효과를 얻어내기 위해서 말이죠. 이러한 절차를 orthogonalization (직교화)이라고 부릅니다. 제가 무엇을 이야기하는 것인지 구체적으로 말씀 드리겠습니다. 오래된 학교 TV 사진입니다. 튜닝을 통해 사진을 바꿀 수 있는 여러 개의 손잡이가 있죠. 이런 오래된 TV세트는 아마도 1개의 손잡이로 이미지의 높이를 조절하고, 다른 1개의 손잡이로 넓이를 조절을 했을 것입니다. 또 1개의 손잡이로는 사다리꼴 모양의 정도를 조절했을 수도 잇겠죠. 다른 1개의 손잡이로는 이미지를 얼마나 좌우로 위치시킬지, 또 1개의 손잡이로 이미지의 회전 정도도 조절 했을 수 있습니다. TV 디자이너들이 많은 시간을 들여 전기회로망을 만들었는데요, 이전 시대에는 아날로그 전기회로망을 자주 만들었습니다. 각각의 손잡이가 해석 가능한 기능을 갖도록 하기 위해서 말이죠. 예를 들어, 1가지의 손잡이가 이것을 튜닝하고, 다른 손잡이는 이것을 튜닝하고, 이 손잡이는 등등이 계속 이어집니다. 반대로 특정 손잡이가 0.1 X 이미지의 높이를 튜닝한다고 해봅시다. 또는, +0.3 X 이미지의 넓이, 또는 -1.7 X 이미지의 사다리꼴 형의 정도, +0.8 X 이미지의 가로축 위치 등등 말이죠. 이런 손잡이를 튜닝하면, 이미지의 높이, 넓이, 사다리꼴 형의 정도, 이미지 위치 등 여러 변수들을 적용하여 한번에 바꿀 수 있게 됩니다. 이러한 손잡이가 있으면, TV를 튜닝하기 거의 불가능할 것입니다. 이미지가 가운데로 오도록 튜닝하게 말이죠. 이런 측면에서, 직교화는 TV디자이너들이 각각의 손잡이가 1가지의 기능만 갖도록 디자인 했던 것을 의미합니다. 이럴 경우, TV를 튜닝하기 훨씬 쉬워집니다. 가운데로 원하는 특정 위치에 오도록 말이죠. 직교화의 또 다른 예를 알려드리겠습니다. 운전하는 방법을 배우는 과정을 생각해보시면, 자동차는 3개의 대표 조정 부분이 있습니다. 운전대, 운전대는 얼마나 차가 좌우로 갈지 조정할 수 있고, 엑셀과 브레이크도 조정할 수 있는 대표 부분입니다. 이런 3가지의 조정을 통해, 1가지 조정은 스티어링 담당 나머지 2개의 조정 부분은 스피드를 조절합니다. 상대적으로 이해 전가가 가능하도록, 특정 명령을 조정에 반영시켜 차를 컨트롤 할 수 있게 되는 것이죠. 그런데 조이스틱 식으로 차를 설계한다고 생각해보십시오. 1개의 축이 0.3 X 스티어링 각도, -0.8 X 차 속도 이런 식으로 말이죠. 그리고 2 X 스티어링 각도, +0.9 X 차 속도 이렇게 별개의 조정 부분이 있다고 생각해봅시다. 이론적으로는 2개의 손잡이를 튜닝하게 되면 자동차를 특정 각도와 속도로 운행시킬 수 있겠죠. 그러나, 현실은 1개의 스티어링 각도 조정, 별개의 스피드를 조절할 수 있는 조정 부분을 따로 가지고 있는 것과 비교했을 때 훨씬 더 어렵습니다. 그러므로 직교화 의 컨셉은 이런 것을 이야기 합니다. 일차원적으로 스티어링 각도를 조정하는 것과, 다른 별개의 조정을 통해 속도를 조절하는 것으로 생각하면, 1개의 손잡이는 운전각도를 최대한 많이 관할하고, 다른 1개의 손잡이는, 자동차 같은 경우, 가속과 브레이크를 관할, 즉, 속도를 담당하게 되는 것입니다. 그렇지만, 2개의 조종을 같이 섞어서 담당하게 되면, 예를 들어, 1개의 조정을 통해 스티어링 각도와 속도를 동시에 조절하면 본인이 원하는 스티어링 각도와 속도를 한번에 맞추기가 훨씬 더 어려워집니다. orthogonal (직교)한 특성을 갖게 되면, 직교는 서로 직각으로 구성됨을 뜻합니다. 실제로 제어하려는 것과 이상적으로 정렬된 직교화 컨트롤을 사용하면 조종해야 하는 손잡이를 훨씬 더 쉽게 조종할 수 있습니다. 각도, 악셀 및 브레이킹을 자동차가 원하는 방향으로 조절하기 더 수월해집니다. 이런 것들이 어떻게 머신러닝과 연결될까요? 지도학습이 잘 운영되기 위해선 보통 본인의 시스템 손잡이를 튜닝하여 반드시 4가지가 잘 유지되도록 해야 합니다. 첫 번째로, 적어도 트레이닝 세트에서는 잘 작동하도록 해야 합니다. 따라서, 훈련세트에서의 성능은 어느 정도 수용성 평가를 통과해야 합니다. 특정 어플에서는, 이 성능 레벨이 인간과 준하는 것을 뜻하기도 하는데요, 이것은 어플마다 다를 것입니다. 인간과 준하는 성능과 비교하는 것에 대해 다음주에 더 자세히 이야기하도록 하겠습니다. 트레이닝 세트에서 잘 구현된 경우, 그 다음으로는 dev set에서도 잘 구현되길 바라셔야 합니다. 그 이후로는, 테스트 세트에서도 잘 되야 하구요. 마지막으로는 비용함수가 적용된 테스트 세트가 잘 되어 실제로도 잘 작동하는 시스템이 되도록 해야 합니다. 이런 좋은 시나리오가 Happy Cat Picture app 유저들에게 적용되길 바래야 하겠죠. TV 튜닝 관련하여 다시 말씀 드리자면, 여러분의 TV 사진이 너무 넓거나 좁은 경우, 한 개의 손잡이만 튜닝하는데 쓰일 수 있도록 하는 것이 좋습니다. 아주 조심스럽게 각각 다른 역할을 하는 5개의 손잡이를 한번에 조정하는 것은 바람직하지 않습니다. 한가지의 손잡이만이 넓이를 조정하는 역할을 하도록 해야 합니다. 비슷한 방법으로, 본인의 고유 알고리즘이 트레이닝 세트와 비용함수가 잘 맞지 않는 결과를 가지고 올 경우, 한가지의 손잡이를 통해, 맞습니다. 어설프지만 이게 제가 그려본 손잡이인데요. 아니면 한가지의 특정 손잡이 뭉치를 구성하는 방법도 있긴 합니다. 알고리즘을 튜닝해서 트레이닝 세트와 잘 맞도록 하기 위해서 말이죠. 이런 과정에서 사용하는 손잡이는 더 큰 네트워크를 트레이닝 시킬 때 사용할 수 있습니다. 아니면, 더 나은 최적화 알고리즘 대체 사용하는 방법도 있는데요, 아담 최적화 알고리즘과 같은 방법이죠, 다음주와 그 다음주에 조금 더 상세하게 해당 내용을 다루어 보도록 하겠습니다. 반대로, 알고리즘이 dev set와 잘 안 맞는다고 생각되시면 또 다른 묶음의 손잡이가 사용될 수 있습니다. 제가 손잡이를 잘 표현한 거 같진 않은데요, 아무튼 독특한 세트의 손잡이로 시도를 해보는 게 좋습니다. 예를 들어서, 여러분의 알고리즘이 dev set에서 잘 구현되고 있지 않은데, 트레이닝 세트에서는 잘 되고 dev set에서 잘 안될 경우, 표준화에 사용되는 손잡이 세트가 있는데요, 이것을 이용하여, 두 번째 부문을 충족할 수 있습니다. 이것이 시사하는 바는, TV세트의 넓이를 튜닝했듯이, 이미지의 높이가 어색할 경우, 다른 종류의 손잡이를 이용하여 조정할 수 있다는 것입니다. 넓이의 영향이 거의 없게 이미지의 높이를 조정해야 할 것입니다. 더 큰 트레이닝 세트를 이용하는 것 그 자체도 한가지의 손잡이를 이용하는 것으로 분류할 수 있습니다. 러닝 알고리즘이 dev set와 잘 맞을 수 있도록 도와줄 수 있죠. 이제까지 TV이미지의 넓이와 높이를 조정해 보았는데요, 만약 세 번째 기준이 맞이 않는다면 어떻게 할까요? dev set에선 잘 하고, 테스트 세트에선 잘 안 될 경우는 어떻게 할까요? 이런 일이 벌어지면, 조정해야 할 손잡이의 유형은, 아마 더 큰 dev set를 구축해야 할 것입니다. dev set에서 잘 구현되고 테스트세트에서 잘 안되는 경우엔, dev set를 과하게 튜닝했을 확률이 크기 때문에 다시 돌아가서 더 큰 dev set를 찾으셔야 할 것입니다. 마지막으로 테스트세트에서는 잘 되고 Happy Cat Picture app user에게는 전달이 잘 안된다고 하면, 다시 돌아가서 dev set를 바꾸거나 비용함수를 변경해야 한다는 것으로 해석할 수 있습니다. 비용함수를 기반으로 하여 테스트세트에서 잘 작동하지만, 현실에서 알고리즘이 올바르게 작동하는 것으로 연결되지 않을 수 있는데요, 이런 경우, dev test set 분포가 잘 설정되어 있지 않거나, 비용함수가 올바르게 계산하고 있지 않은 것으로 볼 수 있습니다. 지금 예시를 굉장히 빠른 속도로 진행하고 있는데요, 손잡이에 대한 자세한 내용은 다음주와 다 다음주에 더 다루도록 하겠습니다. 지금 상세내용을 완전히 이해하고 있지 않다고 하더라도, 걱정하실 필요 없습니다. 일단은 대략적으로 직교화의 절차를 간략히 설명해드리고자 말씀 드렸습니다. 아주 중요한 4가지의 문제점, 튜닝 조정할 수 있는 4가지 방법을 말씀 드리고 싶었습니다. 신경망을 트레이닝 시키는 경우, 저는 개인적으로 early stopping 기술을 잘 이용하지 않습니다. 나쁜 기술은 아니고 많은 사람들이 이용하고 있는데요. 저는 생각해보니 개인적으로 early stopping이 어렵게 느껴지는 것 같습니다. 이 방법은 트레이닝 세트를 얼마나 동시에 잘 맞추냐가 관건이기 때문에 너무 일찍 정지시킬 경우 트레이닝 세트를 잘 못 맞출 수 있습니다. 또한 해당 기술은 동시다발적으로 dev set 성능을 향상시키는데 쓰이는데요, 이 부분의 손잡이가 덜 직교화된 부분입니다. 동시에 2개의 요소가 영향을 받기 때문이죠. 손잡이가 동시에 TV이미지의 넓이와 높이에 영향을 주는 것가 유사한 것이죠. 꼭 나쁜 것이라고 할 수는 없고, 쓰지 말아야 한다고 이야기 하기도 힘듭니다. 이용하시고 싶으면 상관없습니다. 그렇지만 더 직교화한 조정이 가능하면, 여기서 제가 쓰고 있는 것과 같이 말이죠, 그러면 이 튜닝 절차를 훨씬 간편하게 만들 수 있는 건 사실입니다. 오늘 다룬 내용이 여러분이 직교화 에 대해 이해하는데 조금 도움이 됐었으면 좋겠습니다. TV 이미지를 볼 때, 나의 TV 이미지는 너무 넓어, 한번 바꿔봐야지, 너무 높다. 튜닝을 통해 또는 바꿔보거나 사다리꼴 현상이 있군. 튜닝을 해봐야겠어 라고 이야기 할 수 있으면 멋질 것 같습니다. 머신 러닝에서는 본인의 시스템을 확인하여 이 부분이 이상하다 라고 판단할 수 있으면 굉장히 멋지죠. 트레이닝 세트에서는 잘 안 된다, dev set에서는 잘 구현이 안 된다. 테스트 세트에서 잘 작동하지 않는다 또는 테스트 세트에서 잘 되지만 현실에서는 잘 구현이 안 된다는 판단하는 능력이 생기면 좋습니다. 하지만 정확히 어떤 부분이 문제이고 정확히 한 개의 손잡이를 갖거나, 특정 세트의 손잡이를 가져야 이 문제가 해결된다는 답을 찾기 어렵기 때문에 이러한 부분이 머신러닝 시스템의 성능에 한계를 보이고 있습니다. 이번 주와 다음주에는 진단법을 배울 텐데요 여러분의 시스템 성능에서 보틀넥이 정확히 무엇인지 알아보고, 어떠한 세트의 손잡이를 사용해야 시스템을 적절하게 튜닝하여 성능을 향상시킬 수 있는지 확인해보도록 하겠습니다. 자 이제 그럼 더욱 자세한 프로세스에 대해 알아보도록 하겠습니다.
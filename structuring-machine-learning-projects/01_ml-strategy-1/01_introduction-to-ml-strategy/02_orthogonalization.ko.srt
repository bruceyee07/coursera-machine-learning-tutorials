1
00:00:00,340 --> 00:00:03,520
머신러닝 시스템의 구축하는데 가장 큰 과제 중 하나는

2
00:00:03,520 --> 00:00:06,250
시도할 수 있는 일이 굉장히 많고, 바꿀 수 있는 일도 많다는 점입니다.

3
00:00:06,250 --> 00:00:09,840
예를 들어, 튜닝할 수 있는 하이퍼 파라미터가 엄청 많습니다.

4
00:00:10,960 --> 00:00:14,210
머신러닝 업무를 가장 효과적으로 수행하시는 분들은

5
00:00:14,210 --> 00:00:17,440
제가 봤을 때, 무엇을 튜닝할 것인지 굉장히 뚜렷한 안목을 가지고 있습니다.

6
00:00:17,440 --> 00:00:20,200
하나의 효과를 얻어내기 위해서 말이죠.

7
00:00:20,200 --> 00:00:22,842
이러한 절차를 orthogonalization (직교화)이라고 부릅니다.

8
00:00:22,842 --> 00:00:24,120
제가 무엇을 이야기하는 것인지 구체적으로 말씀 드리겠습니다.

9
00:00:25,490 --> 00:00:28,560
오래된 학교 TV 사진입니다.

10
00:00:28,560 --> 00:00:33,820
튜닝을 통해 사진을 바꿀 수 있는 여러 개의 손잡이가 있죠.

11
00:00:35,050 --> 00:00:39,880
이런 오래된 TV세트는 아마도 1개의 손잡이로

12
00:00:39,880 --> 00:00:45,160
이미지의 높이를 조절하고, 다른 1개의 손잡이로 넓이를 조절을 했을 것입니다.

13
00:00:45,160 --> 00:00:49,310
또 1개의 손잡이로는 사다리꼴 모양의 정도를 조절했을 수도 잇겠죠.

14
00:00:49,310 --> 00:00:52,370
다른 1개의 손잡이로는 이미지를 얼마나 좌우로 위치시킬지,

15
00:00:52,370 --> 00:00:57,090
또 1개의 손잡이로 이미지의 회전 정도도 조절 했을 수 있습니다.

16
00:00:58,740 --> 00:01:03,719
TV 디자이너들이 많은 시간을 들여 전기회로망을 만들었는데요,

17
00:01:03,719 --> 00:01:06,477
이전 시대에는 아날로그 전기회로망을 자주 만들었습니다.

18
00:01:06,477 --> 00:01:11,170
각각의 손잡이가 해석 가능한 기능을 갖도록 하기 위해서 말이죠.

19
00:01:11,170 --> 00:01:15,358
예를 들어, 1가지의 손잡이가 이것을 튜닝하고, 다른 손잡이는 이것을 튜닝하고, 이 손잡이는

20
00:01:15,358 --> 00:01:15,960
등등이 계속 이어집니다.

21
00:01:17,840 --> 00:01:24,488
반대로 특정 손잡이가 0.1 X 이미지의 높이를 튜닝한다고 해봅시다.

22
00:01:24,488 --> 00:01:32,002
또는, +0.3 X 이미지의 넓이, 또는 -1.7 X 이미지의 사다리꼴 형의 정도,

23
00:01:32,002 --> 00:01:39,010
+0.8 X 이미지의 가로축 위치 등등 말이죠.

24
00:01:39,010 --> 00:01:42,330
이런 손잡이를 튜닝하면, 이미지의 높이, 넓이,

25
00:01:42,330 --> 00:01:46,350
사다리꼴 형의 정도, 이미지 위치 등 여러 변수들을 적용하여 한번에 바꿀 수 있게 됩니다.

26
00:01:46,350 --> 00:01:51,211
이러한 손잡이가 있으면, TV를 튜닝하기 거의 불가능할 것입니다.

27
00:01:51,211 --> 00:01:54,790
이미지가 가운데로 오도록 튜닝하게 말이죠.

28
00:01:54,790 --> 00:02:00,569
이런 측면에서, 직교화는 TV디자이너들이

29
00:02:00,569 --> 00:02:06,076
각각의 손잡이가 1가지의 기능만 갖도록 디자인 했던 것을 의미합니다.

30
00:02:06,076 --> 00:02:09,118
이럴 경우, TV를 튜닝하기 훨씬 쉬워집니다.

31
00:02:09,118 --> 00:02:12,712
가운데로 원하는 특정 위치에 오도록 말이죠.

32
00:02:14,032 --> 00:02:17,075
직교화의 또 다른 예를 알려드리겠습니다.

33
00:02:17,075 --> 00:02:22,736
운전하는 방법을 배우는 과정을 생각해보시면, 자동차는 3개의 대표 조정 부분이 있습니다.

34
00:02:22,736 --> 00:02:28,124
운전대, 운전대는 얼마나 차가 좌우로 갈지 조정할 수 있고,

35
00:02:28,124 --> 00:02:31,170
엑셀과 브레이크도 조정할 수 있는 대표 부분입니다.

36
00:02:31,170 --> 00:02:35,560
이런 3가지의 조정을 통해, 1가지 조정은 스티어링 담당

37
00:02:35,560 --> 00:02:38,810
나머지 2개의 조정 부분은 스피드를 조절합니다.

38
00:02:38,810 --> 00:02:42,150
상대적으로 이해 전가가 가능하도록,

39
00:02:42,150 --> 00:02:46,770
특정 명령을 조정에 반영시켜 차를 컨트롤 할 수 있게 되는 것이죠.

40
00:02:46,770 --> 00:02:51,940
그런데 조이스틱 식으로 차를 설계한다고 생각해보십시오.

41
00:02:51,940 --> 00:02:56,560
1개의 축이 0.3 X 스티어링 각도,

42
00:02:56,560 --> 00:03:00,910
-0.8 X 차 속도 이런 식으로 말이죠.

43
00:03:00,910 --> 00:03:05,957
그리고 2 X 스티어링 각도,

44
00:03:05,957 --> 00:03:12,530
+0.9 X 차 속도 이렇게 별개의 조정 부분이 있다고 생각해봅시다.

45
00:03:12,530 --> 00:03:15,140
이론적으로는 2개의 손잡이를 튜닝하게 되면

46
00:03:15,140 --> 00:03:19,072
자동차를 특정 각도와 속도로 운행시킬 수 있겠죠.

47
00:03:19,072 --> 00:03:22,840
그러나, 현실은 1개의 스티어링 각도 조정, 별개의 

48
00:03:22,840 --> 00:03:26,980
스피드를 조절할 수 있는 조정 부분을

49
00:03:26,980 --> 00:03:28,750
따로 가지고 있는 것과 비교했을 때 훨씬 더 어렵습니다.

50
00:03:28,750 --> 00:03:31,913
그러므로 직교화 의 컨셉은 이런 것을 이야기 합니다.

51
00:03:31,913 --> 00:03:35,707
일차원적으로 스티어링 각도를 조정하는 것과,

52
00:03:35,707 --> 00:03:39,877
다른 별개의 조정을 통해 속도를 조절하는 것으로 생각하면,

53
00:03:39,877 --> 00:03:44,756
1개의 손잡이는 운전각도를 최대한 많이 관할하고,

54
00:03:44,756 --> 00:03:49,179
다른 1개의 손잡이는, 자동차 같은 경우, 가속과 브레이크를 관할,

55
00:03:49,179 --> 00:03:51,634
즉, 속도를 담당하게 되는 것입니다.

56
00:03:51,634 --> 00:03:54,564
그렇지만, 2개의 조종을 같이 섞어서 담당하게 되면,

57
00:03:54,564 --> 00:03:59,156
예를 들어, 1개의 조정을 통해 스티어링 각도와

58
00:03:59,156 --> 00:04:01,752
속도를 동시에 조절하면

59
00:04:01,752 --> 00:04:06,570
본인이 원하는 스티어링 각도와 속도를 한번에 맞추기가 훨씬 더 어려워집니다.

60
00:04:06,570 --> 00:04:11,933
orthogonal (직교)한 특성을 갖게 되면, 직교는 서로 직각으로 구성됨을 뜻합니다.

61
00:04:11,933 --> 00:04:16,309
실제로 제어하려는 것과 이상적으로 정렬된 직교화 컨트롤을

62
00:04:16,309 --> 00:04:21,251
사용하면 조종해야 하는 손잡이를 훨씬 더 쉽게 조종할 수 있습니다.

63
00:04:21,251 --> 00:04:23,939
각도, 악셀 및 브레이킹을 자동차가 원하는

64
00:04:23,939 --> 00:04:28,813
방향으로 조절하기 더 수월해집니다.

65
00:04:28,813 --> 00:04:31,090
이런 것들이 어떻게 머신러닝과 연결될까요?

66
00:04:32,260 --> 00:04:35,980
지도학습이 잘 운영되기 위해선 보통

67
00:04:35,980 --> 00:04:40,080
본인의 시스템 손잡이를 튜닝하여 반드시 4가지가 잘 유지되도록 해야 합니다.

68
00:04:40,080 --> 00:04:43,930
첫 번째로, 적어도 트레이닝 세트에서는

69
00:04:43,930 --> 00:04:45,210
잘 작동하도록 해야 합니다.

70
00:04:45,210 --> 00:04:50,327
따라서, 훈련세트에서의 성능은 어느 정도 수용성 평가를 통과해야 합니다.

71
00:04:50,327 --> 00:04:52,458
특정 어플에서는,

72
00:04:52,458 --> 00:04:57,841
이 성능 레벨이 인간과 준하는 것을 뜻하기도 하는데요,

73
00:04:57,841 --> 00:05:00,005
이것은 어플마다 다를 것입니다.

74
00:05:00,005 --> 00:05:03,400
인간과 준하는 성능과 비교하는 것에 대해 다음주에 더 자세히 이야기하도록 하겠습니다.

75
00:05:04,520 --> 00:05:07,689
트레이닝 세트에서 잘 구현된 경우,

76
00:05:07,689 --> 00:05:12,281
그 다음으로는 dev set에서도 잘 구현되길 바라셔야 합니다.

77
00:05:12,281 --> 00:05:16,520
그 이후로는, 테스트 세트에서도 잘 되야 하구요.

78
00:05:16,520 --> 00:05:20,025
마지막으로는 비용함수가 적용된

79
00:05:20,025 --> 00:05:23,544
테스트 세트가 잘 되어 실제로도 잘 작동하는 시스템이 되도록 해야 합니다.

80
00:05:23,544 --> 00:05:28,481
이런 좋은 시나리오가 Happy Cat Picture app

81
00:05:28,481 --> 00:05:32,590
유저들에게 적용되길 바래야 하겠죠.

82
00:05:32,590 --> 00:05:37,990
TV 튜닝 관련하여 다시 말씀 드리자면, 여러분의 TV 사진이

83
00:05:37,990 --> 00:05:43,040
너무 넓거나 좁은 경우, 한 개의 손잡이만 튜닝하는데 쓰일 수 있도록 하는 것이 좋습니다.

84
00:05:43,040 --> 00:05:45,680
아주 조심스럽게 각각 다른 역할을 하는 5개의 손잡이를 한번에

85
00:05:45,680 --> 00:05:47,720
조정하는 것은 바람직하지 않습니다.

86
00:05:47,720 --> 00:05:52,510
한가지의 손잡이만이 넓이를 조정하는 역할을 하도록 해야 합니다.

87
00:05:52,510 --> 00:05:57,500
비슷한 방법으로, 본인의 고유 알고리즘이 트레이닝 세트와 비용함수가 잘 맞지 않는 결과를 가지고 올 경우,

88
00:05:57,500 --> 00:06:02,540
한가지의 손잡이를 통해, 맞습니다. 어설프지만 이게 제가 그려본 손잡이인데요.

89
00:06:02,540 --> 00:06:05,540
아니면 한가지의 특정 손잡이 뭉치를 구성하는 방법도 있긴 합니다.

90
00:06:05,540 --> 00:06:10,960
알고리즘을 튜닝해서 트레이닝 세트와 잘 맞도록 하기 위해서 말이죠.

91
00:06:10,960 --> 00:06:15,560
이런 과정에서 사용하는 손잡이는 더 큰 네트워크를 트레이닝 시킬 때 사용할 수 있습니다.

92
00:06:16,730 --> 00:06:20,740
아니면, 더 나은 최적화 알고리즘 대체 사용하는 방법도 있는데요,

93
00:06:20,740 --> 00:06:24,270
아담 최적화 알고리즘과 같은 방법이죠,

94
00:06:24,270 --> 00:06:27,410
다음주와 그 다음주에 조금 더 상세하게 해당 내용을 다루어 보도록 하겠습니다.

95
00:06:28,440 --> 00:06:33,588
반대로, 알고리즘이 dev set와 잘 안 맞는다고 생각되시면

96
00:06:33,588 --> 00:06:36,251
또 다른 묶음의 손잡이가 사용될 수 있습니다.

97
00:06:36,251 --> 00:06:40,976
제가 손잡이를 잘 표현한 거 같진 않은데요,

98
00:06:40,976 --> 00:06:44,465
아무튼 독특한 세트의 손잡이로 시도를 해보는 게 좋습니다.

99
00:06:44,465 --> 00:06:49,196
예를 들어서, 여러분의 알고리즘이 dev set에서 잘 구현되고 있지 않은데,

100
00:06:49,196 --> 00:06:53,455
트레이닝 세트에서는 잘 되고 dev set에서 잘 안될 경우, 표준화에 사용되는 손잡이 세트가 있는데요,

101
00:06:53,455 --> 00:06:57,938
이것을 이용하여, 두 번째 부문을 충족할 수 있습니다.

102
00:06:57,938 --> 00:07:01,786
이것이 시사하는 바는, TV세트의 넓이를 튜닝했듯이,

103
00:07:01,786 --> 00:07:04,467
이미지의 높이가 어색할 경우,

104
00:07:04,467 --> 00:07:08,680
다른 종류의 손잡이를 이용하여 조정할 수 있다는 것입니다.

105
00:07:08,680 --> 00:07:13,429
넓이의 영향이 거의 없게 이미지의 높이를

106
00:07:13,429 --> 00:07:14,563
조정해야 할 것입니다.

107
00:07:14,563 --> 00:07:20,655
더 큰 트레이닝 세트를 이용하는 것 그 자체도 한가지의 손잡이를 이용하는 것으로 분류할 수 있습니다.

108
00:07:20,655 --> 00:07:26,758
러닝 알고리즘이 dev set와 잘 맞을 수 있도록 도와줄 수 있죠.

109
00:07:26,758 --> 00:07:30,248
이제까지 TV이미지의 넓이와 높이를 조정해 보았는데요,

110
00:07:30,248 --> 00:07:32,587
만약 세 번째 기준이 맞이 않는다면 어떻게 할까요?

111
00:07:32,587 --> 00:07:36,880
dev set에선 잘 하고, 테스트 세트에선 잘 안 될 경우는 어떻게 할까요?

112
00:07:36,880 --> 00:07:37,840
이런 일이 벌어지면,

113
00:07:37,840 --> 00:07:42,880
조정해야 할 손잡이의 유형은, 아마 더 큰 dev set를 구축해야 할 것입니다.

114
00:07:42,880 --> 00:07:47,452
dev set에서 잘 구현되고 테스트세트에서 잘 안되는 경우엔,

115
00:07:47,452 --> 00:07:51,010
dev set를 과하게 튜닝했을 확률이 크기 때문에 다시 돌아가서 더 큰 dev set를 찾으셔야 할 것입니다.

116
00:07:52,590 --> 00:07:57,630
마지막으로 테스트세트에서는 잘 되고

117
00:07:57,630 --> 00:08:04,020
Happy Cat Picture app user에게는 전달이 잘 안된다고 하면, 다시 돌아가서

118
00:08:04,020 --> 00:08:10,270
dev set를 바꾸거나 비용함수를 변경해야 한다는 것으로 해석할 수 있습니다.

119
00:08:13,600 --> 00:08:18,230
비용함수를 기반으로 하여 테스트세트에서 잘 작동하지만,

120
00:08:18,230 --> 00:08:21,870
현실에서 알고리즘이 올바르게 작동하는 것으로 연결되지 않을 수 있는데요, 이런 경우,

121
00:08:21,870 --> 00:08:27,260
dev test set 분포가 잘 설정되어 있지 않거나,

122
00:08:27,260 --> 00:08:30,230
비용함수가 올바르게 계산하고 있지 않은 것으로 볼 수 있습니다.

123
00:08:30,230 --> 00:08:34,260
지금 예시를 굉장히 빠른 속도로 진행하고 있는데요,

124
00:08:34,260 --> 00:08:39,770
손잡이에 대한 자세한 내용은 다음주와 다 다음주에 더 다루도록 하겠습니다.

125
00:08:39,770 --> 00:08:42,870
지금 상세내용을 완전히 이해하고 있지 않다고 하더라도, 걱정하실 필요 없습니다.

126
00:08:42,870 --> 00:08:46,429
일단은 대략적으로 직교화의 절차를 간략히 설명해드리고자 말씀 드렸습니다.

127
00:08:46,429 --> 00:08:50,184
아주 중요한 4가지의 문제점,

128
00:08:50,184 --> 00:08:53,569
튜닝 조정할 수 있는 4가지 방법을 말씀 드리고 싶었습니다.

129
00:08:53,569 --> 00:08:57,809
신경망을 트레이닝 시키는 경우, 저는 개인적으로 early stopping 기술을 잘 이용하지 않습니다.

130
00:08:57,809 --> 00:09:00,845
나쁜 기술은 아니고 많은 사람들이 이용하고 있는데요.

131
00:09:00,845 --> 00:09:04,450
저는 생각해보니 개인적으로 early stopping이 어렵게 느껴지는 것 같습니다.

132
00:09:04,450 --> 00:09:09,530
이 방법은 트레이닝 세트를 얼마나 동시에 잘 맞추냐가 관건이기 때문에

133
00:09:09,530 --> 00:09:13,370
너무 일찍 정지시킬 경우 트레이닝 세트를 잘 못 맞출 수 있습니다.

134
00:09:13,370 --> 00:09:18,610
또한 해당 기술은 동시다발적으로 dev set 성능을 향상시키는데 쓰이는데요,

135
00:09:18,610 --> 00:09:21,973
이 부분의 손잡이가 덜 직교화된 부분입니다.

136
00:09:21,973 --> 00:09:25,343
동시에 2개의 요소가 영향을 받기 때문이죠.

137
00:09:25,343 --> 00:09:28,691
손잡이가 동시에 TV이미지의 넓이와

138
00:09:28,691 --> 00:09:30,900
높이에 영향을 주는 것가 유사한 것이죠.

139
00:09:30,900 --> 00:09:34,285
꼭 나쁜 것이라고 할 수는 없고, 쓰지 말아야 한다고 이야기 하기도 힘듭니다. 이용하시고 싶으면 상관없습니다.

140
00:09:34,285 --> 00:09:37,400
그렇지만 더 직교화한 조정이 가능하면,

141
00:09:37,400 --> 00:09:40,020
여기서 제가 쓰고 있는 것과 같이 말이죠,

142
00:09:40,020 --> 00:09:44,260
그러면 이 튜닝 절차를 훨씬 간편하게 만들 수 있는 건 사실입니다.

143
00:09:44,260 --> 00:09:47,655
오늘 다룬 내용이 여러분이 직교화 에 대해 이해하는데 조금 도움이 됐었으면 좋겠습니다.

144
00:09:47,655 --> 00:09:51,645
TV 이미지를 볼 때,

145
00:09:51,645 --> 00:09:55,343
나의 TV 이미지는 너무 넓어, 한번 바꿔봐야지, 너무 높다. 튜닝을 통해 또는 바꿔보거나

146
00:09:55,343 --> 00:09:59,390
사다리꼴 현상이 있군. 튜닝을 해봐야겠어 라고 이야기 할 수 있으면 멋질 것 같습니다.

147
00:09:59,390 --> 00:10:01,710
머신 러닝에서는 본인의 시스템을 확인하여

148
00:10:01,710 --> 00:10:03,430
이 부분이 이상하다 라고 판단할 수 있으면 굉장히 멋지죠.

149
00:10:03,430 --> 00:10:06,088
트레이닝 세트에서는 잘 안 된다, dev set에서는 잘 구현이 안 된다.

150
00:10:06,088 --> 00:10:08,702
테스트 세트에서 잘 작동하지 않는다 또는 테스트 세트에서 잘 되지만

151
00:10:08,702 --> 00:10:09,720
현실에서는 잘 구현이 안 된다는 판단하는 능력이 생기면 좋습니다.

152
00:10:09,720 --> 00:10:13,309
하지만 정확히 어떤 부분이 문제이고 정확히 한 개의 손잡이를 갖거나,

153
00:10:13,309 --> 00:10:17,310
특정 세트의 손잡이를 가져야 이 문제가 해결된다는 답을 찾기 어렵기 때문에

154
00:10:17,310 --> 00:10:20,770
이러한 부분이 머신러닝 시스템의 성능에 한계를 보이고 있습니다.

155
00:10:20,770 --> 00:10:24,643
이번 주와 다음주에는 진단법을 배울 텐데요

156
00:10:24,643 --> 00:10:28,025
여러분의 시스템 성능에서 보틀넥이 정확히 무엇인지 알아보고,

157
00:10:28,025 --> 00:10:32,386
어떠한 세트의 손잡이를 사용해야 시스템을 적절하게 튜닝하여

158
00:10:32,386 --> 00:10:34,715
성능을 향상시킬 수 있는지 확인해보도록 하겠습니다.

159
00:10:34,715 --> 00:10:37,900
자 이제 그럼 더욱 자세한 프로세스에 대해 알아보도록 하겠습니다.
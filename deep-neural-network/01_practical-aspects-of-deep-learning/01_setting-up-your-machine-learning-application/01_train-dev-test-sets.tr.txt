Derin öğrenmenin pratik yönleri 
üzerine olan bu derse hoş geldiniz. Belki bir sinir ağının nasıl uygulanacağını öğrendiniz. Bu hafta sinir ağınızı nasıl iyi çalıştıracağınızın pratik yönlerini öğreneceksiniz. Hiperparametre ayarı gibi şeylerden,
 verilerinizi nasıl ayarlayacağınıza, optimizasyon algoritmasının hızlı bir şekilde 
çalıştığından nasıl emin olduğunuza kadar uzanır. öyle ki makul bir zamanda öğrenmek 
için öğrenme algoritmanızı alırsınız. Bu ilk hafta hücresel makine öğrenme
 probleminden bahsedeceğiz, daha sonra rasgele sıralama hakkında konuşacağız. Sinir ağı uygulamanızın doğru 
olduğundan emin olmak için bazı püf noktalar hakkında konuşacağız. Öyleyse, başlayalım. Eğitiminizi, geliştirme ve test setlerinizi 
nasıl kurduğunuz konusunda iyi seçimler yapmak, iyi bir yüksek performanslı sinir ağı bulmanıza yardımcı olarak 
büyük bir fark yaratabilir. Bir sinir ağını eğitirken, sinir ağınızın kaç katmanı olacağı gibi birçok karar vermeniz gerekir. Ve her bir katmanın kaç tane gizli birime 
sahip olmasını istersiniz? Peki öğrenme oranları nedir? Ve farklı katmanlar için kullanmak istediğiniz
 aktivasyon fonksiyonları nelerdir? Yeni bir uygulamaya başladığınızda, ilk denemenizde bunların tümü ve diğer
 hiperparametre seçenekleri için doğru değerleri doğru bir şekilde tahmin
 etmeniz neredeyse imkansızdır. Yani pratikte uygulanan makine öğrenmesi genelde bir fikirle başlayan 
büyük ölçüde yinelemeli bir süreçtir, mesela belirli sayıda katmana,
 belirli sayıda gizli birime, belki belirli veri setlerine vb. 
sinir ağları kurmak istediğinizde. Ardından sadece kodlamanız ve
 çalıştırarak denemeniz gerekir. Çalıştırırsınız, denersiniz ve 
size bu ağın veya bu konfigürasyonun ne kadar
 iyi çalıştığını söyleyen bir sonuç alırsınız. Ve bu sonucu temel alarak fikirlerinizi rafine edebilir ve 
seçimlerinizi değiştirebilirsiniz, hatta belki de daha iyi bir sinir ağı bulmak için 
denemeye devam edersiniz. Günümüzde derin öğrenme 
pek çok alanda başarılı olmuştur. Doğal dil işlemeden bilgisayar görüsüne, 
konuşma tanımadan yapılandırılmış veriye kadar pek çok alan.. Ve yapılandırılmış veri reklamlardan
 web aramasına kadar her şeyi içerir, Ki bu sadece Internet arama motorları değil, 
örneğin alışveriş sitelerini de içerir. Hali hazırda arama kutusuna bir şey yazdığınızda kaliteli sonuç sunmak isteyen
 herhangi bir web sitesi de buna dahil. Bilişim güvenliği, 
paketleri almada ve teslim etmede sürücüleri nereye göndereceğine karar vermek için kullanan kargo şirketleri.... Bazen NLP'de çok tecrübeli bir araştırmacının 
bilgisayar görüsüyle bir şeyler yapmaya çalıştığını görüyorum. Yada konuşma tanımada çok yetkin bir araştırmacının reklamcılıkta bir şeyler yaptığını. Veya güvenlikçi birinin lojistikte bir şey yaptığını. Ve görüyorum ki bir uzmanlık alanından veya bir uygulama alanından tecrübeler
diğer uygulama alanlarına çok sık aktarılmaz. Ve en iyi seçenekler elinizdeki veri miktarına, bilgisayar konfigürasyonunuzda bulunan giriş özelliklerine, CPU ya da GPU üzerinde çalışmanıza bağlı olabilir.. Ve eğer öyleyse, GPU ve CPU'nun tam olarak hangi
konfigürasyonda olduğuna ve diğer pek çok şeye.. Bu yüzden pek çok durumda bence neredeyse imkansız. Çok tecrübeli derin öğrenme uzmanları bile,
ilk seferde en iyi hiperparametre seçimini doğru olarak tahmin etmeyi neredeyse imkansız bulmaktadır. Günümüzde uygulamalı derin öğrenme, uygulamanıza iyi bir ağ seçeneği bulabilmeniz için bir çok kez döngüye girmeniz gereken çok yinelemeli bir süreçtir. Ne kadar çabuk ilerleyebileceğinizi
belirleyen etmenlerden biri bu döngünün etrafında ne kadar verimli dolaşacağınızdır. Veri kümelerinizi eğitme, geliştirme ve test açısına göre ayarlamak sizi bu konuda çok daha verimli hale getirebilir. Yani, eğer bu sizin eğitim veriniz ise,
bunu büyük bir kutu olarak çizelim. Sonra, genelde sahip olduğunuz tüm veriyi alırsınız ve bunun bir kısmını eğitim kümeniz olarak kesersiniz. Bunun bir kısmı sizin önerilen çapraz geçerleme kümeniz olacak, ve bu bazen gelişme kümesi olarak da adlandırılır. Kısaltmak için buna basitçe "dev kümesi" adını vereceğim, ancak tüm bu terimler kabaca aynı anlama gelmektedir. Ve sonra son bir kısmını test kümeniz olarak kesebilirsiniz. Ve sonra işakışı olarak eğitim kümenizde algoritmaları eğitmeye devam edersiniz. Ve "dev" kümenizi veya önerilen çapraz geçerleme kümenizi kullanarak birçok değişik modelden hangisinin "dev" kümenizde daha başarılı olduğunu görmek için kullanırsınız. Ve sonra bunu yeterince uzun süre yaptıktan sonra, değerlendirmek istediğiniz kesin modelinizi elde ettiğinizde, bulduğunuz en iyi modeli alabilir ve test kümenizde değerlendirebilirsiniz. Algoritmanızın ne kadar iyi çalıştığına dair yansız bir tahmin elde etmek için. Bu yüzden makine öğrenmesinin önceki dönemlerinde, verinizin tamamını alıp insanların sıklıkla bahsettiği 70/30 eğitim test bölmesine göre belki de 70/30% ye göre bölmeniz genel bir uygulama idi. Eğer belirgin bir "dev" kümeniz yoksa veya belki %60 eğitim %20 dev ve %20 test şekilinde bir %60/20/20 bölmeniz varsa. Ve yıllar önce bu makine öğrenmesinde yaygın olarak en iyi uygulama olarak kabul ediliyordu. Eğer belki toplamda 100 örneğiniz varsa, belki toplamda 1.000 örnek, belki 10.000 örnekten sonra. Bu tip oranlar oldukça mantıklı temel kurallardı. Ancak örneğin toplamda bir milyon örneğinizin olabildiği modern büyük veri devrinde, o zaman eğilim "dev" ve test kümelerinizin toplamın çok daha küçük bir yüzdesi olmaya başlamasıdır. Çünkü hatırlayın, "dev" kümesinin ya da gelişme kümesinin amacı üzerinde farklı algoritmalar test edip hangi algoritmanın daha iyi çalıştığını görmektir. Yani "dev" kümesi sadece, örneğin iki farklı algoritma seçeneğini veya 10 farklı algoritma seçeneğini test edip hızlıca hangisinin daha iyi olduğuna karar vermeniz için gerektiği kadar büyük olmalıdır. Ve bunun için verinizin %20sinin tamamına ihtiyacınız olmayabilir. Yani, örneğin, eğer bir milyon eğitim örneğiniz varsa, "dev" kümenizde sadece 10.000 örnek olmasının hangi bir veya iki algoritmanın daha iyi olduğunu değerlendirmek konusunda gereğinden fazla olduğuna karar verebilirsiniz. Ve benzer şekilde, test kümenizin esas amacı, nihai sınıflandırıcı dikkate alındığında, ne kadar iyi gittiğini göstermek için oldukça güvenilir bir tahmin vermektir. Ve yine, eğer bir milyon örneğiniz varsa, 10.000 örneğin tek bir sınıflandırıcıyı değerlendirmek ve ne kadar iyi gittiği konusunda iyi bir tahmin vermek için yeterli olduğuna karar verebilirsiniz. Yani bir milyon örneğinizin olduğu bu örnekte, eğer "dev"iniz için ve testiniz için sadece 10.000 e ihtiyaç duyuyorsanız, oranınız daha çok buna benzeyecektir. 10.000 1 milyonun %1idir yani, %98 eğitim, %1 dev, %1 testiniz olacaktır. Ve ayrıca eğer bir milyondan daha fazla örneğiniz varsa %99,5 eğitim ve %0,25 "dev", %0,25 test ile sonuçlandığı örnekler de gördüm. Veya belki %0,4 "dev", %0,1 test. Yani toparlamak için, makine öğrenmesi probleminizi kurarken, genelde yaptığım eğitim, "dev" ve test kümelerine kurup, ve eğer göreceli olarak küçük bir veri setiniz varsa, bu geleneksel oranlar tamam olabilir. Ama eğer çok daha büyük bir veri setiniz varsa, "dev" ve test kümelerinizi verinizin %20si hatta %10undan çok daha küçük olacak şekilde belirlemekde uygundur. Bu uzmanlığın sonraki kısımlarında "dev" ve test kümelerinin boyutlarını belirlemek için daha açık standart kurallar vereceğiz. Modern derin öğrenme devrinde gördüğümüz bir diğer eğilim gittikçe daha fazla insanın uyumsuz eğitim ve test dağılımlarında eğitmesidir. Diyelim ki kullanıcıların birçok resim yüklediği bir uygulama geliştiriyorsunuz ve amacınız kullanıcılara göstermek için kedi resimlerini bulmak. Belki de tüm kullanıcılarınız kedi severdir. Belki eğitim kümeniz İnternetten indirilmiş kedi resimlerinden geliyordur, ama "dev" ve test kümeleriniz uygulamamızdaki kullanıcıların kedi resimlerini içeriyordur. Yani belki eğitim kümenizde Internetten gelen bir sürü resim vardır ama "dev" ve test kümeleriniz kullanıcıların yüklediği resimlerdir. Görünen o ki bir çok web sayfasının çok yüksek çözünürlükte, çok profesyonel güzelce çerçevelenmiş kedi resimleri var. Ancak belki kullanıcılar daha bulanık, günlük koşullarda sadece bir cep telefonu ile çekilmiş düşük çözünürlükteki resimler yüklüyorlardır. Ve böylece bu iki veri dağılımı farklı olabilir. Böyle bir durumda takip etmenizi teşvik edeceğim temel kural "dev" ve test kümelerinin aynı dağılımdan geldiğinden emin olmanızdır. Bu dikkate değer ilke üzerinde daha fazla şey söyleyeceğiz ama "dev" kümesini birçok değişik modeli değerlendirmek için kullanacağınızdan ve "dev" kümesi üzerinde performansı iyileştirmek için gerçekten çok çalışacağınızdan. Eğer "dev" kümeniz test kümeniz ile aynı dağılımdan geliyorsa iyi olur. Ancak derin öğrenme algoritmalarının eğitim verisi için oldukça büyük bir açlığı olduğundan gördüğüm kullanabileceğiniz bir eğilim, normalde sahip olacağınız eğitim setinden çok daha büyük bir eğitim setini elde etmek için web sayfalarını taramak gibi her türlü yaratıcı taktiği kullanmaktır. Bunun bedeli eğitim veri kümenizin "dev" ve test kümeleriniz ile aynı dağılımdan gelmiyor olması olsa bile. Bu temel kuralı takip ettiğiniz sürece göreceksiniz ki makine öğrenmesi algoritmanızdaki gelişme çok daha hızlı olacak. Ve size bu temel kural hakkında daha detaylı açıklamayı bu uzmanlığın ilerideki kısımlarında vereceğim. Son olarak, test kümenizin olmaması sorun olmayabilir. Unutmayın ki test kümesinin amacı size son ağınızın, semiş olduğunuz ağın performansı hakkında yansız bir tahmin vermektir. Ama eğer bu yansız tahmine ihtiyacınız yoksa, o zaman bir test kümeniz olmaması sorun olmayacaktır. Şimdi, eğer sadece bir "dev" kümeniz varsa ama test kümeniz yoksa ne yapacağınız şey eğitim setinde eğitmek ve sonra değişik model mimarilerini denemektir. Bunları "dev" kümesinde değerlendirip bunu yinelemek için kullanım iyi bir model elde etmeye çalışın. Verinizi "dev" kümesine uydurduğunuz için, bu size artık başarım konusunda yansız bir tahmin vermeyecektir. Ama eğer ihtiyacınız yok bu son derece yolunda olacaktır. Makine öğrenmesi dünyasında, sadece eğitim ve "dev" kümeleriniz olduğunda ama ayrı bir test kümeniz olmadığında. Birçık insan bunu eğitim kümesi olarak adlandırır ve "dev" kümesini test kümesi olarak adlandırırlar. Ancak aslında nihayetinde yaptıları test kümesini bir önerilen çapraz geçerleme kümesi olarak kullanmaktır. Ki bu belki de terminolojinin iyi bir kullanımı değil, çünkü o zaman onlar test kümesinde aşırı öğrenme yapıyorlar. Yani, takım size sadece bir eğitim ve test kümesine sahip olduklarını söylediğinde, sadece dikkatli olur ve acaba gerçekten bir eğitim "dev" kümesi var mı diye düşünürdüm. Çünkü test kümesinde aşırı öğrenme yapıyorlar. Kültürel olarak, bu takımların bazı terminolojilerini değiştirmek ve bunu eğitilmiş test kümesi yerine eğitilmiş "dev" kümesi olarak adlandırmalarını sağlamak zor olabilir. Her ne kadar ben bunu bir eğitim ve geliştirme kümesi olarak adlandırmanın daha doğru bir terminoloji olduğunu düşünsem de. Ve aslında algoritmanızın performansı ile ilgili tamamen yansız bir tahmine ihtiyacınız yoksa bu uygun bir uygulamadır. İşte, bir eğitim "dev" kümesi ve test kümesi oluşturmuş olmak daha hızlı entegre olmanıza imkan tanıyacaktır. Aynı zamanda algoritmanızı daha etkili bir şekilde geliştirme yolları seçmeniz için algoritmanızdaki yanlılık ve değişintiyi daha etkin bir şekilde ölçmenize imkan verecektir. Onu da sıradaki videoda konuşalım
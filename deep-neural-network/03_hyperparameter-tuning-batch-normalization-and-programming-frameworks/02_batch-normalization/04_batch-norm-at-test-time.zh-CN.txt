批标准化每次处理一个最小批的数据 但是在测试时你大概会需要一个一个实例来处理 我们来看一下你如何修改神经网络来实现这一功能 回忆一下 在训练时 这些是我们在实现批标准化时用到的等式 在一个最小批中 我们会把最小批中的ZI值加和来得到平均值 在这里 我们就把最小批里所有的实例加和 我这里用M来表示 最小批里面而不是所有训练集里面实例的个数 接下来我们来计算方差 然后再 通过比例缩放平均数和标准差来计算Z_norm 注意我们加上epsilon是为了数值稳定性 然后我们把Z_norm乘以gamma加上beta来得到Z_total 所以 注意到我们计算缩放比例所需要的mu和sigma平方 是在整个最小批上计算的 但是在测试时你可能并没有一个最小批的 64 128 或者256个实例来同时处理 所以你需要一种不同的方式来得到mu和sigma平方 如果你只有一个实例 那么计算这一个实例的平均值和标准差显然是不合理的 所以实际上该如何做呢？ 以便于我们在测试时使用我们的神经网络 我们需要一种单独的方式来估算mu和sigma平方 在批标准化的通常实现中 我们是通过 指数加权平均数来估算的 这个平均数是根据最小批来计算的 我们来非常具体地看一下我的意思 我们来选取一层L 假设我们现在在处理最小批X^{1} X^{2} 等等 以及它们相对应的Y值 在用X^{1}训练L层时 我们得到一个mu^[l] (如图示) 注意我会把这个写作mu^{1}[l] (如图示) 然后当我们用第二个最小批来训练这一层时 我们得到第二个mu值 (如图示 mu^{2}[l]) 之后从第三个最小批训练这个隐藏层时 我们又得到第三个mu值 (如图示 mu^{3}[l]) 所以 就像我们之前看到的 当我们在试图计算当前温度的指数加权平均数的时候 我们是如何用指数加权平均数来计算 theta_1 theta_2 theta_3的平均值的 我们会这样做来记住 我们看到的这个均值矢量的最新平均值 于是这个指数加权平均数会被我们用来估算 这个隐藏层的Z的平均值 相似得来说 我们用一个指数加权平均数来记住 我们得到的第一个最小批的sigma平方的值 第二个最小批的sigma平方的值 以此类推 也就是说 在我们用不同的最小批来训练神经网络时 我们会保持一个移动均值来记录每一层的mu和sigma平方 最后 在测试时 我们不用这些公式来计算Z_norm 而是用我们当前的Z值 和之前训练时最新的mu和sigma 的指数加权平均数 来进行这个比例缩放 之后我们会用刚刚在左边算的Z_norm 以及之前训练神经网络时学到的 beta和gamma参数值 来计算一个测试实例的Z tilde 所以 重点就是在训练时我们是用整个最小批 比如说64个或者128个或者其他数量的训练实例 来计算mu和sigma平方 但是在测试时 我们可能会需要处理单个测试实例 那么 处理的方式就是通过训练集来估算mu和sigma平方 我们有很多方式来做估算 理论上 我们可以用我们最后的网络运行整个训练集 来得到mu和sigma平方 但是实际上 人们通常会实现某种指数加权平均 来记住在训练时见到的mu和sigma平方的值 然后用这个指数加权平均数 有时也被称作移动均值 来得到mu和sigma平方的粗略的估算 然后我们用这些mu和sigma平方的估算值 在测试时进行比例缩放来获取隐藏神经元的Z值 实际上 对于你具体如何估算mu和sigma平方 这个过程是比较鲁棒(稳定)的 所以我不会太担心你具体怎么做 而且如果你在用一个深度学习框架 他们通常会有一些默认的方式来估算mu和sigma平方 这些方式一般效果也会比较好 但是实际上 任何合理的方式来估算隐藏神经元的均值和方差 应该在测试时都是效果可以的 所以 这就是批标准化 应用批标准化我相信你们可以训练更深的神经网络 并且让你们的学习算法运行的更快 在我们结束这周前 我想和你们分享一些我对于深度学习框架的想法 我们将在下一个视频中讨论这个话题
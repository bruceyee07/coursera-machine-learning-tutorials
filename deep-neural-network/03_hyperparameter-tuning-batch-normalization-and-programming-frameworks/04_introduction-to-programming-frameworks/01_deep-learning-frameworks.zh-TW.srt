1
00:00:00,000 --> 00:00:03,180
你差不多已經學會如何從無到有

2
00:00:03,180 --> 00:00:06,486
用 python 和 numpy 實作深度學習的演算法了

3
00:00:06,486 --> 00:00:08,970
我很開心你能如此，因為我想讓你

4
00:00:08,970 --> 00:00:11,960
了解這些深度學習演算法實際上在做什麼

5
00:00:11,960 --> 00:00:14,970
但是，當你實作更複雜的模型會發現

6
00:00:14,970 --> 00:00:18,660
像是卷積神經網路或遞歸神經網路

7
00:00:18,660 --> 00:00:23,640
或者你開始做非常大的模型時，
這越來越不實際，

8
00:00:23,640 --> 00:00:28,300
至少對於大多數的人，從無到有每件事都自己來，這不大實際。

9
00:00:28,300 --> 00:00:29,535
好險，現在有

10
00:00:29,535 --> 00:00:34,810
很多很好的深度學習的軟體框架，能幫你實作這些模型。

11
00:00:34,810 --> 00:00:36,510
打個比方，

12
00:00:36,510 --> 00:00:38,970
希望你知道如何做

13
00:00:38,970 --> 00:00:43,157
矩陣相乘，而你應該能自己寫程式

14
00:00:43,157 --> 00:00:45,155
來把兩個矩陣乘起來，

15
00:00:45,155 --> 00:00:47,625
但是當你在建構很大的軟體時，

16
00:00:47,625 --> 00:00:51,930
你大概不會想要刻一個你自己的矩陣相乘

17
00:00:51,930 --> 00:00:53,475
相反的，你會想要呼叫

18
00:00:53,475 --> 00:00:57,610
某個數值線性代數的函式庫，能更有效率幫你運算。

19
00:00:57,610 --> 00:01:01,755
不過呢，這還是能讓你了解兩個矩陣相乘是怎麼運作的。

20
00:01:01,755 --> 00:01:05,520
所以我想深度學習已經成熟到一個階段；

21
00:01:05,520 --> 00:01:07,590
利用深度學習的框架做一些事情

22
00:01:07,590 --> 00:01:10,250
會讓你更有效率、更實際。

23
00:01:10,250 --> 00:01:13,110
因此，讓我們瞧瞧現今有哪些框架。

24
00:01:13,110 --> 00:01:16,620
時至今日，已經有很多深度學習的框架

25
00:01:16,620 --> 00:01:19,527
能讓你更方便地實作神經網路，

26
00:01:19,527 --> 00:01:22,185
而這是一些主要的

27
00:01:22,185 --> 00:01:27,420
這邊每個框架都有專門的使用者和開發社群

28
00:01:27,420 --> 00:01:29,520
而且我覺得這裡每個框架

29
00:01:29,520 --> 00:01:33,715
在某些應用領域都是不錯的選擇。

30
00:01:33,715 --> 00:01:36,310
有很多人寫了文章

31
00:01:36,310 --> 00:01:41,374
比較這些深度學習框架，和這些框架改變得多好

32
00:01:41,374 --> 00:01:46,315
也因為這些框架通常不斷演化越來越好，

33
00:01:46,315 --> 00:01:49,704
我就讓你自行上網搜尋一下

34
00:01:49,704 --> 00:01:54,310
如果你想知道這些框架優缺點的論證。

35
00:01:54,310 --> 00:01:59,800
不過我覺得這邊很多框架進化都很快，越來越好，

36
00:01:59,800 --> 00:02:04,760
所以與其強力推薦任何某一個框架，我想分享一下

37
00:02:04,760 --> 00:02:10,150
選擇框架時，我建議的一些準則。

38
00:02:10,150 --> 00:02:13,120
一個重要的準則是程式好不好寫，

39
00:02:13,120 --> 00:02:15,640
這同時意味著開發神經網路

40
00:02:15,640 --> 00:02:19,720
逐步改善，以及佈署到產品上

41
00:02:19,720 --> 00:02:25,435
給成千上萬甚至上億的人使用

42
00:02:25,435 --> 00:02:27,540
端看於你想做什麼。

43
00:02:27,540 --> 00:02:30,480
第二個重要的準則是執行速度

44
00:02:30,480 --> 00:02:32,410
特別是訓練大量資料的時候

45
00:02:32,410 --> 00:02:35,210
有些框架比其他框架在

46
00:02:35,210 --> 00:02:38,780
訓練和執行你的神經網路上更有效率。

47
00:02:38,780 --> 00:02:42,640
然後，有一個大家不太會講到的準則，但我覺得

48
00:02:42,640 --> 00:02:46,690
很重要：這個框架是不是真正開放的。

49
00:02:46,690 --> 00:02:49,395
當一個框架是真正開放的，

50
00:02:49,395 --> 00:02:54,605
他不僅是要開源 (open source)，我覺得
這也需要好的管理。

51
00:02:54,605 --> 00:02:58,930
不幸地在軟體業，有些公司有這樣的歷史：

52
00:02:58,930 --> 00:03:04,120
雖然開源軟體，但是其維護控制在單一個公司下。

53
00:03:04,120 --> 00:03:06,240
然後過些年

54
00:03:06,240 --> 00:03:08,343
當大家開始使用這套軟體，

55
00:03:08,343 --> 00:03:14,095
有些公司有前例，把開源的部份逐漸收掉，

56
00:03:14,095 --> 00:03:19,300
或是把某些功能移到他們自營的雲端服務。

57
00:03:19,300 --> 00:03:22,120
所以，我會稍微注意一件事

58
00:03:22,120 --> 00:03:25,480
你多麼信任這個框架

59
00:03:25,480 --> 00:03:31,960
會維持開源很久的時間，還是只被單一家公司所把持，

60
00:03:31,960 --> 00:03:35,080
然後在未來，可能因為某個理由而收起來，

61
00:03:35,080 --> 00:03:40,415
就算現在是以開源的方式發布。

62
00:03:40,415 --> 00:03:44,470
不過呢，至少短期的話，考慮你偏好的程式語言

63
00:03:44,470 --> 00:03:49,005
無論你喜歡 Python, Java, C++ 或是其他的，

64
00:03:49,005 --> 00:03:51,970
還有和你要做的應用有關，

65
00:03:51,970 --> 00:03:54,565
是電腦視覺、自然語言處理呢

66
00:03:54,565 --> 00:03:57,880
或是網路廣告還是其他的

67
00:03:57,880 --> 00:04:01,940
我想這邊的框架有一些都會是個好選擇。

68
00:04:01,940 --> 00:04:05,500
所以說，用框架來寫程式，因為

69
00:04:05,500 --> 00:04:09,365
他們提供更高層的抽象化，而不僅是一個線性代數函式庫，

70
00:04:09,365 --> 00:04:11,740
這邊任一個程式框架能讓你

71
00:04:11,740 --> 00:04:15,000
在開發機器學習的應用時更有效率
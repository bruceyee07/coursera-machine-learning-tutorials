1
00:00:00,000 --> 00:00:03,180
通过使用Pyhton和NumPy 你或多或少的

2
00:00:03,180 --> 00:00:06,486
能够从头开始完成深度学习的算法

3
00:00:06,486 --> 00:00:08,970
我非常高兴你成功了 因为我希望你能够理解

4
00:00:08,970 --> 00:00:11,960
这些深度学习的算法到底在做什么

5
00:00:11,960 --> 00:00:14,970
但你会发现当你要实现复杂的模型时

6
00:00:14,970 --> 00:00:18,660
例如卷积神经网络(CNN)或循环神经网络(RNN)

7
00:00:18,660 --> 00:00:23,640
或你着手的复杂模型时 你会发现越来越难操作

8
00:00:23,640 --> 00:00:28,300
至少对于大多数人 所有事情从头亲力亲为是不现实的

9
00:00:28,300 --> 00:00:29,535
幸运的是 现在有许多

10
00:00:29,535 --> 00:00:34,810
好的深度学习框架 可以帮你实现这些模型

11
00:00:34,810 --> 00:00:36,510
做一个类比

12
00:00:36,510 --> 00:00:38,970
你可能知道如何计算

13
00:00:38,970 --> 00:00:43,157
矩阵乘法 你也应该知道如何写代码

14
00:00:43,157 --> 00:00:45,155
来将两个矩阵相乘

15
00:00:45,155 --> 00:00:47,625
但当你建立大型的应用时

16
00:00:47,625 --> 00:00:51,930
你可能不想自己去实现矩阵乘法函数

17
00:00:51,930 --> 00:00:53,475
而是希望

18
00:00:53,475 --> 00:00:57,610
有数值线性代数库可以更高效地帮你完成计算

19
00:00:57,610 --> 00:01:01,755
但明白矩阵乘法的原理仍然是有帮助的

20
00:01:01,755 --> 00:01:05,520
我认为深度学习已经发展到一个成熟的阶段

21
00:01:05,520 --> 00:01:07,590
现在使用深度学习框架 可以使一些任务

22
00:01:07,590 --> 00:01:10,250
变得更实际 更高效

23
00:01:10,250 --> 00:01:13,110
那我们来看看市面上的一些深度学习框架

24
00:01:13,110 --> 00:01:16,620
现在 有许多深度学习的框架

25
00:01:16,620 --> 00:01:19,527
让你能够简便地实现神经网络

26
00:01:19,527 --> 00:01:22,185
在此列出一些领先的框架

27
00:01:22,185 --> 00:01:27,420
每个框架都有自己忠诚的用户和开发人员社区

28
00:01:27,420 --> 00:01:29,520
我认为这里的每一个框架

29
00:01:29,520 --> 00:01:33,715
在一些应用中都是可靠的选择

30
00:01:33,715 --> 00:01:36,310
有许多人写文章来比较

31
00:01:36,310 --> 00:01:41,374
不同的深度学习框架以及它们的变化过程

32
00:01:41,374 --> 00:01:46,315
因为这些框架每个月都会进化 变得更好

33
00:01:46,315 --> 00:01:49,704
我觉得你可以自行上网查阅相关资料

34
00:01:49,704 --> 00:01:54,310
来看到关于不同平台之间的利弊的讨论

35
00:01:54,310 --> 00:01:59,800
但我相信很多框架都在迅速地进化 变得更优秀

36
00:01:59,800 --> 00:02:04,760
所以 比起强烈推荐某一个框架 我更愿意分享

37
00:02:04,760 --> 00:02:10,150
如何选择深度学习框架的标准

38
00:02:10,150 --> 00:02:13,120
其中一个重要条件是编程的简便性

39
00:02:13,120 --> 00:02:15,640
这有利于两个方面 开发神经网络

40
00:02:15,640 --> 00:02:19,720
对它进行迭代改善 以及 在生产环境中进行实战布署

41
00:02:19,720 --> 00:02:25,435
根据你所要做的事 为数千 数百万

42
00:02:25,435 --> 00:02:27,540
甚至上亿用户进行服务

43
00:02:27,540 --> 00:02:30,480
第二个重要标准是运行速度

44
00:02:30,480 --> 00:02:32,410
特别是在大数据集上进行训练时

45
00:02:32,410 --> 00:02:35,210
有些框架比起其他框架能够让你运行

46
00:02:35,210 --> 00:02:38,780
和训练神经网络时更为高效

47
00:02:38,780 --> 00:02:42,640
还有一个标准 人们不常提起 但我觉得重要的是

48
00:02:42,640 --> 00:02:46,690
这个框架是否真正的开源

49
00:02:46,690 --> 00:02:49,395
作为一个真正开放的框架

50
00:02:49,395 --> 00:02:54,605
它不仅需要开放源码 还需要良好的管理

51
00:02:54,605 --> 00:02:58,930
不幸的是 在软件产业中 曾有一些企业

52
00:02:58,930 --> 00:03:04,120
虽然将软件开源 但却独占着领导权

53
00:03:04,120 --> 00:03:06,240
几年以后

54
00:03:06,240 --> 00:03:08,343
当人们开始使用该软件后

55
00:03:08,343 --> 00:03:14,095
曾经有公司将曾经开源的渐渐关闭

56
00:03:14,095 --> 00:03:19,300
或者将一些功能移入私有的云服务中

57
00:03:19,300 --> 00:03:22,120
有一个我会提醒你注意的地方是

58
00:03:22,120 --> 00:03:25,480
你多信任这个框架在很长一段时间

59
00:03:25,480 --> 00:03:31,960
会保持开源 而不是被单一公司所掌控

60
00:03:31,960 --> 00:03:35,080
因为这样 即使现在它是开源的

61
00:03:35,080 --> 00:03:40,415
在以后可能会因各种原因所关闭

62
00:03:40,415 --> 00:03:44,470
但至少在短期内取决于你对程序语言的偏好

63
00:03:44,470 --> 00:03:49,005
你是喜欢Python Java C++或其他

64
00:03:49,005 --> 00:03:51,970
还取决于你在构建的是什么应用

65
00:03:51,970 --> 00:03:54,565
是计算机视觉 或进行自然语言处理

66
00:03:54,565 --> 00:03:57,880
或者在线广告或其他

67
00:03:57,880 --> 00:04:01,940
我认为其中许多框架都会是不错的选择

68
00:04:01,940 --> 00:04:05,500
以上我们讨论的编程框架

69
00:04:05,500 --> 00:04:09,365
是比数值线性代数程序库更高层次的抽象

70
00:04:09,365 --> 00:04:11,740
这些程序框架中的任何一个都能让你

71
00:04:11,740 --> 00:04:15,000
开发机器学习应用时更高效
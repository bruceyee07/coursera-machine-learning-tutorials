여러분은 파이썬과 넘파이를 이용해서 딥러닝을 거의 아무것도 없는 초기에서부터 도입하는 방법을 배웠는데요, 저는 여러분이 이런 딥러닝 알고리즘이 구체적으로 무엇을 하는지에 대해 이해하시길 바랬기 때문에 이렇게 처음부터 배운 것에 대해 기쁩니다. 그렇지만 여러분은 이제 컨볼루션 신경망이나 ‘recurring neural networks’ 같은 복잡한 모델을 도입하지 않는 이상, 또는 점점 실용적이지 못한 더 큰 모델들을 도입하게 되면서, 적어도 대부분의 사람들에게 실용적이지 않은 경우 말인데요, 
아예 완전히 새롭게 도입하는 경우 말입니다. 다행히도, 이제 여러분이 이런 복잡한 모델들을 도입할 수 있도록 도와불 수 있는 딥러닝 소프트웨어 프레임웍이 생겼습니다 비유를 하자면, 이제 여러분은 아마 매트릭스를 곱하는 방법과, 코드를 도입하고, 직접 2개의 매트릭스를 곱하는 방법을 아실 텐데요, 이제 여러분이 큰 어플을 만들면서, 아마 여러분은 본인이 직접 매트릭스의 곱하기 함수를 도입하고 싶어하진 않을 것입니다. 대신에, 더 효율적으로 업무를 처리할 수 잇는 numerical linear algebra library를 불러올 것입니다. 그렇다 하더라도 2개의 매트릭스 곱셈이 어떻게 이뤄지는지 알면 좋겠죠, 이제 딥러닝 분야는 충분히 발달한 시점이기 때문에 딥러닝 프레임웍을 사용해서 더 효율적으로 일을 할 수 있는 시대가 왔습니다. 그러면 이런 프레임웍을 살펴보겠습니다. 오늘날, 여러분이 쉽게 신경망 네트워크를 도입할 수 있도록 도와줄 수 있는 많은 딥러닝 프레임웍이 있는데요, 여기 대표적인 것들이 몇 개 있습니다. 여기 각각의 프레임웍은 고유 유저가 있고 또한 개발자 커뮤니티 또한 있습니다. 제 생각에는 이런 프레임웍들은 어플의 부속으로 사용하는데 있어 신뢰할 수 있는 방법이기도 합니다. 이런 딥러닝 프레임웍을 서로 비교하고 얼마나 잘 변하는지에 대한 기사를 쓰는 사람들이 많이 있는데요, 이 프레임웍들은 보통 월별로 진화하고 바뀌기 때문에 여러분께서 직접 인터넷에서 찾아보실 수 있도록 하겠습니다. 여러분이 만약에 이러한 프레임웍들에 대한 각각의 장단점을 보고 싶으시면, 제 생각에는 많은 프레임웍들이 진화하고 빠른 속도로 발전하고 있다고 생각하는데요, 특정 프레임웍을 너무 빨리 지지하는 것보다는 프레임웍을 선택하는데 도움이 될 수 있는 기준을 추천드리겠습니다. 중요한 기준 중의 하나는 프로그래밍의 용이함입니다. 용이함은 신경망을 개발하는 단계와 반복 수행업무와 생산배치에서의 용이함을 모두 포함합니다. 또한 실제 사용할때의 용이함, 천명, 백만, 또는 수 천만 명의 유저 상대로의 
용이함도 포함이 됩니다. 여러분이 무엇을 하고자 하느냐에 따라 말이죠. 두번째로 중요한 기준은, 실행 속도입니다. 특히, 큰 데이터세트에서 트레이닝 할때 말입니다. 어떠한 특정 프레임웍은 여러분이 신경망을 더 빨리 실행하고 더 빨리 효율적으로 트레이닝 할 수 있도록
가능케 해줄 것입니다. 그 다음으로, 사람들이 보통 이야기를 많이 하지 않는 기준은, 프레임웍이 완전히 오픈되어있는지의 여부입니다. 저는 이것이 중요한 기준이라고 생각합니다 프레임웍이 완전히 오픈되기 위해서는, 그 프레임웍은 오픈소스여야할 뿐만 아니라, 훌륭한 거버넌스(관리방식)를 요합니다. 불행히도, 소프트웨어 산업에서는 몇몇 기업들이 소프트웨어를 오픈소스 구축은 하지만 한개 기업의 통제하에 유지시키는 전적이 있습니다. 그리고 몇년간 사람들이 소프트웨어를 사용하면서 이전의 오프소스를 천천히 닫는 것이죠. 또는, 이전 기능들을 기업내부로 이전시키거나 기업고유 클라우드 서비스화 시키는 전적도 있습니다. 여러분이 집중하셔야할 부분은 특정 프레임웍이 오픈소스로 얼마나 있을 것인지, 한 기업의 통제하에 오픈소스가 어떤 이유에서든 미래에 바뀔 것인지에 대한 생각이 있으셔야 합니다. 소프트웨어가 현 시점에서 오픈소스로 출시될 때 말이죠. 하지만 적어도 단기간에는, 여러분의 언어 선호도에 따라, 파이썬을 선호하시거나, Java, 또는 C++ 에 따라 그리고 어떤 어플로 작업하는지에 따라, 이것이 컴퓨터 비전 이던, 자연언어처리 분야이던, 또는 온라인 광도 분야던, 제 생각에는 이러한 프레임웍들의 복수가 좋을 것 같습니다. 이것이 프로그래밍 프레임웍에 대한 내용의 전부인데요, numerical linear algebra library 보다 조금 더 추상적인 개념을 제공함으로써, 이러한 프로그램 프레임웍들은 여러분의 머신러닝 어플을 더 효율적으로 만들어 줄 것입니다.
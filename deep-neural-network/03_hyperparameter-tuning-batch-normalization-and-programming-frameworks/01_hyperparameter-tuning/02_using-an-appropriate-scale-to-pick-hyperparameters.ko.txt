이번 비디오에서는, 여러 범위의 하이퍼 파라미터에서 
임의의 샘플링을 통해 더 효율적으로 하이퍼 파라미터의 공간을 
서칭하는 방법을 배웠습니다. 하지만 임의로 샘플링을 하는 것은, 
균일화된 임의의 작업을 뜻하는 것이 아닙니다. 특정 범위의 유효한 값에서 말이죠. 그런 것이 아니라, 
적합한 scale을  골라서 하이퍼 파라미터를 탐색해야 합니다. 이번 비디오에서는 이런 방법을 알려드리겠습니다. 여러분이 hidden unit의 개수인 n[l]을 찾으려고 한다고 해봅시다. l개의 층에서 말이죠. 그리고 좋은 범위는 50 에서 100 사이라고 해보겠습니다. 이런 경우, 50에서 100 사이 숫자 라인을 보면, 어떤 특정 값을 임의로 이 라인에서 고르는 것이 특정 하이퍼 파라미터값을 찾는 비교적 합리적인 방법이라고 할 수도 있습니다. 또는 여러분이 신경망 네트워크 층의 개수를 결정하려고 한다면, 이것을 대문자 L이라고 하겠습니다. 여러분은 총 층의 개수가 2개에서 4개 사이여야 한다고 
생각할 수도 있습니다. 그러면 균일화되게 임의로 고르는 경우, 
2, 3, 그리고 4 사이에서 고르는 것이 합리적인 선택일 수 있습니다. 또는 격자판 서칭 방법같은 경우, 
명백히 2,3,4의 값을 평가하는 것이 합리적일 수 있습니다. 이러한 몇개의 예제들과 같이, 
균일화된 임의의 방법으로 샘플링을 하는 경우, 고려하고 있는 범위의 값에서 새플링을 하는 것이
합리적인 방법일 수 있습니다. 하지만 이런 방법이 모든 하이퍼 파라미터에서 적용되는 것은 아니죠. 또 다른 예제를 보겠습니다. 다른 예제를 보시죠. 여러분이 러닝속도인 알파값을 서칭한다고 해보겠습니다. 이 경우에, 0.0001이 낮은 경계선이고, 그리고 높은 경계선이 1일 수 있겠죠. 여러분이 0.0001에서 1까지인 숫자라인을 그리고, 임의로 균일화되게 샘플링을 진행하면, 대략적으로 샘플값의 90퍼센트 정도가 0.1과 1사이에 있을 것입니다. 그러면 90퍼센트 정도의 자원을 0.1과 1에 집중하는 것입니다. 10퍼센트의 자원을 0.0001 과 0.1에 쏟는 것이구요. 옳은 방법처럼 보이지 않죠. 이런 방법 대신에, 하이퍼 파라미터를 log scale에서 서칭하는 것이
더 합리적인 방법으로 보입니다. 선형 scale을 이용하는 것이 아니라, 
여기 0.0001이 있겠죠, 그리고 0.001, 0.01, 0.1, 그리고 1입니다. 그리고 여기 log scale에서 균일화되게 샘플링을
진행합니다. 그렇게하면 0.0001과 0.001 사이에 집중하고, 0.001과 0.01 등등에 집중되는 것을 볼 수 있습니다. 그러므로 파이썬에서는 이렇게 도입하는 것이 좋습니다. r= -4 * np.random.rand() 이런식으로 말이죠. 그리고 임의로 선택된 알파값은 10의 r승이 됩니다. 이 첫번째 라인 이후로는 임의숫자가 
-4와 0사이의 값일 것이구요, 여기 알파값은 10의 -4승 과 10의 0승 사이의 값을 가질 것입니다. 10의 -4승은 여기 이 왼쪽에 해당하구요, 여기 1은 10의 0승에 해당하는 값이겠죠. 더 일반적인 케이스로는, 여러분이 10의 a승, 10의 b승을 log scale에서 샘플링하려고 하는 경우에, 이 예제에서는, 이것은 10의 a승입니다. 여기 a값이 무엇인지 log base 10의 0.0001값을 가져서 확인하면 -4라는 것을 확인할 수 있습니다. 여기 오른쪽 값은, 이것은 10의 b승입니다. 그리고 b의 값이 무엇인지 알아낼 수 있습니다. log base 10 의 1 의 값으로 말이죠. 그러면 그 값은 b=0이 됩니다. 그런 후에, r을 임의로 a와 b사이에서
샘플링합니다. 이 경우에는, 
r의 값은 -4와 0사이입니다. 그리고 알파의 값을 임의로 샘플링된 하이퍼 파라미터값으로 
10의 r승으로 지정할 수 있습니다. 복습하자면, log scale에서 샘플링하려면, 로그를 적용하여 a의 값을 알아내고, 큰 값을 지정하여, 로그를 적요하여 
b의 값을 알아냅니다. 이제 여러분은 10의 a승에서 10의 b승 사이를 
로그 적용시키려 하는데요. 그러면 r의 값을 균일화되게 임의로 지정하고, a와 b사이로 말이죠. 그리고 하이퍼 파라미터를 10의 r승으로 지정합니다. 이렇게하여 log scale로 샘플링을 진행할 수 있습니다. 마지막으로 조금 헷갈리는 부분은 
beta 하이퍼 파라미터 샘플링인데요, 기하급수정 가중평균값을 구하는 베타값입니다. 자 그러면, 여러분은 베타값이 0.9 에서 0.999사이라고 생각한다고 해보겠습니다. 이것이 여러분이 서칭하려고하는 범위라고 할 수 있겠죠. 기억하실 것은, 기하급수적 가중 평균값을 구하는 경우에, 0.9의 값을 사용하는 것은 마치 10개의 값에서 평균을 구하는 것과 같습니다. 마치 10일 동안의 평균기온을 구하는 것처럼 말이죠. 반면에 0.999의 값을 사용하는 것은 1000개의 값에서 평균치를 
구하는 것과 같습니다. 이전 슬라이드에서 본 것과 비슷하게, 
0.9와 0.999의 값에서 서칭을 하고 싶은 경우에, 
선형 scale에서 서칭을 하는 것이 말이 안되죠? 균일화되게 임의로 0.9와 0.999사이에서 샘플링하는 것이 말이죠. 생각하기 가장 쉬운 방법으로는, 1 빼기 베타에서 그 값의 범위를 찾는 것입니다. 그러면 이제 범위는 
0.1에서 0.001이 되겠죠. 저희는 베타 사이에서 샘플링을 할텐데요, 0.1에서 0.1사이의 값, 그리고 0.1과 0.001사이에서 말입니다. 이전 슬라이드에서 알아낸 방법을 이용하면, 이것은 10의 -1승이구요, 
이것은 10의 -3승입니다. 이전 슬라이드에서 보시면 아시겠지만, 
왼쪽에서는 작은값이 나왔구요, 오른쪽은 큰값이였는데,
여기서는 거꾸로 바뀌였죠, 큰 값이 왼쪽, 
작은값이 오른쪽에 있습니다. 그러므로 여러분은 r을 임의로 균일화되게
샘플링을 합니다. -3에서 -1값 사이에서 말이죠. 그리고 1-베타를 10의 r승으로 합니다.
그러므로 베타는 1 빼기 10의 r승이 되겠죠. 그러면 이것이 임의로 샘플된 하이퍼 파라미터의 값이 됩니다. 적합한 scale에서 선택된 값이죠. 바라건대, 이런 방법을 통해서 여러분은 0.9와 0.99 범위를 탐색하는데
집중하는 정도가 0.99와 0.999사이를 집중해서 탐색하는 범위가 
비슷한 것을 아십니다. 여러분이 만약에 더 공식적인 수학적 정의를 공부하고 싶으시면, 이것을 왜 하는지에 대해서 말이죠, 
또는 왜 선형의 scale로 샘플링을 하는게 나쁜 아이디어인지에 대해서 말이죠. 그 이유는, 베타가 1과 근접할 경우, 결과값에 대한 민감도가 변합니다.
아주 조금의 베타값 변화에도 말이죠. 그러므로 베타가 만약 0.9에서 0.9005로 바뀌면 이것은 그리 큰 의미를 갖진 않습니다.
결과값을 거의 바꾸지 않기 때문이죠. 하지만 만약 베타가 0.999에서 0.9995로 간다면, 알고리즘이 어떻게 하고 있는지에 대해서
아주 큰 영향을 끼칩니다. 여기 2가지 경우에서 모두
10개의 값에 대해 평균값을 갖습니다. 하지만 여기서는 1000개의 예시에 대해서 기하급수적 가중 평균법에서 
이제 2000개의 예시가 되었습니다. 그 이유는 여기 1/1-베타 공식에서, 이 공식은 베타 값의 변경에 매우 민감하기 때문에,
베타가 1과 근접할 때 말이죠. 그러면 여기 전체 샘플링 절차가 하는 것은, 베타가 1이 근접한 범위에서 샘플링을 밀도있게 
진행하게 합니다. 또는, 1-베타값이 0과 근접할때도 그럴 수 있죠, 샘플들을 분포하는데 있어 조금 더 
효율적으로 진행할 수 있게, 가능한 결과값에 대해 더 효율적으로 탐색할 수 있게 말이죠. 저는 이 내용이 여러분이 적합한 scale을 찾는데 
도움을 주기 바랍니다. 하이퍼 파라미터를 샘플링하는데 있어서 말이죠. 어떤 특정 하이퍼 파라미터에서 올바른 scaling 결정을 하지 못한 경우, 너무 걱정하지 마십시요. 여러분이 uniform scale에서 샘플링을 하더라도, 이 scale의 합이 더 우위에 있겠죠, 
이렇더라도 괜찮은 결과가 나올 수 있습니다. 특히, coarse to fine search를 사용하는 경우에 말이죠, 이 경우에는 샘플링할때, 가장 유용한 범위의 하이퍼 파라미터를 찾는데 집중하게 되는 경우죠. 저는 오늘 배운 내용이 하이퍼 파라미터를 찾는데 도움이 됐기 바랍니다. 다음 비디오에서는, hyperparmeter1 검색 절차를 조직화하는 방법에 대해서도 생각을 공유해보겠습니다. 이런 내용들이 여러분의 업무 절차를 효율적으로 만들어주길 바랍니다.
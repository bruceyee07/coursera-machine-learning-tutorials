1
00:00:00,280 --> 00:00:05,140
在上一部影片，你看到了
隨機從超參數數值的範圍取樣

2
00:00:05,140 --> 00:00:09,330
能讓你更有效率地搜索超參數所在的空間

3
00:00:09,330 --> 00:00:14,980
不過呢，隨機取樣並不代表
從數值可能的範圍中

4
00:00:14,980 --> 00:00:16,990
均勻地隨機取出來

5
00:00:16,990 --> 00:00:20,320
相反地，選擇適當的尺度比例

6
00:00:20,320 --> 00:00:22,340
來探索超參數是很重要的

7
00:00:22,340 --> 00:00:25,700
在這部影片，我來示範該怎麼作到這一點

8
00:00:25,700 --> 00:00:30,230
假設你想決定隱藏單元的個數, n[l]

9
00:00:30,230 --> 00:00:31,250
對於第 l 層

10
00:00:31,250 --> 00:00:36,310
然後假設，你認為這數量可能介在50到100之間

11
00:00:36,310 --> 00:00:41,110
這樣的話，你看這50到100的數線

12
00:00:41,110 --> 00:00:46,090
或許在數線上隨機取幾個數字

13
00:00:46,090 --> 00:00:50,500
是搜尋這個超參數一個顯然的方法

14
00:00:50,500 --> 00:00:54,351
或者，如果你想決定神經網路的層數

15
00:00:54,351 --> 00:00:56,480
讓我們用大寫L表示

16
00:00:56,480 --> 00:01:02,245
假設你認為層數大概在2到4中間

17
00:01:02,245 --> 00:01:08,030
那麼均勻地從2, 3, 4中隨機挑出來，是很合理的

18
00:01:08,030 --> 00:01:11,920
或者用格子法，評估層數為2, 3,

19
00:01:11,920 --> 00:01:15,340
或4時的效能也是合理的

20
00:01:15,340 --> 00:01:19,091
所以這邊的幾個例子，是均勻隨機地

21
00:01:19,091 --> 00:01:23,480
從預期的範圍取樣，滿合理的

22
00:01:23,480 --> 00:01:26,432
但是，並不是所有的超參數都可以這樣

23
00:01:26,432 --> 00:01:28,850
讓我們看另一個例子讓我們看另一個例子

24
00:01:28,850 --> 00:01:33,530
如果你在尋找alpha學習率這個超參數

25
00:01:33,530 --> 00:01:38,000
假設你認為最低可能到0.0001

26
00:01:38,000 --> 00:01:42,130
最高可能到1

27
00:01:42,130 --> 00:01:48,451
那如果你畫一條數線從0.0001到1

28
00:01:48,451 --> 00:01:55,456
均勻地在這數線上隨機取值

29
00:01:55,456 --> 00:02:02,219
那取出來的值，大約有90%都會落在0.1到1之間

30
00:02:02,219 --> 00:02:07,274
所以你花了90%的資源，在0.1到1之間找尋

31
00:02:07,274 --> 00:02:12,120
而只有10%在找0.0001到0.1之間

32
00:02:12,120 --> 00:02:14,330
這感覺不太對

33
00:02:14,330 --> 00:02:19,175
在這裡，根據「對數尺度」來搜索超參數似乎更合理

34
00:02:19,175 --> 00:02:25,437
和線性尺度不一樣，在這裡是0.0001

35
00:02:25,437 --> 00:02:30,377
然後0.001, 0.01, 0.1，然後1在這

36
00:02:30,377 --> 00:02:37,360
你是在這種對數尺度比例上，均勻隨機地取樣

37
00:02:37,360 --> 00:02:44,133
這樣，你就有更多資源在搜索0.0001到

38
00:02:44,133 --> 00:02:50,270
0.001之間，還有0.001到0.01，依此類推

39
00:02:50,270 --> 00:02:53,950
用Python實作這個的方法

40
00:02:55,780 --> 00:03:00,877
是讓 r = -4 * np.random.rand()

41
00:03:00,877 --> 00:03:07,260
然後隨機的alpha會是 alpha = 10的r次方

42
00:03:08,350 --> 00:03:15,410
所以第一行會讓 r 變成 -4 到 0 之間的一個亂數

43
00:03:15,410 --> 00:03:20,505
所以 alpha 會介在
10的-4次方 到 10的0次方之間

44
00:03:20,505 --> 00:03:25,710
10的-4次方就是左邊這個

45
00:03:25,710 --> 00:03:28,320
然後 1 就是10的0次方

46
00:03:28,320 --> 00:03:30,140
一般來說

47
00:03:30,140 --> 00:03:35,750
如果你想在對數尺度上，
在10的a次方和10的b次方之間取樣

48
00:03:35,750 --> 00:03:40,700
在這個例子，這個是10的a次方

49
00:03:40,700 --> 00:03:45,358
要知道a是多少，你可以取以10為底的 0.0001的對數

50
00:03:45,358 --> 00:03:49,170
也就是 -4

51
00:03:49,170 --> 00:03:51,430
而右邊這個數字，10的b次方

52
00:03:51,430 --> 00:03:52,800
要知道b是多少

53
00:03:52,800 --> 00:03:56,655
就取以10為底的，1的對數，也就是 b=0

54
00:03:58,200 --> 00:04:04,353
所以你要做的，就是均勻地從a到b隨機取出 r

55
00:04:04,353 --> 00:04:06,857
在這個例子，r會介在-4到0之間

56
00:04:06,857 --> 00:04:08,358
那你就可以設定alpha為

57
00:04:08,358 --> 00:04:14,000
10的r次方，就成了隨機取樣的超參數

58
00:04:14,000 --> 00:04:18,210
再複習一下，在對數尺度上取樣，你把最小值

59
00:04:18,210 --> 00:04:20,252
取對數，以得知a是多少

60
00:04:20,252 --> 00:04:23,911
把最大值取對數，得到b

61
00:04:23,911 --> 00:04:28,270
也就是你想在10的a次方到10的b次方之間取樣，
在對數尺度上

62
00:04:28,270 --> 00:04:32,810
所以你在a到b之間
均勻地隨機取數字，設作r

63
00:04:32,810 --> 00:04:35,850
然後把超參數的值，設成10的r次方

64
00:04:35,850 --> 00:04:40,070
這就是如何實作
在對數尺度上取樣的方法

65
00:04:40,070 --> 00:04:46,010
最後，另一個棘手的情況是
隨機取樣超參數beta

66
00:04:46,010 --> 00:04:49,630
用在指數加權平均的beta

67
00:04:49,630 --> 00:04:55,800
假設你認為beta應該在0.9到0.999之間

68
00:04:55,800 --> 00:04:59,870
假設這是你想搜尋的範圍

69
00:04:59,870 --> 00:05:03,440
還記得嗎，當計算指數加權平均的時候

70
00:05:03,440 --> 00:05:09,605
取 0.9 就類似於對最後10個值做平均

71
00:05:09,605 --> 00:05:13,304
就好像取十天的溫度平均

72
00:05:13,304 --> 00:05:18,403
而取 0.999 就像把最後1000個值做平均

73
00:05:18,403 --> 00:05:23,434
與上一張投影片類似，如果我們想在

74
00:05:23,434 --> 00:05:28,558
0.9和0.999之間搜尋，
以線性尺度來取樣並不合理對吧

75
00:05:28,558 --> 00:05:31,140
從0.9到0.999之間均勻地取出

76
00:05:31,140 --> 00:05:33,970
那麼，思考這個問題最好的角度

77
00:05:33,970 --> 00:05:38,650
是我們想探索 1 - beta 這範圍裡面的值

78
00:05:38,650 --> 00:05:43,339
也就是從 0.1 到 0.001

79
00:05:43,339 --> 00:05:47,060
那我們在取樣beta的時候

80
00:05:47,060 --> 00:05:53,057
先從0.1，也許從0.1到0.001挑數字

81
00:05:53,057 --> 00:05:57,739
利用前一張投影片的手法

82
00:05:57,739 --> 00:06:01,532
這是10的-1次方，這是10的-3次方

83
00:06:01,532 --> 00:06:05,163
注意在前一張投影片，比較小的值在左邊

84
00:06:05,163 --> 00:06:08,182
比較大的值在右邊。不過在這裡則是相反

85
00:06:08,182 --> 00:06:12,290
大的值在左邊，小的值在右邊

86
00:06:12,290 --> 00:06:19,870
所以你要做的，就是均勻地從-3到-1隨機取出 r

87
00:06:19,870 --> 00:06:25,700
然後讓 1 - beta = 10的r次方，
所以beta = 1 - 10的r次方

88
00:06:25,700 --> 00:06:29,638
那這個，就變成了你取樣的超參數的值

89
00:06:29,638 --> 00:06:31,551
是在適當的尺度上取出的

90
00:06:31,551 --> 00:06:35,139
希望這聽起來有道理，用這種方法取樣

91
00:06:35,139 --> 00:06:39,979
你花了同樣的資源在探索0.9到0.99

92
00:06:39,979 --> 00:06:43,409
以及0.99到0.999之間

93
00:06:43,409 --> 00:06:47,699
如果你想要了解比較正式的
從數學的理由來看為什麼

94
00:06:47,699 --> 00:06:52,100
我們要這樣做，為什麼在線性尺度上取樣是個爛主意

95
00:06:52,100 --> 00:06:57,120
這是因為，當beta接近1時，

96
00:06:57,120 --> 00:07:02,230
你的結果的敏感度也會隨之改變，
就算beta改變得再小

97
00:07:02,230 --> 00:07:08,750
所以如果beta從0.9增加到0.9005

98
00:07:08,750 --> 00:07:15,730
這沒什麼大不了的，這幾乎不會對你的結果有影響

99
00:07:15,730 --> 00:07:19,720
但是，如果beta從0.999增加到0.9995

100
00:07:19,720 --> 00:07:26,615
這對你的演算法所做的
會有很大的影響，對吧

101
00:07:26,615 --> 00:07:30,580
在這兩個情況，大概都是對10個值平均

102
00:07:30,580 --> 00:07:35,359
但在這裡，這指數加權平均從

103
00:07:35,359 --> 00:07:40,790
最後1000個的平均，變成最後2000個的平均

104
00:07:40,790 --> 00:07:44,460
這是因為我們的公式，1 / 1- beta

105
00:07:44,460 --> 00:07:49,140
當beta靠近1時，他對beta的改變非常的敏感

106
00:07:49,140 --> 00:07:52,059
所以，這整個隨機取樣的方法所作的

107
00:07:52,059 --> 00:07:57,426
是當beta靠近1時，讓你更密集地挑出beta

108
00:07:59,186 --> 00:08:03,480
或換個方式說，當 1 - beta 靠近 0 的時候

109
00:08:03,480 --> 00:08:07,630
所以你更有效地分配了你的取樣

110
00:08:07,630 --> 00:08:11,430
更有效率地探索可能的結果

111
00:08:11,430 --> 00:08:14,250
我希望這能幫助你選擇正確的尺度比例

112
00:08:14,250 --> 00:08:15,901
來取樣超參數

113
00:08:15,901 --> 00:08:20,900
萬一你沒有為某些超參數
決定好的尺度

114
00:08:20,900 --> 00:08:23,232
也不用太過於擔心

115
00:08:23,232 --> 00:08:26,720
就算你用了均勻的取樣，而實際上有些尺度

116
00:08:26,720 --> 00:08:30,050
可能更適合，你仍然可能得到還不錯的結果

117
00:08:30,050 --> 00:08:33,830
特別是當你用由粗糙到精細的搜索方式
所以在後期

118
00:08:33,830 --> 00:08:38,190
你會更集中在比較有效的
超參數數值的範圍

119
00:08:38,190 --> 00:08:40,894
我希望這能幫助你找尋超參數

120
00:08:40,894 --> 00:08:44,731
在下一部影片，我也會分享一些想法，
關於該怎麼建立

121
00:08:44,731 --> 00:08:46,695
搜尋超參數的程序

122
00:08:46,695 --> 00:08:49,570
希望能讓你的流程更有效率
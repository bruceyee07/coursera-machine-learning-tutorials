1
00:00:00,000 --> 00:00:03,900
上一节课中 我们学习了指数加权平均
In the last video, we talked about
exponentially weighted averages.

2
00:00:03,900 --> 00:00:06,345
这将是几个训练神经网络的优化算法的
This will turn out to be a key component of

3
00:00:06,345 --> 00:00:09,910
关键组成部分
several optimization algorithms
that you used to train your neural networks.

4
00:00:09,910 --> 00:00:12,330
所以 在这个视频中 我将详细讲解
So, in this video, I want to delve a little bit deeper

5
00:00:12,330 --> 00:00:15,930
这一算法的具体作用
into intuitions for what this algorithm is really doing.

6
00:00:15,930 --> 00:00:21,305
先回顾一下 这是实现指数加权平均的关键等式。
Recall that this is a key equation
for implementing exponentially weighted averages.

7
00:00:21,305 --> 00:00:24,755
如果β=0.9 可以获得红色曲线
And so, if β=0.9, you got the red line.

8
00:00:24,755 --> 00:00:26,390
如果β值趋向于1
If it was much closer to one,

9
00:00:26,390 --> 00:00:29,700
如果β=0.98 可以获得绿色曲线
if it was 0.98, you get the green line.

10
00:00:29,700 --> 00:00:31,200
如果数值更小
And if it's much smaller,

11
00:00:31,200 --> 00:00:34,470
比如0.5 可以获得黄色曲线
maybe 0.5, you get the yellow line.

12
00:00:34,470 --> 00:00:37,110
接下来我们来了解下
Let's look a bit more than that to understand how

13
00:00:37,110 --> 00:00:40,220
它是如何计算每日气温的
this is computing averages of the daily temperature.

14
00:00:40,220 --> 00:00:41,935
这是运算等式
So, here's that equation again.

15
00:00:41,935 --> 00:00:48,330
假设β=0.9 我们来列出相应的等式
and let's set beta equals 0.9 and write out
a few equations that this corresponds to.

16
00:00:48,330 --> 00:00:50,970
因此 当运算时 你的T值
So whereas, when you're implementing it you have T

17
00:00:50,970 --> 00:00:54,105
从0到1 到2 到3
going from zero to one, to two, to three,

18
00:00:54,105 --> 00:00:56,760
T值逐渐增大 为了方便分析
increasing values of T. To analyze it,

19
00:00:56,760 --> 00:01:00,740
我将T值按降序排列 这里只列出一部分
I've written it with decreasing values of T.
And this goes on.

20
00:01:00,740 --> 00:01:03,055
我们先以第一个等式为例
So let's take this first equation here,

21
00:01:03,055 --> 00:01:06,750
了解下V100到底是什么
and understand what V100 really is.

22
00:01:06,750 --> 00:01:09,795
V100将是
So V100 is going to be,

23
00:01:09,795 --> 00:01:11,850
先将这两项互换一下
let me reverse these two terms,

24
00:01:11,850 --> 00:01:15,195
这项变成0.1*θ100
this is going to be 0.1 times theta 100,

25
00:01:15,195 --> 00:01:19,620
加上0.9乘以前一天的数值
plus 0.9 times whatever the value was
on the previous day.

26
00:01:19,620 --> 00:01:21,055
那么 V99又是什么
Now, but what is V99?

27
00:01:21,055 --> 00:01:25,075
我们把它代入这个等式
Well, we'll just plug it in from this equation.

28
00:01:25,075 --> 00:01:30,390
所以V99就等于0.1*θ99
So this is just going to be 0.1 times theta 99,

29
00:01:30,390 --> 00:01:33,215
当然 这两项也被互换了
and again I've reversed these two terms,

30
00:01:33,215 --> 00:01:38,030
加上0.9*V98
plus 0.9 times V98.

31
00:01:38,030 --> 00:01:39,485
那么 V98又是什么
But then what is V98?

32
00:01:39,485 --> 00:01:41,765
你可以从这个等式中得知
Well, you just get that from here.

33
00:01:41,765 --> 00:01:44,220
你可以代入这里
So you can just plug in here,

34
00:01:44,220 --> 00:01:47,875
0.1*θ98
0.1 times theta 98,

35
00:01:47,875 --> 00:01:52,560
加上0.9*V97,以此类推
plus 0.9 times V97, and so on.

36
00:01:52,560 --> 00:01:54,405
如果将这些项全部相乘
And if you multiply all of these terms out,

37
00:01:54,405 --> 00:02:00,060
能得到V100=0.1*θ100加上
you can show that V100 is 0.1 times theta 100 plus.

38
00:02:00,060 --> 00:02:02,552
现在 我们看下θ99的系数
Now, let's look at the coefficient on theta 99,

39
00:02:02,552 --> 00:02:09,030
将是0.1*0.9*θ99
it's going to be 0.1 times 0.9, times theta 99.

40
00:02:09,030 --> 00:02:12,160
现在 我们看下θ98的系数
Now, let's look at the coefficient on theta 98,

41
00:02:12,160 --> 00:02:16,880
为0.1*0.9*0.9
there's a 0.1 here times 0.9, times 0.9.

42
00:02:16,880 --> 00:02:18,565
所以 如果我们展开代数
So if we expand out the Algebra,

43
00:02:18,565 --> 00:02:26,295
这就是0.1*0.9²*θ98
this become 0.1 times 0.9 squared, times theta 98.

44
00:02:26,295 --> 00:02:28,260
如果你继续展开
And, if you keep expanding this out,

45
00:02:28,260 --> 00:02:32,315
这一项将变成0.1*0.9³
you find that this becomes 0.1 times 0.9 cubed,

46
00:02:32,315 --> 00:02:34,920
*θ97+0.1
(times) theta97 plus 0.1.

47
00:02:34,920 --> 00:02:37,440
乘以0.9的四次方
times 0.9 to the fourth,

48
00:02:37,440 --> 00:02:41,800
乘以θ96 加上点点点
times theta 96, plus dot dot dot.

49
00:02:41,800 --> 00:02:47,010
这是一种求和方式 也是θ100的加权平均值
So this is really a way to sum and
that's a weighted average of theta 100,

50
00:02:47,010 --> 00:02:49,680
是目前的每日气温
which is the current days temperature and
we're looking for

51
00:02:49,680 --> 00:02:53,730
也是我们对第一百天的气温的预估
a perspective of V100 which you calculate
on the 100th day of the year.

52
00:02:53,730 --> 00:02:56,870
但这些是 θ100
But those are sum of your theta 100,

53
00:02:56,870 --> 00:02:58,865
θ99 θ98
theta 99, theta 98,

54
00:02:58,865 --> 00:03:02,175
θ97 θ96等等的总和
theta 97, theta 96, and so on.

55
00:03:02,175 --> 00:03:05,250
所以 一种画图方法可以是
So one way to draw this in pictures would be if,

56
00:03:05,250 --> 00:03:08,880
假设 我们有几天的气温值
let's say we have some number of days of temperature

57
00:03:08,880 --> 00:03:14,610
这是θ 这是T θ100是一个总和值
So this is theta and this is T.
So theta 100 will be sum value,

58
00:03:14,610 --> 00:03:17,095
θ99也是一个总和值
then theta 99 will be sum value,

59
00:03:17,095 --> 00:03:19,360
θ98 以及这些
theta 98, so these are,

60
00:03:19,360 --> 00:03:21,255
这是T=100
so this is T equals 100,

61
00:03:21,255 --> 00:03:23,070
(t等于) 99 98 诸如此类
99, 98, and so on,

62
00:03:23,070 --> 00:03:26,360
每日气温和总和之间的比率
ratio of sum number of days of temperature.

63
00:03:26,360 --> 00:03:31,015
接着 我们能得到一个指数衰减函数
And what we have is then
an exponentially decaying function.

64
00:03:31,015 --> 00:03:37,140
起止点为0.1和0.9
So starting from 0.1 to 0.9,

65
00:03:37,140 --> 00:03:41,630
乘以0.1 (乘以)0.9²
times 0.1 to 0.9 squared,

66
00:03:41,630 --> 00:03:44,555
乘以0.1 然后依次类推
times 0.1, to and so on.

67
00:03:44,555 --> 00:03:47,150
这就是指数衰减函数
So you have this exponentially decaying function.

68
00:03:47,150 --> 00:03:50,600
你计算V100的方式
And the way you compute V100,

69
00:03:50,600 --> 00:03:55,760
就是选择两个函数间的元素 然后求和
is you take the element wise product
between these two functions and sum it up.

70
00:03:55,760 --> 00:03:56,985
例如 选这个值
So you take this value,

71
00:03:56,985 --> 00:03:59,165
θ100*0.1
theta 100 times 0.1,

72
00:03:59,165 --> 00:04:05,770
乘以这个值 θ99*0.1*0.9
times this value of theta 99 times 0.1 times 0.9,

73
00:04:05,770 --> 00:04:07,995
这是第二项 依次类推
that's the second term and so on.

74
00:04:07,995 --> 00:04:10,170
这将每日气温值
So it's really taking the daily temperature,

75
00:04:10,170 --> 00:04:14,610
乘以这个指数衰减函数 然后求和
multiply with this exponentially decaying function,
and then summing it up.

76
00:04:14,610 --> 00:04:17,390
这就是你的V100值
And this becomes your V100.

77
00:04:17,390 --> 00:04:19,165
事实证明 使用链式法则来计算

78
00:04:19,165 --> 00:04:21,090
具体细节 我们稍后再讲
up to details that we will talk about later，

79
00:04:21,090 --> 00:04:22,655
但这里的所有系数
but all of these coefficients,

80
00:04:22,655 --> 00:04:27,335
加起来等于1或接近1
add up to one or add up to very close to one

81
00:04:27,335 --> 00:04:31,670
将涉及我们下一讲中的偏差修正
up to a detail called bias correction
which we'll talk about in the next video.

82
00:04:31,670 --> 00:04:35,225
但正因为如此 这的确是一个指数加权平均值
But because of that,
this really is an exponentially weighted average.

83
00:04:35,225 --> 00:04:37,595
最后 你可能会想
And finally, you might wonder,

84
00:04:37,595 --> 00:04:41,210
这是几天的平均气温值
how many days temperature is this averaging over.

85
00:04:41,210 --> 00:04:46,400
结果是0.9的十次方
Well, it turns out that 0.9 to the power of 10,

86
00:04:46,400 --> 00:04:52,085
大约0.35 也就是大约1/E
is about 0.35 and
this turns out to be about one over E,

87
00:04:52,085 --> 00:04:54,410
一个自然算法的基础值
one of the base of natural algorithms.

88
00:04:54,410 --> 00:04:59,030
通常 如果有1-ε
And, more generally, if you have one minus epsilon,

89
00:04:59,030 --> 00:05:00,200
以此为例
so in this example,

90
00:05:00,200 --> 00:05:01,880
ε=0.1
epsilon would be 0.1,

91
00:05:01,880 --> 00:05:07,250
因此 (1-ε)的1/ε方
so if this was 0.9,
then one minus epsilon to the one over epsilon.

92
00:05:07,250 --> 00:05:08,720
大约是1/E
This is about one over E,

93
00:05:08,720 --> 00:05:12,065
大约是0.34 0.35
this is about 0.34, 0.35.

94
00:05:12,065 --> 00:05:14,735
换句话说
And so, in other words,

95
00:05:14,735 --> 00:05:19,610
大约需要10天
it takes about 10 days for the height of this to

96
00:05:19,610 --> 00:05:24,680
这一值能降到峰值1/E的1/3
decay to around 1/3 already one over E of the peak.

97
00:05:24,680 --> 00:05:25,915
正因为此
So it's because of this,

98
00:05:25,915 --> 00:05:31,325
当β=0.9 我们说
that when beta equals 0.9, we say that,

99
00:05:31,325 --> 00:05:35,090
就好像你在计算时
this is as if you're computing,

100
00:05:35,090 --> 00:05:40,355
指数加权平均值只关注最近十天的气温值
an exponentially weighted average that
focuses on just the last 10 days temperature.

101
00:05:40,355 --> 00:05:43,940
因为十天后 气温值将降至
Because it's after 10 days that the weight decays

102
00:05:43,940 --> 00:05:48,380
不到目前气温值的三分之一
to less than about
a third of the weight of the current day.

103
00:05:48,380 --> 00:05:53,300
相反 如果β=0.98
Whereas, in contrast, if beta was equal to 0.98,

104
00:05:53,300 --> 00:05:59,320
那0.98的几次方才能使这个值足够小
then, well, what do you need 0.98 to the power of
in order for this to really small?

105
00:05:59,320 --> 00:06:04,310
结果 0.98的50次方大约
Turns out that 0.98 to the power of 50
will be approximately

106
00:06:04,310 --> 00:06:06,710
等于1/E 所以 要使数值足够大
equal to one over E. So the way to be pretty big

107
00:06:06,710 --> 00:06:09,380
头五十天的数值必须远大于1/E
will be bigger than one over E for the first 50 days,

108
00:06:09,380 --> 00:06:11,840
之后 它们将会很快衰减
and then they'll decay quite rapidly over that.

109
00:06:11,840 --> 00:06:14,780
所以 感觉上这是一件困难又迅速的事
So intuitively, this is the hard and fast thing,

110
00:06:14,780 --> 00:06:18,860
你可以把它看作50天的平均气温
you can think of this as averaging over
about 50 days temperature.

111
00:06:18,860 --> 00:06:20,335
因为在这个例子中
Because, in this example,

112
00:06:20,335 --> 00:06:22,290
要使用等式左边的这一项
to use the notation here on the left,

113
00:06:22,290 --> 00:06:25,530
ε需要等于0.02
it's as if epsilon is equal to 0.02,

114
00:06:25,530 --> 00:06:27,750
1/ε等于50
so one over epsilon is 50.

115
00:06:27,750 --> 00:06:30,080
顺便说一下 我们也就是这样获得这个公式的
And this, by the way, is how we got the formula,

116
00:06:30,080 --> 00:06:35,150
我们获得1/(1-β)或相应天数的平均值
that we averaging over one over one minus beta
or so days.

117
00:06:35,150 --> 00:06:39,915
在这里 ε可替换1-β
Right here, epsilon replace a row of 1 minus beta.

118
00:06:39,915 --> 00:06:42,350
它能告诉你 大概多少天的气温值
It tells you, up to some constant roughly how many

119
00:06:42,350 --> 00:06:45,148
可以作为气温均值
days' temperature you should think of this
as averaging over.

120
00:06:45,148 --> 00:06:48,175
但这只是一种经验之谈
But this is just a rule of thumb for 
how to think about it,

121
00:06:48,175 --> 00:06:51,290
并非正式的数学表述方式
and it isn't a formal mathematical statement.

122
00:06:51,290 --> 00:06:54,290
最后 我们来了解下 如何在实际情况中使用它
Finally, let's talk about 
how you actually implement this.

123
00:06:54,290 --> 00:06:57,760
回顾下 我们先将V0设为0
Recall that we start over V0 initialized as zero,

124
00:06:57,760 --> 00:06:59,570
然后 计算第一天的值V1
then compute V one on the first day,

125
00:06:59,570 --> 00:07:01,605
V2，等第
V2, and so on.

126
00:07:01,605 --> 00:07:02,630
现在 为了解释这一算法
Now, to explain the algorithm,

127
00:07:02,630 --> 00:07:05,990
需要写下V0
it was useful to write down V0,

128
00:07:05,990 --> 00:07:09,480
V1 V2 及其他数值 作为不同的变量
V1, V2, and so on as distinct variables.

129
00:07:09,480 --> 00:07:11,835
但实际使用这一运算时
But if you're implementing this in practice,

130
00:07:11,835 --> 00:07:15,774
这是你需要做的 初始化V值为0
this is what you do:
you initialize V to be called to zero,

131
00:07:15,774 --> 00:07:17,555
第一天
and then on day one,

132
00:07:17,555 --> 00:07:21,105
你将V值设为
you would set V equals beta,

133
00:07:21,105 --> 00:07:25,405
β*V+(1-β)*θ1
times V, plus one minus beta, times theta one.

134
00:07:25,405 --> 00:07:27,780
第二天 更新V值
And then on the next day, you will update V,

135
00:07:27,780 --> 00:07:31,805
被称为
to be called to

136
00:07:31,805 --> 00:07:33,820
βV+(1-β)*θ2
beta V, plus 1 minus beta,

137
00:07:33,820 --> 00:07:35,985
以此类推
theta 2, and so on.

138
00:07:35,985 --> 00:07:41,282
有时 我们用V下标θ来表示
And sometimes we use this notation V
subscript theta to denote that

139
00:07:41,282 --> 00:07:47,115
V在计算指数加权平均值θ
V is computing this exponentially weighted average 
of the parameter theta.

140
00:07:47,115 --> 00:07:49,690
用四个新表达式再讲一遍
So just to say this again but with four new formats,

141
00:07:49,690 --> 00:07:52,095
设置Vθ=0
you set V theta equals zero,

142
00:07:52,095 --> 00:07:55,715
接着 不间断地 给每一天设置一个值
and then, repeatedly, have one each day,

143
00:07:55,715 --> 00:08:02,314
你会得到θT 将它代入Vθ
you would get next theta T, and then set to V theta,

144
00:08:02,314 --> 00:08:05,140
得到
gets updated as

145
00:08:05,140 --> 00:08:07,210
β乘以Vθ的旧值
beta, times the old value of V theta,

146
00:08:07,210 --> 00:08:08,750
加上(1-β)
plus one minus beta,

147
00:08:08,750 --> 00:08:12,045
乘以Vθ的当前值
times the current value of V theta.

148
00:08:12,045 --> 00:08:15,440
这个指数加权平均公式的优点之一是
So one of the advantages of
this exponentially weighted average formula,

149
00:08:15,440 --> 00:08:17,140
不需要太多存储空间
is that it takes very little memory.

150
00:08:17,140 --> 00:08:21,175
只需在计算机内存中保留一行数字
You just need to keep just 
one row number in computer memory,

151
00:08:21,175 --> 00:08:26,965
基于新数值 你用这个公式不断重写运算即可
and you keep on overwriting it with this formula
based on the latest values that you got.

152
00:08:26,965 --> 00:08:29,590
主要是因为高效
And it's really this reason, the efficiency,

153
00:08:29,590 --> 00:08:33,340
它基本只占一行代码
it just takes one line of code basically

154
00:08:33,340 --> 00:08:34,690
一个单一初始值的储存和内存空间
and just storage and memory for 
a single raw number 

155
00:08:34,690 --> 00:08:38,320
来计算指数加权平均值
to compute this exponentially weighted average.

156
00:08:38,320 --> 00:08:40,195
这并不是最好的方法
It's really not the best way,

157
00:08:40,195 --> 00:08:42,805
不是计算均值最准确的方法
not the most accurate way to compute an average.

158
00:08:42,805 --> 00:08:44,920
如果你需要计算一个移动窗口
If you were to compute a moving window,

159
00:08:44,920 --> 00:08:47,770
例如 直接算出近十天或五十天的气温总和
where you explicitly sum over the last 10 days,

160
00:08:47,770 --> 00:08:51,550
除以10或者50
the last 50 days temperature 
and just divide by 10 or divide by 50,

161
00:08:51,550 --> 00:08:53,320
通常会给你一个更好的估计值
that usually gives you a better estimate.

162
00:08:53,320 --> 00:08:55,265
但缺点是
But the disadvantage of that,

163
00:08:55,265 --> 00:08:57,550
保存所有气温值
of explicitly keeping all the temperatures around and

164
00:08:57,550 --> 00:09:00,190
以及近十天气温的总和 需要更多内存
sum of the last 10 days is it requires more memory,

165
00:09:00,190 --> 00:09:03,990
更难实现 花费也更高
and it's just more complicated to implement 
and is computationally more expensive.

166
00:09:03,990 --> 00:09:07,885
在接下来的视频中 我们会看到一些例子
So for things, 
we'll see some examples on the next few videos,

167
00:09:07,885 --> 00:09:12,130
需要你计算很多变量的平均值
where you need to compute 
averages of a lot of variables.

168
00:09:12,130 --> 00:09:15,625
不论是计算还是存储效率 今天介绍的这个方法都十分高效
This is a very efficient way 
to do so both from computation

169
00:09:15,625 --> 00:09:19,840
这也是为什么它在机器学习中被广泛应用
and memory efficiency point of view 
which is why it's used in a lot of machine learning.

170
00:09:19,840 --> 00:09:24,280
更不用说它的另一个优势 就是只需一行代码
Not to mention that there's just one line of code 
which is, maybe, another advantage.

171
00:09:24,280 --> 00:09:28,570
现在 你知道了如何实现指数加权平均运算
So, now, you know how to implement 
exponentially weighted averages.

172
00:09:28,570 --> 00:09:30,160
另一个值得你了解的技术细节是
There's one more technical detail 
that's worth for you knowing

173
00:09:30,160 --> 00:09:32,965
偏差修正
about called bias correction.

174
00:09:32,965 --> 00:09:35,365
我们将在下一讲中介绍 那之后
Let's see that in the next video, and then after that,

175
00:09:35,365 --> 00:09:37,420
你就能用这些方法去建立
you will use this to build

176
00:09:37,420 --> 00:09:41,450
一个更好的优化算法
a better optimization algorithm
 than the straight forward
GTC字幕组翻译
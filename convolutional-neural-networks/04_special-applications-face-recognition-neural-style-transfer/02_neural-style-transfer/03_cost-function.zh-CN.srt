1
00:00:00,000 --> 00:00:02,400
为了构建一个神经风格转移系统

2
00:00:02,400 --> 00:00:05,730
我们为生成的图像来定义一个代价函数

3
00:00:05,730 --> 00:00:09,953
你们之后会看到通过最小化这个代价函数

4
00:00:09,953 --> 00:00:12,270
你能够生成你想要的图像

5
00:00:12,270 --> 00:00:15,231
记住问题的形式是什么

6
00:00:15,231 --> 00:00:17,400
你有一张内容图像C，

7
00:00:17,400 --> 00:00:21,510
有一张风格图像S，你的目标是生成一个新图像G。

8
00:00:21,510 --> 00:00:26,180
为了实现神经风格迁移，

9
00:00:26,180 --> 00:00:34,080
你将要做的是定义一个生成图像G的代价函数J，来衡量

10
00:00:34,080 --> 00:00:37,920
某个生成图像的质量有多好。我们用梯度下降

11
00:00:37,920 --> 00:00:42,425
让G的损失最小化，从而生成出想要的图像。

12
00:00:42,425 --> 00:00:44,490
所以一个生成的图像到底质量如何呢？

13
00:00:44,490 --> 00:00:48,460
我们要定义这个代价函数的两个部分

14
00:00:48,460 --> 00:00:52,190
第一个部分是内容代价

15
00:00:52,190 --> 00:00:56,480
这是关于内容图像和生成图像的函数

16
00:00:56,480 --> 00:01:00,960
它所做的是衡量生成图像的内容

17
00:01:00,960 --> 00:01:05,495
与内容图像的内容之间的相似程度

18
00:01:05,495 --> 00:01:10,345
并将这个结果与风格代价函数相加。风格代价函数是

19
00:01:10,345 --> 00:01:14,720
一个关于风格图像与生成图像的函数，它所做的是衡量

20
00:01:14,720 --> 00:01:20,547
生成图像G的风格与风格图像S的风格的相似程度。

21
00:01:20,547 --> 00:01:24,180
我们将按照一定的比重alpha和beta来

22
00:01:24,180 --> 00:01:29,610
表示内容代价与风格代价之间的相对比重

23
00:01:29,610 --> 00:01:33,405
这样看起来是有一些多余的，用了两个超参数来表示

24
00:01:33,405 --> 00:01:44,370
相对的比重

25
00:01:44,370 --> 00:01:47,070
一个超参数应该就足够了

26
00:01:47,070 --> 00:01:50,230
但是神经风格迁移的原作者

27
00:01:50,230 --> 00:01:52,410
用了两个不同的超参数

28
00:01:52,410 --> 00:01:55,278
我将遵照他们的表示方法

29
00:01:55,278 --> 00:01:57,925
我接下来

30
00:01:57,925 --> 00:02:00,810
要展示的神经风格迁移算法是

31
00:02:00,810 --> 00:02:04,200
Leon Gatys、Alexander Ecker 和Matthias提出的。

32
00:02:04,200 --> 00:02:09,630
他们的论文并不是很难读。所以看完这几个视频之后，如果你有兴趣，

33
00:02:09,630 --> 00:02:14,550
我建议你去读一读他们的论文。

34
00:02:14,550 --> 00:02:17,910
算法的运行方式如下

35
00:02:17,910 --> 00:02:21,300
如果你想为了生成新图像而找到G的代价函数J

36
00:02:21,300 --> 00:02:25,030
那么你需要这么做：

37
00:02:25,030 --> 00:02:29,035
你需要随机初始化这个新图像G

38
00:02:29,035 --> 00:02:30,720
让它变成100x100x3或者是500x500x3

39
00:02:30,720 --> 00:02:37,200
或者是你想要的那个尺寸

40
00:02:37,200 --> 00:02:41,885
然后我们将定义上一个幻灯片中讲过的关于新图像G代价函数J

41
00:02:41,885 --> 00:02:47,805
现在我们可以用梯度下降来最小化这个代价函数

42
00:02:47,805 --> 00:02:54,300
然后G可以用这个表达式来更新：G - dJ/dG(也就是G减去代价函数关于G的导数)

43
00:02:54,300 --> 00:02:58,770
在这个过程当中，你相当于在更新新图像G的像素的值

44
00:02:58,770 --> 00:03:04,175
在这里，G可能是一个100x100x3大小，基于RGB颜色的图像

45
00:03:04,175 --> 00:03:10,215
在这里我举个例子：假设我们用这个内容图像和这个风格图像

46
00:03:10,215 --> 00:03:13,365
这可能是毕加索风格的一副图像

47
00:03:13,365 --> 00:03:15,855
然后当你随机初始化新图像G的时候

48
00:03:15,855 --> 00:03:18,535
你所生成的图像

49
00:03:18,535 --> 00:03:24,110
就是这个充满噪点的图像，其中每一个像素值都是随机选取的

50
00:03:24,110 --> 00:03:25,905
当你运行梯度下降时

51
00:03:25,905 --> 00:03:32,325
你在慢慢地通过更改G的像素值将G的代价函数减小

52
00:03:32,325 --> 00:03:36,030
然后你会的到一副新图像，它内容很像原本的内容图片

53
00:03:36,030 --> 00:03:40,755
但风格更趋向于原本的风格图片

54
00:03:40,755 --> 00:03:44,690
在这个视频中，你了解到了大致的神经网络风格转移算法

55
00:03:44,690 --> 00:03:47,530
在这里你定义了新图像G的代价函数

56
00:03:47,530 --> 00:03:51,420
并且一直将这个代价函数最小化

57
00:03:51,420 --> 00:03:53,420
接下来，我们需要了解如何去定义

58
00:03:53,420 --> 00:03:57,210
具体的内容代价函数和风格代价函数

59
00:03:57,210 --> 00:03:59,530
让我们进入下一个视频
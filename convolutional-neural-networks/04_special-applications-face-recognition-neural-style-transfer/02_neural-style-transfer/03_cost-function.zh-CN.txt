为了构建一个神经风格转移系统 我们为生成的图像来定义一个代价函数 你们之后会看到通过最小化这个代价函数 你能够生成你想要的图像 记住问题的形式是什么 你有一张内容图像C， 有一张风格图像S，你的目标是生成一个新图像G。 为了实现神经风格迁移， 你将要做的是定义一个生成图像G的代价函数J，来衡量 某个生成图像的质量有多好。我们用梯度下降 让G的损失最小化，从而生成出想要的图像。 所以一个生成的图像到底质量如何呢？ 我们要定义这个代价函数的两个部分 第一个部分是内容代价 这是关于内容图像和生成图像的函数 它所做的是衡量生成图像的内容 与内容图像的内容之间的相似程度 并将这个结果与风格代价函数相加。风格代价函数是 一个关于风格图像与生成图像的函数，它所做的是衡量 生成图像G的风格与风格图像S的风格的相似程度。 我们将按照一定的比重alpha和beta来 表示内容代价与风格代价之间的相对比重 这样看起来是有一些多余的，用了两个超参数来表示 相对的比重 一个超参数应该就足够了 但是神经风格迁移的原作者 用了两个不同的超参数 我将遵照他们的表示方法 我接下来 要展示的神经风格迁移算法是 Leon Gatys、Alexander Ecker 和Matthias提出的。 他们的论文并不是很难读。所以看完这几个视频之后，如果你有兴趣， 我建议你去读一读他们的论文。 算法的运行方式如下 如果你想为了生成新图像而找到G的代价函数J 那么你需要这么做： 你需要随机初始化这个新图像G 让它变成100x100x3或者是500x500x3 或者是你想要的那个尺寸 然后我们将定义上一个幻灯片中讲过的关于新图像G代价函数J 现在我们可以用梯度下降来最小化这个代价函数 然后G可以用这个表达式来更新：G - dJ/dG(也就是G减去代价函数关于G的导数) 在这个过程当中，你相当于在更新新图像G的像素的值 在这里，G可能是一个100x100x3大小，基于RGB颜色的图像 在这里我举个例子：假设我们用这个内容图像和这个风格图像 这可能是毕加索风格的一副图像 然后当你随机初始化新图像G的时候 你所生成的图像 就是这个充满噪点的图像，其中每一个像素值都是随机选取的 当你运行梯度下降时 你在慢慢地通过更改G的像素值将G的代价函数减小 然后你会的到一副新图像，它内容很像原本的内容图片 但风格更趋向于原本的风格图片 在这个视频中，你了解到了大致的神经网络风格转移算法 在这里你定义了新图像G的代价函数 并且一直将这个代价函数最小化 接下来，我们需要了解如何去定义 具体的内容代价函数和风格代价函数 让我们进入下一个视频
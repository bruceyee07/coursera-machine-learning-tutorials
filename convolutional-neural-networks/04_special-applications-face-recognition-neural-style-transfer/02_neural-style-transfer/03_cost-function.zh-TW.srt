1
00:00:00,000 --> 00:00:02,400
為了做一個「神經風格轉換」的系統
(Neural Style Transfer)

2
00:00:02,400 --> 00:00:05,730
讓我們為生出來的圖片定義一個成本函數

3
00:00:05,730 --> 00:00:09,953
等等你會看到，藉由最小化這個成本函數

4
00:00:09,953 --> 00:00:12,270
你可以產生出你想要的圖片

5
00:00:12,270 --> 00:00:15,231
回憶一下這個問題的定義

6
00:00:15,231 --> 00:00:17,400
你會得到一張內容圖片 C、

7
00:00:17,400 --> 00:00:21,510
得到一張風格圖片 S，而你的目標是產生一張新圖片 G

8
00:00:21,510 --> 00:00:26,180
為了要實作神經風格轉換

9
00:00:26,180 --> 00:00:34,080
你要去定義成本函數 J(G)，去衡量這張

10
00:00:34,080 --> 00:00:37,920
產生出來的圖片效果多好。然後我們用梯度下降法

11
00:00:37,920 --> 00:00:42,425
去最小化 J(G)，以生出這張圖片

12
00:00:42,425 --> 00:00:44,490
那麼，某張圖片的效果多好呢？

13
00:00:44,490 --> 00:00:48,460
我們會把這成本函數定義成兩部份

14
00:00:48,460 --> 00:00:52,190
第一部份叫「內容成本」(content cost)

15
00:00:52,190 --> 00:00:56,480
這是個內容圖片和生成圖片的函數

16
00:00:56,480 --> 00:01:00,960
這函數做的是去衡量 生成圖片的內容

17
00:01:00,960 --> 00:01:05,495
和內容圖片C的內容，兩者有多像。然後，

18
00:01:05,495 --> 00:01:10,345
再加上某個「風格成本」(style cost) 函數，也就是

19
00:01:10,345 --> 00:01:14,720
S和G的函數：他會去衡量

20
00:01:14,720 --> 00:01:20,547
G的風格和S的風格有多像。

21
00:01:20,547 --> 00:01:24,180
最後，我們會兩個超參數 alpha 和 beta 加權他們

22
00:01:24,180 --> 00:01:29,610
來指定「內容成本」和「風格成本」相對的權重

23
00:01:29,610 --> 00:01:33,405
用兩個不同的超參數似乎有點多餘

24
00:01:33,405 --> 00:01:44,370
如果要指定成本間的相對權重

25
00:01:44,370 --> 00:01:47,070
看起來一個超參數就夠了

26
00:01:47,070 --> 00:01:50,230
不過神經風格轉換演算法的原始作者

27
00:01:50,230 --> 00:01:52,410
使用了兩個超參數

28
00:01:52,410 --> 00:01:55,278
所以我這邊就遵照他們的方式

29
00:01:55,278 --> 00:01:57,925
關於接下來幾部影片展示的

30
00:01:57,925 --> 00:02:00,810
神經風格轉換演算法是由 Leon Gatys,

31
00:02:00,810 --> 00:02:04,200
Alexander Ecker 和 Matthias 所著

32
00:02:04,200 --> 00:02:09,630
他們的論文並不難讀，所以看完影片後如果你想的話

33
00:02:09,630 --> 00:02:14,550
我相當鼓勵你去看一下他們的論文

34
00:02:14,550 --> 00:02:17,910
那麼，這演算法是這樣跑的

35
00:02:17,910 --> 00:02:21,300
要找出成本函數 J(G)

36
00:02:21,300 --> 00:02:25,030
以真的生出新的圖片，你要這樣做：

37
00:02:25,030 --> 00:02:29,035
你會隨機地初始化「生成圖片」G

38
00:02:29,035 --> 00:02:30,720
他可能是 100x100x3

39
00:02:30,720 --> 00:02:37,200
或 500x500x3 或是你想要的維度

40
00:02:37,200 --> 00:02:41,885
然後，我們會定義前一張投影片提到的成本函數 J(G)

41
00:02:41,885 --> 00:02:47,805
所以接下來，你可以用梯度下降法去最小化這個，
讓你能更新 G

42
00:02:47,805 --> 00:02:54,300
變成 G 減掉成本函數 J(G) 的導數。所以在這過程

43
00:02:54,300 --> 00:02:58,770
你實際上是更新 G 這張圖片的像素的值，

44
00:02:58,770 --> 00:03:04,175
也就是 100x100x3 — 如果是 RGB 的圖片

45
00:03:04,175 --> 00:03:10,215
這邊是個例子：假設你有這張內容圖片和風格圖片

46
00:03:10,215 --> 00:03:13,365
這是另一幅畢卡索的畫

47
00:03:13,365 --> 00:03:15,855
那麼，當你隨機初始化 G

48
00:03:15,855 --> 00:03:18,535
你一開始亂生成的圖片

49
00:03:18,535 --> 00:03:24,110
就只是這種白噪音的圖，每個像素的值都是隨機取的

50
00:03:24,110 --> 00:03:25,905
然後當你跑梯度下降法

51
00:03:25,905 --> 00:03:32,325
最小化成本函數 J(G)，你會慢慢調整像素的值，所以

52
00:03:32,325 --> 00:03:36,030
你的圖片會逐漸越來越像

53
00:03:36,030 --> 00:03:40,755
用風格圖片的風格畫出的內容圖片

54
00:03:40,755 --> 00:03:44,690
在這部影片，你看到了整個演算法的輪廓

55
00:03:44,690 --> 00:03:47,530
關於神經風格轉換：也就是

56
00:03:47,530 --> 00:03:51,420
定義生成圖片 G 的成本函數，然後最小化它

57
00:03:51,420 --> 00:03:53,420
接下來，我們需要看看怎麼定義

58
00:03:53,420 --> 00:03:57,210
「內容成本函數」以及「風格成本函數」

59
00:03:57,210 --> 00:03:59,530
就讓我們從下一部影片開始
1
00:00:00,270 --> 00:00:04,351
ConvNet について 多くを学んできた ConvNet の構造から

2
00:00:04,351 --> 00:00:08,888
画像認識で それをどう使うか

3
00:00:08,888 --> 00:00:13,590
物体検出で 顔認識で そして ニューラル スタイル変換で に至るまで全てを

4
00:00:13,590 --> 00:00:17,626
議論の殆どは 画像についてのものだった

5
00:00:17,626 --> 00:00:21,205
２Dデータだった なぜなら 画像は とても一般的だ

6
00:00:21,205 --> 00:00:26,135
しかし あなたが学んできた多くのアイデアは ２D画像に対してだけでなく

7
00:00:26,135 --> 00:00:30,640
１Dデータや３Dデータに対しても 適用できる

8
00:00:30,640 --> 00:00:33,048
次の例をみてみましょう。

9
00:00:33,048 --> 00:00:38,506
このコースの最初の週で ２D畳み込みを学習した

10
00:00:38,506 --> 00:00:44,340
14 x 14 画像を入力し 5 x 5 フィルターで畳み込むのをやったでしょ

11
00:00:44,340 --> 00:00:49,097
14 x 14 をどのようにして 5 x 5 で畳み込むか見たよね

12
00:00:49,097 --> 00:00:52,590
それは 10 x 10 を出力する

13
00:00:52,590 --> 00:00:58,662
複数チャンネルがある場合 14 x 14 x 3 とかの場合は

14
00:00:58,662 --> 00:01:03,170
5 x 5 の 同じ 3 に合うものになる

15
00:01:03,170 --> 00:01:08,460
そして 複数のフィルターがある場合 16フィルターの場合は 10 x 10 x 16 を得る

16
00:01:08,460 --> 00:01:14,430
似たアイデアを １Dデータにも適用できる

17
00:01:14,430 --> 00:01:21,328
例えば 左は EKG信号 心電図だ

18
00:01:21,328 --> 00:01:25,577
電極を 胸に置き 小さな電圧の変化を

19
00:01:25,577 --> 00:01:29,910
心臓の鼓動として 測定する

20
00:01:29,910 --> 00:01:34,562
心臓の鼓動で生み出される 小さな電気の波を

21
00:01:34,562 --> 00:01:36,823
電極のペアで測定できる

22
00:01:36,823 --> 00:01:40,490
それで これは 誰かの心臓の鼓動の EKG だ

23
00:01:40,490 --> 00:01:45,930
これらの各頂点は １つの鼓動に対応している

24
00:01:45,930 --> 00:01:49,970
例えば EKG信号を使って 医療診断をしたい場合

25
00:01:49,970 --> 00:01:55,062
１Dデータを使うことになる なぜなら EKGデータは

26
00:01:55,062 --> 00:02:01,610
時系列で それぞれの短い時間での電圧を 見せるからだ

27
00:02:01,610 --> 00:02:04,500
よって 14 x 14 次元入力ではなく

28
00:02:04,500 --> 00:02:08,160
単なる 14次元入力になる

29
00:02:08,160 --> 00:02:11,770
この場合 これを １次元フィルターで 畳み込みたいでしょ

30
00:02:11,770 --> 00:02:16,420
5 x 5 フィルターじゃなくて 単に 5次元フィルターでね

31
00:02:16,420 --> 00:02:21,481
２Dデータでは 畳み込みは 5 x 5 の Same特徴量検出器を使って

32
00:02:21,481 --> 00:02:26,950
画像全体の沢山の場所で それを適用することができた

33
00:02:26,950 --> 00:02:31,110
そうやって 10 x 10 出力を得られた

34
00:02:31,110 --> 00:02:36,258
１Dフィルターだと ５次元フィルターを使い

35
00:02:36,258 --> 00:02:42,860
同じように この１D信号全体の様々な場所に適用できる

36
00:02:42,860 --> 00:02:45,510
この畳み込みを適用すると

37
00:02:45,510 --> 00:02:50,270
14次元のものを

38
00:02:50,270 --> 00:02:55,370
5次元ので 畳み込むと 10次元の出力を得る

39
00:02:55,370 --> 00:03:00,496
そして もし複数チャンネルがあれば この場合

40
00:03:00,496 --> 00:03:06,381
単に１チャンネルだから EKG１電極だから x 5 x 1 だ

41
00:03:06,381 --> 00:03:12,468
もし 16フィルターあれば 10 x 16 になるだろう

42
00:03:12,468 --> 00:03:16,300
これが ConvNet の１層となる

43
00:03:16,300 --> 00:03:20,257
ConvNet の次の層では もし 10 x 16 次元の入力で

44
00:03:20,257 --> 00:03:25,560
そして また５次元のフィルターで畳み込むなら

45
00:03:25,560 --> 00:03:29,583
そして それが16チャンネルだとする
ここは合ってないといけいない

46
00:03:29,583 --> 00:03:34,585
そして 32フィルターあるなら 別の層の出力は

47
00:03:34,585 --> 00:03:39,190
6 x 32 だ 32フィルターならね

48
00:03:39,190 --> 00:03:42,268
２Dデータへの類推で

49
00:03:42,268 --> 00:03:46,779
これは この場合と似ている 10 x 10 x 16 データを

50
00:03:46,779 --> 00:03:51,860
5 x 5 x 16 で畳み込んで
ここは合ってないといけいない

51
00:03:51,860 --> 00:03:54,568
6 x 6 次元の出力になる

52
00:03:54,568 --> 00:03:58,080
そして 32フィルターあれば 32になる

53
00:03:58,080 --> 00:04:03,567
これら全てのアイデアは １Dデータにも適用できる

54
00:04:03,567 --> 00:04:08,884
同じように特徴検出器を作ることができ こんなのだ 多くの場所に適用できる

55
00:04:08,884 --> 00:04:13,430
例えば EKG信号の異なる鼓動を検出するために使える

56
00:04:13,430 --> 00:04:18,505
同じ特徴セットを使って 時系列上の異なる場所の

57
00:04:18,505 --> 00:04:23,836
鼓動を検出できる
こんな風にして １Dデータにも ConvNet を使うことができる

58
00:04:23,836 --> 00:04:28,501
１Dデータアプリケーションに対しては 実際には 再帰型ニューラルネットワークを使うけどね

59
00:04:28,501 --> 00:04:30,790
それは 次のコースで学ぶよ

60
00:04:30,790 --> 00:04:36,520
でも ConvNet を この問題に使おうとしている人もいる

61
00:04:36,520 --> 00:04:39,990
次の シーケンスモデルについてのコースでは このような

62
00:04:39,990 --> 00:04:43,310
再帰型ニューラルネットワーク LCM その他のモデル について話す

63
00:04:43,310 --> 00:04:47,545
そういった 他の シーケンスデータ用に明確に設計されたモデルに対する

64
00:04:47,545 --> 00:04:51,070
１D ConvNet の利点と決定について話すよ

65
00:04:51,070 --> 00:04:54,290
これが ２Dから１Dへの一般化だ

66
00:04:54,290 --> 00:04:56,510
３Dデータはどうだろうか？

67
00:04:56,510 --> 00:04:58,900
３次元データとは何だろか？

68
00:04:58,900 --> 00:05:04,720
それは １Dリストの数でも ２D行列の数でも無い

69
00:05:04,720 --> 00:05:11,060
今度は ３Dブロックだ 数値の 3次元の入力ボリュームだ

70
00:05:11,060 --> 00:05:15,123
ここに例がある CTスキャンだ

71
00:05:15,123 --> 00:05:20,510
これは X線でスキャンした 人体の３次元モデルだ

72
00:05:20,510 --> 00:05:24,746
ただし CTスキャンは 体全体に渡って 異なる切断面を取る

73
00:05:24,746 --> 00:05:28,465
CTスキャンでスキャンすると こんな風になる

74
00:05:28,465 --> 00:05:33,507
人間の体の異なる切断面を見て それらがどんなだか調べられる

75
00:05:33,507 --> 00:05:37,090
つまり このデータは 根本的に ３次元だ

76
00:05:37,090 --> 00:05:43,039
このデータの考え方としては 高さと

77
00:05:43,039 --> 00:05:46,558
幅と そして 深さを持っているものとできるだろう

78
00:05:46,558 --> 00:05:50,359
そこでは このボリュームの異なる断面がある

79
00:05:50,359 --> 00:05:53,840
体に跨る 異なる断面だ

80
00:05:53,840 --> 00:05:57,660
ConvNet を 適用して この ３次元の CATスキャンや

81
00:05:57,660 --> 00:06:02,470
CTスキャンで 特徴を検出したいなら

82
00:06:02,470 --> 00:06:07,020
最初のスライドの考えを ３次元の畳み込みにも使うことができる

83
00:06:07,020 --> 00:06:10,356
３Dボリュームがあれば

84
00:06:10,356 --> 00:06:15,764
簡単のため 14 x 14 x 14 とする

85
00:06:15,764 --> 00:06:21,770
これは 入力するCTスキャンの 高さと幅と深さだ

86
00:06:21,770 --> 00:06:25,735
そして また 画像と同じように 正方形の必要はない

87
00:06:25,735 --> 00:06:29,450
３Dボリュームも 完全な立方体である必要はない

88
00:06:29,450 --> 00:06:32,210
画像の 高さと幅は 違うかもしれない

89
00:06:32,210 --> 00:06:36,118
同じように CTスキャンの 高さと幅と深さは 違うかもしれない

90
00:06:36,118 --> 00:06:40,560
でも 議論を簡単にするため 14 x 14 x 14 を使う

91
00:06:40,560 --> 00:06:45,849
そして 今度は 5 x 5 x 5 フィルターで畳み込むと

92
00:06:45,849 --> 00:06:50,788
今度は フィルターも３次元になる

93
00:06:50,788 --> 00:06:55,863
そうしたら 10 x 10 x 10 ボリュームを得る

94
00:06:55,863 --> 00:07:01,366
正確には x 1 だ チャンネル数を入れるならね

95
00:07:01,366 --> 00:07:06,715
これは ただの３Dボリュームだけど 色んな数のチャンネルを

96
00:07:06,715 --> 00:07:11,489
持つことができる ここも x 1 になる
これがチャンネルで これもチャンネルで 合っている必要がある

97
00:07:11,489 --> 00:07:17,472
もし 16フィルターあるなら これが 5 x 5 x 5 x 1 だから

98
00:07:17,472 --> 00:07:22,371
次の出力は 10 x 10 x 10 x 16

99
00:07:22,371 --> 00:07:24,790
そして

100
00:07:24,790 --> 00:07:30,129
これが ３Dデータに対する ConvNet の１層だ

101
00:07:30,129 --> 00:07:36,660
ConvNet の次の層では 5 x 5 x 5 x 16 次元フィルターで畳み込む

102
00:07:36,660 --> 00:07:40,666
このチャンネル数は 例によって 合っていなくてはならない

103
00:07:40,666 --> 00:07:46,190
32フィルターあるなら 画像のConvNetで見たのと同様

104
00:07:46,190 --> 00:07:54,350
6 x 6 x 6 ボリュームを 32チャンネル得ることになる

105
00:07:54,350 --> 00:07:57,992
３Dデータも

106
00:07:57,992 --> 00:08:02,020
３次元 ConvNet を使って 直接 学習できる

107
00:08:02,020 --> 00:08:07,500
このフィルターは ３Dデータに跨った特徴を 検出している

108
00:08:08,730 --> 00:08:13,180
CATスキャン 医療スキャン は ３Dボリュームの１例だ

109
00:08:13,180 --> 00:08:18,450
別のデータ例に ３Dボリュームとして扱えるのに 映画データがある

110
00:08:18,450 --> 00:08:23,410
異なる断面になるのは 映画の時間が異なる断面だ

111
00:08:23,410 --> 00:08:28,171
そして これを使い 映画内の 人の動きを検出できる

112
00:08:28,171 --> 00:08:31,868
これが ConvNet の汎用化だ

113
00:08:31,868 --> 00:08:35,520
２Dデータから１Dにも３Dデータにも汎化される

114
00:08:35,520 --> 00:08:40,395
画像データは 一般的で広まっているので ConvNet の主流は ２Dデータだ

115
00:08:40,395 --> 00:08:45,420
つまり画像データだ しかし このような他のモデルも また 役に立つものだ

116
00:08:45,420 --> 00:08:48,588
以上だ これが 今週の最後のビデオだ

117
00:08:48,588 --> 00:08:51,570
そして ConvNet コースの最後のビデオだ

118
00:08:51,570 --> 00:08:53,810
ConvNet について 沢山学んだね

119
00:08:53,810 --> 00:08:58,380
あなたの将来の仕事で これらのアイデアが役に立つといいな

120
00:08:58,380 --> 00:09:01,600
このビデオを終えたことに おめでとう と言いたい

121
00:09:01,600 --> 00:09:04,150
今週のプログラミング演習を楽しんでほしい

122
00:09:04,150 --> 00:09:07,850
そして シーケンスモデルについての 次のコースで会うのを楽しみにしているよ
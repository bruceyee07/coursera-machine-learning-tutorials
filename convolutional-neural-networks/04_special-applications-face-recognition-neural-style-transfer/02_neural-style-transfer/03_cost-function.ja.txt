ニューラル スタイル変換システムを構築するために 生成画像に対するコスト関数を定義しよう 後で見るように このコスト関数を最小化することで 欲しい画像を生成できる 問題の定義を覚えているかな 内容画像 C と スタイル画像 S で 新しい画像 G を生成する ニューラル スタイル変換を実装するために コスト関数 J(G) を定義する
J は 生成画像の良さを測るものだ そして 勾配降下法を使って J(G) を最小化して この画像を生み出す この画像は どの程度いいのだろうか？ では このコスト関数に ２つの部分を定義しよう 最初の部分は 内容コストと呼ばれる これは 内容画像と生成画像の関数だ それは 生成画像の内容と 内容画像 C の内容が どのくらい似ているかを測る それから スタイルコスト関数を加える こっちは (S, G)の関数だ 画像 G のスタイル と 画像 S のスタイルが どのくらい似ているかを測る 最後に ２つのハイパーパラメータ α と β で これらに重みを付ける 内容コストとスタイルコストに 相対的な重みを指定するためだ 相対的な重みコストを指定するのに ２つの異なるハイパーパラメータを使うのは 冗長に思えるだろう １つのハイパーパラメータで十分に思える しかし ニューラル スタイル変換アルゴリズムの 最初の著者は ２つの異なるハイパーパラメータを使う ここでは 彼らの表記法に従おう 次の数本のビデオで説明する ニューラル スタイル変換アルゴリズムは Leon Gatys, Alexander Ecker そして Matthias によるものだ 彼らの論文は 読むのが それほど難しくはない だから これからの数本のビデオを見た後 そうしたいなら 彼らの論文を見ることを 強く推奨する アルゴリズムは 次のように動く コスト関数 J(G) を見つけて 新しい画像を生成するためには 次のようにする 生成画像 G をランダムに初期化する それは 100 x 100 x 3 や 500 x 500 x 3 になるだろう もしくは 何でも好きな次元にする それから 前のスライドの コスト関数 J(G) を定義する そして 勾配降下法を使い これを最小化するために G をこう更新する G - コスト関数 J (G) の G の微分 この処理では 実際に 画像 G のピクセル値を更新する それは 100 x 100 x 3 等のRBGチャンネル画像だ 例を挙げる この内容画像と このスタイル画像から始める これは 別の パブロ ピカソ 画だ それから G をランダムに初期化する 最初のランダムに作った画像は 各ピクセルがランダムに選ばれた ただのホワイトノイズだ 勾配降下法を走らせるにつれ コスト関数 J(G) が小さくなり ゆっくりと ピクセル値が変化し ゆっくりと 画像が得られていく その画像は スタイル画像のスタイルで描かれた 内容画像にどんどん似ていく このビデオでは ニューラル スタイル変換全体の 概要を見た 生成画像 G のコスト関数を定義し それを最小化する 次は どのようにして 内容コスト関数 と スタイルコスト関数 を定義するのか見る 次のビデオから それを見ていこう
1
00:00:00,000 --> 00:00:03,500
神经风格转移的代价函数

2
00:00:03,500 --> 00:00:07,975
由内容代价部分和风格代价部分组成

3
00:00:07,975 --> 00:00:11,455
让我们从内容代价部分的定义开始说起

4
00:00:11,455 --> 00:00:17,595
回忆一下，这个是神经风格转移算法的全局代价函数

5
00:00:17,595 --> 00:00:21,660
那么，让我们先来弄清楚什么是内容代价函数。

6
00:00:21,660 --> 00:00:26,380
假设你可以用隐藏层来 l 来计算内容代价

7
00:00:26,380 --> 00:00:30,920
若 l 是非常小的数字，比如你用隐藏层1

8
00:00:30,920 --> 00:00:34,440
那么它会让你得到

9
00:00:34,440 --> 00:00:37,875
一个在像素值上与你的内容图像非常接近的图像

10
00:00:37,875 --> 00:00:39,735
然而，若你使用一个非常深的层

11
00:00:39,735 --> 00:00:41,260
那么，它会问你，比如

12
00:00:41,260 --> 00:00:43,040
你的内容图像里面是否有一只狗

13
00:00:43,040 --> 00:00:46,150
然后确保你生成的图像的某处有一只狗

14
00:00:46,150 --> 00:00:50,310
所以，在实践中，隐藏层的数目，我会选择两者之间。

15
00:00:50,310 --> 00:00:53,015
这样的话，这个神经网络就既不会太浅，也不会太深

16
00:00:53,015 --> 00:00:55,780
并且，由于这些是你自己计划的

17
00:00:55,780 --> 00:00:58,765
在本周结束的练习题中

18
00:00:58,765 --> 00:01:01,260
我会给你留一些暗示

19
00:01:01,260 --> 00:01:04,475
在具体的例子和练习中

20
00:01:04,475 --> 00:01:06,810
但是，通常我会选择

21
00:01:06,810 --> 00:01:09,080
在这个神经网络中间的某处

22
00:01:09,080 --> 00:01:12,170
不会太浅，也不太深

23
00:01:12,170 --> 00:01:15,285
你可以使用一个已经预训练过的卷积网络

24
00:01:15,285 --> 00:01:17,317
例如 VGG 网络

25
00:01:17,317 --> 00:01:20,020
或者用其他的神经网络也行

26
00:01:20,020 --> 00:01:22,050
现在，你要去测量

27
00:01:22,050 --> 00:01:26,160
在给定的内容图像(C)和生成的图像(G)之间

28
00:01:26,160 --> 00:01:29,688
他们在内容上的相似程度

29
00:01:29,688 --> 00:01:31,540
所以，我们令这个

30
00:01:31,540 --> 00:01:39,900
a^[l](C) 和 a^[l](G) 分别为前面两图像的 l 层激活因子

31
00:01:39,900 --> 00:01:42,814
对应图像 C 和 G

32
00:01:42,814 --> 00:01:47,020
若这两个激活因子很接近

33
00:01:47,020 --> 00:01:52,602
那么，可以认为，这两个图像在内容上有相似性

34
00:01:52,602 --> 00:01:54,855
所以，我们将要做的是

35
00:01:54,855 --> 00:02:01,510
定义 J_content(C,G) 为

36
00:02:01,510 --> 00:02:05,345
两个激活因子的差异程度

37
00:02:05,345 --> 00:02:08,320
所以，我们将用这个元素级别的差异

38
00:02:08,320 --> 00:02:12,200
在隐藏层 l 之间的差异

39
00:02:12,200 --> 00:02:14,710
比较当你传入内容图像

40
00:02:14,710 --> 00:02:17,736
和传入生成图像的区别

41
00:02:17,736 --> 00:02:19,955
将这个差的模平方

42
00:02:19,955 --> 00:02:23,760
并且，你有没有没正则化（归一化）常数都可以

43
00:02:23,760 --> 00:02:25,535
所以，这仅仅是其中的两个或者别的什么

44
00:02:25,535 --> 00:02:31,935
这点影响不大，因为它可以被超参数 alpha 调整

45
00:02:31,935 --> 00:02:37,070
所以，明确一下

46
00:02:37,070 --> 00:02:42,635
在使用这个定义时，就像编入向量一样

47
00:02:42,635 --> 00:02:47,975
然后，它会变成这两个量 l_2 模的平方根

48
00:02:47,975 --> 00:02:51,680
在你把这两个量都编入向量之后

49
00:02:51,680 --> 00:02:54,492
这些真的只是按元素

50
00:02:54,492 --> 00:02:59,480
将这两个激活因子的差异平方进行求和

51
00:02:59,480 --> 00:03:03,000
但是，它也仅仅是按元素

52
00:03:03,000 --> 00:03:06,150
在隐藏层 l 中的图像C和图像G的激活因子

53
00:03:06,150 --> 00:03:11,850
差的异平方求和。所以

54
00:03:11,850 --> 00:03:17,100
在之后，你对 J(G) 使用梯度下降法来求 G 

55
00:03:17,100 --> 00:03:19,740
以使全局代价值比较低

56
00:03:19,740 --> 00:03:23,120
这会激励这个算法去找到一个图像G

57
00:03:23,120 --> 00:03:29,203
以使这些隐藏层激活因子和你的内容图像比较接近

58
00:03:29,203 --> 00:03:33,985
所以，这就是如何在神经风格转移算法中定义内容代价函数

59
00:03:33,985 --> 00:03:37,000
接下来，让我们来看看风格代价函数的定义。
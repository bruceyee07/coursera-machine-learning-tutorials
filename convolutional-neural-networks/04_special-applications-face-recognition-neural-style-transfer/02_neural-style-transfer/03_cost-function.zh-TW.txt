為了做一個「神經風格轉換」的系統
(Neural Style Transfer) 讓我們為生出來的圖片定義一個成本函數 等等你會看到，藉由最小化這個成本函數 你可以產生出你想要的圖片 回憶一下這個問題的定義 你會得到一張內容圖片 C、 得到一張風格圖片 S，而你的目標是產生一張新圖片 G 為了要實作神經風格轉換 你要去定義成本函數 J(G)，去衡量這張 產生出來的圖片效果多好。然後我們用梯度下降法 去最小化 J(G)，以生出這張圖片 那麼，某張圖片的效果多好呢？ 我們會把這成本函數定義成兩部份 第一部份叫「內容成本」(content cost) 這是個內容圖片和生成圖片的函數 這函數做的是去衡量 生成圖片的內容 和內容圖片C的內容，兩者有多像。然後， 再加上某個「風格成本」(style cost) 函數，也就是 S和G的函數：他會去衡量 G的風格和S的風格有多像。 最後，我們會兩個超參數 alpha 和 beta 加權他們 來指定「內容成本」和「風格成本」相對的權重 用兩個不同的超參數似乎有點多餘 如果要指定成本間的相對權重 看起來一個超參數就夠了 不過神經風格轉換演算法的原始作者 使用了兩個超參數 所以我這邊就遵照他們的方式 關於接下來幾部影片展示的 神經風格轉換演算法是由 Leon Gatys, Alexander Ecker 和 Matthias 所著 他們的論文並不難讀，所以看完影片後如果你想的話 我相當鼓勵你去看一下他們的論文 那麼，這演算法是這樣跑的 要找出成本函數 J(G) 以真的生出新的圖片，你要這樣做： 你會隨機地初始化「生成圖片」G 他可能是 100x100x3 或 500x500x3 或是你想要的維度 然後，我們會定義前一張投影片提到的成本函數 J(G) 所以接下來，你可以用梯度下降法去最小化這個，
讓你能更新 G 變成 G 減掉成本函數 J(G) 的導數。所以在這過程 你實際上是更新 G 這張圖片的像素的值， 也就是 100x100x3 — 如果是 RGB 的圖片 這邊是個例子：假設你有這張內容圖片和風格圖片 這是另一幅畢卡索的畫 那麼，當你隨機初始化 G 你一開始亂生成的圖片 就只是這種白噪音的圖，每個像素的值都是隨機取的 然後當你跑梯度下降法 最小化成本函數 J(G)，你會慢慢調整像素的值，所以 你的圖片會逐漸越來越像 用風格圖片的風格畫出的內容圖片 在這部影片，你看到了整個演算法的輪廓 關於神經風格轉換：也就是 定義生成圖片 G 的成本函數，然後最小化它 接下來，我們需要看看怎麼定義 「內容成本函數」以及「風格成本函數」 就讓我們從下一部影片開始
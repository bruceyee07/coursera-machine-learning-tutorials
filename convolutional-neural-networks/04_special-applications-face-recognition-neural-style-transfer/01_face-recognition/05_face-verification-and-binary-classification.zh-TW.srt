1
00:00:00,000 --> 00:00:02,580
「三元損失」是個不錯的手法，可以學習

2
00:00:02,580 --> 00:00:05,950
人臉辨識中 ConvNet 的參數

3
00:00:05,950 --> 00:00:08,490
還有其他方法可以學到這些參數

4
00:00:08,490 --> 00:00:11,475
讓我告訴你如何把人臉辨認

5
00:00:11,475 --> 00:00:15,175
看成一個單純的二元分類問題

6
00:00:15,175 --> 00:00:17,085
另一個訓練神經網路的方式

7
00:00:17,085 --> 00:00:19,740
是把這一雙神經網路

8
00:00:19,740 --> 00:00:25,260
拿這個 Siamese 網路，讓他們都去計算這些編碼

9
00:00:25,260 --> 00:00:27,255
可能是 128 維的嵌入向量 (embeddings)

10
00:00:27,255 --> 00:00:28,770
可能是更高維的

11
00:00:28,770 --> 00:00:31,530
然後讓這些輸入到

12
00:00:31,530 --> 00:00:36,375
一個羅吉斯迴歸分析的單元，然後就去預測

13
00:00:36,375 --> 00:00:42,705
如果兩張圖是同一個人，則目標輸出是 1

14
00:00:42,705 --> 00:00:46,530
如果是不同人就是 0

15
00:00:46,530 --> 00:00:52,960
這樣子的方法把人臉辨識看作一個二元分類的問題

16
00:00:52,960 --> 00:00:58,890
除了用三元損失，這是另一種訓練這種系統的方式

17
00:00:58,890 --> 00:01:03,405
那麼，最後這個羅吉斯迴歸單元實際上做了什麼呢？

18
00:01:03,405 --> 00:01:08,400
y hat 這個輸出會是 S型函數

19
00:01:08,400 --> 00:01:12,750
套用在一些特徵上，不過，並不是直接餵進去這些編碼，

20
00:01:12,750 --> 00:01:18,690
而是拿這兩個編碼的差異

21
00:01:18,690 --> 00:01:20,795
讓我舉個例說明一下

22
00:01:20,795 --> 00:01:30,020
例如，我這邊寫 k=1~128 去加總這絕對值

23
00:01:30,020 --> 00:01:35,525
是這兩個編碼逐元素之間的差異

24
00:01:35,525 --> 00:01:39,930
讓我寫這式子大家就會知道什麼意思

25
00:01:39,930 --> 00:01:45,335
這個符號，f(xi) 是圖片 x(i) 的編碼

26
00:01:45,335 --> 00:01:52,210
而下標 k 指的是拿這向量的第 k 維

27
00:01:52,210 --> 00:01:59,625
所以這一項，是兩個編碼之間的逐元素差異後取絕對值

28
00:01:59,625 --> 00:02:03,240
你可以把這 128 個數字想成特徵

29
00:02:03,240 --> 00:02:07,140
然後把他們餵給羅吉斯迴歸

30
00:02:07,140 --> 00:02:11,350
而你最終的羅吉斯迴歸可以有額外的參數 w_i,

31
00:02:11,350 --> 00:02:16,030
和 b，就和一般的羅吉斯迴歸單元一樣

32
00:02:16,030 --> 00:02:21,990
然後你會訓練出這 128 個特徵的權重

33
00:02:21,990 --> 00:02:24,105
為了去預測

34
00:02:24,105 --> 00:02:28,225
這兩張照片是不是同一個人

35
00:02:28,225 --> 00:02:31,035
所以這是一個滿合理的方法

36
00:02:31,035 --> 00:02:37,300
學習去預測出 0 或 1，看看他們是同個人還是不同人

37
00:02:37,300 --> 00:02:40,230
還有其他幾個變形，關於

38
00:02:40,230 --> 00:02:44,220
計算這綠色底線的公式

39
00:02:44,220 --> 00:02:51,405
舉個例子，另個可能的式子是... 這個k, 減 f(xj)_k

40
00:02:51,405 --> 00:02:56,220
然後取平方，然後除以 f(xi)_k

41
00:02:56,220 --> 00:03:02,980
加 f(xj)_k。有時候這叫卡方公式 (chi-square)

42
00:03:02,980 --> 00:03:05,700
這是希臘字母 𝛘 (chi)

43
00:03:05,700 --> 00:03:08,874
有時候被稱作卡方相似度 (chi square similarity)

44
00:03:08,874 --> 00:03:15,810
DeepFace 這篇論文有探討這個式子及其他變形

45
00:03:15,810 --> 00:03:18,015
也就是之前提到的論文

46
00:03:18,015 --> 00:03:20,760
總之，在這個學習的公式

47
00:03:20,760 --> 00:03:23,801
他的輸入是一對圖片

48
00:03:23,801 --> 00:03:28,920
所以這其實是你的訓練輸入 x。而輸出 y

49
00:03:28,920 --> 00:03:32,085
是 0 或是 1，取決於你輸入的是

50
00:03:32,085 --> 00:03:35,680
一對相似還是不相似的圖片

51
00:03:35,680 --> 00:03:37,070
和之前一樣

52
00:03:37,070 --> 00:03:40,065
你訓練的是 Siamese 網路，也就是說

53
00:03:40,065 --> 00:03:44,035
上面這個網路的參數和下面一樣

54
00:03:44,035 --> 00:03:48,455
或者說是和下面網路綁在一起

55
00:03:48,455 --> 00:03:52,235
這種系統效果也不錯

56
00:03:52,235 --> 00:03:53,420
最後要提的是

57
00:03:53,420 --> 00:03:58,905
一個計算上的小技巧，對你的系統佈署有明顯幫助

58
00:03:58,905 --> 00:04:00,375
假設這是一張新圖片

59
00:04:00,375 --> 00:04:03,910
這個員工走入旋轉門、閘門

60
00:04:03,910 --> 00:04:08,815
希望門會打開，然後這是你資料庫裡的照片

61
00:04:08,815 --> 00:04:11,190
那麼你並不需要

62
00:04:11,190 --> 00:04:17,520
每次都去計算這個特徵、嵌入向量

63
00:04:17,520 --> 00:04:20,970
你其實可以預先算好

64
00:04:20,970 --> 00:04:22,970
所以一個新的員工走進來

65
00:04:22,970 --> 00:04:29,500
你可以用上半部的 ConvNet 去計算編碼，

66
00:04:29,500 --> 00:04:31,020
然後拿他去比較

67
00:04:31,020 --> 00:04:36,730
你預先算好的編碼，然後去預測 y hat

68
00:04:36,730 --> 00:04:40,770
這樣你就不用儲存原始的照片

69
00:04:40,770 --> 00:04:44,880
而且如果你的員工資料庫很大

70
00:04:44,880 --> 00:04:50,935
你不用每次都去計算資料庫裡每個員工的編碼

71
00:04:50,935 --> 00:04:52,980
這種「預先計算」的概念 (pre-computing)

72
00:04:52,980 --> 00:04:56,880
先計算一部分的編碼，就可以省下大量的計算

73
00:04:56,880 --> 00:05:00,775
這種預先計算的概念可以用在

74
00:05:00,775 --> 00:05:02,950
Siamese 網路的架構

75
00:05:02,950 --> 00:05:07,485
當你把人臉辨識看成二元分類的時候

76
00:05:07,485 --> 00:05:11,160
也可以用在學習編碼

77
00:05:11,160 --> 00:05:15,070
例如前面影片提到的三元損失

78
00:05:15,070 --> 00:05:16,760
那麼，總結一下

79
00:05:16,760 --> 00:05:19,530
如果要把人臉驗證看成一種監督式學習

80
00:05:19,530 --> 00:05:23,460
你建立一個訓練集，裡面有很多一對一對的圖片

81
00:05:23,460 --> 00:05:28,045
而不是三張一組的圖片，然後目標標籤是 1

82
00:05:28,045 --> 00:05:34,366
如果是同一個人的一對圖片；目標標籤是 0

83
00:05:34,366 --> 00:05:38,880
如果這一對圖片是不同人

84
00:05:38,880 --> 00:05:40,845
然後使用各種一對圖片

85
00:05:40,845 --> 00:05:45,660
藉由反向傳播訓練神經網路、Siamese 網路

86
00:05:45,660 --> 00:05:49,755
那麼，你剛剛看到的這個人臉驗證的版本

87
00:05:49,755 --> 00:05:53,918
看成是一種二元分類的問題，而且能擴充成人臉辨識

88
00:05:53,918 --> 00:05:55,645
這個版本效果也不錯

89
00:05:55,645 --> 00:05:57,645
希望經過這些課程，我希望你已經了解

90
00:05:57,645 --> 00:05:59,490
要怎麼去訓練

91
00:05:59,490 --> 00:06:05,000
自己的一套人臉驗證或人臉辨認，解決單樣本問題
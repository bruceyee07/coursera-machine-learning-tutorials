Triplet Loss是一种学习 用于人脸识别的ConvNet的参数的好办法 还有一种方法可以用来学习这些参数 让我来给你们展示下如何将人脸识别 当做一种直接的二元分类问题 另一种训练神经网络的方法 是利用这一对神经网络 这个Siamese网络让他们都计算这些embeddings 可能有128维的embeddings 也许有更高的维度 然后将这些输入到 一个逻辑回归单元后做出预测 如果这两个是同一个人,目标结果将会输出1 如果是两个不同的人,结果将会输出0 所以，这是一种将人脸识别当做二元分类的方法 训练一个这样的系统是triplet loss的替代方案 那么，什么是这个最终的逻辑回归单元真正在做的呢？ 这个输出y帽，假设是一个 被用于一系列的特征的sigmoid function 这里，我们并不是要将数据直接输入，你所能做的是计算这些编码之间的不同 让我来告诉你，我是什么意思 举个例子，我写一个求和， 分别对两个编码，按元素地计算K从1到128的绝对值之和 让我将这个写完然后我们就会看到这意味着什么 在这个表达式中，f（xi）是图像xi的编码 下标k表示这个向量的第k个元素 这个就是将这两种不同编码之间的逐个元素的差的绝对值的和 你可以将这128个数字想象为 你输入到逻辑回归中的特征 你将会发现逻辑回归会有额外的变量wi 以及b，就像正常的逻辑回归单元一样 然后你将会在这128个特征上训练出恰当的权重 用来判断这两张图片 是同一个人还是不同的人 所以，这将会是一种十分合理的方式 用来学会预测0或1，来表示这些图片是同一个人的还是不同的人的 还有其他一些变种，你可以用来 计算我画了绿线的这个公式 例如，另一种公式是这样的f（xi）k-f（xj）k 取平方根，然后再除以 f（xi）k+f（xj）k.这有时也被称为chi square公式 这是希腊字母chi 这有时也被叫做chi square相似度 这是在这篇DeepFace论文中所给出的另一种公式变种 我在之前也提到过这篇文章 在这个学习框架中 输入是一对图片 这是你的训练输入x，输出y 是0或者1，取决于你的输入 是一对相同的照片还是不同的照片 就像之前那样 你所在训练的是Siamese Network，这意味着 上面这个神经网络的参数和下面 这个神经网络的参数是相同的或者说是紧紧捆绑在一起 这个系统依然可以工作得非常好 最后，顺带提一下的是 一个计算方面的小技巧，可以极大地帮助你实现神经网络 假设这是新的图片 这是一个正在走进来的员工，他希望这个十字转门 将会为他而打开，这是一张来自你数据库里的图片 你并不需要每次都计算 这个embedding 你可以预先计算出它 所以当新的员工走入时 你所要做的就是用上面这个卷积神经网络来计算出编码，然后用它 与你之前计算出的编码 进行比较，然后计算出预测结果y帽 由于你并不需要存储原始的图像 并且假如你拥有一个非常大的员工数据库 你并不需要每次都为每一个在你数据库中的员工计算出编码 这就是预计算的概念 其中一些编码可以节约相当大的计算量 这种预计算的方法适用于 你可以把人脸识别当做 一个二元分类问题的基于Siamese网络架构的方法 也适用于你通过Triplet Loss函数 来学习编码，就像在之前的在几个视频中所描述的那样 所以，让我们来总结下 将人脸验证当做一个监督学习的问题 你创建了一个包含多对图片的训练集 当目标标识是1时 意味着这一对图片来自同一个人，当目标标识是0时 意味着这一对图片来自不同的人.然后你用反向传播 不同的图片对来训练 来训练神经网络，来训练Siamese网络 这样，你刚才所看到的就是将人脸验证 以及人脸识别当做二元分类问题的方法 这种方法也能够实现非常好的效果 所以，我希望你现在能够知道 要训练你自己的人脸验证系统 或者人脸识别系统你可以怎样做One-shot learning
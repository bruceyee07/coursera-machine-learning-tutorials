Sinir ağlarının parametrelerini yüz görselleri için iyi bir kod verecek şekilde öğrenmenin bir yolu üçüz yitim fonksiyonuna uygulanmış bir gradyan inişi tanımlamaktır. Hadi ne anlama geldiğini konuşalım Üçüz yitimi uygulamak için görsel çiftlerini karşılaştırmak gerekir. Örneğin, bu resimde sinir ağlarının parametrelerini öğrenmek için aynı anda birden fazla görsele bakmanız gerekmektedir. Örneğin, bu görsel çiftinde aynı insan oldukları için kodlamalarının benzer olmasını istersiniz. Halbuki, bu görsel çiftinde farklı insanlar oldukları için kodlamalarının oldukça farklı olmalarını istersiniz. Üçüz yitim terminolojisinde, her zaman yapacağınız şey bir çapa görsele bakmak ve çapa ve pozitif görsel arasındaki uzaklığı bulmaktır. Gerçek bir pozitif örnek, aynı kişinin benzer olduğu anlamına gelmektedir. Oysa, çiftler negatif örnek ile karşılaştırıldığında uzaklık daha fazla olduğu için çapaya ihtiyaç duyulmaktadır. İşte bu, üçüz yitim terimine yol açmıştır. Her zaman bir kerede üç görsele bakılacaktır. Çapa görsele bakıyor olacaksınız Pozitif görsele ve aynı zamanda negatif görsele de. Ve ben çapa pozitif ve negatifi A, P ve N olarak kısaltacağım. Yani bunu formüllemek istersek, Kodlamanızın sinir ağlarının parametreleri için istediğiniz, takip eden özellikleri sağlamasıdır, çapa kodlaması ve pozitif örnek kodlaması arasındaki fark bunun özellikle küçük olmasını istersiniz. Bunun çapa kodlaması ve negatif kodlaması arasındaki büyüklüğün karesinden küçük yada eşit olmasını istersiniz. Elbette burada bu A ve P'nin d'si bu A'nın, N'nin d'si. Ve d'yi bir uzaklık fonksiyonu olarak düşünebilirsiniz işte bu yüzden d harfi ile isimlendirildi. Şimdi, eğer terimi bu fonksiyonun sağ tarafından sol tarafına kaydırırsak, sonuçta elde edilen f(A) - f(P)'nin karesi, Şimdi de sağ tarafa bakalım eksi f(N)'nin karesi Bunun 0'a eşit veya 0'dan küçük olmasını istersiniz. Ancak şimdi, bu ifadede küçük bir değişiklik yapacağız Bunu sağlamanın küçük bir yolu her şeyin sıfıra eşit olduğunu öğrenmektir. Eğer f her zaman sıfıra eşit olursa o zaman bu sıfır eksi sıfır ki bu sıfırdır. Sıfır eksi sıfır sıfırdır. Ve böyle, herhangi bir görselin f'sinin sıfırlarla dolu bir vektöre eşit olduğunu söyleyerek neredeyse kolaylıkla bu denklemi sağlamış oluyorsunuz. Sinir ağlarının tüm kodlamalar için sadece sıfır vermeyeceğinden emin olmak için, yani tüm kodlamaları birbirine eşit olarak tanımlamayacağından emin olmak için. Sinir ağlarının küçük bir çıktı vermesinin bir diğer yolu ise her görselin kodlamasının diğer görsellerin kodlamasına aynı olmasıdır. Bu durumda yine sıfır eksi sıfır elde edilecektir. Bir sinir ağının bunu yapmasını engellemek için yapacağımız şey, bu sadece sıfırdan küçük ya da sıfıra eşit değil, sıfırdan az küçük olmalıdır diyecek şekilde bu hedefi modifiye etmektedir. Yani, özellikle, eğer bu eksi alfadan küçük olmalı dersek, ki burada alfa diğer bir üst değişkendir, o zaman bu sinir ağlarının aşikar bir çözüm üretmesini engelleyecektir. Ve genel olarak oraya artı alfa yerine eksi alfa yazarız. Bu aynı zamanda kenar payı olarak isimlendirilir. Eğer destek vektör makinası literatüründe gördü iseniz, bu aşina olacağınız bir tanımdır. Ancak değil ise endişelenmeyiniz. Kenar payı parametresini ekleyerek bu denklemi en üst seviyeye modifiye edebiliriz. Yani, bir örnek vermek gerekirse, Kenar payının 0,2'ye eşitlendiğini varsayalım. Eğer bu örnekte, çapa ve pozitif'in d'leri 0,5'e eşit ise, o zaman çapa ile negatif'in arasındaki d, biraz daha büyük, örneğin 0,51 ise memnun olmayacaksınızdır. Her ne kadar 0,51 0,5'ten büyük olsa da bunun yeterli olmadığını, dfA N'nin özellikle dfA P'den çok daha büyük olmasını isteyeceksinizdir. Bunun en az 0,7 veya daha büyük olmasını istersiniz. Alternatif olarak, bu kenar payını veya en az 0,2'lik bu farkı elde etmek için bunu en az alfa kadar, çapa ve pozitife karşılık çapa ve negatif arasındaki fark olan 0,2lik üst değişken alfa kadar fark elde edecek şekilde aşağıya veya yukarıya ittirebilirsiniz. işte bu bir kenar payı parametresine sahip olmanın yaptığı şeydir çapa pozitif çiftini ve çapa negatif çiftini birbirinden daha uzağa iter. Şimdi bu aşağıdaki denklemi ele alalım, ve bir sonraki slaytta formüle edelim ve üçüz yitim fonksiyonunu tanımlayalım. Üçüz yitim fonksiyonu üçlü görseller ile tanımlanmıştır. Çapa pozitif ve negatif örnekler olan, A, P ve N, üç görsel. Yani, pozitif örnekler çapa ile aynı kişidir, ancak negatif çapadan farklı bir kişidir. Yitimi şu şekilde tanımlayacağız. Aslında üçlü görseller üzerinden tanımlanan bu örnekteki yitim Önce bir önceki slayttakileri kopyalamama müsaade edin. Şöyle ki, bu fA eksi fP kare eksi fA eksi fN kare, ve sonra artı alfa, kenar parametresi ve istediğiniz bunun sıfıra eşit veya sıfırdan küçük olmasıdır. Yani, yitim fonksiyonunu tanımlamak için bu ve sıfır arasındaki en büyüğü alalım. Yani en büyüğü almanın buradaki etkisi şudur ki bu sıfırdan küçük olduğu sürece yitim sıfırdır çünkü sıfır, sıfır olduğu zaman en büyük sıfıra eşitten daha küçük olacaktır. Böylece, yeşil ile altını çizdiğim bu şeyi yapma hedefini gerçekleştirdiğiniz sürece, bunu sıfıra eşit veya sıfırdan küçük yapma hedefini elde ettiğiniz sürece bu örnekteki yitim sıfıra eşit olacaktır. Ancak diğer taraftan, eğer bu sıfırdan büyük ise, eğer en büyüğü alırsan, seçmiş olduğumuz en büyük burada yeşil ile çizdiğim şey, o zaman pozitif bir yitiminiz olacaktır. Böylece, bunu en aza indirmeyi denerken bunun bu şeyi sıfıra indirme etkisi olacaktır, sıfıra eşit veya sıfırdan küçük. Ve sonra, burada sıfır veya sıfıra eşit veya sıfırdan küçük olduğu sürece, sinir ağı ne kadar negatif olduğunu önemsemeyecektir. İşte, bu tek bir üçlü üzerinde yitim fonksiyonunun nasıl tanımlandığıdır ve sinir ağınız için genel bedel fonksiyonu eğitim setindeki değişik üçlüler üzerindeki münferit kayıpların toplamıdır. Yani, örneğin 1.000 farklı kişinin 10.000 görselinden oluşan bir eğitim setiniz varsa, yapmanız gereken 10.000 görselinizi almak ve bunu bu şekilde üçlüler seçmek, oluşturmak için kullanıp, daha sonra öğrenme algoritmanızı bu tip bir bedel fonksiyonu üzerinde, ki bu aslında eğitim setinizden çekilmiş üçlü görsellerle tanımlanır, gradyan inişi kullanarak eğitmektir. Üçlülerden oluşan bu veri setini tanımlamak için bazı A ve P çiftlerine ihtiyacınız olacağına dikkat edin. Aynı insana ait farklı görsel çiftleri. Yani sisteminizi eğitmenin amacı, aynı kişiye ait birden çok görsel içeren bir veri setine ihtiyacınız vardır. İşte bu sebeple bu örnekte, 1.000 farklı kişiye ait 10.000 görsel olursa dedim, böylece belki bütün veri setinizi yapmak için 1.000 kişinin her birinin ortalamada 10 görseli olabilir. Her kişinin sadece bir görseli olsaydı, bu sistemi aslında eğitemezdiniz. Fakat elbette eğitildikten sonra bunu uygularsanız fakat elbette sistemi eğittikten sonra, yüz tanıma sistemindeki tek seferlik öğrenme problemine uygulayabilirsiniz belki de tanımaya çalıştığınız bir kişiye ait tek bir görseliniz vardır. Ancak eğitim setiniz için, aynı kişiye ait birden fazla görsel olduğundan emin olmalısınız en azından eğitim setinizdeki bazı insanlar için bu sayede çapa ve pozitif görsel çiftleriniz olabilir. Şimdi, eğitim setinizi oluşturmak için bu üçlüleri nasıl seçersiniz? Problemlerden biri, eğer A, P ve N'yi A ve P aynı kişiden olacak şekilde eğitim setinizden rastlantısal olarak seçerseniz ve A ve N farklı kişiler olarak, problemlerden biri şudur ki, rastlantısal olarak seçerseniz o zaman bu koşulu yerine getirmek çok kolay olacaktır. Çünkü insanlar ait iki rastlantısal olarak seçilmiş görsel ele alındığında, A ve N'nin A ve P'den çok daha farklı olması olasıdır. Umarım bu gösterimi hala hatırlıyorsunuzdur, bu d(A, P), bu kodlama olarak geçen yılın slaytlarında yazdığımız şeydir. Yani, bu aslında sadece bir önceki slaytta olan kodlamalar arasındaki bilinen farkın karesine eşittir. Fakat, eğer A ve N iki rastlantısal olarak seçilmiş farklı kişi ise o zaman bunun soldaki terime kıyasla kenar payı alfadan çok daha büyük olması şansı çok yüksektir. Ve böylece, sinir ağı bundan çok fazla öğrenemeyecektir. Sonuç olarak, bir eğitim seti oluşturmak için, yapmak istediğiniz üzerinden eğitilmesi zor olan A, P ve N üçlüleri seçmektedir. Yani her bir üçlü için bilhassa istediğiniz bu kısıtın sağlanmasıdır. İşte, d(A,P)nin d(A,N)ye oldukça yakın olduğu A,P ve N değerleri seçerseniz zor bir üçlü olmuş olur. Böyle bir durumda, öğrenme algoritmasının, sol taraf ve sağ taraf arasında en azından alfa kadar kenar payı olması için sağdaki bu şeyi alıp yukarıya ittirmeyi demesi veya soldaki bu şeyi alıp aşağıya ittirmeyi denemesi oldukça zor olacaktır. Ve bu üçlüleri seçmenin etkisi öğrenme algoritmanızın hesaplama verimliliğinin artması olacaktır. Eğer üçlülerinizi rastlantısal olarak seçerseniz, o zaman çok fazla üçlü oldukça kolay olacaktır, ve böylece hemen hemen her zaman sinir ağı doğru sonuç vereceği için gradyan inişi pek birşey yapmayacaktır. Ve gradyan inişi prosedürü sadece zor örneklerde, bu nicelikleri diğer niceliklerden daha uzağa ittirmek için bir şeyler yapmak durumunda kalacaktır. Eğer ilginizi çekiyorsa, detaylar bu videoda sunduğum birçok fikiri aldığım Florian Schroff, Dmitry Kalinichenko ve James Philbin'nin FaceNet isimli bir sistemlerinin olduğu bu makalesinde yer almaktadır. Bu arada, derin öğrenme dünyasında algoritmaların nasıl isimlendirildiği ile ilgili komik bir gerçek şudur ki, eğer belirli bir etkinlik alanında çalışıyorsanız, o zaman buna boşluk adını veririz. Genelde boş net veya derin boşluk adını verdiğiniz bir sisteminiz olur. Yani, yüz tanıması hakkında konuştuk. işte bu makale FaceNet (yüz neti) olarak adlandırılmıştır. ve bu son videoda, sadece derin yüz gördünüz. Ancak boş net veya derin boş fikiri derin öğrenme dünyasında algoritmaları isimlendirmek için çok popüler bir yoldur. Ve eğer algoritmanızı hızlandırmak için üzerinden eğitilebilecek en kullanışlı üçlüleri seçmek gibi diğer detaylardan bazılarını da öğrenmek isterseniz bu makaleye bakmak konusunda kendinizi rahat hissedin. İyi bir makaledir. Yani, özetlemek için, Üçüz yitim üzerinden eğitmek için eğitim setinizi alıp bunu bir çok üçlüye eşlemeniz gerekmektedir. İşte bir çapa ve pozitif içeren üçlümüz burada ikisi de aynı insan için ve farklı bir insanın negatifi. Burada çapa ve pozitifin aynı kişiden olduğu farklı bir tane var ancak çapa ve negatif farklı kişilerden vb. Çapa pozitif ve negatif üçlülerinden oluşan bu eğitim setini tanımladıktan sonra yapacağınız gradyan inişi kullanarak daha önceki slaytta tanımladığımız bedel fonksiyonunu en aza indirmeye çalışmaktır. Bunun etkisi iki görsel aynı kişiye ait olduğunda d'nin küçük olacağı ve iki görsel farklı kişiye ait olduğunda büyük olacağı bir kodlamanın sinir ağlarının tüm parametrelerine yayılması olacaktır. Üçüz yitim ve bir sinir ağının yüz tanıma kodlaması ve öğrenmesi konusunda eğitilmesi hakkında söyleyeceklerimiz bu kadar. Şimdi, ortaya çıkıyor ki ticari yüz tanıma sistemleri oldukça büyük veri setleri üzerinde eğitiliyor. Çoğunlukla milyon tane görsel bazen, sıklıkla olmasa da 10 milyon görsel. Ve bazı ticari şirketler 100 milyon üzerinde görsel kullanmaktan bahsediyorlar. Yani bunlar olağanüstü modellerin çok büyük veri setleri. Üçüz yitim ve bir sinir ağının yüz tanıma için iyi bir kodlama üzerinde nasıl çalışacağı konusunda eğitilmesi hakkında söyleyeceklerimiz bu kadar. Şimdi, ortaya çıkıyor ki bugünün yüz tanıma sistemleri özellikle yitim iyileştirici ticari yüz tanıma sistemleri çok büyük veri setleri üzerinde eğitilmektedir. Milyon görsellik veri setleri olağan dışı değil, bazı şirketler 10 milyon görsel kullanıyorlar ve bazı şirketler bu sistemleri eğitmeyi denemek için 100 milyon görsele sahip. Yani bunlar modern standartlarda bile çok büyük veri setleri, bu veri seti kazançlarını elde etmek kolay değil. Neyse ki, bu şirketlerden bazıları bu büyük ağları eğittiler ve parametreleri internete koydular. Yani, bu ağlardan birini en baştan eğitmeye çalışmak yerine, paylaşılan veri hacim büyüklüklerinden ötürü bu alan, her şeyi en baştan yapmak yerine bir başkasının önceden eğitilmiş modelini indirmenin, genelde kullanışlı olacağı bir alan. Ancak, bir başkasının önceden eğitilmiş modelini indirseniz bile, yine bu fikirleri en baştan bir uygulama için kullanmak durumunda olduğunuzda veya bu algoritmaların nasıl eğitildiğini bilmek kullanışlı olacaktır. Üçlü yitim için söyleyeceklerimiz bu kadar. Bir sonraki videoda, Size siyam ağlarındaki bazı diğer varyasyonları ve bu sistemleri nasıl eğiteceğinizi de göstermek istiyorum. Haydi bir sonraki videoya geçelim.
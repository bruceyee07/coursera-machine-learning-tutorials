Son videoda, tek bir katmanın yapı taşlarını gördünüz, evrişim ağındaki bir evrişim katmanına ait olan. Şimdi ise bir derin evrişimli sinir ağına ait somut örneğe gidelim. Ve bu, sunulan notasyonla size biraz pratik yaptıracaktır. son videonun sonuna doğru. Diyelim ki bir resminiz var ve görüntü sınıflandırması veya görüntü tanıma yapmak istiyorsunuz. Girdi olarak alınan x olarak ifade edilen bir resim almak istiyorsunuz ve bunun bir kedi olup olmadığına karar vermek istiyorsunuz, 0 veya 1, dolayısıyla bu bir sınıflandırma problemidir. Bu görev için bir Evrişimli Ağ örneği oluşturalım. Bu örnek için, oldukça küçük bir resim kullanacağım. Diyelim ki resim 39 x 39 x 3. Bu seçim sadece bazı sayıların biraz daha iyi çalışmasını sağlar. Ve böylece, katman 0'daki nH nw'nin yüksekliğine eşit olacaktır ve genişliği 39'a eşit olacaktır ve kanalların sayısı ve katman 0 ise 3'e eşit olacaktır. İlk katmanın özellikleri tespit etmek için 3'e 3 filtreden oluşan bir dizi kullandığını varsayalım, yani f = 3 veya gerçekten f1 = 3, çünkü 3 x 3 işlemini kullanıyoruz. 2 adım kullandığımızı ve dolgulama (padding) olmadığını varsayalım. Yani aynı evrişim kullanarak, 10 filtreniz olduğunu varsayalım. Sonra sinir ağının sonraki katmanındaki aktivasyonlar 37 x 37 x 10 olacaktır ve bu 10 , 10 filtre kullanmanızdan gelmektedir. Ve 37 formülden gelmektedir. n + 2p-f üzerine s + 1. Doğru, 39'a sahip olduğunu tahmin ediyorum +0-3 üzerine 1-1 =37 Bu yüzden çıktı 37'e 37'dir, bu geçerli bir evrişim ve çıktı boyutudur. Bizim notasyonumuzda, siz nh[1]=nw[1]=37 'e sahipsiniz ve nc[1] = 10, bu yüzden nc[1] aynı zamanda eşittir ilk katmandaki filtrelerin sayısına. Ve böylece bu ilk katmandaki aktivasyonun boyutu olur. Şimdi başka bir evrişimli katmana sahip olduğumuzu varsayalım ve bu sefer 5'e 5 filtreler kullandığımızı varsayalım. Dolayısıyla, bizim notasyonumuzda f[2] bir sonraki sinir ağında =5 'tir ve ve bu sefer 2 adım (stride) kullandığımızı varsayalım. Ve belki dolgulama (padding) olmadığını ve 20 filtre olduğunu varsayalım Öyleyse bunun çıktısı başka bir hacim olacak, bu kez 17x17x20 olacaktır. Dikkat edin çünkü şimdi 2 'lik bir adım kullanıyoruz, boyut çok daha hızlı küçüldü. 37 x 37, 2 kattan biraz daha küçülmüştür 17 x 17'ye kadar 20 filter kullandığınızdan dolayı, kanal sayısı şimdi 20'dir. Yani bu a2 aktivasyonu bu boyutta olacak ve böylece nh[2] = nw[2] = 17 ve nc[2] = 20. Pekala, son bir evrişim katmanı uygulayalım. Tekrar 5'e 5 filtre kullandığımızı varsayalım, ve tekrar 2 adım (stride) olduğunu. Yani bunu yaparsan, matematiği geçeceğim, ama 7 x 7 ile sonuçlanır ve 40 filtre kullandığımızı, dolgulama (padding) ve 40 filtre olduğunu varsayalım. Sonuç olarak 7x7x40. Şimdi yaptığınız şey, 39 x 39 x 3 giriş görüntüsünüzü aldı ve bu görüntü için 7 x 7 x 40 özelliklerini hesapladı. Ve sonuç olarak, genellikle 7 x 7 x 40 değerini alırsanız 7 kere 7 kere 40 1960 elde edilir. Ve böylece yapabildiğimiz şey bu hacmi (volume) almak ve onu düzleştirmek (flatten) ya da sadece 1.960 birim halinde açmak değil mi? Sadece bir vektör içine düzleştirin ve ardından bununla bir lojistik regresyon birimine veya bir softmax birimini besleyin. Tanımaya çalışmanıza bağlı olarak veya farklı objelerden birini tanımaya çalışmanıza bağlı olarak ve daha sonra sadece bu sinir ağ için son tahmini çıktı vermek. Öyleyse, açık olarak, bu son adım tüm bu sayıları, tüm bu 1.960 sayıyı alıyor ve onları çok uzun bir vektöre dönüştürüyor. Sonrasında softmax katmanını besleyeceğiniz sadece tek bir uzun vektörünüz oluyor son çıktı için tahmin yapmak için sadece bir gerileme (regression) olana kadar. Yani bu bir evrişimli ağın (ConvNet) oldukça tipik bir örneği olabilir. Evrişimli sinir ağı tasarlamadaki çalışmanın çoğu , toplam boyutun ne olduğuna karar vermek gibi, hipermetreler seçmektir. Adım (stride) nedir? Dolgulama (padding) nedir ve kaç filtre kullanılacak? Ve hem bu hafta hem de önümüzdeki haftalarda,bazı öneriler ve bazı kurallar vereceğiz,bu seçimlerin nasıl yapılacağına dair. Ama şimdilik, bundan kurtulmak için belki de Bir sinir ağında derine gittiğinizde, genellikle büyük resimlerle başlarsınız, 39'a 39. Ve sonra yükseklik ve genişlik bir süre aynı kalacaktır ve sinir ağında daha derine gittikçe yavaş yavaş azalacaktır. 39 ila 37 ila 17 ila 14 arasında gitti. Afedersiniz, 39'dan 37'ye 17'den 7'ye gitti. Oysa ki, kanal sayısı genellikle artar. 3, 10, 20, 40 arasında gitti ve bu genel eğilimi diğer pek çok diğer yapay sinir ağında da görüyorsunuz. Bu nedenle, bu parametreleri sonraki videolarda nasıl tasarlayacağımız konusunda daha fazla kılavuz bulacağız. Fakat şimdi ilk olarak bir evrişimli sinir ağına örneğini gördünüz, veya kısaca ConvNet. Bu konuda tebrikler. Ve bu tipik bir evrişimli ağda ortaya çıkıyor, burada genellikle 3 tip katman vardır. Biri evrişim katmanıdır ve bizler sıklıkla Conv katman olarak belirtiriz. Ve bu, önceki ağda kullandığımız şeydir. Henüz görmediğiniz iki ortak katman türü daha var, ancak önümüzdeki birkaç videoda konuşacağız. Biri ortaklama katmanı (pooling layer) olarak adlandırılır, genellikle bu havuz (pool) olarak adlandırılır. Ve daha sonra son katman tam bağlı katman (fully connected layer-FC) olarak adlandırılır. Ve sadece evrişim katmanları kullanarak oldukça iyi bir sinir ağı tasarlamak mümkün olsa da, Çoğu sinir ağı mimarisinde ayrıca birkaç ortaklama katmanı (pooling layer) ve birkaç tane tam bağlı katman (fully connected layer) bulunur. Neyse ki ortaklama katmanının (pooling layer) ve tam bağlantılı katmanlarının (fully connected layers) tanımlanması evrişimli katmanların tanımlanmasından biraz daha basit. Bu yüzden önümüzdeki iki videoda bunu çabucak yapacağız ve daha sonra bir fikriniz olacak bir evrişimli sinir ağının en çok kullanılan tüm katmanları hakkında. Ve siz daha güçlü ağları bir araya getireceksiniz az önce gördüğümüzden. İlk tam evrişimli sinir ağını gördüğünüz için tekrar tebrik ediyorum. Bu hafta daha sonra ki zamanda, bu ağların nasıl eğitildiğini konuşacağız, fakat Öncelikle kısaca ortaklama (pooling) ve tam bağlı katmanlar (fully connected layers)hakkında konuşalım. Ve daha sonra bunları eğitirken, geri yayılım (back propagation) kullanılacak zaten aşina olduğunuz. Fakat gelecek videoda, ortaklama katmanını (pooling layer) nasıl uygulayacağımıza hızlıca bakalım Evrişimli ağımız için.
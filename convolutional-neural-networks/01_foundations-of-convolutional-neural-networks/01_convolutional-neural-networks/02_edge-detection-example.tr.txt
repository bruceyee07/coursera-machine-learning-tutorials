Evrişimli işlem(Convolutional operation) Evrişimli sinir ağının temel yapı taşlarından biridir Bu videoda, kenar tanımayı, motive edici örnek olarak, evrişimli işlemlerin nasıl yürüdüğünü kavramak için kullanacağız. Daha önceki videolarda, sinir ağındaki önceki katmanların nasıl kenarları tanıyabileceğini ve daha sonraki katmanların nesnelerin parçalarını tanıyabileceğini konuşmuştuk. ve yine daha sonraki katmanların insanların yüzleri gibi, nesnelerin tamamını tanıyabileceğini konuşmuştuk Bu videoda, bir görüntüdeki kenarları nasıl tanıyabileceğinizi göreceksiniz. Hadi bir örnek alalım. Bunun gibi bir görüntünün verildiğini düşünelim, bir bilgisayarın bu görüntüdeki nesneleri tanıması için ilk yapmanız gereken ilk şey belki de bu görüntüdeki dikey kenarları tanımak olacaktır Bir örnek verecek olursak, bu görüntüde korkulukların olduğu kısımda birçok dikey çizgi mevcut bunun yanı sıra yine yayaların oluşturmuş olduğu dikey çizgiler var ve dolayısıyla bunlar buradaki dikey kenar belirleyici çıktısında belirlenmektedir. aynı zamanda yatay kenarları da belirlemek isteyebilirsiniz Örneğin, bu korkuluğun olduğu yerde oldukça belirgin bir yatay çizgi mevcut ve bu da temel olarak burada belirleniyor Bu tarz bir görüntüdeki kenarları siz nasıl belirlersiniz? Bir örneğe bakalım. Burada 6 x 6 gri ölçü(grayscale) görüntüsü mevcut ve bu bir gri ölçü görüntüsü olduğundan, 6 x 6 x 3 yerine 6 x 6 x 1 bir matrikstir çünkü ayrı RGB kanallarına sahip değildir Kenarları belirleyebilmek için, örneğin görüntüdeki dikey kenarları belirlemek için, yapabileceğiniz şey 3 x 3 matriks kurmak olacaktır ve evrişimli sinir ağları terminolojisinde, bu Filtre olarak adlandırılacaktır ve 3 x 3 Filtreyi ya da bunun gibi gözüken 3 x 3 matriksi 111,000,-1-1-1 şeklinde kuracağım bazen akademik makalelerde buna filtre yerine çekirdek demeyi tercih ediyorlar fakat bu videolarda filtre terminolojisini kullanmayı tercih edeceğim. Yapacağınız şey bu 6 x 6 görüntüyü alıp evirmek olacaktır(convolve) ve evrişim işlemi buradaki yıldız işareti ile ifade edilmiş oluyor. ve 3 x 3 matriks ile eviriyoruz Notasyon(işaretler) ile ilgili talihsiz bir gerçek ise matematikte, yıldız işareti evrişimde standart olarak kullanılır fakat python'da yıldız işareti çarpma ya da elemanlarla çarpma işlemlerinde kullanılır. Dolayısıyla, buradaki yıldız işaretinın çift amacı var yani fazla anlam yüklenmiş bir işaret olarak karşımıza çıkmakta fakat bu videolarda, yıldız işaretinin evrişim anlamına geldiği noktalarda açık olmaya çalışacağım. Bu evrişim işleminin sonucu 4 x 4 bir matriks olacaktır -ki bunu da 4 x 4 görüntü olarak yorumlayabilirsiniz veya düşünebilirsiniz. ve bu 4 x 4 çıktıyı hesaplama yöntemi şu şekilde olacaktır: ilk elemanı hesaplamak için, yani 4 x 4 matriksin üst sol elemanını, yapacağınız şey 3 x 3 filtrenizi almak ve orjinal girdi matriksinizin üst 3 x 3' lük bölümüne yapıştırmak olacaktır. Dolayısıyla buraya 111,000, -1-1-1 yazdım ve yapmanız gereken şey elemanlarla çarpma işlemini yapmak, dolayısıyla birincisi 3 * 1, ve ikincisi 1*1, şuraya yazalım 1 * 1, ve daha sonra 2*1, ve sonuç olarak bu şekilde tüm 9 numarayı toplayalım. orta kolon size 0*0 + 5*0 + 7*0 sonucunu verecektir ve en sağ kolon 1*1 + 8*-1 + 2*-1 sonucu verecektir ve tüm bu 9 numarayı toplamak size -5 sonucunu verecektir dolayısıyla -5 'i buraya yazacağım bu 9 numarayı herhangi bir sırayla toplayabilirsiniz ben sadece ilk sütün, daha sonra ikinci sütun ve daha sonra üçüncü sütün şeklinde yaptım. Daha sonra, bu ikinci elemanın ne olduğunu bulmak için, mavi kareyi alacaksınız ve bir adım sağa yanaştıracaksınız, ve izin verin buradaki yeşil işaretlerden kurtulayım, ve aynı eleman çarpımlarını burada da yapacaksınız, dolayısıyla elinizde 0*1 + 5*1 + 7*1, +1*0 + 8*0 + 2*0, + 2*-1 + 9*-1 + 5*-1 var ve bu 9 numarayı toplarsanız, elinizde -4 kalır, gibi.. Eğer bunu tekrar sağa kaydırıp, 9 çarpma işlemini yapar ve toplarsanız, 0 sonucunu bulursunuz ve yine burada 8 sonucunu bulursunuz ve sadece doğrulamak için, 2 + 9 +5, 16 yapar orta sütün size 0 verir ve en sağ sütün -4 + -1 + 3*-1 , bu -8 yapar dolayısıyla 16 - 8 ve bu size 8 sonucu verir burada belirttiğimiz gibi. Daha sonra, bir sonraki sıradaki elemanı bulmak için, yapmanız gereken şey, mavi kareyi almak ve bir aşağı kaydırmaktır. Dolayısıyla, mavi kare şu anda bu pozisyonda ve tekrar, elemanlarla çarpımı ve toplam işlemlerini tekrar edersiniz ve bunu yaparsanız, burada -10 sonucuna varırsınız, ve bir sağa kaydırırsanız, -2 sonucunu bulursunuz, ve daha sonra 2 , 3, ve bu şeklinde devam eder ve bu şekilde diğer elemanları da hesaplayabilirsiniz ve açık olmak gerekirse, -16 sağ alt 3 x 3 lük bölgeden elde edilmiştir. Dolayısıyla, 3 x 3'lük bir matriksle evrişmiş bir 6 x 6 matrix size 4 x 4' lük bir matriks verecektir ve bunlar görüntüler ve filtrelerdir, bunlar sadece farklı boyutlardaki matrikslerdir fakat soldaki matriks bir görüntü olarak yorumlanmaya ve ortadaki matriks bir filtre olarak yorumlanmaya müsaittir ve sağdaki matriks ise belki de farklı bir görüntü olarak yorumlanabilir ve görünen o ki bu aslında dikey kenar belirleyici olarak karşımıza çıkmaktadır. Bunun nedenini bir sonraki slaytta göreceksiniz. ileri gitmeden önce, bir şeyi daha not edelim. Eğer bunu başka bir programlama diline uygulayacak olursanız, programlama dillerinin çoğunda evrişimi ifade etmek için yıldız işaretinden farklı bir işaret kullanıldığını söylemek gerek. Dolayısıyla, programlama alıştırmasında, conv_forward adlı fonksiyonu kullanacak veya uygulayacaksınız Eğer bunu tensorflowda yaparsanız, tf.nn.conv2d adlı bir fonksiyon mevcuttur ve diğer derin öğrenme programlama yapılarında(framework), Keras programlama yapısında, bu kursta daha sonra göreceğiniz üzere, evrişimi uygulayan Conv2d adlı fonksiyon mevcuttur, vs.. Evrişime iyi bir şekilde destek veren bütün derin öğrenme yapılarında bu evrişim işlemini uygulamak için bir fonksiyon olacaktır. Peki, bu neden dikey kenar belirlenmesini sağlıyor? Bir diğer örneğe birlikte bakalım. Bunu örneklemek için, basitleştirilmiş bir görüntü kullanacağız, burada sol yarısı 10 olan sağ yarısı 0 olan basit bir 6 x 6 görüntümüz mevcut, Eğer bunu bir resim olarak almışşanız, bu şuna benzeyebilir, soldaki 10 lardan oluşan alan size daha aydınlık piksel yoğunluk değerleri ve sağ yarı size daha koyu piksel yoğunluk değerleri verecektir. Belki de siyah olarak çizilebilecekken gri olarak çizilmiş bu tonu 0'ı belirtmesi için kullanacağım. Bu görüntüde, bariz bir şekilde ortadan geçen beyazdan daha koyu bir renge geçerken görebileceğiniz güçlü bir dikey çizgi mevcuttur. Dolayısıyla, bunu 3 x3 filtre ile evriştirdiğiniz zaman, -ki bu 3 x 3 filtre şu şekilde görselleştirilebilir. Hafif, parlak pikseller solda, ve daha sonra orta tonlarda 0'lar ortada, ve daha koyu tonlar solda. Elinize geçen ise bu sağdaki matrikstir. Dolayısıyla, bu matematiği doğrulamak için, Bu 0, örneğin, elemanlarla çarpımları alarak ve 3 x 3 blokla çarparak elde edilmiştir ve dolayısıyla, sol sütündan 10 + 10 + 10 ve ortadan 0'lar ve daha sonra -10 -10 -10 gelir ki bu da burada görülen 0 ile sonuçlanmasının sebebidir. Aynı zamanda, bunun tersine, bu 30 buradan elde edilebilir -ki burada bunu 10 + 10 + 10 ,0 + 0 + 0 , -0 + -0 + -0 sonucunda elde edebilirsiniz. Şimdi, eğer en sağdaki matriksi bir görüntü olarak çizerseniz, bunun gibi gözükecektir, yani ortada daha parlak bir bölge varmış gibi. ve bu 6 x 6'lık görüntünün aşağısındaki bu dikey çizgiyi tanılamaya tekabül eder ve eğer buradaki boyutlar bir miktar yanlış gözüküyorsa, veya belirlenmiş kenarlar kalın gözüküyorsa, bunun sebebi bizim burada çok küçük görüntülerle çalışıyor olduğumuzdandır ve eğer, diyelim ki, 6 x 6 görüntü yerine 1000 x 1000 görüntü kullanıyorsanız, bu durumda bunun görüntünüzdeki dikey kenarları bulmakta epey iyi iş çıkardığını görebilirsiniz ve bu örnekte, burada ortadaki parlak görüntü, çıktı görüntünüzün 'görünen o ki görüntünün ortasında güçlü dikey bir kenar geçiyor' demesinin bir yoludur. ve belki de dikey kenar tanımlamadan alınacak bir sezgi ise bir dikey kenar 3 x 3 filtre kullandığımızdan parlak piksellerin solda olduğu 3 x 3'lük bir bölgedir ve ortada ne olduğunu o kadar önemsemiyorsunuz ve yine sağdaki parlak pikseller solda olmuş olur ve 6 x 6'lık görüntünün ortası aslında solda parlak piksellerin sağda karanlık piksellerin olabileceği yerdir. ve bu yüzden dikey kenar buradadır ve evrişim işlemi dikey kenar nasıl bulabileceğinize yönelik olarak güvenilir bir yol sunar Dolayısıyla, şu ana kadar evrişim işleminin nasıl çalıştığını gördünüz Bir sonraki videoda, bunu nasıl alacağınızı ve evrişimli sinir ağının temel yapı taşı olarak nasıl kullanacağınızı göreceksiniz.
1
00:00:02,026 --> 00:00:06,778
你已经了解了卷积操作是如何进行

2
00:00:06,778 --> 00:00:07,800
垂直边缘检测的

3
00:00:07,800 --> 00:00:12,285
在本视频中 你将会学会<br />正边缘和负边缘的差别

4
00:00:12,285 --> 00:00:16,432
即由亮变暗和由暗变亮的边缘过渡

5
00:00:16,432 --> 00:00:19,384
你还将会看到其他几种边缘检测器

6
00:00:19,384 --> 00:00:21,731
以及如何让算法来学习<br />（这个边缘检测器）

7
00:00:21,731 --> 00:00:26,500
而不是手动设定边缘检测器<br />我们目前一直还是这样的

8
00:00:26,500 --> 00:00:28,456
现在我们进入正题

9
00:00:31,612 --> 00:00:36,050
这是我们在上一个视频中看到的例子<br />有一个图片

10
00:00:36,050 --> 00:00:39,377
6x6大小 左边亮 右边暗

11
00:00:39,377 --> 00:00:43,752
将它与垂直边缘检测器进行卷积

12
00:00:43,752 --> 00:00:46,390
得到在图中间的垂直边缘

13
00:00:47,710 --> 00:00:51,400
如果将颜色翻转 将会发生什么

14
00:00:51,400 --> 00:00:55,108
即左边是暗的部分 右边是亮的部分

15
00:00:55,108 --> 00:00:59,930
因此 10现在在右半部分<br />0现在在左半部分。

16
00:00:59,930 --> 00:01:03,240
如果将它与相同的边缘检测器做卷积

17
00:01:03,240 --> 00:01:07,835
你将会在中间部分得到-30<br />而不是30

18
00:01:07,835 --> 00:01:12,820
你可以将结果画出来<br />可能看起来是这样

19
00:01:12,820 --> 00:01:15,566
因为亮暗变化是反的

20
00:01:15,566 --> 00:01:18,290
这些30现在也反了

21
00:01:18,290 --> 00:01:21,160
变为-30

22
00:01:21,160 --> 00:01:26,790
表示由暗变亮<br />而不是由亮变暗的转换

23
00:01:26,790 --> 00:01:30,689
如果你不在乎这两个的区别

24
00:01:30,689 --> 00:01:34,780
你可以取输出矩阵的绝对值

25
00:01:34,780 --> 00:01:39,364
但是这个过滤器<br />确实能够区分亮到暗的边界

26
00:01:39,364 --> 00:01:41,340
和暗到亮的边界

27
00:01:42,500 --> 00:01:45,190
现在看更多边界检测的例子

28
00:01:45,190 --> 00:01:49,640
我们已经学习了能够检测<br />垂直边界的3乘3的过滤器

29
00:01:49,640 --> 00:01:53,470
因而你不会太惊讶于

30
00:01:53,470 --> 00:01:58,160
3乘3的过滤器同样能够<br />检测水平的边界

31
00:01:58,160 --> 00:02:02,450
回顾一下 由这个过滤矩阵<br />得到的垂直边界

32
00:02:02,450 --> 00:02:06,130
是个3乘3的区域 左边比较亮

33
00:02:06,130 --> 00:02:08,580
右边区域比较暗

34
00:02:08,580 --> 00:02:13,080
同样的 一个水平边界<br />也会是3乘3的区域

35
00:02:13,080 --> 00:02:18,510
其上方区域比较亮而下面比较暗

36
00:02:18,510 --> 00:02:22,392
现在有一个更加复杂的例子

37
00:02:22,392 --> 00:02:27,967
其左上方和右下方的元素全为10

38
00:02:27,967 --> 00:02:32,559
如果将之视为图片

39
00:02:32,559 --> 00:02:37,379
元素为0的区域会比较暗<br />将这些暗的区域涂黑

40
00:02:37,379 --> 00:02:41,459
左上方和右下方比较亮

41
00:02:41,459 --> 00:02:47,190
如果用一个水平边界检测器来卷积<br />你会得到这个矩阵

42
00:02:48,470 --> 00:02:51,462
拿几个例子来看

43
00:02:51,462 --> 00:02:55,774
这个30对应了这个3乘3的区域

44
00:02:55,774 --> 00:03:01,407
在这个区域里 上方的像素比较亮<br />下方的像素比较暗

45
00:03:01,407 --> 00:03:04,110
在这里

46
00:03:04,110 --> 00:03:08,391
检测器在这里找到了一个<br />很强的正边界

47
00:03:08,391 --> 00:03:12,309
这个-30对应了这个3乘3的区域

48
00:03:12,309 --> 00:03:16,987
在这个区域里 上方的比较暗<br />下方比较亮

49
00:03:16,987 --> 00:03:21,210
因此在这个例子里是一个负边界

50
00:03:21,210 --> 00:03:26,124
这是一个有些不实际的例子

51
00:03:26,124 --> 00:03:31,300
我们在考虑一个只有6乘6个像素<br />的非常小的图片

52
00:03:31,300 --> 00:03:34,210
但是这些介于中间的值 像-10

53
00:03:34,210 --> 00:03:39,150
反映了过滤器捕捉到了

54
00:03:39,150 --> 00:03:44,020
左边正边界的一部分<br />和右边负边界的一部分

55
00:03:44,020 --> 00:03:47,120
因此混合在一起<br />从而得到介于两者之间的值

56
00:03:47,120 --> 00:03:49,050
如果这是一个非常大的图片

57
00:03:49,050 --> 00:03:54,160
比方说这是一个1000乘1000的图片<br />同样是棋盘形式

58
00:03:54,160 --> 00:03:58,176
那么就不会有这些<br />元素为10的过渡区域

59
00:03:58,176 --> 00:04:02,950
这些过渡值相对于<br />图片的大小会非常小

60
00:04:02,950 --> 00:04:10,220
总而言之 不同的过滤器<br />可以找到垂直和水平的边界

61
00:04:10,220 --> 00:04:15,320
事实上 这些3乘3的<br />垂直边界检测器

62
00:04:15,320 --> 00:04:17,870
只是一个可能的选择

63
00:04:17,870 --> 00:04:20,470
在计算机视觉的文献中

64
00:04:20,470 --> 00:04:24,750
对于用哪些数字组合是最好的<br />仍然存在相当大的争议

65
00:04:24,750 --> 00:04:29,513
这里你也可以选择使用别的数字<br />比如1 2

66
00:04:29,513 --> 00:04:32,840
1 0 0 -1 -2 -1

67
00:04:32,840 --> 00:04:35,670
这个被称为Sobel过滤器

68
00:04:35,670 --> 00:04:40,981
这个过滤器的优点在于<br />它给中间行赋予了更大的权重

69
00:04:40,981 --> 00:04:46,620
从而可能使得它更加稳定

70
00:04:46,620 --> 00:04:50,711
计算机视觉的研究人员<br />同样会使用其他的数字组合

71
00:04:50,711 --> 00:04:54,950
比方说可以使3 10 3<br />而不是1 2 1

72
00:04:54,950 --> 00:04:59,330
另外一列为-3 -10 -3

73
00:04:59,330 --> 00:05:01,931
这个被称为Scharr过滤器

74
00:05:01,931 --> 00:05:06,752
这个过滤器有些<br />其他的略微不同的性质

75
00:05:06,752 --> 00:05:10,235
上面这个只是对于<br />垂直边界检测器而言

76
00:05:10,235 --> 00:05:13,043
如果将上面这些矩阵旋转90度<br />可以得到水平边界检测器

77
00:05:13,043 --> 00:05:18,350
随着深度学习的发展 我们发现

78
00:05:18,350 --> 00:05:23,743
如果你想要检测一些<br />复杂图片的边界

79
00:05:23,743 --> 00:05:29,319
可能并不需要计算机视觉的研究人员<br />挑选出这9个矩阵元素

80
00:05:29,319 --> 00:05:33,855
你可以把矩阵里的<br />这9个元素当做参数

81
00:05:33,855 --> 00:05:37,745
通过反向传播来学习<br />得到他们的数值

82
00:05:37,745 --> 00:05:42,095
目标是要获得这9个参数<br />使得对6乘6的图片

83
00:05:42,095 --> 00:05:46,373
用这个3乘3的过滤器进行卷积

84
00:05:46,373 --> 00:05:48,935
能得到一个优良的边界检测器

85
00:05:50,030 --> 00:05:54,840
在后面的视频中可以看到<br />将这9个元素当成参数学习

86
00:05:54,840 --> 00:05:59,571
如果需要的话 反向传播可以选择<br />学习得到1 1 1 0 0 0

87
00:05:59,571 --> 00:06:04,680
-1 -1 或者是Sobel过滤器<br />或是Scharr过滤器

88
00:06:04,680 --> 00:06:08,364
更有可能的是它能学到<br />比前述这些人为定义的过滤器

89
00:06:08,364 --> 00:06:13,210
更加善于捕捉你的数据的<br />统计学特征的过滤器

90
00:06:13,210 --> 00:06:17,005
除了垂直和水平边界

91
00:06:17,005 --> 00:06:21,219
同样能够学习去检测45度的边界

92
00:06:21,219 --> 00:06:26,127
70度 或73度 无论什么角度

93
00:06:26,127 --> 00:06:30,597
通过将这个数字设成参数

94
00:06:30,597 --> 00:06:35,356
从数据中自动学习得到<br />我们发现神经网络可以

95
00:06:35,356 --> 00:06:39,970
学习底层特征得很好 比如边界

96
00:06:39,970 --> 00:06:45,467
甚至比计算机视觉研究人员<br />所精心选择的更加稳定

97
00:06:45,467 --> 00:06:51,404
但是这些计算仍旧是卷积运算

98
00:06:51,404 --> 00:06:56,773
这使得反向传播可以学习<br />任何所需的3乘3的过滤器

99
00:06:56,773 --> 00:07:02,788
并应用于整个图片的任何位置<br />这里 这里

100
00:07:02,788 --> 00:07:08,266
从而得到所需要检测的特征

101
00:07:08,266 --> 00:07:13,296
无论是垂直边界 水平边界<br />倾斜的边界

102
00:07:13,296 --> 00:07:18,260
甚至是其他一些<br />还没有名字的过滤器

103
00:07:19,370 --> 00:07:22,945
总之 将这9个数字当成参数去学习

104
00:07:22,945 --> 00:07:26,890
是计算机视觉里的一个有用的想法

105
00:07:26,890 --> 00:07:31,654
在本课程本周稍后的课程里<br />我们会讲到具体的细节

106
00:07:31,654 --> 00:07:36,034
你将会学习如何通过反向传播<br />来学习这9个数字

107
00:07:36,034 --> 00:07:39,638
但首先 我们先讲讲

108
00:07:39,638 --> 00:07:41,890
基本的卷积运算的一些细节和变化

109
00:07:41,890 --> 00:07:46,219
在接下来的两个视频里 我想与大家<br />讨论如何使用补白(padding)

110
00:07:46,219 --> 00:07:48,510
和不同的步幅

111
00:07:48,510 --> 00:07:52,943
这两个是卷积神经网络的<br />卷积底层架构

112
00:07:52,943 --> 00:07:55,130
非常重要的组成部分

113
00:07:55,130 --> 00:07:56,420
让我们继续下一期教程
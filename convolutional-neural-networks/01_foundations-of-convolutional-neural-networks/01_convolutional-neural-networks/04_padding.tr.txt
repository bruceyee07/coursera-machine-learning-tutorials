Derin öğrenme ağları kurabilmek için temel evrişim işlemine yönelik yapmanız gereken bir modifikasyon dolgulama'dır. Nasıl kullanıldığına bakalım. Önceki videolarda eğer 6 x 6 bir görüntü alırsanız ve 3 x 3 bir filtre ile evrişim işlemine sokarsanız , 4 x 4 bir çıktı yani 4 x 4 matriks elde edeceğimizi görmüştük, bunun sebebi 3 x 3 bir filtrenin 6 x 6 bir matriks ile oluşturabileceği maksimum pozisyon sayısının 4 x 4 kadar olmasıdır. (3 x 3 filtrenin 6 x 6 görüntüde oturabileceği pozisyon sayısı) ve buna matematiksel açıdan bakarsak; n x n bir görüntü ile f x f bir filtreyi evrişim işlemine sokarsanız bu durumda çıktı matriksinin boyutu n-f+1 olur. ve bu örnekte, 6-3+1 , 4 e eşittir ki bu da neden 4 x 4 lük bir çıktıya sahip olduğunuzun sebebidir. Burada 2 olumsuzluğa değinmekte fayda var, birincisi; eğer her seferinde evrişim işlemini uygularsanız görüntünüz küçülür örneğin bu örnekte 6 x 6 dan 4 x 4 e küçüldü yani bu işlemi görüntünüz gerçek manada küçülmeden önce sadece birkaç kere yapabilirsiniz belki 1 x 1 e kadar küçülebilir. dolayısıyla, kenarları belirlediğiniz veya başka özellikleri belirlediğiniz her zaman görüntünüzün küçülmesini istemeyeceksiniz bu bir olumsuz yön, ikinci olumsuz yön ise, eğer kenardaki veya köşedeki piksele bakarsanız, buradaki küçük piksel sadece bir tane çıktıya etki edecektir çünkü bu sadece buradaki 3 x 3'lük filtrede kullanılır bunun yanısıra, eğer ortadaki piksele dikkat edersiniz, bu pikselin birçok bölge ile temas ettiğini görebilirsiniz. dolayısıyla, kenar veya köşedeki pikseller çıktıda çok daha az kullanırlar. Dolayısıyla, böyle bir durumda kenardaki veya kenara yakın bölgelerdeki piksellerin birçok bilgilesini kullanamıyoruz Bu iki problemi de çözmek için, (hem çıktı boyutunun küçülmesi hem de kenarlardaki piksellerin bilgilerinin az kullanılması) ve gerçek anlamda derin sinir ağları kurarken, görüntünüzün her adımda neden küçülmemesi gerektiğini göreceksiniz belki de 100 katmanlı bir derin ağda, bu durumda her katmanda boyut küçülür, ve daha sonra 100 katman sonunda çok küçük bir çıktıya sahip olmuş olursunuz bu birinci problemdi, diğer problem ise görüntünün kenarındaki birçok bilgiyi kullanmıyor olmanız. Dolayısıyla, bu iki problemi de çözebilmek için, yapabileceğiniz şey evrişim işlemini uygulamadan önce, görüntüyü dolgulamanızdır Dolayısıyla bu durumda, diyelim ki görüntünün tamamının kenarlarında olacak şekilde ek olarak bir sınır ile dolguladığımızı farzedelim, Eğer bunu yaparsanız, bu durumda 6 x 6 bir görüntüden ziyade, şu anda bunu 8 x 8 bir görüntüye dolguladınız ve bu 8 x 8 görüntüyü 3 x 3 görüntü ile evriştirdiğinizde,şu çıktıyı elde edeceksiniz Daha önce 4 x 4 elde edecekken şu anda 6 x 6 bir görüntü elde ettiniz dolayısıyla, orjinal boyut olan 6 x 6 yı korumayı başarmış oldunuz. Dolayısıyla, dolguladığınızda, sıfırlar ile dolguluyorsunuz ve p ye dolgulama miktarı diyoruz Bu durumda, p bire eşittir çünkü, tüm çevreyi ekstra 1 pikselle dolguluyoruz bu durumda çıktı, (n+2p-f+1) x (n+2p-f+1) haline gelir. Dolayısıyla, bu 6 artı 2 eksi 3 artı 1 ile bunun aynısının evrişimi haline gelir Dolayısıyla, 6+2-3+1 bu 6 ya eşittir. Dolayısıyla bu, orjinal girdi boyutu olan 6 x 6 lık bir görüntünün boyutunu koruduğunuz anlamına gelir. Dolayısıyla, buradaki yeşil piksel aslında çıktıdaki her hücreyi etkiliyor yani efektif denilebilir, belki tüm bilgiyi atarak değil de kenardaki bilgiyi daha az sayarak veya hesaba katarak etkiye sahip ve burada derin sınırı sadece 1 pikselle dolgulamanın etkisini göstermiş olduk Eğer isterseniz, sınırları 2 pikselle de dolgulayabilirsiniz,ki bu durumda , bir tane daha sınır çizersiniz, ve eğer isterseniz, daha fazla pikselle bile dolgulama yapabilirsiniz. Dolayısıyla, sanırım burada çizdiğim şey, bu dolgulama açısından p nin 2 ye eşit olduğu durumdur. ne kadar dolgulayacağınız hakkında ise, görünecek olan o ki, 2 yaygın seçenek bulunmakta, geçerli evrişim(valid convolutions) ve aynı evrişim(same convolutions) çok iyi isimlendirilmeler değiller fakat geçerli evrişimde, bu temel olarak dolgulama olmadığını gösterir. ve dolayısıyla, bu durumda, n x n görüntüyü f x f filtre ile evriştirdiğiniz zaman bu size (n-f+1) x (n-f+1) 'lık bir çıktı verir. Dolayısıyla, bu önceki videolarda konuştuğumuza benzer biçimde, n x n lik bir görüntümüz olduğu ve bunu 3 x 3 lük filtre ile evriştirdiğimiz ve 4 x 4 lük bir çıktı elde ettiğimiz örnekteki gibidir diğer yaygın dolgulama seçeneği ise aynı dolgulama(same convoution) diye adlandırılır ve bu dolguladığınız zaman çıktınızdaki boyutun girdi boyutu ile aynı olması anlamaına gelmektedir Dolayısıyla, eğer bu formüle bakarsanız, p pikselle dolguladığınızda, bu durumda n , n+2p ye dönüşür ve buradan devam eder -f +1 şeklinde. Dolayısıyla, n x n görüntümüz ve onun sınırlarını dolgulayan p pikselimiz mevcut, bu durumda bu boyutun çıktı büyüklüğü n+2p-f+1 haline gelir Eğer n + 2p -f + 1 in 1 e eşit olmasını istiyorsanız, dolayısıyla bu durumda çıktı büyüklüğü girdi büyüklüğüne eşit olur, eğer bu denklemi alıp çözerseniz, n iki tarafta birbirini götürür, eğer p için denklemi çözerseniz, burada p nin (f-1)/2 olduğunu görürsünüz Dolayısıyla f tek sayı olduğunda, dolgulama sayısı ile aynı şunun gibi seçerek, çıktı büyüklüğünün girdi büyüklüğü ile aynı olduğuna emin olabilirsiniz ve bu yüzden, örneğin, filtre önceki slayttaki gibi 3 x 3 olduğunda, girdi büyüklüğü ile çıktı büyüklüğünü aynı yapacak dolgulama miktarı (3-1)/2 dir ki bu da 1 e eşittir bir başka örnek daha verelim, eğer filtre büyüklüğünüz 5 x 5 ise, bu durumda eğer f 5 e eşitse, ve eğer bunu denklemde yerine koyarsanız,filtreniz 5 x 5 iken çıktı büyüklüğü ile girdi büyüklüğünün aynı olması için gereken dolgulama miktarının 2 olduğunu göreceksiniz ve geleneksel olarak bilgisayarlı görüde, f genellikle tek sayıdır Neredeyse her zaman tek sayıdır ve çift sayılı filtreleri çok nadir görürsünüz ve bence bunun için iki sebep vardır birincisi eğer f çift sayı olsaydı, bu durumda simetrik olmayan olgulama kullanıyor olacaktınız, dolayısıyla sadece f tek sayı olduğunda buna benzer şekilde aynı evrişim işlemi doğal dolgulama olanağı sunuyor, -solda veya sağda daha fazla dolgulama yapmak yerine tüm çevresinde aynı dolgulamaya sahip olmak ve aynı zamanda simetrik olması için- ve ikinci sebep ise, tek sayılı boyut filtreniz varsa örneğin 3 x 3 ya da 5 x 5, bu durumda merkezi konuma sahip olur ve bilgisayarlı görüde bazen ayırıcıya sahip olmak iyidir yani şöyle bir piksele, merkezi pikseli çağırabilirsiniz, ve bunu filtrenin konumu hakkında konuşmak olarak düşünebiliriz evet, belki de bunlar tek sayı f değeri kullanmamamıza yönelik epey önemli sebepler sunuyordur fakat eğer bilgisayarlı görü literatürüne bakarsanız, 3 x 3 filtrelerin oldukça yaygın olduğunu göreceksiniz 5 x 5 ya da 7 x 7 bile görebilrsiniz ve aslında daha sonra 1 x 1 filtreler hakkında da konuşacağız ki bunun neden mantıklı olduğunu göreceksiniz fakat sadece geleneksel olarak, size tek sayılı filtreler kullanmanız gerektiğini söyleyebilirim. ve bence eğer f için çift numara seçseniz bile gayet yeterli performans elde edebilirsiniz fakat eğer yaygın bilgisayarlı görü geleneğine bağlı kalırsanız, ben çoğunlukla tek sayı kullanmayı tercih ediyorum evirişim işleminiz için dolgulama miktarını belirlemek için, ya p için bir değer belirleyebilirsiniz ya da bunun geçerli evrişim olduğunu söyleyebilirsiniz, ki bu da p eşittir 0 dır ya da aynı evrişim işlemi olduğunu söyleyebilirsiniz ki bu da girdi boyutu ile çıktı boyutunuzun eşit olmasını sağlayacak kadar dolgulama yapılması anlamına gelir Böylelikle, dolgulama için bu kadar yeterli. Bir sonraki videoda, kaydırma adımlı evrişimi nasıl uygulayacağınızı göstereceğim.
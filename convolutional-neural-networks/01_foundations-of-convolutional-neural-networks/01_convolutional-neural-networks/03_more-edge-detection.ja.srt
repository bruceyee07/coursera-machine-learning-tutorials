1
00:00:02,026 --> 00:00:06,778
畳み込み処理が どのようにして 垂直エッジ検出器を

2
00:00:06,778 --> 00:00:07,800
実現するのかを見てきた

3
00:00:07,800 --> 00:00:12,285
このビデオでは 正のエッジと負のエッジの違いを学ぶ

4
00:00:12,285 --> 00:00:16,432
それは 明から暗 と 暗から明 のエッジ遷移の違いだ

5
00:00:16,432 --> 00:00:19,384
そして 他の種類のエッジ検出器も見てみる

6
00:00:19,384 --> 00:00:21,731
また アルゴリズムがどうやって学ぶのかについても見てみる

7
00:00:21,731 --> 00:00:26,500
これまで見てきたハンドコードのエッジ検出器ではないものを

8
00:00:26,500 --> 00:00:28,456
では、始めましょう。

9
00:00:31,612 --> 00:00:36,050
ここに 前回のビデオで見た例がある
この画像を見たでしょ

10
00:00:36,050 --> 00:00:39,377
6 x 6  左が明るく 右が暗い

11
00:00:39,377 --> 00:00:43,752
そして 垂直エッジ検出フィルターで畳み込むと

12
00:00:43,752 --> 00:00:46,390
垂直エッジが この画像の中央に検出される

13
00:00:47,710 --> 00:00:51,400
色が反転した場合 画像の中で何が起こるか？

14
00:00:51,400 --> 00:00:55,108
左が暗く 右が明るい場合は？

15
00:00:55,108 --> 00:00:59,930
つまり 画像の右半分が 10 で 左半分が 0

16
00:00:59,930 --> 00:01:03,240
もし 同じエッジ検出フィルターで 畳み込むと

17
00:01:03,240 --> 00:01:07,835
結果は 中央が 30 ではなく 負の30になる

18
00:01:07,835 --> 00:01:12,820
絵を描けるが こんな風になる

19
00:01:12,820 --> 00:01:15,566
影の遷移が逆転しているので

20
00:01:15,566 --> 00:01:18,290
30 もまた 反転している

21
00:01:18,290 --> 00:01:21,160
そして 負の 30 は

22
00:01:21,160 --> 00:01:26,790
明から暗への遷移ではなく 暗から明への遷移を示す

23
00:01:26,790 --> 00:01:30,689
もし この２つのケースのどちらでも構わない場合は

24
00:01:30,689 --> 00:01:34,780
この出力行列の絶対値を取ればよい

25
00:01:34,780 --> 00:01:39,364
しかし この特別のフィルターは 明から暗と 暗から明のエッジを

26
00:01:39,364 --> 00:01:41,340
区別する

27
00:01:42,500 --> 00:01:45,190
もっと エッジ検出の例を見てみよう

28
00:01:45,190 --> 00:01:49,640
この 3 x 3 フィルターは これまで見てきたやつだが 垂直エッジを検出する

29
00:01:49,640 --> 00:01:53,470
それほど 驚くことは無いだろうけど

30
00:01:53,470 --> 00:01:58,160
この 3 x 3 フィルターは 水平エッジを検出する

31
00:01:58,160 --> 00:02:02,450
このフィルターによる垂直エッジは 3 x 3 領域であり

32
00:02:02,450 --> 00:02:06,130
ピクセルが 相対的に 左側が明で 右側が暗になっている

33
00:02:06,130 --> 00:02:08,580
これを鑑みると

34
00:02:08,580 --> 00:02:13,080
同じように 水平エッジも 3 x 3 領域で

35
00:02:13,080 --> 00:02:18,510
ピクセルが 相対的に 上が明るく 下が暗い 行になるだろう

36
00:02:18,510 --> 00:02:22,392
もう一つ例を出そう 今度はもっと複雑なやつだ

37
00:02:22,392 --> 00:02:27,967
左上角と右下角が 10 だ

38
00:02:27,967 --> 00:02:32,559
よって 画像を描くなら こんな画像になる

39
00:02:32,559 --> 00:02:37,379
0 の場所は暗いので 暗い領域には影を付ける

40
00:02:37,379 --> 00:02:41,459
左上と右下角は明るくなる

41
00:02:41,459 --> 00:02:47,190
そして 水平エッジ検出器で畳み込むと こうなる

42
00:02:48,470 --> 00:02:51,462
2~3個 例を取り上げよう

43
00:02:51,462 --> 00:02:55,774
ここの 30 は この 3 x 3 領域に対応していて

44
00:02:55,774 --> 00:03:01,407
実際 そこでは 明るいピクセルが上にあり 暗いピクセルが下にある

45
00:03:01,407 --> 00:03:04,110
ここにあるものだ

46
00:03:04,110 --> 00:03:08,391
そのため 強い正のエッジが見つかる

47
00:03:08,391 --> 00:03:12,309
そして ここにある 負の 30 は この領域に対応していて

48
00:03:12,309 --> 00:03:16,987
実際 下が明るく 上が暗い

49
00:03:16,987 --> 00:03:21,210
よって この例では これは 負のエッジとなる

50
00:03:21,210 --> 00:03:26,124
これは 人工的に作ったもので

51
00:03:26,124 --> 00:03:31,300
たった 6 x 6 の相対的に小さな画像を扱ったに過ぎない

52
00:03:31,300 --> 00:03:34,210
しかし これらの中間値 例えばこの -10 は(訳注: 映像では正の10を示している)
ここのフィルターが

53
00:03:34,210 --> 00:03:39,150
左の正エッジの一部分と 右の負エッジの一部分を

54
00:03:39,150 --> 00:03:44,020
捉えたことを反映している

55
00:03:44,020 --> 00:03:47,120
それらを混ぜ合わせて 中間値となった

56
00:03:47,120 --> 00:03:49,050
しかし もし この画像が大変大きかった場合は

57
00:03:49,050 --> 00:03:54,160
例えば 1000 x 1000 画像で チェス盤のような模様があったら

58
00:03:54,160 --> 00:03:58,176
そうしたら これら 10 の領域を見ることは無いだろう

59
00:03:58,176 --> 00:04:02,950
中間値の数は 画像のサイズに比べてとても小さいから

60
00:04:02,950 --> 00:04:10,220
まとめると 異なるフィルターを使えば 垂直や水平のエッジを見つけることができる

61
00:04:10,220 --> 00:04:15,320
我々が使ってきた 3 x 3 垂直エッジ検出フィルターは 

62
00:04:15,320 --> 00:04:17,870
可能な選択肢の1つに過ぎない

63
00:04:17,870 --> 00:04:20,470
また コンピュータ ビジョン学においては 歴史的には

64
00:04:20,470 --> 00:04:24,750
どんな数の組を使うのが良いのかについての 大量の議論がある

65
00:04:24,750 --> 00:04:29,513
他にも使えるものがある 例えば

66
00:04:29,513 --> 00:04:32,840
1 2 1, 0 0 0, -1 -2 -1

67
00:04:32,840 --> 00:04:35,670
これは ソーベル フィルターと呼ばれる

68
00:04:35,670 --> 00:04:40,981
これの利点は 中央の行 中央のピクセル を少しだけ重くしていることである

69
00:04:40,981 --> 00:04:46,620
これは 少しだけ堅牢になる

70
00:04:46,620 --> 00:04:50,711
しかし コンピュータ ビジョン研究者は 他の数の組み合わせも 同様に使う

71
00:04:50,711 --> 00:04:54,950
1 2 1 の代わりに 3 10 3 にしたり

72
00:04:54,950 --> 00:04:59,330
そして -3 -10 -3 にしたりする

73
00:04:59,330 --> 00:05:01,931
そして これは シャー フィルターと呼ばれる

74
00:05:01,931 --> 00:05:06,752
そして これは また少しだけ異なる性質を持つ

75
00:05:06,752 --> 00:05:10,235
これは 単なる垂直エッジ検出のためのものだ

76
00:05:10,235 --> 00:05:13,043
これを 90° 動かせば 水平エッジ検出になる

77
00:05:13,043 --> 00:05:18,350
ディープラーニングの台頭で 学んだことの1つは

78
00:05:18,350 --> 00:05:23,743
欲しいのは 複雑な画像のエッジを検出することであって

79
00:05:23,743 --> 00:05:29,319
コンピュータ ビジョン研究者が手で書いた９つの数字を必要とすることではない

80
00:05:29,319 --> 00:05:33,855
多分 これらは学習することができ この行列の９つの数をパラメータとして扱える

81
00:05:33,855 --> 00:05:37,745
それらは 誤差逆伝播で 学習できる

82
00:05:37,745 --> 00:05:42,095
ゴールは ９つのパラメータを学習し 画像を得た時

83
00:05:42,095 --> 00:05:46,373
6 x 6 画像を そして 3 x 3 フィルターでそれを畳み込んで

84
00:05:46,373 --> 00:05:48,935
良いエッジ検出を行えるようにすることだ

85
00:05:50,030 --> 00:05:54,840
後のビデオを見るのは これら９つの数をパラメータとして扱い

86
00:05:54,840 --> 00:05:59,571
逆伝播が そのように進むなら 1 1 1, 0 0 0, -1 -1 -1 を学び出すし

87
00:05:59,571 --> 00:06:04,680
もしくは ソーベル フィルターを学習したり シャー フィルターを学習したりする

88
00:06:04,680 --> 00:06:08,364
もしくは 別の何かを学ぶ それは

89
00:06:08,364 --> 00:06:13,210
どの手書きしたフィルターよりも データの統計情報を良く捉えている

90
00:06:13,210 --> 00:06:17,005
そして 単なる垂直と水平のエッジではなく

91
00:06:17,005 --> 00:06:21,219
それは 45° 70° 73°や

92
00:06:21,219 --> 00:06:26,127
どのような向きのエッジでも 学ぶことができるだろう

93
00:06:26,127 --> 00:06:30,597
そして これらの数をパラメータとして

94
00:06:30,597 --> 00:06:35,356
データから自動的に学習する
ニューラルネットワークは

95
00:06:35,356 --> 00:06:39,970
低レベルの特徴を確かに学ぶことができて エッジ等も学べる

96
00:06:39,970 --> 00:06:45,467
そして それは コンピュータ ビジョン研究者が手で作り上げることができるものよりも堅牢なのだ

97
00:06:45,467 --> 00:06:51,404
しかし これらの計算の基礎となるは 依然として畳み込み処理だ

98
00:06:51,404 --> 00:06:56,773
それにより 誤差逆伝播が どのような 3 x 3 フィルターでも学習可能にする

99
00:06:56,773 --> 00:07:02,788
そして 画像全体を通じて それを適用する

100
00:07:02,788 --> 00:07:08,266
この位置や この位置や この位置に
そして 検出しようとする特徴がどのようなものであっても 出力する

101
00:07:08,266 --> 00:07:13,296
それは 垂直エッジだったり 水平エッジだったり 他の角度のエッジだったり

102
00:07:13,296 --> 00:07:18,260
もしくは 英語で名前の無いような他のフィルターだったりするだろう

103
00:07:19,370 --> 00:07:22,945
これら９つの数を学習パラメータとして扱えるという考えは

104
00:07:22,945 --> 00:07:26,890
コンピュータ ビジョンにおける最も強力な考えの1つとなっている

105
00:07:26,890 --> 00:07:31,654
そして このコースの後の方 今週の終わりの方で この考えの詳細について語る

106
00:07:31,654 --> 00:07:36,034
実際にどのように 誤差逆伝播を使って これら９つの数を学ぶのかについて

107
00:07:36,034 --> 00:07:39,638
しかし まずは 基本の畳み込み処理についての

108
00:07:39,638 --> 00:07:41,890
他の詳細 他の種類について話しましょう

109
00:07:41,890 --> 00:07:46,219
次の２つのビデオでは 畳み込みに関して
どのように パディングと

110
00:07:46,219 --> 00:07:48,510
ストライドを使うのかについて 議論したい

111
00:07:48,510 --> 00:07:52,943
この２つは 畳み込み構造の重要なピースとなるでしょう

112
00:07:52,943 --> 00:07:55,130
畳み込みニューラルネットワークの

113
00:07:55,130 --> 00:07:56,420
では次のビデオにいきましょう
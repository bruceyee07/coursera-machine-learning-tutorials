1
00:00:01,580 --> 00:00:05,000
Evrişimli işlem(Convolutional operation) Evrişimli sinir ağının

2
00:00:05,000 --> 00:00:06,870
temel yapı taşlarından biridir

3
00:00:06,870 --> 00:00:10,050
Bu videoda, kenar tanımayı, motive edici örnek olarak,

4
00:00:10,050 --> 00:00:14,030
evrişimli işlemlerin nasıl yürüdüğünü kavramak için kullanacağız.

5
00:00:17,743 --> 00:00:18,943
Daha önceki videolarda,

6
00:00:18,943 --> 00:00:23,810
sinir ağındaki önceki katmanların nasıl kenarları tanıyabileceğini ve daha sonraki

7
00:00:23,810 --> 00:00:27,250
katmanların nesnelerin parçalarını tanıyabileceğini konuşmuştuk.

8
00:00:27,250 --> 00:00:31,320
ve yine daha sonraki katmanların insanların yüzleri gibi, nesnelerin

9
00:00:31,320 --> 00:00:33,380
tamamını tanıyabileceğini konuşmuştuk

10
00:00:35,270 --> 00:00:40,740
Bu videoda, bir görüntüdeki kenarları nasıl tanıyabileceğinizi göreceksiniz.

11
00:00:40,740 --> 00:00:42,360
Hadi bir örnek alalım.

12
00:00:42,360 --> 00:00:46,760
Bunun gibi bir görüntünün verildiğini düşünelim, bir bilgisayarın bu görüntüdeki nesneleri tanıması için ilk yapmanız

13
00:00:46,760 --> 00:00:53,205
gereken ilk şey belki de bu görüntüdeki dikey kenarları tanımak olacaktır

14
00:00:54,650 --> 00:00:59,470
Bir örnek verecek olursak, bu görüntüde korkulukların olduğu kısımda birçok dikey çizgi mevcut

15
00:00:59,470 --> 00:01:04,040
bunun yanı sıra yine yayaların oluşturmuş olduğu dikey çizgiler var

16
00:01:04,040 --> 00:01:08,420
ve dolayısıyla bunlar buradaki dikey kenar belirleyici çıktısında belirlenmektedir.

17
00:01:09,860 --> 00:01:12,340
aynı zamanda yatay kenarları da belirlemek isteyebilirsiniz

18
00:01:12,340 --> 00:01:17,180
Örneğin, bu korkuluğun olduğu yerde oldukça belirgin bir yatay çizgi mevcut

19
00:01:17,180 --> 00:01:20,410
ve bu da temel olarak burada belirleniyor

20
00:01:21,520 --> 00:01:25,034
Bu tarz bir görüntüdeki kenarları siz nasıl belirlersiniz?

21
00:01:25,034 --> 00:01:26,160
Bir örneğe bakalım.

22
00:01:27,670 --> 00:01:31,056
Burada 6 x 6 gri ölçü(grayscale) görüntüsü mevcut

23
00:01:31,056 --> 00:01:35,949
ve bu bir gri ölçü görüntüsü olduğundan, 6 x 6 x 3

24
00:01:35,949 --> 00:01:40,700
yerine 6 x 6 x 1 bir matrikstir çünkü ayrı RGB kanallarına sahip değildir

25
00:01:41,790 --> 00:01:46,213
Kenarları belirleyebilmek için, örneğin görüntüdeki dikey kenarları belirlemek için,

26
00:01:46,213 --> 00:01:49,093
yapabileceğiniz şey 3 x 3 matriks kurmak olacaktır

27
00:01:49,093 --> 00:01:53,733
ve evrişimli sinir ağları terminolojisinde,

28
00:01:53,733 --> 00:01:55,950
bu Filtre olarak adlandırılacaktır

29
00:01:57,390 --> 00:02:01,543
ve 3 x 3 Filtreyi ya da bunun gibi gözüken 3 x 3 matriksi

30
00:02:01,543 --> 00:02:08,679
111,000,-1-1-1 şeklinde kuracağım

31
00:02:08,679 --> 00:02:12,947
bazen akademik makalelerde buna filtre yerine çekirdek demeyi tercih ediyorlar

32
00:02:12,947 --> 00:02:16,370
fakat bu videolarda filtre terminolojisini kullanmayı tercih edeceğim.

33
00:02:17,890 --> 00:02:22,730
Yapacağınız şey bu 6 x 6 görüntüyü alıp evirmek olacaktır(convolve)

34
00:02:22,730 --> 00:02:27,107
ve evrişim işlemi buradaki yıldız işareti ile ifade edilmiş oluyor.

35
00:02:29,560 --> 00:02:32,690
ve 3 x 3 matriks ile eviriyoruz

36
00:02:32,690 --> 00:02:37,410
Notasyon(işaretler) ile ilgili talihsiz bir gerçek ise matematikte,

37
00:02:37,410 --> 00:02:41,490
yıldız işareti evrişimde standart olarak kullanılır

38
00:02:41,490 --> 00:02:45,648
fakat python'da yıldız işareti çarpma ya da

39
00:02:45,648 --> 00:02:48,440
elemanlarla çarpma işlemlerinde kullanılır.

40
00:02:48,440 --> 00:02:53,009
Dolayısıyla, buradaki yıldız işaretinın çift amacı var yani fazla anlam yüklenmiş bir işaret olarak karşımıza çıkmakta

41
00:02:53,009 --> 00:02:58,598
fakat bu videolarda, yıldız işaretinin evrişim anlamına geldiği noktalarda açık olmaya çalışacağım.

42
00:02:58,598 --> 00:03:03,844
Bu evrişim işleminin sonucu 4 x 4 bir matriks olacaktır

43
00:03:03,844 --> 00:03:09,020
-ki bunu da 4 x 4 görüntü olarak yorumlayabilirsiniz veya düşünebilirsiniz.

44
00:03:09,020 --> 00:03:13,330
ve bu 4 x 4 çıktıyı hesaplama yöntemi şu şekilde olacaktır:

45
00:03:13,330 --> 00:03:18,522
ilk elemanı hesaplamak için, yani 4 x 4 matriksin üst sol elemanını,

46
00:03:18,522 --> 00:03:21,848
yapacağınız şey 3 x 3 filtrenizi almak ve orjinal girdi

47
00:03:21,848 --> 00:03:26,254
matriksinizin üst 3 x 3' lük bölümüne yapıştırmak olacaktır.

48
00:03:26,254 --> 00:03:30,920
Dolayısıyla buraya 111,000,

49
00:03:30,920 --> 00:03:34,872
-1-1-1 yazdım

50
00:03:34,872 --> 00:03:38,221
ve yapmanız gereken şey elemanlarla çarpma işlemini yapmak,

51
00:03:38,221 --> 00:03:41,481
dolayısıyla birincisi 3 * 1, ve

52
00:03:41,481 --> 00:03:46,377
ikincisi 1*1, şuraya yazalım 1 * 1,

53
00:03:46,377 --> 00:03:50,398
ve daha sonra 2*1,

54
00:03:50,398 --> 00:03:53,340
ve sonuç olarak bu şekilde tüm 9 numarayı toplayalım.

55
00:03:53,340 --> 00:04:00,451
orta kolon size 0*0 + 5*0 + 7*0 sonucunu verecektir

56
00:04:00,451 --> 00:04:06,357
ve en sağ kolon 1*1 + 8*-1 + 2*-1

57
00:04:06,357 --> 00:04:09,088
sonucu verecektir

58
00:04:09,088 --> 00:04:15,875
ve tüm bu 9 numarayı toplamak size -5 sonucunu verecektir

59
00:04:15,875 --> 00:04:19,340
dolayısıyla -5 'i buraya yazacağım

60
00:04:19,340 --> 00:04:22,450
bu 9 numarayı herhangi bir sırayla toplayabilirsiniz

61
00:04:22,450 --> 00:04:27,550
ben sadece ilk sütün, daha sonra ikinci sütun

62
00:04:27,550 --> 00:04:29,620
ve daha sonra üçüncü sütün şeklinde yaptım.

63
00:04:29,620 --> 00:04:33,467
Daha sonra, bu ikinci elemanın ne olduğunu bulmak için,

64
00:04:33,467 --> 00:04:39,526
mavi kareyi alacaksınız ve bir adım sağa yanaştıracaksınız,

65
00:04:39,526 --> 00:04:42,100
ve izin verin buradaki yeşil işaretlerden kurtulayım,

66
00:04:42,100 --> 00:04:46,330
ve aynı eleman çarpımlarını burada da yapacaksınız,

67
00:04:46,330 --> 00:04:52,501
dolayısıyla elinizde 0*1 + 5*1 + 7*1,

68
00:04:52,501 --> 00:04:57,400
+1*0 + 8*0 + 2*0,

69
00:04:57,400 --> 00:05:03,450
+ 2*-1 + 9*-1 + 5*-1 var

70
00:05:03,450 --> 00:05:10,791
ve bu 9 numarayı toplarsanız, elinizde -4 kalır, gibi..

71
00:05:10,791 --> 00:05:16,078
Eğer bunu tekrar sağa kaydırıp, 9 çarpma işlemini yapar ve toplarsanız, 0 sonucunu bulursunuz

72
00:05:16,078 --> 00:05:19,424
ve yine burada 8 sonucunu bulursunuz

73
00:05:19,424 --> 00:05:26,017
ve sadece doğrulamak için, 2 + 9 +5, 16 yapar

74
00:05:26,017 --> 00:05:29,165
orta sütün size 0 verir

75
00:05:29,165 --> 00:05:35,110
ve en sağ sütün -4 + -1 + 3*-1 , bu -8 yapar

76
00:05:35,110 --> 00:05:39,621
dolayısıyla 16 - 8 ve bu size 8 sonucu verir

77
00:05:39,621 --> 00:05:43,796
burada belirttiğimiz gibi.

78
00:05:43,796 --> 00:05:47,738
Daha sonra, bir sonraki sıradaki elemanı bulmak için,

79
00:05:47,738 --> 00:05:52,280
yapmanız gereken şey, mavi kareyi almak ve bir aşağı kaydırmaktır.

80
00:05:52,280 --> 00:05:54,450
Dolayısıyla, mavi kare şu anda bu pozisyonda

81
00:05:54,450 --> 00:05:59,920
ve tekrar, elemanlarla çarpımı ve toplam işlemlerini tekrar edersiniz

82
00:05:59,920 --> 00:06:02,967
ve bunu yaparsanız, burada -10 sonucuna varırsınız,

83
00:06:05,016 --> 00:06:11,147
ve bir sağa kaydırırsanız, -2 sonucunu bulursunuz,

84
00:06:11,147 --> 00:06:14,590
ve daha sonra 2 , 3, ve bu şeklinde devam eder

85
00:06:14,590 --> 00:06:20,050
ve bu şekilde diğer elemanları da hesaplayabilirsiniz

86
00:06:21,400 --> 00:06:26,281
ve açık olmak gerekirse, -16 sağ alt

87
00:06:26,281 --> 00:06:29,980
3 x 3 lük bölgeden elde edilmiştir.

88
00:06:31,080 --> 00:06:36,600
Dolayısıyla, 3 x 3'lük bir matriksle evrişmiş bir 6 x 6 matrix size 4 x 4' lük bir matriks verecektir

89
00:06:38,182 --> 00:06:39,760
ve bunlar görüntüler ve filtrelerdir,

90
00:06:39,760 --> 00:06:43,390
bunlar sadece farklı boyutlardaki matrikslerdir

91
00:06:44,640 --> 00:06:49,779
fakat soldaki matriks bir görüntü olarak yorumlanmaya ve

92
00:06:49,779 --> 00:06:52,564
ortadaki matriks bir filtre olarak yorumlanmaya müsaittir

93
00:06:52,564 --> 00:06:57,021
ve sağdaki matriks ise belki de farklı bir görüntü olarak yorumlanabilir

94
00:06:57,021 --> 00:07:00,830
ve görünen o ki bu aslında dikey kenar belirleyici olarak karşımıza çıkmaktadır.

95
00:07:00,830 --> 00:07:03,440
Bunun nedenini bir sonraki slaytta göreceksiniz.

96
00:07:03,440 --> 00:07:06,097
ileri gitmeden önce, bir şeyi daha not edelim.

97
00:07:06,097 --> 00:07:10,476
Eğer bunu başka bir programlama diline uygulayacak olursanız,

98
00:07:10,476 --> 00:07:13,840
programlama dillerinin çoğunda evrişimi ifade etmek için

99
00:07:13,840 --> 00:07:16,800
yıldız işaretinden farklı bir işaret kullanıldığını söylemek gerek.

100
00:07:16,800 --> 00:07:20,010
Dolayısıyla, programlama alıştırmasında,

101
00:07:20,010 --> 00:07:24,040
conv_forward adlı fonksiyonu kullanacak veya uygulayacaksınız

102
00:07:24,040 --> 00:07:28,481
Eğer bunu tensorflowda yaparsanız,

103
00:07:28,481 --> 00:07:34,528
tf.nn.conv2d adlı bir fonksiyon mevcuttur

104
00:07:34,528 --> 00:07:37,000
ve diğer derin öğrenme programlama yapılarında(framework),

105
00:07:37,000 --> 00:07:41,538
Keras programlama yapısında, bu kursta daha sonra göreceğiniz üzere,

106
00:07:41,538 --> 00:07:46,090
evrişimi uygulayan Conv2d adlı fonksiyon mevcuttur, vs..

107
00:07:46,090 --> 00:07:49,559
Evrişime iyi bir şekilde destek veren bütün derin öğrenme yapılarında

108
00:07:49,559 --> 00:07:54,218
bu evrişim işlemini uygulamak için bir fonksiyon olacaktır.

109
00:07:56,813 --> 00:07:59,756
Peki, bu neden dikey kenar belirlenmesini sağlıyor?

110
00:07:59,756 --> 00:08:01,700
Bir diğer örneğe birlikte bakalım.

111
00:08:03,470 --> 00:08:06,188
Bunu örneklemek için, basitleştirilmiş bir görüntü kullanacağız,

112
00:08:06,188 --> 00:08:08,819
burada sol yarısı 10 olan sağ yarısı 0 olan

113
00:08:08,819 --> 00:08:14,480
basit bir 6 x 6 görüntümüz mevcut,

114
00:08:14,480 --> 00:08:18,734
Eğer bunu bir resim olarak almışşanız, bu şuna benzeyebilir, soldaki 10 lardan

115
00:08:18,734 --> 00:08:21,775
oluşan alan size daha aydınlık piksel yoğunluk değerleri

116
00:08:21,775 --> 00:08:25,060
ve sağ yarı size daha koyu piksel yoğunluk değerleri verecektir.

117
00:08:25,060 --> 00:08:27,890
Belki de siyah olarak çizilebilecekken gri olarak çizilmiş

118
00:08:27,890 --> 00:08:32,110
bu tonu 0'ı belirtmesi için kullanacağım.

119
00:08:32,110 --> 00:08:37,654
Bu görüntüde, bariz bir şekilde ortadan geçen beyazdan daha koyu

120
00:08:37,654 --> 00:08:42,590
bir renge geçerken görebileceğiniz güçlü bir dikey çizgi mevcuttur.

121
00:08:44,070 --> 00:08:48,808
Dolayısıyla, bunu 3 x3 filtre ile evriştirdiğiniz zaman,

122
00:08:48,808 --> 00:08:53,048
-ki bu 3 x 3 filtre şu şekilde görselleştirilebilir.

123
00:08:53,048 --> 00:08:57,575
Hafif, parlak pikseller solda,

124
00:08:57,575 --> 00:09:02,080
ve daha sonra orta tonlarda 0'lar ortada, ve daha koyu tonlar solda.

125
00:09:02,080 --> 00:09:05,290
Elinize geçen ise bu sağdaki matrikstir.

126
00:09:06,640 --> 00:09:10,130
Dolayısıyla, bu matematiği doğrulamak için,

127
00:09:10,130 --> 00:09:15,815
Bu 0, örneğin, elemanlarla çarpımları alarak

128
00:09:15,815 --> 00:09:18,880
ve 3 x 3 blokla çarparak elde edilmiştir

129
00:09:18,880 --> 00:09:23,008
ve dolayısıyla, sol sütündan 10 + 10 + 10

130
00:09:23,008 --> 00:09:26,987
ve ortadan 0'lar ve daha sonra -10 -10 -10 gelir

131
00:09:26,987 --> 00:09:30,670
ki bu da burada görülen 0 ile sonuçlanmasının sebebidir.

132
00:09:30,670 --> 00:09:35,490
Aynı zamanda, bunun tersine, bu 30 buradan elde edilebilir

133
00:09:36,860 --> 00:09:41,062
-ki burada bunu 10 + 10 + 10 ,0 + 0 + 0 ,

134
00:09:41,062 --> 00:09:47,190
-0 + -0 + -0 sonucunda elde edebilirsiniz.

135
00:09:47,190 --> 00:09:51,490
Şimdi, eğer en sağdaki matriksi bir görüntü olarak çizerseniz, bunun gibi gözükecektir,

136
00:09:51,490 --> 00:09:55,240
yani ortada daha parlak bir bölge varmış gibi.

137
00:09:55,240 --> 00:09:59,820
ve bu 6 x 6'lık görüntünün aşağısındaki bu

138
00:09:59,820 --> 00:10:03,630
dikey çizgiyi tanılamaya tekabül eder

139
00:10:03,630 --> 00:10:06,920
ve eğer buradaki boyutlar bir miktar yanlış gözüküyorsa,

140
00:10:06,920 --> 00:10:09,450
veya belirlenmiş kenarlar kalın gözüküyorsa,

141
00:10:09,450 --> 00:10:13,840
bunun sebebi bizim burada çok küçük görüntülerle çalışıyor olduğumuzdandır

142
00:10:13,840 --> 00:10:17,100
ve eğer, diyelim ki, 6 x 6 görüntü yerine

143
00:10:17,100 --> 00:10:22,190
1000 x 1000 görüntü kullanıyorsanız, bu durumda bunun görüntünüzdeki

144
00:10:22,190 --> 00:10:27,390
dikey kenarları bulmakta epey iyi iş çıkardığını görebilirsiniz

145
00:10:27,390 --> 00:10:28,510
ve bu örnekte,

146
00:10:28,510 --> 00:10:34,225
burada ortadaki parlak görüntü, çıktı görüntünüzün 'görünen o ki görüntünün

147
00:10:34,225 --> 00:10:39,355
ortasında güçlü dikey bir kenar geçiyor' demesinin bir yoludur.

148
00:10:39,355 --> 00:10:44,280
ve belki de dikey kenar tanımlamadan alınacak bir sezgi ise

149
00:10:44,280 --> 00:10:49,315
bir dikey kenar 3 x 3 filtre kullandığımızdan parlak piksellerin

150
00:10:49,315 --> 00:10:52,706
solda olduğu 3 x 3'lük bir bölgedir

151
00:10:52,706 --> 00:10:55,104
ve ortada ne olduğunu o kadar önemsemiyorsunuz

152
00:10:55,104 --> 00:10:58,171
ve yine sağdaki parlak pikseller solda olmuş olur

153
00:10:58,171 --> 00:11:03,011
ve 6 x 6'lık görüntünün ortası aslında solda parlak piksellerin

154
00:11:03,011 --> 00:11:07,850
sağda karanlık piksellerin olabileceği yerdir.

155
00:11:07,850 --> 00:11:12,120
ve bu yüzden dikey kenar buradadır

156
00:11:12,120 --> 00:11:16,480
ve evrişim işlemi dikey kenar nasıl bulabileceğinize

157
00:11:16,480 --> 00:11:20,200
yönelik olarak güvenilir bir yol sunar

158
00:11:20,200 --> 00:11:23,720
Dolayısıyla, şu ana kadar evrişim işleminin nasıl çalıştığını gördünüz

159
00:11:23,720 --> 00:11:26,430
Bir sonraki videoda, bunu nasıl alacağınızı ve

160
00:11:26,430 --> 00:11:30,032
evrişimli sinir ağının temel yapı taşı olarak nasıl kullanacağınızı göreceksiniz.
1
00:00:01,410 --> 00:00:05,830
ディープラーニング ネットワークを構築するために行う必要のある

2
00:00:05,830 --> 00:00:10,675
基本の畳み込み処理に対する 1つの修正が パディングだ

3
00:00:10,675 --> 00:00:12,232
それが どのように機能するか 見よう

4
00:00:12,232 --> 00:00:15,190
前のビデオで見たものは

5
00:00:15,190 --> 00:00:19,385
もし 6 x 6 画像を 3 x 3 フィルターで畳み込むと

6
00:00:19,385 --> 00:00:23,585
4 x 4 出力 4 x 4 行列を得るというものだった

7
00:00:23,585 --> 00:00:28,080
なぜなら 3 x 3 フィルターで取り得る位置の数は

8
00:00:28,080 --> 00:00:29,470
単に

9
00:00:29,470 --> 00:00:31,780
4 x 4 の位置だけだ

10
00:00:31,780 --> 00:00:37,035
3 x 3 フィルターを 6 x 6 行列に合わせれば

11
00:00:37,035 --> 00:00:41,346
そして この数式は 次のようだ

12
00:00:41,346 --> 00:00:45,725
n x n 画像を f x f フィルターに掛けるなら

13
00:00:45,725 --> 00:00:48,850
出力次元は

14
00:00:48,850 --> 00:00:58,237
n - f + 1   x   n - f + 1 となる

15
00:00:58,237 --> 00:00:59,665
そして この例では

16
00:00:59,665 --> 00:01:03,455
6 - 3 + 1 = 4

17
00:01:03,455 --> 00:01:07,489
だから 4 x 4 の出力になったわけだ

18
00:01:07,489 --> 00:01:10,400
これには ２つの欠点がある
1つは

19
00:01:10,400 --> 00:01:14,790
畳み込み処理を適用する度に 画像が縮んでいく

20
00:01:14,790 --> 00:01:17,595
例えば 6 x 6 から 4 x 4 に落ちる

21
00:01:17,595 --> 00:01:21,716
画像が本当に小さくなるまでに 数回しかこれを行えない

22
00:01:21,716 --> 00:01:23,870
もしくは 画像は 1 x 1 やそのあたりまで縮むかもしれない

23
00:01:23,870 --> 00:01:26,720
多分 あなたは 画像を縮ませたくないだろう

24
00:01:26,720 --> 00:01:29,902
エッジ検出したり 他の特徴量を得る度にはね

25
00:01:29,902 --> 00:01:31,605
そう これが1つの欠点だ

26
00:01:31,605 --> 00:01:33,590
そして ２番目の欠点がこれだ

27
00:01:33,590 --> 00:01:36,665
角 もしくは 端にあるピクセルに着目すると

28
00:01:36,665 --> 00:01:40,755
この小さなピクセルは出力に一度しか使われない

29
00:01:40,755 --> 00:01:43,490
なぜなら これは この3 x 3 領域に接しているから

30
00:01:43,490 --> 00:01:48,905
一方 中にあるピクセル このピクセルは

31
00:01:48,905 --> 00:01:55,380
多くの 3 x 3 領域がオーバーラップしている

32
00:01:55,380 --> 00:02:01,455
このように 角や端のピクセルは 出力に少ししか使われない

33
00:02:01,455 --> 00:02:06,390
つまり 画像の端に近い情報の多くを捨てていることになる

34
00:02:06,390 --> 00:02:08,735
そこで これら両方の問題を解決するのに

35
00:02:08,735 --> 00:02:12,829
出力の縮小と

36
00:02:12,829 --> 00:02:15,485
もし 本当に深いニューラルネットワークを組んだなら

37
00:02:15,485 --> 00:02:19,685
ステップの度に 画像を縮ませたくない理由が分かるだろう
なぜなら

38
00:02:19,685 --> 00:02:22,038
もし 100層のディープネットを持ったとすると

39
00:02:22,038 --> 00:02:23,710
層毎に 画像は縮み

40
00:02:23,710 --> 00:02:27,993
100層後には 非常に小さな画像になってしまう

41
00:02:27,993 --> 00:02:29,085
これが 1つの問題

42
00:02:29,085 --> 00:02:38,120
もう一つが 画像の端にある多くの情報を捨ててしまうこと

43
00:02:38,120 --> 00:02:40,740
それでは この２つの問題を解決するため

44
00:02:40,740 --> 00:02:44,774
畳み込み処理の前にできることがある

45
00:02:44,774 --> 00:02:46,959
画像をパディングすることができる

46
00:02:46,959 --> 00:02:56,185
このケースでは 画像に追加の縁を充てる

47
00:02:56,185 --> 00:03:00,670
この追加の縁は 端の周りに１ピクセルだ

48
00:03:00,670 --> 00:03:02,635
こうすることで

49
00:03:02,635 --> 00:03:05,517
6 x 6 画像の代わりに

50
00:03:05,517 --> 00:03:09,500
膨らませて 8 x 8 画像にした　そして

51
00:03:09,500 --> 00:03:14,007
8 x 8 画像を 3 x 3 画像で畳み込んで これを得る

52
00:03:14,007 --> 00:03:16,960
今度は 4 x 4 ではなく 6 x 6 画像だ

53
00:03:16,960 --> 00:03:23,667
このようにして 最初の入力サイズ 6 x 6 を保つことができた

54
00:03:23,667 --> 00:03:25,350
パディングでは 慣例で

55
00:03:25,350 --> 00:03:33,296
０値を充てる また p がパディング量だとすると　

56
00:03:33,296 --> 00:03:34,575
この場合は

57
00:03:34,575 --> 00:03:36,615
p = 1 だ

58
00:03:36,615 --> 00:03:41,180
追加の１ピクセルの縁を外周全てにパディングするので

59
00:03:41,180 --> 00:03:47,940
出力はこうなる

60
00:03:47,940 --> 00:03:54,360
n + 2p - f + 1   x   n + 2p - f + 1

61
00:03:54,360 --> 00:04:02,480
よって これは 6 + 2 x 1 - 3 + 1  x  同じもので

62
00:04:02,480 --> 00:04:06,475
6 + 2 - 3 + 1 = 6 だ

63
00:04:06,475 --> 00:04:12,880
これで 最初の画像のサイズを保った 6 x 6 となる

64
00:04:12,880 --> 00:04:16,030
そして このピクセルは 確かに これらの出力セル全てに

65
00:04:16,030 --> 00:04:23,330
影響する

66
00:04:23,330 --> 00:04:26,700
これは有効で 画像の角や端からの情報を捨てずに

67
00:04:26,700 --> 00:04:32,715
それまで失っていたものが減る

68
00:04:32,715 --> 00:04:34,255
そして ここに示したが

69
00:04:34,255 --> 00:04:38,240
パディングした縁の太さは ちょうど１ピクセルだ

70
00:04:38,240 --> 00:04:42,535
もし望むのなら ２ピクセルの縁でパディングできる

71
00:04:42,535 --> 00:04:44,820
その場合 もう一つの縁をここに加える

72
00:04:44,820 --> 00:04:50,125
そして やろうと思えば もっと多くのピクセルでパディングできる

73
00:04:50,125 --> 00:04:52,812
ここに描いたように

74
00:04:52,812 --> 00:04:55,438
パディングは２で p = 2

75
00:04:55,438 --> 00:05:00,665
どのくらいパディングするかという点では

76
00:05:00,665 --> 00:05:04,129
２つの一般的な選択肢がある

77
00:05:04,129 --> 00:05:07,380
Valid畳み込み と Same畳み込みだ

78
00:05:07,380 --> 00:05:10,960
すごい名前ではないが Valid畳み込みとは

79
00:05:10,960 --> 00:05:15,170
基本的には パディング無しを意味する

80
00:05:15,170 --> 00:05:22,600
この場合は n x n 画像を f x f フィルターで畳み込むので

81
00:05:22,600 --> 00:05:25,345
これは

82
00:05:25,345 --> 00:05:30,298
n - f + 1  x  n - f + 1 次元の出力を得る

83
00:05:30,298 --> 00:05:35,060
これは 前のビデオで見た例と同様で

84
00:05:35,060 --> 00:05:37,250
n x n 画像が
(訳注: n x n ではなく 6 x 6 と言いたかったと思われる)

85
00:05:37,250 --> 00:05:43,095
3 x 3 フィルターで畳み込まれ 4 x 4 出力を得た

86
00:05:43,095 --> 00:05:48,545
もう一つの一般的なパディングは

87
00:05:48,545 --> 00:05:52,660
Save畳み込みと呼ばれ それは

88
00:05:52,660 --> 00:05:58,580
出力サイズが 入力サイズと同じになることを意味する

89
00:05:58,580 --> 00:06:01,795
この式をよく見れば分かるように

90
00:06:01,795 --> 00:06:04,635
p ピクセルでパディングすると

91
00:06:04,635 --> 00:06:11,676
n は n + 2p と 残りは ええっと

92
00:06:11,676 --> 00:06:15,740
-f + 1

93
00:06:15,740 --> 00:06:22,125
よって n x n 画像の外周に p ピクセルの縁をパディングすると

94
00:06:22,125 --> 00:06:28,900
出力サイズの次元は n + 2p - f + 1

95
00:06:28,900 --> 00:06:36,080
よって n + 2p - f + 1 を n と同じにすれば

96
00:06:36,080 --> 00:06:38,795
出力サイズが入力サイズと同じになる

97
00:06:38,795 --> 00:06:42,905
これを解けば

98
00:06:42,905 --> 00:06:46,664
n は両側で打ち消し合う
そして p について解けば

99
00:06:46,664 --> 00:06:53,463
それは p = f - 1 割る 2 となる

100
00:06:53,463 --> 00:06:56,181
よって f が奇数なら

101
00:06:56,181 --> 00:06:58,990
パディングサイズを次のように決めることで

102
00:06:58,990 --> 00:07:01,960
出力サイズを入力サイズと

103
00:07:01,960 --> 00:07:06,265
同じにできる
だから 例えば

104
00:07:06,265 --> 00:07:10,795
前のスライドのように フィルターが 3 x 3 だった場合

105
00:07:10,795 --> 00:07:15,990
出力サイズを入力サイズと同じにするパディングは

106
00:07:15,990 --> 00:07:21,790
(3 - 1) / 2 で これは１だ

107
00:07:21,790 --> 00:07:23,415
もう一つ別の例を

108
00:07:23,415 --> 00:07:28,250
もし フィルターが 5 x 5 だったなら

109
00:07:28,250 --> 00:07:30,395
つまり f = 5 なら

110
00:07:30,395 --> 00:07:35,590
この等式に当てはめて ２のパディングが

111
00:07:35,590 --> 00:07:43,154
出力サイズを入力サイズと同じにするために必要だと分かる
フィルターが 5 x 5 の場合は

112
00:07:43,154 --> 00:07:46,440
コンピュータ ビジョンの慣例では

113
00:07:46,440 --> 00:07:50,435
f は通常奇数である

114
00:07:50,435 --> 00:07:59,070
それは実際 殆ど常に奇数であり 偶数のフィルターは 滅多に見ないだろう

115
00:07:59,070 --> 00:08:02,631
コンピュータ ビジョンで使われるフィルターでは

116
00:08:02,631 --> 00:08:05,280
それには２つの理由が考えられる

117
00:08:05,280 --> 00:08:07,320
1つは もし f が偶数だと

118
00:08:07,320 --> 00:08:10,155
非対称のパディングが必要となる

119
00:08:10,155 --> 00:08:15,380
それで f が奇数でありさえすれば この種のSame畳み込みは 自然なパディングサイズを導き

120
00:08:15,380 --> 00:08:17,180
それは 外周に同じ次元数を持ち 

121
00:08:17,180 --> 00:08:20,290
左を多めに 右を少なめにパディングする等

122
00:08:20,290 --> 00:08:22,104
そんな非対称にならない

123
00:08:22,104 --> 00:08:27,440
そして 2番目の理由は もし 奇数次元のフィルターを持てば

124
00:08:27,440 --> 00:08:29,770
3 x 3 や 5 x 5 なら

125
00:08:29,770 --> 00:08:32,860
それは 中央の位置を持ち

126
00:08:32,860 --> 00:08:36,095
時々 コンピュータ ビジョンでは 識別子を持ちたい場合があり

127
00:08:36,095 --> 00:08:37,450
ピクセルを持つのがいい

128
00:08:37,450 --> 00:08:43,527
中央のピクセルをフィルターの位置を示すのに使うことができる

129
00:08:43,527 --> 00:08:48,080
もちろん これらのどれも f が常に奇数であることの大した理由にはならないかもしれない

130
00:08:48,080 --> 00:08:50,310
しかし コンピュータ ビジョン界では

131
00:08:50,310 --> 00:08:53,482
3 x 3 フィルターはとても一般的だ

132
00:08:53,482 --> 00:08:56,155
それに 5 x 5, 7 x 7

133
00:08:56,155 --> 00:08:58,985
そして 実は時々 我々も後で話すけど

134
00:08:58,985 --> 00:09:02,095
1 x 1 フィルターも意味がある

135
00:09:02,095 --> 00:09:04,130
しかし 単に慣例で

136
00:09:04,130 --> 00:09:08,335
単に奇数フィルターを使うことを薦める

137
00:09:08,335 --> 00:09:10,385
多分

138
00:09:10,385 --> 00:09:14,180
f に偶数を使いたいとしても いい性能を出すだろうけど

139
00:09:14,180 --> 00:09:18,538
もし 通常のコンピュータ ビジョンに倣うなら

140
00:09:18,538 --> 00:09:25,865
私は単に奇数の f を使う
さぁ パディングした畳み込みがどのようなものが見てきた

141
00:09:25,865 --> 00:09:28,890
畳み込み処理のパディングを指定するのに

142
00:09:28,890 --> 00:09:31,200
p の値を指定することができる

143
00:09:31,200 --> 00:09:34,835
もしくは 単に Valid畳み込みと言うこともできる

144
00:09:34,835 --> 00:09:38,595
それは p = 0 を意味する
また Same畳み込みということもできる

145
00:09:38,595 --> 00:09:40,850
それは 出力が入力と同じ次元になるように

146
00:09:40,850 --> 00:09:43,780
必要なだけパディングすることを意味する

147
00:09:43,780 --> 00:09:45,181
パディングについては以上だ

148
00:09:45,181 --> 00:09:49,220
次のビデオでは ストライドを変えた畳み込みを実装する方法について話しましょう
1
00:00:01,000 --> 00:00:05,510
2D 이미지에 대해 어떻게 컨볼루션이 작동하는지 보셨습니다.

2
00:00:05,510 --> 00:00:08,505
이제 2D 이미지뿐만 아니라

3
00:00:08,505 --> 00:00:10,190
3 차원 이상의 볼륨에서

4
00:00:10,190 --> 00:00:13,265
컨볼루션을 구현하는 방법을 살펴 보겠습니다.

5
00:00:13,265 --> 00:00:15,610
예시를 들어 시작해보죠.

6
00:00:15,610 --> 00:00:17,930
특징들을 감지하고자 한다고 가정 해 봅시다.

7
00:00:17,930 --> 00:00:20,920
큰 이미지에서뿐만 아니라

8
00:00:20,920 --> 00:00:22,550
RGB 이미지에서도 말입니다.

9
00:00:22,550 --> 00:00:27,035
따라서 RGB 이미지는 6x6 이미지가 아닌

10
00:00:27,035 --> 00:00:29,330
6x6x3 이미지가 될 수 있습니다.

11
00:00:29,330 --> 00:00:32,980
여기서 3 이 3 가지 색상 채널에 대응되는 것이죠.

12
00:00:32,980 --> 00:00:37,575
이제, 이것을 6x6 개의 이미지 3개를 쌓을 것으로 으로 생각하십시오.

13
00:00:37,575 --> 00:00:41,925
이 이미지에서 가장자리 또는 다른 기능을 감지하기 위해

14
00:00:41,925 --> 00:00:43,490
이걸 컨볼브 합니다.

15
00:00:43,490 --> 00:00:47,320
예전처럼

16
00:00:47,320 --> 00:00:49,120
3×3 필터로 하는 게 아니라

17
00:00:49,120 --> 00:00:51,907
이젠 3x3x3의

18
00:00:51,907 --> 00:00:54,865
3D필터로 처리 합니다.

19
00:00:54,865 --> 00:01:01,960
따라서 필터 자체에는 빨강, 녹색 및 파랑 채널에 세 개의 레이어가 있습니다.

20
00:01:01,960 --> 00:01:04,897
세 개의 레이어가 있습니다.

21
00:01:04,897 --> 00:01:07,180
그래서 이들에게 몇 가지 이름을 붙이면

22
00:01:07,180 --> 00:01:08,980
이 처음 6

23
00:01:08,980 --> 00:01:12,290
이건 이미지의 높이입니다.

24
00:01:12,290 --> 00:01:19,360
이건 넓이, 그리고 이 3은 채널의 개수입니다.

25
00:01:19,360 --> 00:01:24,075
그리고 필터도 비슷하게 높이,

26
00:01:24,075 --> 00:01:27,995
넓이, 그리고 채널의 개수를 나타냅니다.

27
00:01:27,995 --> 00:01:31,170
여러분이 가진 이미지에서 채널의 개수는

28
00:01:31,170 --> 00:01:35,143
필터의 채널 수와 일치해야 하므로

29
00:01:35,143 --> 00:01:38,480
이 두 숫자가 동일해야 합니다.

30
00:01:38,480 --> 00:01:42,365
다음 슬라이드에서 이 컨볼루션 연산이 실제로 어떻게 작동하는지 알 수 있습니다

31
00:01:42,365 --> 00:01:46,740
하지만 이 아웃풋은 4x4 이미지입니다.

32
00:01:46,740 --> 00:01:49,600
이건 4x4x1이고

33
00:01:49,600 --> 00:01:53,160
더 이상 끝이 3이 아니라는걸 주목해 주십시오.

34
00:01:53,160 --> 00:02:01,313
이것이 어떻게 작동하는지 자세히 살펴 보도록 하겠습니다. 그러나 더 멋지게 그려진 이미지를 사용합시다.

35
00:02:01,313 --> 00:02:05,365
여기 6×6x3이미지가 있습니다.

36
00:02:05,365 --> 00:02:10,030
여기에는 3x3x3 크기의 필터가 있으며,

37
00:02:10,030 --> 00:02:11,830
이 마지막 숫자,

38
00:02:11,830 --> 00:02:17,395
즉, 채널의 수는 3D 이미지와 필터 모두 일치하고 있습니다.

39
00:02:17,395 --> 00:02:22,195
3x3x3 필터의 그림을 단순화하기 위해서,

40
00:02:22,195 --> 00:02:26,674
행렬을 쌓아올 리는 대신에

41
00:02:26,674 --> 00:02:32,325
저는 3차원의 큐브모양으로 그리기도 합니다.

42
00:02:32,325 --> 00:02:37,775
따라서 이 이 컨벌루션 연산의 아웃풋을 계산하려면

43
00:02:37,775 --> 00:02:42,440
3x3x3 필터를 먼저 취하여

44
00:02:42,440 --> 00:02:45,440
가장 왼쪽 상단에 배치하십시오.

45
00:02:45,440 --> 00:02:51,026
따라서 이 3x3x3 필터에는 27개의 숫자, 혹은

46
00:02:51,026 --> 00:02:53,988
27개의 파라미터가 있으며, 이는 곧 3개의 큐브와 마찬가지겠죠.

47
00:02:53,988 --> 00:02:56,180
이제 하셔야 할 일은 27 개의 숫자를

48
00:02:56,180 --> 00:03:05,695
각각을 가져 와서 이미지의 빨강, 초록, 파랑에 해당하는 숫자들과

49
00:03:05,695 --> 00:03:07,425
곱하는 것입니다.

50
00:03:07,425 --> 00:03:09,620
그래서 빨간 채널에서 처음 9 개의 숫자를 취한 다음

51
00:03:09,620 --> 00:03:12,080
세 개의 숫자를 그 아래 녹색 채널에 넣고

52
00:03:12,080 --> 00:03:13,970
3개를 그 아래 파란색 채널에 넣으십시오.

53
00:03:13,970 --> 00:03:17,880
그리고 왼쪽에 있는 이 노란색 큐브 쇼에서

54
00:03:17,880 --> 00:03:22,310
해당하는 27개의 숫자를 곱하십시오.

55
00:03:22,310 --> 00:03:28,615
그리고 나서 이 모든 숫자를 더하면 아웃풋에 있는 첫 번째 숫자를 구할 수 있습니다.

56
00:03:28,615 --> 00:03:34,700
그 다음 아웃풋을 계산하기 위해서, 이 큐브를 한 칸 밀어주세요.

57
00:03:34,700 --> 00:03:37,190
그리고 다시 27개의 곱셈을 하고

58
00:03:37,190 --> 00:03:40,375
27개의 숫자를 더하면

59
00:03:40,375 --> 00:03:42,545
다음 아웃풋을 구할 수 있습니다.

60
00:03:42,545 --> 00:03:44,465
다음 숫자를 위해, 옆 칸으로 밀어서,

61
00:03:44,465 --> 00:03:45,647
다음 칸 숫자를 구하면

62
00:03:45,647 --> 00:03:49,520
세 번째 아웃풋을 구할 수 있습니다.

63
00:03:49,520 --> 00:03:54,080
이렇게 해서 네 번째 숫자를, 그리고 나면 한 행 아래로 가서 다음 숫자를,

64
00:03:54,080 --> 00:03:55,930
또 다음으로, 또 다음으로

65
00:03:55,930 --> 00:03:58,760
이렇게 숫자들을 계산해가며

66
00:03:58,760 --> 00:04:02,080
끝까지 진행하면

67
00:04:02,080 --> 00:04:09,090
이 위치에서 마지막 아웃풋을 찾을 수 있을 겁니다.

68
00:04:09,090 --> 00:04:10,741
그래서, 이렇게 하면 여러 분이 할 수 있게 되는 건 무엇일 까요?

69
00:04:10,741 --> 00:04:12,775
예시를 하나 들어보죠.

70
00:04:12,775 --> 00:04:15,170
이건 3x3x3 필터죠.

71
00:04:15,170 --> 00:04:20,455
이미지의 빨간 채널에서 모서리를 감지하고 싶다면,

72
00:04:20,455 --> 00:04:24,990
첫 번째 필터에 1, 1, 1,

73
00:04:24,990 --> 00:04:27,840
-1, -1, -1 이렇게 하던 대로 하시면 됩니다.

74
00:04:27,840 --> 00:04:31,385
그리고 녹색 채널은 모두 0 이 되어야 하고,

75
00:04:31,385 --> 00:04:35,120
파란색 채널도 모두 0으로 채웁니다.

76
00:04:35,120 --> 00:04:42,410
3x3x3크기의 필터를 만들기 위해서 이 세 가지를 함께 묶여두면,

77
00:04:42,410 --> 00:04:46,040
이는 빨간색 채널에서만

78
00:04:46,040 --> 00:04:49,720
수직 가장자리를 감지하는 필터가 될 것입니다.

79
00:04:49,720 --> 00:04:54,950
또는 수직 모서리의 색상을 신경 쓰지 않으면

80
00:04:54,950 --> 00:04:58,871
이와 비슷한 필터를 사용할 수 있습니다.

81
00:04:58,871 --> 00:05:01,520
반면에 1, 1, 1

82
00:05:01,520 --> 00:05:02,800
-1, -1, -1

83
00:05:02,800 --> 00:05:04,714
세 가지 채널 모두 다 이렇게 될 수 있습니다,

84
00:05:04,714 --> 00:05:08,791
따라서 이 두 번째 대안을 설정하여, 파라미터를 설정하십시오.

85
00:05:08,791 --> 00:05:10,980
그럼 edge detector를 생성할 수 있게 되고,

86
00:05:10,980 --> 00:05:12,710
이 3x3x3 edge detector는

87
00:05:12,710 --> 00:05:15,935
어느 색상의 모서리도 감지할 수 있게 됩니다.

88
00:05:15,935 --> 00:05:19,460
그리고 이러한 파라미터를 다르게 선택함으로써,

89
00:05:19,460 --> 00:05:24,280
3x3x3 필터로부터 또 다른 feature detector를 얻을 수 있게 됩니다.

90
00:05:24,280 --> 00:05:26,320
관례에 따라, computer vision에서는,

91
00:05:26,320 --> 00:05:31,790
특정한 높이, 넓이, 그리고 채널의 수를 가지고

92
00:05:31,790 --> 00:05:33,440
인풋을 하면,

93
00:05:33,440 --> 00:05:36,200
여러분의 필터는 그 높이와 폭은 다르지만

94
00:05:36,200 --> 00:05:39,542
채널 수가 같게 될 것입니다.

95
00:05:39,542 --> 00:05:44,780
이론적으로 빨강 채널 만 보거나

96
00:05:44,780 --> 00:05:50,776
아니면 녹색 채널만, 파란색 채널 만 보이는 필터를 사용할 수도 있습니다.

97
00:05:50,776 --> 00:05:54,565
부피를 컨볼브 시켜서

98
00:05:54,565 --> 00:06:00,793
6x6x6 를 3x3x3으로 합성하면

99
00:06:00,793 --> 00:06:07,434
4x4, 즉 2D의 아웃풋을 산출하게 된다는 점을 기억해주세요.

100
00:06:07,434 --> 00:06:10,629
여러분은 이제 부피를 합성하는 방법을 알고 있습니다.

101
00:06:10,629 --> 00:06:17,125
컨볼루션 신경망을 구축하는데 있어 결정적인 부분을 마지막으로 이야기해봅시다

102
00:06:17,125 --> 00:06:20,550
우리가 수직 모서리를 감지하고 싶지 않다면 어떻게 될까요?

103
00:06:20,550 --> 00:06:23,550
수직 모서리와 수평 모서리,

104
00:06:23,550 --> 00:06:27,080
혹시 45도 모서리와 아님 70도 모서리를 검출하기를 원하는데,

105
00:06:27,080 --> 00:06:32,189
동시에 여러 필터를 사용하고 싶다면 어떻게 해야 할까요?

106
00:06:32,189 --> 00:06:35,640
자, 이전 슬라이드에서 가져온 사진입니다.

107
00:06:35,640 --> 00:06:38,380
3x3x3으로 합성된 6x6x3 이미지가

108
00:06:38,380 --> 00:06:39,717
4x4로 되었습니다.

109
00:06:39,717 --> 00:06:42,420
아마도 이것은 수직 모서리 감지기 일 수도 있고,

110
00:06:42,420 --> 00:06:46,023
아니면 다른 feature를 감지 할 수도 있습니다.

111
00:06:46,023 --> 00:06:52,950
이제, 두 번째 필터가 이 오렌지 빛 색상으로 표시 될 수 있습니다.

112
00:06:52,950 --> 00:07:00,563
이건 수평 edge detector라고 생각해보죠.

113
00:07:00,563 --> 00:07:05,657
따라서 첫 번째 필터로 컨볼루션하면 이 첫 번째 4x4 아웃풋이 나오고,

114
00:07:05,657 --> 00:07:13,565
두 번째 필터와 컨볼루션하면 4x4 아웃풋이 달라집니다.

115
00:07:13,565 --> 00:07:16,800
그리고 나서 우리가 할 수 있는 것은 이 두 개의 4x4 아웃풋을 산출해서,

116
00:07:16,800 --> 00:07:20,770
앞에다가 이 첫 번째 것을 놓고

117
00:07:20,770 --> 00:07:25,069
이 두 번째 필터를 취해서, 여기 그려보겠습니다.

118
00:07:25,069 --> 00:07:27,870
이렇게 뒤에다 두십시오.

119
00:07:27,870 --> 00:07:29,465
이 두 개를 쌓아두는 겁니다.

120
00:07:29,465 --> 00:07:35,970
그럼 4x4x2 의 아웃풋 볼륨이 만들어지게 됩니다. 그렇죠?

121
00:07:35,970 --> 00:07:39,900
그리고 우리는 이걸 하나의 상자인 것처럼 볼륨을 생각할 수 있습니다.

122
00:07:39,900 --> 00:07:41,710
아마도 이런 모양 일 것입니다.

123
00:07:41,710 --> 00:07:45,620
따라서 이것은 4x4x2 아웃풋 볼륨이 됩니다.

124
00:07:45,620 --> 00:07:49,740
6x6x3 의 이미지를 가져와서

125
00:07:49,740 --> 00:07:54,885
컨볼루션 하고 두 개의 서로 다른 3x3x3 필터를 적용하면

126
00:07:54,885 --> 00:07:57,870
두 개의 4x4 아웃풋이 생겨나게 되죠.

127
00:07:57,870 --> 00:08:02,093
그럼 이것들이 쌓아 올려지며 4x4x2 볼륨을 형성하게 됩니다.

128
00:08:02,093 --> 00:08:07,830
그리고 여기 두 가지는 두 개의 다른 필터를 사용했기 때문입니다.

129
00:08:07,830 --> 00:08:14,320
이 dimension을 요약해보도록 하죠.

130
00:08:14,320 --> 00:08:19,570
nxnxnc 즉 채널 개수, 이렇게 생긴 인풋 이미지를 가지고 있다고 가정해 봅시다.

131
00:08:19,570 --> 00:08:22,975
예를 들어, 6x6x3

132
00:08:22,975 --> 00:08:26,960
여기서 n 옆에 붙은 대문자 C는 채널의 수를 가리키는 겁니다.

133
00:08:26,960 --> 00:08:31,675
이제 fxf

134
00:08:31,675 --> 00:08:34,645
xnC 이렇게 컨볼루션하십시오

135
00:08:34,645 --> 00:08:38,360
이건 3x3x3 이렇게 됐었죠.

136
00:08:38,360 --> 00:08:45,180
관례대로, 이 마지막 숫자는 같은 숫자여만 하죠.

137
00:08:45,180 --> 00:08:52,150
이렇게 해서 도출되는 결과는 n-f+1

138
00:08:52,150 --> 00:08:59,970
x n-f+1 x nC' 이렇게 나옵니다.

139
00:08:59,970 --> 00:09:02,314
아니면 이 nC는 다음 레이어가 될 수도 있고,

140
00:09:02,314 --> 00:09:06,850
여러분이 사용하는 필터의 개수가 될 수도 있겠죠.

141
00:09:06,850 --> 00:09:11,895
이 예시에서 이는 곧 4x4x2 가 됩니다.

142
00:09:11,895 --> 00:09:16,335
스트라이드 1을 쓰고, 패딩을 하지 않는다는 가정에서 이렇게 썼는데요,

143
00:09:16,335 --> 00:09:19,270
n-f+1이 아닌 다른 패딩 스트라이드를 사용한다면,

144
00:09:19,270 --> 00:09:22,855
n-f+1은 일반적인 방법으로 영향을 받을 겁니다.

145
00:09:22,855 --> 00:09:26,245
이전 강의들에서 보셨던 대로 말이죠.

146
00:09:26,245 --> 00:09:29,280
자, 볼륨에 대한 컨벌루션은

147
00:09:29,280 --> 00:09:31,519
이렇게 정말 강력합니다.

148
00:09:31,519 --> 00:09:34,350
그 중 극히 일부만이 3 채널로

149
00:09:34,350 --> 00:09:38,080
RGB 이미지에서 직접 조작 할 수 있습니다.

150
00:09:38,080 --> 00:09:40,485
그러나 더 중요한 것은

151
00:09:40,485 --> 00:09:43,420
수직, 수평 모서리 같은 두 가지 feature들,

152
00:09:43,420 --> 00:09:46,534
또는 10, 또는 어쩌면 128

153
00:09:46,534 --> 00:09:49,365
또는 수백 가지의 서로 다른 feature를 감지 할 수 있다는 것입니다.

154
00:09:49,365 --> 00:09:51,390
아웃풋은 탐지중인 필터의 수와 동일한 수의

155
00:09:51,390 --> 00:09:58,405
채널을 가지게 될 것입니다.

156
00:09:58,405 --> 00:10:00,995
표기법에 대한 설명을 덧붙이자면,

157
00:10:00,995 --> 00:10:07,125
저는 문헌에 나오는 이 마지막 차원을 나타내기 위해 '채널의 수'라는 용어를 사용했습니다.

158
00:10:07,125 --> 00:10:14,620
이는 종종 3D볼륨의 깊이라고 불리기도 합니다,

159
00:10:14,620 --> 00:10:17,255
channel 과 depth, 이 둘 모두 문헌들에서는 흔하게 사용되는 표현입니다.

160
00:10:17,255 --> 00:10:19,375
하지만 depth 라는 표현은 더 혼란을 주기도 하는데요,

161
00:10:19,375 --> 00:10:22,855
신경망의 depth 라는 용어도 사용하기 때문입니다.

162
00:10:22,855 --> 00:10:26,885
그래서 저는 이 강의에서 필터의 세 번째 dimension의 사이즈를 가리킬 때

163
00:10:26,885 --> 00:10:31,966
channel이라는 용어를 사용하려고 합니다.

164
00:10:31,966 --> 00:10:36,545
볼륨을 컨볼루션에 어떻게 실행시킬 수 있을지 이제 배웠으니,

165
00:10:36,545 --> 00:10:41,595
컨볼루션 신경망 레이어를 구현할 준비가 이제 되신 겁니다.

166
00:10:41,595 --> 00:10:44,000
어떻게 하면 되는지 다음 강좌에서 같이 알아보도록 하겠습니다.
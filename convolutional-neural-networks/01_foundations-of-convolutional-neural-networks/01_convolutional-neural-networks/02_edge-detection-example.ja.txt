畳み込み処理は 畳み込みニューラルネットワークの 基本構成要素だ 興味を引く例として エッジ検出を挙げる このビデオでは どのように畳み込みが機能するのか見る 以前のビデオで 私は ニューラルネットワークの初めの方の層が
どのようにエッジ検出を行うかを話した そして すこし後の層では 物体の部分を検出する そして より後の層では 完全な物体を検出する この例における 人の顔のような このビデオでは 画像中にあるエッジをどのように検出するかを見る 例を見よう このような写真が与えられて コンピュータが 中にある物体が何かを識別するために 最初に行うであろうことは 画像中の垂直のエッジを検出することかもしれない 例えば この画像には 柵のある所にこのような垂直の線があり 同じように これらの歩行者の垂直の線がある そして こられが 垂直エッジ検出器の出力に検出される また 水平エッジも検出したいだろう 例えば この柵がある所に 大変強い水平線がある そして それらが検出され 大体ここにあるようになる それでは どのように このような画像中のエッジを検出するのか？ 例を見てみましょう。 ここに 6×6グレースケール画像がある これは グレースケール画像なので 6×6×1行列だ 6×6×3ではない なぜなら 別々のRGBチャンネルが無いから エッジを検出するために
例えばこの画像から垂直エッジを検出するために できることは 3×3行列を作ることだ 畳み込みニューラルネットワークの用語では これは フィルターと呼ばれる では 3×3フィルター もしくは 3×3行列を このように作る 1 1 1, 0 0 0, -1 -1 -1 時折 研究論文では これをフィルターではなく カーネルと呼ぶ しかし このビデオでは フィルターという用語を使うことにする やろうとしているのは この6×6画像を畳み込むことだ 畳み込み処理は このアスタリスクで示される 3×3フィルターで畳み込む 数学における記法に関して
少しだけ不運なことがある アスタリスクは 畳み込みの標準記号だ しかし Pythonでは これを掛け算や要素毎の積を表すのに使う よって このアスタリスクは二重の意味を持つ
これはオーバーロードされた記号だ このビデオでは アスタリスクが畳み込みを意味する場合
それが明確になるように努める この畳み込み処理の出力は 4×4行列になる それは 4×4画像と 解釈できるか もしくはそう見なすことができる この4×4出力の計算方法は 次のようである 最初の要素 4×4行列の左上の要素を計算するには やるべきことは この3×3フィルターを オリジナル入力画像の3×3領域上に 貼り合わせることだ ここに書いた 1 1 1, 0 0 0, -1 -1 -1 それから やるべきことは 要素毎の掛け算だ つまり 最初のは 3×1 そして 2番目は 1×1 下に行って 1×1 そして 足すことの2×1 これ そして 結果の9つの数を 全て足し合わせる 中央の列は  0 × 0 + 5 × 0 + 7 × 0 右端の列は 1 × -1, 8 × -1 + 2 × -1 そして これらの９つの数を足し合わせると -5 になる よって ここを -5 で埋める OK 任意の順序で９つの数を足し合わせることができる これは 最初の列に行った そして2番目の列 そして3番目 次に この2番目の要素が何になるか明らかにする この青い四角形を1ステップ右にシフトする
こんな風に ここの緑の印を消します そして 同じく 要素毎の掛け算と 足し算を行う そうして 0 x 1 + 5 x 1 + 7 x 1 + 1 x 0 + 8 x 0 + 2 x 0 + 2 x -1 + 9 x -1 + 5 x -1 そして これらの９つの数を足し合わせれば -4を得る
以降同様 これを右にシフトさせ 9つの掛け算を行い 足し合わせ 0を得る そして ここでは ８を得る 確認してみよう
2 + 9 + 5 は16 真中の列は０ 右端の列は (4 + 1 + 3) x -1 で -8 よって 左の列は16で -8して で ここは 8 となる 次に 次の行のこの要素を得るために 次にやるのは 青い四角形を 今度は下に1つ動かす そして この位置を得る そして 再び 要素毎の掛け算と足し算を繰り返す そうすれば ここは -10 を得る そして 右に1つシフトし -2 を得る そして 2, そして 3, 以降同じで 行列の残りの要素全てに行う 明らかだが この -16 は この右下の 3 x 3 領域から得た このように 6 x 6 行列を 3 x 3 行列で畳み込むと
4 x 4 行列を得る この画像とフィルターは 実際には 様々な次元の行列となる だが 左の行列は 画像の説明に都合が良い そして 中央の行列は フィルターの説明として都合良い そして 右のは 恐らく別の画像として解釈できる そして これが 垂直エッジ検出器となるのである どうしてかは 次のスライドで見よう ただし 続ける前に 1つ注意を それは 実際に あるプログラミング言語で これを実装する場合 多くのプログラミング言語は 畳み込みを表すのに、 アスタリスクとは異なった関数を持っているだろう 例えば 本コースのプログラミング演習では conv_forwad という関数を実装する もし これを tensorflowで行うなら tf.nn.conv2d という関数がある そして 他にもディープラーニング
プログラミング フレームワークがある このコースの後の方で見ることになる
Kerasプログラミング フレームワークでは Conv2Dという関数が 畳み込みを実装している
といった具合だ しかし 全てのディープラーニング フレームワークは
畳み込みを良くサポートしていて この畳み込み処理の実装には いくつかの関数が用意されている それでは なぜ これが垂直エッジ検出を行うことになるのか？ 開始点から theta を増加させるというのは、これも意図通りの動作のようです。 これを説明するのに 単純化した画像を使おう ここに 簡単な 6 x 6 画像がある 左半分は 10 で 右半分は 0 である これを写真として捉えるなら こう見える 左半分は 10で 明るい輝度を持っている そして 右半分は 暗い輝度である 0を表すのに グレーの影を使うことにする 黒で描くこともできるだろうけど この画像には 明らかに とても強い垂直のエッジが ちょうど中央にある それは 白から黒 もしくは 白からより暗い色への遷移だ それでは これを 3 x 3 フィルターで畳み込もう 3 x 3 フィルターは このように表記することができる 明るい 輝く ピクセルが 左にあり そして 中間色の 0 が中央に そして より暗いのが右にある 得られる行列は右のようになる 良ければ この計算を確認してみよう 例えば この 0 は 要素同士の掛け算で得られる つまり この 3 x 3 ブロックとの掛け算だ 左の列からは 10 + 10 + 10 そして 真ん中からは 0 そして -10 -10 -10 それで 最終的に ここは 0 になる 一方 対照的に ここからは 30 が得られる 10 + 10 + 10 と -0 -0 から 最終的に そこには30が入る そして もし この右の行列を 画像として描くなら このようになる このより明るい領域が真中に来る そして これは この 6 x 6 画像の中央にある 垂直エッジを検出したことに対応する この例の次元数は ちょっと良くなくて 検出したエッジがとても太い それは 単に この例では とても小さい画像を使ったからに過ぎない もし 1000 x 1000 画像を使っていたら 6 x 6 画像でなく その場合は これが 垂直エッジを検出するのに とても良い仕事をすることが分かるだろう そして この例では この中央の明るい領域で 出力画像は 強い垂直のエッジが 画像の中央にあると述べているのである そして 垂直エッジ検出から得られる1つの直観は 垂直エッジは 3 x 3 の大きさである
なぜなら 3 x 3 フィルターを使っているから そこには 左に明るいピクセルがあり 真中はどうてもよくて 暗いピクセルが右にある そして この 6 x 6 画像の中央では 明るいピクセルが左にあり 暗いピクセルが右にある だから これが 垂直エッジ検出器と考えられる そして 畳み込み処理が 画像中の垂直エッジを見つける 便利な方法を与えてくれる これで 畳み込み処理がどのように働くのか分かった 次のビデオでは どのようにこれを得 畳み込みニューラルネットワークの基本構成要素の1つとして使うのかを見てみよう
卷積運算是 一個卷積神經網路的基本建構基石之一 使用邊緣偵測來做為一個例子 這段影片，您將見到卷積運算如何運作 前面影片中 我提到有關於神經網路早期層中或許會偵測邊緣 然後後面層或許會偵測部分的物件 更後面的層會偵測部分完整的物件 在這個例子中像是人臉 在這段影片您會見到
您如何在影像中偵測邊緣 我們來舉個例子 像這張影像，對於電腦來找出哪些物件 在影像中，第一件事您或許要做的是
偵測影像中的垂直邊緣 舉個例子，這個影像有這些垂直線在欄杆上 還有類似垂直線的這些行人的形狀 所以這些是會被垂直邊緣偵測器
偵測到的輸出 您或許也想偵測水平邊緣 舉個例子，這些是很明顯的水平線在欄杆上 還有這些也被偵測到，大約這裡 您要如何在影像中偵測邊緣？ 讓我們來看一個例子 這裡是一張 6乘6 灰階影像 而因為是灰階影像，這個會是  6乘6乘1 矩陣 而不是 6乘6乘3 ，因為沒有分開的 ＲＧＢ通道 為了要偵測邊緣，假設是影像的垂直邊緣 您可以建立一個 3乘3 矩陣 在卷積神經網路的專有名詞中 這個稱為過濾器 我將建立一個 3乘3 過濾器 3乘3 矩陣像這樣，1 1 1, 0 0 0, -1 -1 -1 有時候研究論文會稱這個為核心，而不是過濾器 但我將使用過濾器這個專有名詞在這個影片中 您要做的是拿這個 6乘6 影像，然後卷積它 而這樣的卷積運算記號為星號 (*) 跟一個 3乘3 過濾器卷積 關於符號有一點不幸的是
在數學的記號中 星號是卷積運算的標準符號 但在 python 中這符號也用來作為乘法 或者說逐元素乘積 所以這個星號有雙重目的，它是一個重載符號 但我會試著在影片中，清楚表示星號是代表卷積 而這個卷積運算的結果會是 4乘4 矩陣 您可以解釋或想像它
成為一個 4乘4 影像 而您計算這個 4乘4 輸出的方式如下 計算第一個元素，這 4乘4 矩陣左上角的元素 您要做的是拿這個 3乘3 過濾器 貼在上面這個原來輸入影像
的這個 3乘3 區域 我寫在這裡 1 1 1 0 0 0, -1 -1 -1 您應該做的是拿這個逐元素的乘積 所以第一個是 3乘1 而第二個是 1乘1, 對照下面這個是 1乘1 然後加上 2乘1 這個 然後將 9 個數字加起來 所以中間這一列給您 0 x 0 + 5 x 0 + 7 x 0 而最右邊列是 1 x -1 + 8 x -1 + 2 x -1 而將這些 9 個數字加起來會給您 -5 所以我將 -5 填在這裡 當然您可以將這 9 個數字
任何順序加起來 我只是從第一欄開始 然後第二欄，跟第三欄 接下來，要計算這第二個元素 您將這個藍色正方形往右邊移一步，像這樣 讓我清掉這些綠色的記號 您將做同樣的逐元素乘積然後加總 所以您有 0 x 1 + 5 x 1 + 7 x 1 + 1 x 0 + 8 x 0 + 2 x 0 + 2 x -1 + 9 x -1 + 5 x -1 如果您將這 9 個數字加總，您會得到 -4, 等等 如果您在往右移一步，做這 9 個乘積跟加總，您會得到 0 然後移到這裡，您應該得到 8 驗證一下，您這裡有 2 + 9 + 5 會是 16 中間這一欄給您 0 最右邊這一欄，4 + 1 + 3 x -1 會是 -8 所以最左邊是 16 減去 8 會得到 8, 像是這裡這個數字 接下來，為了給您下一行這個元素 您要做的是拿這個藍色正方形，望下移一格 所以現在您在這個位置 再一次，重複逐元素乘積跟加總 如果您這樣做，您應該會得到 -10 然後往右移一步，您應該會得到 -2 然後是 2, 然後 3 等等 然後將其餘矩陣的元素填完 確認一下，這個 -16 是從 這右下角這個 3乘3 區域 所以這個 6乘6 矩陣跟一個 3乘3 矩陣卷積會給您 4乘4  矩陣 而這些影像跟過濾器 其實只不過是一些矩陣有不同的維度 但在最左邊這個矩陣方便上解釋為影像 而中間這個，我們解釋為過濾器 而在右邊這個，我們或許解釋成為另一個影像 而這個其實是一個垂直邊緣偵測器 下一張投影片您會知道為什麼 在繼續之前，這裡有一個註解 也就是當您用程式語言建立這個運算時，實際上 大部分的程式語言會用不同的函數 而不是用星號來作為卷積運算 舉個例子，在程式作業時，您會 建立一個函數稱為  conv_forward 如果用 tensorFlow 作的時候 有一個函數稱為 tf.nn.conv2d 然後在其他的深度學習框架 像是 Keras 程式框架，您之後會在課程中看到 有一個函數稱為 Conv2D 來建置卷積，等等 但所有對於卷積有很好支援的深度學習框架 都會有一些函數來建置這個卷積運算 為什麼這個的作用是用來偵測邊緣 讓我們看另一個例子 為了描述這個，我們將使用簡化的影像 所以這是一個簡單的 6乘6 影像 左邊一半的影像是 10 而右邊一半是 0 如果您畫這個圖形，它或許像這樣，在左半邊 是 10 給您比較亮的值 在右邊，給您比較暗的值 我使用會灰色陰影來代表 0 雖然或許也可以畫成黑色 但在影像中，清楚看到有很強烈的
垂直邊緣在正中間 的影像中，當它從白色轉為黑色或者白色轉為暗色時 當您將它跟一個 3乘3 過濾器卷積， 所以這個 3乘3 過濾器可以看成這樣 也就是白的，明亮的像素在左邊 然後是中間色調，0 在中央，
然後是暗色在右邊 您會得到在右邊的這個矩陣 如果您想驗證一下 舉個例，這個 0 是用逐元素乘積 在這個 3乘3 區域 所以您從最左邊這一欄 10 + 10 + 10 中間是 0，然後 -10-10-10 這是最終您得到這個 0 相對的，這個 30 是這樣來的 也就是我們從 10+10+10 然後是 -0, -0, 這是為什麼這裡是 30 現在如果您畫最右邊這個影像，它會像這樣 也就是這裡會有一個較亮的區域在中間 而這對應到了已經偵測到這個垂直的邊緣 就在這個 6乘6 影像的正中間 而如果這個維度看起來有點不對勁 這個偵測出來的邊緣真的很厚 這只是因為我們作用在這個例子的影像很小 如果您使用，假設 1000乘1000 影像 而不是 6乘6 影像，那您會發現 這樣的作法在偵測垂直邊緣作用得很好 而在這個例子 這個輸出影像中間亮的區域，要表達的是 似乎是有一個很清楚的垂直邊緣
在影像的正中間 而從這個垂直邊緣偵測
得到一個重要的直覺是 一個垂直邊緣是 3乘3 區域，
因為我們使用了這樣的 3乘3 過濾器 在左邊是明亮的像素 跟您較不關心中間的值 然後右邊是暗色的像素 而在 6乘6 影像的中間影像其實 可以是左邊是明亮的像素，右邊是暗色的像素 這是為什麼它認為是有一個垂直邊緣在那裏 而卷積運算給您一個方便的方式來表達 如何在影像中找到垂直的邊緣 您已經見到了卷積運算的作用 在下一段影片，您將見到如何用這樣的方式 利用它成為一個卷積神經網路的建構基石
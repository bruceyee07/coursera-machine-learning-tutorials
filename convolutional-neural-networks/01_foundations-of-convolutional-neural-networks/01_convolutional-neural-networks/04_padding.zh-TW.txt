為了要建立深度神經網路，一個 基本卷積運算您需要修改的是填充 我們來看看其運作 我們之前的影片中看過，如果您拿 一個 6乘6 影像卷積一個 3乘3 過濾器 您最終會得到一個 4乘4 矩陣輸出 而這是因為用這 3乘3 過濾器
有可能的位置的數量 也就只有 4乘4 個可能位置 對於這個 3乘3 過濾器對應到您的 6乘6 矩陣 跟數學有關的是
一般而言如果您有 一個 n乘n 影像跟 f乘f 過濾器卷積 那輸出的維度會是 (n-f+1)乘 (n-f+1) 維度 在這個例子 6-3+1 等於 4 這是為什麼您會得到一個 4乘4 輸出 這個有兩個缺點：其一是 如果每次您應用卷積運算，您的影像縮小 您從 6乘6 縮成 4乘4 在您的影像變得太小前，
您只能這樣做幾次 或許它會縮成 1乘1，或者其他 所以，或許您不想您的影像 在每次當您偵測邊緣或者
測試其他特徵時縮小 這是一個缺點 而第二個缺點 而如果您看角落這個像素 這個小像素只會在一次的運算中用到 因為這像素被這 3乘3 區域用到 而，如果您看中間這個像素，
假設這個像素 那有很多的 3乘3 區域
會覆蓋到這個像素 好像如果在角落或是在邊緣的像素
在輸出時用得較少 所以您丟掉了很多靠近邊緣影像的資訊 為了解決這兩個問題 無論是縮小輸出 也就是當您建立深度神經網路 您見到了為什麼您不想讓影像每一次都縮小，
因為如果這樣 或許數百層的深度網路 它每次縮一點 經過上百層後，您會得到很小的影像 這是一個問題 另一個是丟掉很多在影像邊緣的資訊 為了要解決這兩件問題 您可以這樣做，在應用卷積運算前 您可以填充這個影像 在這個例子，假設您將這個影像
多填充了一個邊框 在邊緣多增加了一個像素的邊框 如果您這樣做 那不再是一個 6乘6 影像 您現在填充過的是一個 8乘8 影像 您將這個 8乘8 影像跟 3乘3 影像卷積， 您現在的輸出不是 4乘4 
而是 6乘6 因次您設法保留了
原本輸入 6乘6 的大小 依照慣例，當您填充時 您用 0 來填充，而如果 p 是填充量 那麼這樣的話 p 等於 1 因為我們到處都填ㄧ個
額外一個像素的邊框 那輸出會變成 n+2p-f+1 乘 n+2p-f+1 所以這會變成 6 + 2*1 - 3 + 1 所以 6 + 2*1 - 3 + 1 等於 6 所以您最終會有一個 6乘6 
影像來保留原本影像的大小 所以這一個像素實際上被 這些輸出的元素影響，有效地補充 或許不是被丟棄，而是 從影像的邊緣或者角落少算的資訊 而我在這裡顯示 填充邊緣的只有一個像素的影響 如果要的話，您也可以填兩個像素，這種情況下 您加了另一個邊框 如果要的話，您可以填進更多的像素 我想我這裡畫的 這會是 p 等於 2 至於要填多少 實際上有兩種常用的選項，稱為 有效卷積跟相同卷積 真的不是一個好的名稱，但有效卷積 基本上的意思是沒有填充 這種情況下，您或許有一個 n乘n 影像跟一個 f乘f 過濾器卷積，這會給您 n-f+1 乘 n-f+1 維度的輸出 這就像是我們之前在前面的影片中看過的 我們用 n乘n 影像跟 3乘3 過濾器，而給您 4乘4 的輸出 其他最常用的填充選擇是稱為 相同卷積，意思是當您填充時 輸出的大小跟輸入的大小相同 如果我們認真看這個公式 當您填 p 個像素時 就是當右邊 n 變為 n+2p 減去 f 加 1 所以我們有 n乘n 影像，然後加入一個邊框為 p 像素 輸出的維度會是 n+2p-f+1 所以，如果您要 n+2p-f+1 等於 n 也就是輸出大小跟輸入大小相同 如果您解這個方程式， 兩邊的 n 取消，如果您解 p 的話 這意味著 p 等於 (f-1)/2 所以當 f 是奇數 選擇填充的大小如下 您可以確保輸出的大小跟 輸入大小相同，所以這是為什麼 當過濾器是 3乘3 時，
就像在前面的投影片中 填充量會讓輸出大小跟
輸入大小一樣的會是 (3 - 1) /2 也就是 1 而像另一個例子 如果您的過濾器是 5乘5 所以如果 f 等於 5 如果您將它填入這個方程式，
您會發現當填充量為 2 時 會保留輸出大小跟輸入大小一樣，
當過濾器為 5乘5 時 電腦視覺的慣例是 f 通常是奇數 實際上幾乎都是奇數，
您很少見到偶數的過濾器 電腦視覺用到的過濾器 我想有兩個原因 一是如果 f 是偶數 那您會需要一些不對稱填充 所以只有在當 f 為奇數時，
這種卷積會給您一個自然的填充區域 周邊都用同樣的維度，而不是 在左邊填多一點，右邊填少一點 或者不對稱的東西 其二，當您用奇數維度的過濾器 像是3乘3 或者 5乘5 那它會有一個中心位置，也時候在 電腦視覺最好有一個區分器 最好有一個像素 您可以用中間這個像素來當過濾器的位置 或許這些都不是重大的理由來說 f 總是 奇數，但如果您看卷積的文獻時 您會看到 3乘3 過濾器最常見 也時候會見到 5乘5, 7乘7 有時候，晚一點我們也會 談到 1乘1 的過濾器跟
為什麼用它是有道理的 但只是依照慣例 我建議您也只使用奇數的過濾器 我想您或許可以 獲得較好的性能
即使您想要用偶數的 f 值 但如果您依照電腦視覺的慣例 我通常只用奇數的 f 值，
所以您見到了如何使用填充卷積 要為您的卷積運算做填充 您可以指定 p 一個值，或者您可以說這是一個有效卷積 也就是說 p 等於 0，或者您可以說用相同卷積 也就是填充到您可以確保 輸出跟輸入的維度一樣 這就是填充 在下一段影片，讓我們來談您如何建置跨步卷積
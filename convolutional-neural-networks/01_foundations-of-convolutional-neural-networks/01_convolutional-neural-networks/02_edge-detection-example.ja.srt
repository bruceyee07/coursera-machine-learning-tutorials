1
00:00:01,580 --> 00:00:05,000
畳み込み処理は 畳み込みニューラルネットワークの

2
00:00:05,000 --> 00:00:06,870
基本構成要素だ

3
00:00:06,870 --> 00:00:10,050
興味を引く例として エッジ検出を挙げる

4
00:00:10,050 --> 00:00:14,030
このビデオでは どのように畳み込みが機能するのか見る

5
00:00:17,743 --> 00:00:18,943
以前のビデオで

6
00:00:18,943 --> 00:00:23,810
私は ニューラルネットワークの初めの方の層が
どのようにエッジ検出を行うかを話した

7
00:00:23,810 --> 00:00:27,250
そして すこし後の層では 物体の部分を検出する

8
00:00:27,250 --> 00:00:31,320
そして より後の層では 完全な物体を検出する

9
00:00:31,320 --> 00:00:33,380
この例における 人の顔のような

10
00:00:35,270 --> 00:00:40,740
このビデオでは 画像中にあるエッジをどのように検出するかを見る

11
00:00:40,740 --> 00:00:42,360
例を見よう

12
00:00:42,360 --> 00:00:46,760
このような写真が与えられて コンピュータが 中にある物体が何かを識別するために

13
00:00:46,760 --> 00:00:53,205
最初に行うであろうことは 画像中の垂直のエッジを検出することかもしれない

14
00:00:54,650 --> 00:00:59,470
例えば この画像には 柵のある所にこのような垂直の線があり

15
00:00:59,470 --> 00:01:04,040
同じように これらの歩行者の垂直の線がある

16
00:01:04,040 --> 00:01:08,420
そして こられが 垂直エッジ検出器の出力に検出される

17
00:01:09,860 --> 00:01:12,340
また 水平エッジも検出したいだろう

18
00:01:12,340 --> 00:01:17,180
例えば この柵がある所に 大変強い水平線がある

19
00:01:17,180 --> 00:01:20,410
そして それらが検出され 大体ここにあるようになる

20
00:01:21,520 --> 00:01:25,034
それでは どのように このような画像中のエッジを検出するのか？

21
00:01:25,034 --> 00:01:26,160
例を見てみましょう。

22
00:01:27,670 --> 00:01:31,056
ここに 6×6グレースケール画像がある

23
00:01:31,056 --> 00:01:35,949
これは グレースケール画像なので 6×6×1行列だ

24
00:01:35,949 --> 00:01:40,700
6×6×3ではない なぜなら 別々のRGBチャンネルが無いから

25
00:01:41,790 --> 00:01:46,213
エッジを検出するために
例えばこの画像から垂直エッジを検出するために

26
00:01:46,213 --> 00:01:49,093
できることは 3×3行列を作ることだ

27
00:01:49,093 --> 00:01:53,733
畳み込みニューラルネットワークの用語では

28
00:01:53,733 --> 00:01:55,950
これは フィルターと呼ばれる

29
00:01:57,390 --> 00:02:01,543
では 3×3フィルター もしくは 3×3行列を このように作る

30
00:02:01,543 --> 00:02:08,679
1 1 1, 0 0 0, -1 -1 -1

31
00:02:08,679 --> 00:02:12,947
時折 研究論文では これをフィルターではなく カーネルと呼ぶ

32
00:02:12,947 --> 00:02:16,370
しかし このビデオでは フィルターという用語を使うことにする

33
00:02:17,890 --> 00:02:22,730
やろうとしているのは この6×6画像を畳み込むことだ

34
00:02:22,730 --> 00:02:27,107
畳み込み処理は このアスタリスクで示される

35
00:02:29,560 --> 00:02:32,690
3×3フィルターで畳み込む

36
00:02:32,690 --> 00:02:37,410
数学における記法に関して
少しだけ不運なことがある

37
00:02:37,410 --> 00:02:41,490
アスタリスクは 畳み込みの標準記号だ

38
00:02:41,490 --> 00:02:45,648
しかし Pythonでは

39
00:02:45,648 --> 00:02:48,440
これを掛け算や要素毎の積を表すのに使う

40
00:02:48,440 --> 00:02:53,009
よって このアスタリスクは二重の意味を持つ
これはオーバーロードされた記号だ

41
00:02:53,009 --> 00:02:58,598
このビデオでは アスタリスクが畳み込みを意味する場合
それが明確になるように努める

42
00:02:58,598 --> 00:03:03,844
この畳み込み処理の出力は 4×4行列になる

43
00:03:03,844 --> 00:03:09,020
それは 4×4画像と 解釈できるか もしくはそう見なすことができる

44
00:03:09,020 --> 00:03:13,330
この4×4出力の計算方法は 次のようである

45
00:03:13,330 --> 00:03:18,522
最初の要素 4×4行列の左上の要素を計算するには

46
00:03:18,522 --> 00:03:21,848
やるべきことは この3×3フィルターを

47
00:03:21,848 --> 00:03:26,254
オリジナル入力画像の3×3領域上に 貼り合わせることだ

48
00:03:26,254 --> 00:03:30,920
ここに書いた

49
00:03:30,920 --> 00:03:34,872
1 1 1, 0 0 0, -1 -1 -1

50
00:03:34,872 --> 00:03:38,221
それから やるべきことは 要素毎の掛け算だ

51
00:03:38,221 --> 00:03:41,481
つまり 最初のは 3×1

52
00:03:41,481 --> 00:03:46,377
そして 2番目は 1×1 下に行って 1×1

53
00:03:46,377 --> 00:03:50,398
そして 足すことの2×1 これ

54
00:03:50,398 --> 00:03:53,340
そして 結果の9つの数を 全て足し合わせる

55
00:03:53,340 --> 00:04:00,451
中央の列は  0 × 0 + 5 × 0 + 7 × 0

56
00:04:00,451 --> 00:04:06,357
右端の列は

57
00:04:06,357 --> 00:04:09,088
 1 × -1, 8 × -1 + 2 × -1

58
00:04:09,088 --> 00:04:15,875
そして これらの９つの数を足し合わせると -5 になる

59
00:04:15,875 --> 00:04:19,340
よって ここを -5 で埋める

60
00:04:19,340 --> 00:04:22,450
OK 任意の順序で９つの数を足し合わせることができる

61
00:04:22,450 --> 00:04:27,550
これは 最初の列に行った

62
00:04:27,550 --> 00:04:29,620
そして2番目の列 そして3番目

63
00:04:29,620 --> 00:04:33,467
次に この2番目の要素が何になるか明らかにする

64
00:04:33,467 --> 00:04:39,526
この青い四角形を1ステップ右にシフトする
こんな風に

65
00:04:39,526 --> 00:04:42,100
ここの緑の印を消します

66
00:04:42,100 --> 00:04:46,330
そして 同じく 要素毎の掛け算と 足し算を行う

67
00:04:46,330 --> 00:04:52,501
そうして 0 x 1 + 5 x 1 + 7 x 1

68
00:04:52,501 --> 00:04:57,400
+ 1 x 0 + 8 x 0 + 2 x 0

69
00:04:57,400 --> 00:05:03,450
+ 2 x -1 + 9 x -1 + 5 x -1

70
00:05:03,450 --> 00:05:10,791
そして これらの９つの数を足し合わせれば -4を得る
以降同様

71
00:05:10,791 --> 00:05:16,078
これを右にシフトさせ 9つの掛け算を行い 足し合わせ 0を得る

72
00:05:16,078 --> 00:05:19,424
そして ここでは ８を得る

73
00:05:19,424 --> 00:05:26,017
確認してみよう
2 + 9 + 5 は16

74
00:05:26,017 --> 00:05:29,165
真中の列は０

75
00:05:29,165 --> 00:05:35,110
右端の列は (4 + 1 + 3) x -1 で -8

76
00:05:35,110 --> 00:05:39,621
よって 左の列は16で -8して

77
00:05:39,621 --> 00:05:43,796
で ここは 8 となる

78
00:05:43,796 --> 00:05:47,738
次に 次の行のこの要素を得るために

79
00:05:47,738 --> 00:05:52,280
次にやるのは 青い四角形を 今度は下に1つ動かす

80
00:05:52,280 --> 00:05:54,450
そして この位置を得る

81
00:05:54,450 --> 00:05:59,920
そして 再び 要素毎の掛け算と足し算を繰り返す

82
00:05:59,920 --> 00:06:02,967
そうすれば ここは -10 を得る

83
00:06:05,016 --> 00:06:11,147
そして 右に1つシフトし -2 を得る

84
00:06:11,147 --> 00:06:14,590
そして 2, そして 3, 以降同じで

85
00:06:14,590 --> 00:06:20,050
行列の残りの要素全てに行う

86
00:06:21,400 --> 00:06:26,281
明らかだが この -16 は

87
00:06:26,281 --> 00:06:29,980
この右下の 3 x 3 領域から得た

88
00:06:31,080 --> 00:06:36,600
このように 6 x 6 行列を 3 x 3 行列で畳み込むと
4 x 4 行列を得る

89
00:06:38,182 --> 00:06:39,760
この画像とフィルターは

90
00:06:39,760 --> 00:06:43,390
実際には 様々な次元の行列となる

91
00:06:44,640 --> 00:06:49,779
だが 左の行列は 画像の説明に都合が良い

92
00:06:49,779 --> 00:06:52,564
そして 中央の行列は フィルターの説明として都合良い

93
00:06:52,564 --> 00:06:57,021
そして 右のは 恐らく別の画像として解釈できる

94
00:06:57,021 --> 00:07:00,830
そして これが 垂直エッジ検出器となるのである

95
00:07:00,830 --> 00:07:03,440
どうしてかは 次のスライドで見よう

96
00:07:03,440 --> 00:07:06,097
ただし 続ける前に 1つ注意を

97
00:07:06,097 --> 00:07:10,476
それは 実際に あるプログラミング言語で これを実装する場合

98
00:07:10,476 --> 00:07:13,840
多くのプログラミング言語は 畳み込みを表すのに、

99
00:07:13,840 --> 00:07:16,800
アスタリスクとは異なった関数を持っているだろう

100
00:07:16,800 --> 00:07:20,010
例えば 本コースのプログラミング演習では

101
00:07:20,010 --> 00:07:24,040
conv_forwad という関数を実装する

102
00:07:24,040 --> 00:07:28,481
もし これを tensorflowで行うなら

103
00:07:28,481 --> 00:07:34,528
tf.nn.conv2d という関数がある

104
00:07:34,528 --> 00:07:37,000
そして 他にもディープラーニング
プログラミング フレームワークがある

105
00:07:37,000 --> 00:07:41,538
このコースの後の方で見ることになる
Kerasプログラミング フレームワークでは

106
00:07:41,538 --> 00:07:46,090
Conv2Dという関数が 畳み込みを実装している
といった具合だ

107
00:07:46,090 --> 00:07:49,559
しかし 全てのディープラーニング フレームワークは
畳み込みを良くサポートしていて

108
00:07:49,559 --> 00:07:54,218
この畳み込み処理の実装には いくつかの関数が用意されている

109
00:07:56,813 --> 00:07:59,756
それでは なぜ これが垂直エッジ検出を行うことになるのか？

110
00:07:59,756 --> 00:08:01,700
開始点から theta を増加させるというのは、これも意図通りの動作のようです。

111
00:08:03,470 --> 00:08:06,188
これを説明するのに 単純化した画像を使おう

112
00:08:06,188 --> 00:08:08,819
ここに 簡単な 6 x 6 画像がある

113
00:08:08,819 --> 00:08:14,480
左半分は 10 で 右半分は 0 である

114
00:08:14,480 --> 00:08:18,734
これを写真として捉えるなら こう見える

115
00:08:18,734 --> 00:08:21,775
左半分は 10で 明るい輝度を持っている

116
00:08:21,775 --> 00:08:25,060
そして 右半分は 暗い輝度である

117
00:08:25,060 --> 00:08:27,890
0を表すのに グレーの影を使うことにする

118
00:08:27,890 --> 00:08:32,110
黒で描くこともできるだろうけど

119
00:08:32,110 --> 00:08:37,654
この画像には 明らかに とても強い垂直のエッジが ちょうど中央にある

120
00:08:37,654 --> 00:08:42,590
それは 白から黒 もしくは 白からより暗い色への遷移だ

121
00:08:44,070 --> 00:08:48,808
それでは これを 3 x 3 フィルターで畳み込もう

122
00:08:48,808 --> 00:08:53,048
3 x 3 フィルターは このように表記することができる

123
00:08:53,048 --> 00:08:57,575
明るい 輝く ピクセルが 左にあり

124
00:08:57,575 --> 00:09:02,080
そして 中間色の 0 が中央に そして より暗いのが右にある

125
00:09:02,080 --> 00:09:05,290
得られる行列は右のようになる

126
00:09:06,640 --> 00:09:10,130
良ければ この計算を確認してみよう

127
00:09:10,130 --> 00:09:15,815
例えば この 0 は 要素同士の掛け算で得られる

128
00:09:15,815 --> 00:09:18,880
つまり この 3 x 3 ブロックとの掛け算だ

129
00:09:18,880 --> 00:09:23,008
左の列からは 10 + 10 + 10

130
00:09:23,008 --> 00:09:26,987
そして 真ん中からは 0 そして -10 -10 -10

131
00:09:26,987 --> 00:09:30,670
それで 最終的に ここは 0 になる

132
00:09:30,670 --> 00:09:35,490
一方 対照的に ここからは 30 が得られる

133
00:09:36,860 --> 00:09:41,062
10 + 10 + 10 と -0 -0 から

134
00:09:41,062 --> 00:09:47,190
最終的に そこには30が入る

135
00:09:47,190 --> 00:09:51,490
そして もし この右の行列を 画像として描くなら このようになる

136
00:09:51,490 --> 00:09:55,240
このより明るい領域が真中に来る

137
00:09:55,240 --> 00:09:59,820
そして これは この 6 x 6 画像の中央にある

138
00:09:59,820 --> 00:10:03,630
垂直エッジを検出したことに対応する

139
00:10:03,630 --> 00:10:06,920
この例の次元数は ちょっと良くなくて

140
00:10:06,920 --> 00:10:09,450
検出したエッジがとても太い

141
00:10:09,450 --> 00:10:13,840
それは 単に この例では とても小さい画像を使ったからに過ぎない

142
00:10:13,840 --> 00:10:17,100
もし 1000 x 1000 画像を使っていたら

143
00:10:17,100 --> 00:10:22,190
6 x 6 画像でなく その場合は

144
00:10:22,190 --> 00:10:27,390
これが 垂直エッジを検出するのに とても良い仕事をすることが分かるだろう

145
00:10:27,390 --> 00:10:28,510
そして この例では

146
00:10:28,510 --> 00:10:34,225
この中央の明るい領域で 出力画像は

147
00:10:34,225 --> 00:10:39,355
強い垂直のエッジが 画像の中央にあると述べているのである

148
00:10:39,355 --> 00:10:44,280
そして 垂直エッジ検出から得られる1つの直観は

149
00:10:44,280 --> 00:10:49,315
垂直エッジは 3 x 3 の大きさである
なぜなら 3 x 3 フィルターを使っているから

150
00:10:49,315 --> 00:10:52,706
そこには 左に明るいピクセルがあり

151
00:10:52,706 --> 00:10:55,104
真中はどうてもよくて

152
00:10:55,104 --> 00:10:58,171
暗いピクセルが右にある

153
00:10:58,171 --> 00:11:03,011
そして この 6 x 6 画像の中央では

154
00:11:03,011 --> 00:11:07,850
明るいピクセルが左にあり 暗いピクセルが右にある

155
00:11:07,850 --> 00:11:12,120
だから これが 垂直エッジ検出器と考えられる

156
00:11:12,120 --> 00:11:16,480
そして 畳み込み処理が 

157
00:11:16,480 --> 00:11:20,200
画像中の垂直エッジを見つける 便利な方法を与えてくれる

158
00:11:20,200 --> 00:11:23,720
これで 畳み込み処理がどのように働くのか分かった

159
00:11:23,720 --> 00:11:26,430
次のビデオでは どのようにこれを得

160
00:11:26,430 --> 00:11:30,032
畳み込みニューラルネットワークの基本構成要素の1つとして使うのかを見てみよう
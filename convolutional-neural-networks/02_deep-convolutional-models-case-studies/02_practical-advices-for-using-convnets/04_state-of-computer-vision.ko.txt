딥 러닝은 컴퓨터 비전, 자연 언어 처리, 음성 인식, 온라인 광고, 물류, 많은, 많은, 많은 문제에 성공적으로 적용되어왔습니다. 컴퓨터 비전에 상태에 대한 딥 러닝의 응용 어플리케이션에 대해 고유 한 몇 가지 사항이 있습니다. 이 강의에서는 컴퓨터 비전에 대한 심층적인 학습에 대해 제가 한 관찰 내용을 여러분과 함께 나누며, 이 문헌을 더 잘 읽어가고 아이디어의 탐색을 돕고 컴퓨터 비전을 위해 이 시스템을 직접 구축하는 방법에 도움이 되기를 바랍니다. 따라서 대부분의 머신 러닝 문제는 데이터가 비교적 적은 곳과 많은 데이터가있는 곳 사이의 스펙트럼에 어딘가에 떨어지는 것으로 생각할 수 있습니다. 예를 들어, 오늘날 우리는 음성 인식을 위한 상당한 양의 데이터를 보유하고 있으며 이는 문제의 복잡성에 비례한다고 생각합니다. 그리고 오늘날 이미지 인식이나 이미지 분류를 위한 합리적인 규모의 데이터 세트가 있다 해도 이미지 인식은 모든 픽셀을 보고 이게 무엇인지 파악해야 하는 복잡한 문제이기 때문입니다. 온라인 데이터 세트가 백만 개 이상의 이미지처럼 상당히 큰 경우에도 우리는 더 많은 데이터가 필요하다고 느끼는 것처럼 느껴집니다. 또한 더 적은 데이터를 가진 객체 감지와 같은 몇 가지 문제점들이 있습니다. 따라서, 기억하셔야 할 점은 이미지 인식은 사진을 보고 이것이 가축인지 아닌지를 말해주는 문제라는 점입니다. 반면, 객체 감지는 사진을 보고, 바운딩 박스를 두어 사진 안 어디에 자동차와 같은 객체들이 있는지를 알려주는 것입니다. 바운딩 박스를 가져 오는 비용이 객체와 바운딩 박스에 레이블을 지정하는 것보다 비용이 많이 듭니다. 따라서 우리는 이미지 인식보다 객체 감지를 위한 데이터가 적은 경향이 있습니다. 그리고 객체 감지는 다음 주에 논의 할 내용입니다. 광범위한 머신 러닝 문제를 살펴보면 평균적으로 많은 데이터가있을 때 단순한 알고리즘과 적은 수작업을 사용하여 사람들이 빠져 나가는 경향이 있다는 것을 알 수 있습니다. 따라서, 문제에 대한 피처들을 조심스럽게 설계할 필요는 없지만, 대신, 거대한 신경망, 더 단순한 아키텍처와 신경망을 가질 수 있습니다. 그저 데이터가 많이 있는지에 대해 이것이 학습하고 싶어하는지를 알아두십시오 반대로 많은 양의 데이터가 없을 때는 평균적으로보다 더 많은 핸드 엔지니어링에 참여하는 사람들을 볼 수 있습니다. 그리고 여러분이 인색하게 하고 싶으면, 사람이 너무 많다고 말할 수도 있습니다. 하지만 데이터가 많지 않을 때에는 핸드 엔지니어링이 실제로 좋은 성능을 얻는 가장 좋은 방법이라고 생각합니다. 머신 러닝 응용 프로그램들을 보면 보통 학습 알고리즘에 두 가지 지식의 원천이 있다고 생각한다고 생각합니다. 지식의 한 가지 소스는 레이블이 지정된 데이터, 즉 실제로 감독 학습(supervised learning)에 사용하는 (x, y) 쌍입니다. 그리고 지식의 두 번째 소스는 핸드 엔지니어링입니다 시스템을 손으로 조작하는 데는 여러 가지 방법이 있습니다. 신중하게 손으로 디자인하여 피처를 설계하는 것으로부터 신중하게 손으로 디자인하여 네트워크 아키텍처와 시스템의 다른 구성요소들을 설계하는 것까지 가능합니다. 따라서 레이블이 많은 데이터가 없으면 직접 손으로 엔지니어링해야합니다. 그래서 저는 컴퓨터 비전이 정말로 복잡한 함수를 배우려고 노력하고 있다고 생각합니다. 어떨때에는, 컴퓨터 비전을위한 충분한 데이터가 없는 것처럼 느껴집니다 데이터 세트가 점점 더 커지더라도 필요한만큼의 데이터를 확보하지 못하는 경우가 많습니다. 이것이 바로 이 데이터 컴퓨터 비전이 역사적으로 심지어 오늘날에도 핸드 엔지니어링에 더 많이 의존한 이유입니다. 그리고 저는 이것이 어느 컴퓨터 비전이 다소 복잡한 네트워크 아키텍처를 개발한 이유라고 생각합니다. 더 많은 데이터가없는 상황에서 좋은 성능을 얻는 방법은 아키텍팅에 더 많은 시간을 할애하고 네트워크 아키텍처와 더 많이 작업해보는 것입니다. 그리고 제가 핸드엔지니어링을 낮춰보고 있다고 생각하신다면, 그건 제 의도가 아님을 말씀드립니다. 충분한 데이터가 없을 때, 핸드 엔지니어링은 많은 통찰력을 필요로 하는 매우 어렵고 매우 숙련된 작업입니다. 그리고 핸드 엔지니어링에 대해 통찰력을 가진 사람은 더 나은 결과를 얻을 수 있으며, 충분한 데이터가 없을 때 그 핸드 엔지니어링을 수행하는 프로젝트에 큰 기여를 합니다. 많은 양의 데이터를 가지고 있을 때, 저라면 핸드 엔지니어링에 시간을 낭비하지 않고 대신 학습 시스템을 구축하는 데 시간을 할애 할 것입니다. 그러나 역사적으로 컴퓨터 비전이 가진 두려움은 매우 작은 데이터 세트를 사용해왔고, 역사적으로 컴퓨터 비전 문헌은 많은 핸드 엔지니어링에 의존해 왔다는 것입니다. 지난 몇 년 동안 올바른 컴퓨터 비전 작업을 수행하는 데이터의 양이 급격히 증가했지만, 그 결과로 수행되는 핸드 엔지니어링의 양이 크게 줄어 들었습니다. 그러나 네트워크 아키텍처와 컴퓨터 비전에 대한 Hand Engineering 여전히 많이 있습니다. 이것이 컴퓨터 비전에서 매우 복잡한 과도한 선택을 보게되고 다른 많은 분야에서 하는 것보다 더 복잡한 이유입니다. 그리고 사실, 이미지 인식 데이터 세트보다 더 작은 객체 감지 데이터 세트를 가지고 있기 때문에, 다음 주에 보시게 될 객체 감지에 대해 말하자면, 여러분은 이 알고리즘이 훨씬 더 많이 복잡해지고 훨씬 더 전문화된 구성요소를 가지고 있다는 걸 보시게 될 겁니다. 다행히도 데이터가 거의 없을 때 도움이되는 것은 전이 학습입니다. 그리고 이전의 tigger, misty, detection 이전 슬라이드에 있었던, 문제의 예제에서, 전이 학습이 도와 줄 해결 가능한 데이터를 가지고 있습니다. 그리고 이것은 상대적으로 적은 데이터가있을 때 많이 사용되는 또 다른 기술입니다. 컴퓨터 시각 자료를 보고, 거기에있는 아이디어를 살펴 본다면 사람들이 정말로 열정적이라는 것을 알 수 있습니다. 그들은 표준화 된 벤치 마크 데이터 세트와 경쟁에서 우위를 차지하는 것에서 정말 잘 하고 있습니다. 컴퓨터 비전 연구의 경우, 여러분이 잘 수행하면 벤치 마크 결과를 쉽게 얻을 수 있습니다. 따라서 이러한 벤치 마크에서 잘 수행하는 데 많은 주의를 기울여야 합니다. 그리고 이것의 긍정적인면은 이것이 전체 커뮤니티가 가장 효과적인 알고리즘이 무엇인지 파악하는 데 도움이 된다는 것입니다. 하지만 사람들은 여러분이 벤치 마크에서 잘 할 수있게 해주는 일들을 수행하지만 실제 응용 프로그램에 배포하는 프로덕션이나 시스템에서는 사용하지 않을 것이라는 것을 논문들에서 볼 수 있습니다. 벤치마킹에 대한 몇 가지 팁이 있습니다. 실제로 고객에게 서비스를 제공하는 시스템을 생산한다면 이것들은 제가 많이 사용하지 않을 것들입니다. 하나는 앙상블입니다. 이것이 의미하는 바는, 여러분이 원하는 신경망을 알아 낸 후에 여러 신경망을 독립적으로 훈련시키고 아웃풋을 평균화하는 것입니다. 그래서 3,5,또는 7 신경망을 무작위로 초기화하고 이러한 신경망을 모두 훈련시킨 다음 아웃풋을 평균냅니다. 그리고 그 방법으로 출력 y 모자를 평균하는 것이 중요합니다. 작동하지 않을 가중치를 평균화하지 마십시오. 7 가지 다른 예측을 가진 7가지 신경망을 가지고 평균을 내십시오. 그리고 이것으로 1 % 또는 2 % 더 나아지게 할 것입니다. 이렇게 하면 몇몇 벤치 마크에서 조금 나아지죠. 그리고 이것은 여러분이 조금 더 잘하도록 도와 줄 것입니다. 때로는 1 ~ 2 % 정도가 경쟁에서이기는 데 도움이 될 수 있습니다. 그러나 앙상블이란 각 이미지를 테스트하는 것을 의미하므로, 보통 3 ~ 15 개의 다른 네트워크에서 이미지를 실행해야 할 수도 있습니다. 이렇게하면 실행 시간이 3-15 배나 때로는 더 빨라집니다. 그래서 앙상블은 사람들이 벤치 마크에서 잘하고 경쟁에서 이기는 데 사용하는 팁 중 하나입니다. 그러나 저는 실제 고객에게 서비스를 제공하기 위한 프로덕션에는 거의 사용하지 않는다고 생각합니다. 여러분이 계산 예산을 엄청나게 많이 가지고 있고 고객 이미지 당 더 많은 예산을 낭비하지 않는 한 제 생각에.벤치 마크에서 실제로 도움이 되는 논문에서 볼 수있는 또 다른 사항은 테스트 시에 하는 다중 크롭(multi-crop)입니다. 그래서, 데이터 증강을 어떻게 할 수 있는지 여러분은 보셨습니다. 멀티 크롭은 여러분의 테스트 이미지에 데이터 증강을 적용하는 한 가지 형태입니다. 그래서, 예를 들어 , 고양이 이미지를보고 두 개의 버전을 더해, 네 번 복사하십시오. 10 -크롭 이라는 기술이 있는데요, 이는 기본적으로 말하자면,이 가운데 영역을 자르고, 크로스파이어로 실행하는 것입니다. 그리고 나서 녹색으로 표시된 왼쪽 상단 모서리에 크로스파이어를 실행하고, 초록색으로 된 오른쪽 코너를, 노란색으로 된 왼쪽 하단을, 오렌지색으로 된 오른쪽 하단을 취해서 크로스파이어를 통해 그것을 실행합니다. 그리고 나서 미러링된 이미지를 가지고 같은 것을 하시면 됩니다. 자, 제가 이 중앙 크롭을 가지고 와서 네 코너를 크롭하겠습니다. 여기 여기는 가운데 크롭 하나씩, 여기랑 여기는 네 모서리 크롭합니다. 이것을 다 더하면,10 개의 다른 크롭이 되죠. 이렇게 해서 이름이 10-크롭인 것입니다. 그리고 이제 여러분이 하실 일은 크로스파이어를 통해 10 개의 이미지를 실행 한 다음 결과를 평균화하는 것입니다. 만약 계산 예산이 있다면 그렇게 할 수 있습니다. 어쩌면 10 크롭만큼이나 필요하지 않을 수도 있습니다. 몇 크롭만을 사용할 수도 있습니다. 그리고 이렇게 하면 프로덕션 시스템에서 좀 더 나은 성능을 얻을 수 있습니다. 프로덕션이란 실제 사용자를 위해 배포하는 시스템을 의미합니다. 그러나 이것은 실제 프로덕션 시스템보다 벤치 마크에서 잘 수행하는 데 사용되는 또 다른 기술입니다. 앙상블의 가장 큰 문제점 중 하나는 이러한 모든 서로 다른 네트워크를 유지해야한다는 것입니다. 그래서 컴퓨터 메모리가 더 많이 필요합니다. 멀티 크롭의 경우,최소한 하나의 네트워크만 유지하면됩니다. 따라서 이것이 많은 메모리를 낭비하지는 않지만, 실행 시간은 상당히 느려집니다. 자,이것들은 팁이고,연구 논문들도 이 조언들을 언급하고 있습니다. 하지만 제 개인적으로는 프로덕션 시스템을 만들 때, 이런 방법들을 사용할 의향은 없습니다.이것들이 벤치마크에서나 우위를 점하는 경쟁에서 더 잘 수행한다고 해도 말이죠. 많은 컴퓨터 비전 문제가 작은 데이터 영역에 있기 때문에 다른 사람들은 네트워크 아키텍처에 대해 많은 핸드 엔지니어링을 수행했습니다. 그리고 하나의 비전 문제에서 잘 작동하는 신경망은 놀라울 만큼, 그러나 자주 다른 비전 문제들에서도 작동할 것입니다. 따라서 실용적인 시스템을 구축하려면 종종 다른 사람의 신경망 구조로 시작해야합니다. 가능하다면,오픈 소스 구현을 사용할 수 있습니다. 왜냐하면 오픈 소스 도구들이 학습 속도,사례 스케줄러 및 기타 하이퍼 파라미터와 같이 까다로운 세부 사항을 모두 파악했을 수 있기 때문입니다. 그리고 마침내 누군가는 이렇게 수십 개의 GP를 사용하고,백만 가지 이상의 이미지에 대해 모델을 훈련하는 데에 수 주의 시간을 할애했었을 지도 모릅니다. 따라서 다른 사람의 사전 훈련 된 모델을 사용하고 데이터 세트를 미세 조정하면 응용 프로그램에서 훨씬 빠르게 진행될 수 있습니다. 물론 여러분이 컴퓨팅 리소스와 기울기를 가지고 있다면 여러분의 네트워크를 처음부터 교육하는 것을 막을 수는 없습니다 사실 자신의 컴퓨터 비전 알고리즘을 발명하고 싶다면 그렇게해야 할 수도 있습니다. 자,이번 주 강의는 여기까지 입니다. 많은 컴퓨터 비전 아키텍처가 어떤 일을 아닌지 감을 얻어가시기를 바랍니다. 이번 주 연습에서는 실제로 다른 프로그램 프레임 워크를 배우고 공명을 구현하는 데 사용합니다. 자, 연습문제를 즐기시고, 다시 만나뵙길 바랍니다.
殆どのコンピュータ ビジョン タスクでは より多くのデータを使用できる そして "Data Augmentation"(訳注: "水増し"という訳を見かけるが 英語のままの方が一般的のようだ) は コンピュータ ビジョン システムで 性能を上げるためによく使われる技術だ コンピュータ ビジョンは すごく複雑なタスクだ 画像を入力して 全てのピクセルを使い その写真に何が移っているかを当てる それをやるには 相当複雑な関数を学習する必要があるだろう 実際には 殆どのコンピュータ ビジョン タスクでは より多くのデータを持つことが助けになる それは 他の分野のように そこそこ十分なデータを得られるのとは違い より多くのデータを集めるのが そんなに楽しいことじゃ無い 今日の このコンピュータ ビジョンの状態は 主要なコンピュータ ビジョン問題である 十分なデータを得られないと感じていて 全ての機械学習のアプリケーションにとっては そうじゃないけど コンピュータ ビジョンに対しては そう感じられる このことは コンピュータ ビジョン モデルを訓練する時 "Data Augmentation" が助けになることを意味する 転移学習を使っていても 他の誰かの 事前学習済み重みから始めても 自分でスクラッチで何かを訓練していても これは正しい コンピュータ ビジョンにおける一般的な "Data Augmentation" を見てみよう おそらく 最も単純な "Data Augmentation" は 垂直軸での反転だろう もし この例が 学習セットにあったなら 横方向にひっくり返して 右にある画像を得る そして 殆どのコンピュータ ビジョン タスクでは 左の写真が猫なら 反転したのも猫だ そして もし反転操作で 写真中で認識したいものが変わらないなら これは 使うべき 良い "Data Augmentation" 技術だろう もう１つの よく使われる 技術は "Random Crop"(ランダム切り抜き) だ このデータセットに対し 数個のランダムな切り抜きを行う ここを切り抜けば こんな切り抜きが得られて
ここを切り抜けば こんな切り抜きになる ここを取れば この切り抜きになる こうやって 学習セットに 異なるサンプルを加える データセットから 異なる ランダムな切り抜きを得る "Random Crop" は 完璧な "Data Augmentation" では無い ランダムにこのような切り抜きをした結果 猫に見えなくなったらどうする？ しかし 実際には "Random Crop" が実際の画像の十分大きなサブセットである限りは やる価値がある 反転と"Random Crop" は よく使われる
そして 理論上は 回転や剪断変形 のようなこともできる 剪断変形とは 画像をこうすることだ こんな風に歪ませる 色々な局所変形 等も導入できる これらも 行なうのに害はないが 実際には あまり 使われてはいない 多分 これらは複雑なためだ ２番目のタイプの "Data Augmentation" は 変色だ このような写真があったら R G B チャンネルに 異なる 歪みを与える この例では 赤と青を追加し 緑を減らしている 赤と青は 紫になるので この画像は 全体として 少しだけ紫よりになり 学習セットに 変化した画像を作った 説明のため いくぶんか劇的な変更をしたが 実際には ある分布から R G B をずらす量は とても小さいだろう 結局やることは 異なる値の R G B を 使って 色チャンネルを乱すことだ それじゃ ２番目の例では 赤を少なくして 緑と青を増やそう そうしたら 画像は より黄色っぽくなる それから ここには もっと青を加えたのを 少しだけ 赤も増やして 実際には R G B は ある確率分布から決められる これを行う動機としては 太陽光が 少し黄色だったり 室内照明が黄色がかったりすることがある それは 画像の色を簡単に変えるだろう しかし 猫の識別は 中身の識別は ラベル y は 同じままだ 変色による このような色の乱れを入れることは 画像の色の違いに対する アルゴリズムの学習を より堅牢にしてくれる このコースの上級の学習者へのコメントを１つしよう 赤を使う時 私が言ったことを理解していなくても問題ない R G B を取得する方法は 色々ある 色の乱れを実装する方法の１つは PCAと呼ばれるアルゴリズムを使うことだ これは 主成分分析 (Principles Component Analysis) と呼ばれていて 前に話したことがある 機械学習MOOC, ml-class.org, Coursera の機械学習コースでね でも それの詳細は AlexNet 論文に書かれていて 時々 "PCA Color Augmentation" と呼ばれる "PCA Color Augmentation" の大まかな考えは 例えば もし 画像が主に紫だったら それは 主に 赤と青の色合いを持つ そして 少しだけ緑だ "PCA Color Augmentation" は 赤と青に対しては 大きく 足したり 引いたりして 緑には少し行う そうして 全体の色合いを同じに保つ これについて何も理解できなくても 心配いらない もし それについて オンラインで検索できるなら AlexNet 論文で詳細を読みたいと思うなら そうできる "PCA Color Augmentation" のオープンソース実装も探すことができて それを使えるだろう 学習データをハードディスクに保存するよね この標識を使おう この丸いバケツは ハードディスクを表す もし 少ない学習セットがあるなら 殆どあらゆることができで それで良しだ でも 本当に大きな学習セットでは 人々はよくこんな方法を使う それは １つのCPUスレッドを使って 連続してハードディスクから画像をロードし つまり ハードディスクから来る画像ストリームを持つことになり そして １つのCPUスレッドを使って乱れを作る "Random Crop" や 変色 や 反転を行う そして 各画像には 最終的に 複数の乱れたバージョンができる この画像を見てみよう 反転しよう 変色等も行う この画像を変色したなら 何か別の色の猫になる つまり CPUスレッドで 連続的にデータをロードし 同じく どのような乱れが必要となるにせよ それを作り
データバッチを 実際にはミニバッチを 作る そして このデータは 連続的に訓練するため 他の別スレッドや別プロセスに渡される これは CPUで行うことができるし 大きなニューラルネットワークを訓練する場合は GPUで行われることが本当に増えてきた "Data Augmentation" を実行する とても一般的な方法は １つのスレッド もしくは 複数のスレッドを使うことで データのロードと乱れの挿入を行う それから それを 他のスレッドや 他のプロセスに渡し それから訓練する そして しばしば これと これは 平行して 実行し得る これで "Data Augmentation" は以上だ ディープニューラルネットワークを訓練する他の部分に似て "Data Augmentation" には いくつかのハイパーパラメータがある どのくらい 変色させるのかとか "Random Crop" に本当はどんなパラメータを使うのかとか コンピュータ ビジョンの他の場合と同じく 始めるのに良いのは 他の人の オープンソース実装を使って どのように "Data Augmentation" を使うか見ることだ
ただし もちろん より多くの変種を得たい場合には 他の誰かのオープンソース実装ではなく 自分自身のハイパーパラメータを使うのが理にかなっているだろう あなたが "Data Augmentation" を使う気になったといいな あなたのコンピュータ ビジョン アプリケーションをより良く動かすために
Derin öğrenme teknikleri bilgisayarlı görü uygulamalarında, doğal diş işlemede, konuşma tanımada, online reklamcılıkta, lojistik, ve daha birçok sorunda başarılı olarak kullanılmıştır. Derin öğrenmenin bilgisayarlı görüye uygulanmasına, ve bilgisayarlı görünün bugün bulunduğu duruma özgün bazı özel hususlar var. Bu videoda sizinle derin öğrenmenin bilgisayarlı görüde uygulanması hakkında izlenimlerimi paylaşacağım. Umarım bu sizin literatürde ve başka yerlerde karşılaşacağınız fikirleri değerlendirmenizde ve kendi bilgisayarlı görü sistemleri oluşturmanızda yardımcı olur. Makine öğrenme problemlerinin çoğunu, elinizde çok az miktarda veri olanlardan ve çok fazla miktarda verinin olduğu problemlere uzanan bir spektruma oturtabilirsiniz. Mesela bugün konuşma tanıma problemleri için gayet yeterli miktarda verimiz var. Yani an azından problemin zorluğuna göre yeterli diyebiliriz. Ama görüntü tanıma ve sınıflandırma problemleri, bir resimdeki bütün imge noktalarına bakıp ne olduğunu anlamayı gerektiren hakikaten zor problemler olduğu için, bugün elimizde gayet büyük veri kümeleri olmasına ve ve hatta 1 milyon görüntüyü aşan çevrimiçi veri kümelerinin olmasına rağmen, hala daha çok veriye ihtiyacımız olduğunu hissediyoruz. Ve nesne algılama gibi bazı problemlerde elimizdeki veri miktarı bundan bile daha az. Bir hatırlatma: görüntü tanıma bir resme bakıp sadece o resimde kedi olup olmadığını belirlemek iken, nense algılamada ise bundan ayrı olarak o nesnenin resmin tam olarak neresinde olduğunu yani sınırlarını belirleyen bir kutu şeklinin çizilmesi gerekiyor. İşte bu nesnenin yerini ve sınırları gösteren kutu şeklinin çizilmesinin bedeli dolayısıyla nesne algılamada nesneleri etiketlemek daha masraflı oluyor. Sonuçta elde nesne algılamak için görüntü tanımadan daha az veri oluyor. Nesne algılama gelecek hafta bahsedeceğimiz bir konu. Makine öğrenme problemlerinin tamamına kuş-bakışı olarak bakınca görülüyor ki genellikle çok fazla veri olduğu zaman insanlar daha basit algoritmalar kullanarak ve fazla el mühendisliği yapmadan idare edebiliyorlar. Eğer çok verimiz varsa, problemin özniteliklerini dikkatlice belirlemek icin uğraşmaya pek gerek olmuyor. Yerine basit bir yapısı olan koskocaman bir sinir ağı kullanılıyor, o sinir ağı da kendi kendine elimizdeki veriden ne öğrenmek istersek öğreniyor. Ama elimizde çok fazla verimiz yoksa o zaman genellikle insanlar kendi eliyle dizayn etmeye çalışıyor. Belki küçümseyici bir ifadeyle el yapımı kurnaz taktikler kullanılıyor. Ama elinizde fazla veri olmadığında bu tip elle tasarlama aslında iyi sonuç almanın en iyi yolu. Makine öğrenme uygulamalarına baktığımda öğrenme algoritmalarının iki bilgi kaynağı olduğunu görüyorum. Bir bilgi kaynağı etiketli veri gözetimli öğrenimde kullanılan (x,y) çiftleri. İkinci bilgi kaynağı da elle tasarlama (el mühendisliği). Bir sistemi el mühendisliği ile tasarlamanın bir çok yolu var. Öznitelikleri dikkatli bir şekilde elle dizayn etmekten, yine elle ve özenli bir şekilde ağın yapısını ya da sisteminizin diğer parçalarını tasarlamaya kadar. Fazla etiketli veriniz olmadığında daha fazla elle tasarlama yapmak gerekiyor. Bilgisayarlı görü, çok zor ve karmaşık bir fonksiyonu öğrenmeye çalışıyor. Ve neredeyse hep yeteri kadar verimizin olmadığını hissediyoruz. Veri kümeleri her ne kadar her geçen gün büyüse de çoğu zaman hala yeterli kalmıyor. Bu yüzden bilgisayarlı görünün geçmişinde, daha fazla el mühendisliği kullanıldı ve bu durum bugün de devam ediyor. İşte yine bu yüzden bilgisayarlı görüntü baya karmaşık ağ yapılarının geliştirilmesine sebep oldu. Çünkü yeteri kadar veri olmayınca daha iyi sonuç almanın tek yolu, daha iyi ağ yapısı geliştirmek ve dizayn etmeye çalışmaktan geçiyor. El mühendisliğinden küçümseyici şekilde bahsettiğimi sanmayın, amacım kesinlikle bu değil. El mühendisliği yeteri kadar veriniz olmadığında kullanılan, çok uğraşlı, hem yetenek ve hem de konuyu sağlam kavramayı gerektiren bir iş. Bilgili ve konuya hakim birisi el tasarımı ile daha iyi sonuçlar elde eder. Yeteri kadar veri bulunmadığında ağı elle dizayn etmek bir projeye çok büyük katkıdır. Ama elinizde yeteri kadar çok veri varsa, el mühendisliğiyle pek vakit geçirilmemeli. Onun yerine öğrenme sistemini kurmaya konsantre olmak daha iyi. Ama bilgisayarlı görü alanı tarihinde hep çok küçük veri kümeleri kullandı, ve dolayısıyla literaturünde de çok fazla elle tasarımı kullandığını görüyoruz. Bilgisayarlı görü işleri için kullanılan veri miktarında son birkaç yıl çok dramatik bir artış oldu, bu da el mühendisliğinin (elle yapılan tasarımın) kullanımında gerçekten baya azalmaya neden oldu. Ancak, ağ yapılarının elle tasarlanması bilgisayarlı görüde hala karşımıza çıkan bir durum. İşte bu yüzden bilgisayarlı görüde, diğer alanlara göre, daha karmaşık hiper parametre ayaları oluyor. Genellikle nesne algılama veri kümeleri genellikle görüntü tanımlama veri kümelerinden daha küçük olduğu içinö haftaya bunun gibi nesne algılama grevlerinden bahsedince göreceğiniz gibi algoritmalar daha da karmaşık, uzmanlaşan özel olarak dizayn edilmiş parçalarla karşımıza çıkacaklar. Neyse ki transfer öğrenme diye adlandırılan bir teknik fazla veri olmadığında işimizi bayağı kolaylaştırıyor. Örnek olarak bir önceki slaytta bahsedilen 'tiger/misty' ya da hiçbiri probleminde o kadar az veri var ki, transfer öğrenme tekniği kullanmak gerekli ve çok faydalı olur. İşte bu da elde olan veri çok az olduğunda kullanılan tekniklerden bir çeşidi. Eğer bilgisayarlı görü literatürüne ve bahsi geçen fikirlere bakarsanız insanların bu konuda çok heyecanlı olduğunu görürsünüz. Denek veri kümelerinde ve yarışmalarda başarılı olmanın çok üstüne düşüyorlar. Bilgisayarlı görü araştırmacıları, bu standart denek veri kümelerinde başarılı olurlarsa makale yayınlamaları daha kolay oluyor. Dolayısıyla bu denek kümelerde başarılı olmak icin çok çalışılıyor. Bunun iyi yönü, en gelişmiş algoritmanın toplum tarafından bulmasını sağlamaları. Ancak bazen makalelerde, denek veri setlerinde performansı arttıran, fakat gerçek bir üretimde ya da uygulamada pek kullanılmayacak tekniklere başvurulduğunu görebilirsiniz. Peki denek veri kümelerinde başarılı olmanın bazı teknik püf noktaları neler. Bu bahsedeceğim teknikleri ben, gerçek müşterilerin kullanacağı, gerçekten üretimde kullanılacak bir sistem geliştirirken, neredeyse hiç kullanmıyorum. Birincisi kümeleme ("ensemble" oluşturma) Bunun anlamı şu: Ne tür bir sinir ağı gerektiğini anladıktan sonra, birkaç tanesini bağımsız olarak eğitip çıktılarının ortalamasını almak. Mesela, 3, ya da 5, ya da 7 sinir ağını rastgele başlatıp, hepsini eğitiyorsunuz, sonra sonuçlarının ortalamasını alıyorsunuz. Bu arada sonuçların ortalamasını alırken şapkalı y kullanmak önemli. Ağırlıklarını ortalamasını almayınız, bu yalnış olur. Mesela 7 tane olan sinir ağlarınıza bakın, onların yaptığı 7 tahminin ortalamasını alın. Bu şekilde %1, ya da %2 daha doğru sonuç alabilirsiniz. Yani bir denek veri kümesinde önceki sonuçlara biraz daha başarılı olmanıza sebep olur. Bazen %1 ya da %2 daha doğru sonuç almak bir yarışmayı kazanmayı sağlayabilir. Ama kümelemek çoğunlukla bir görüntünün 3'ten 15'e kadar bir çok sayıda ağdan geçirilmesini gerektirir. Bu da sizin programınızın işleyiş hızını 3 ya da 15 kat, hatta bazen daha da fazla yavaşlatır. Kümelemek denek kümelerde başarılı olmak ve yarışma kazanmak için kullanılan tekniklerden birisi. Ama gerçek anlamda müşterilerin kullandığı bir ürün için neredeyse hiç kullanılmaz. Özellikle çok büyük bir bilişimsel bütçenizin olmadığını ve bir görüntü için normalden çok daha fazlasını harcama istemediğinizi varsayarsak. Makalelerde görülen ve denek kümelerde performansı arttıran diğer Bir diğer teknik: sınama zamanında yapılan çoklu kırpma yöntemi. Açıklamak gerekirse: Veri çoğaltmanın nasıl yapıldığını görmüştünüz Çoklu kırpma, veri çoğaltma tekniğinin sınama görüntülerine uygulanması. Mesela bir kedi resmine bakalım. Resmin 4 nüshasını alalım, bunlardan 2'si orijinalinin yansıtılmış hali olsun. 10'lu kırpma diye bir yöntem var. Bu yöntemde yapılan şu: Bu merkezi bölgeyi kırpalım ve bu veriyi sınıflandırıcı ağa algoritmaya girdi olarak verelim. Sonra şu sol üst köşedeki bölgeyi kırpalım, onu da sınıflandırıcıdan geçirelim. Sağ üstte yeşille gösterilen bölgeyi de kırpalım Sol alt köşedeki sarı bölgeyi de kırpalım Sağ alt köşedeki portakal renkli bölgeyi de kırpalım. Ve sınıflandırıcı algoritmaya girdi olarak verelim. Sonra da bunun aynısını yansıtılmış resimde de yapalım. Ortadaki bölgeyi kırpıp alalım. Sonra da 4 köşeyi kırpalım. Yani, bir merkezi kırpma burda, bir diğeri şurada 4 köşeden yapılan kırpma, bir burada ve şurada Bütün bunları toplarsak 10 tane kırpmamız oluyor. İşte bu sebeple tekniğin adı 10 kırpma. Yani yapacağınız bu 10 resmi sınıflandırıcı algoritmaya girdi olarak sunup, sonuçların ortalamasını almak. Eger bütçeniz izin veriyorsa bunu siz de yapabilirsiniz. Belki 10 kez kırpmanıza gerek yoktur, daha az miktarda kırpmayla da deneyebilirsiniz. Bu üretimdeki bir sistemde performansı biraz da olsa arttırabilir. Üretimde derken demek istediğim gerçek kullanıcılara sunduğunuz bir sistem. Ama bu teknik te diğerleri gibi daha sık olarak üretimde değil denek veri kümelerinde performansı arttırmak için kullanılan bir yöntem. Kümelemede yaşanan sıkıntılardan bir tanesi bir sürü sinir ağına sahip olmak zorunda kalmanız. Bu da bilgisayarda tabi çok fazla hafıza harcıyor. Çok kırpma tekniğinde ise sadece bir tane ağınız var. Ve dolayısıyla o kadar çok hafıza tüketmiyor. Ama yine de programınızın hızınızı baya azaltıyor. İşte genellikle kullanılan, makalelerde de bahsedilen taktikler bunlar. Her ne kadar denek kümelerde ve yarışmalarda başarılı olmayı sağlasalar da kişisel olarak ben bu taktikleri üretim amaçlı sistemler geliştirirken kullanmıyorum. Bilgisayarlı görü problemlerinin çoğunda az miktarda veri olduğu için başkaları elle birçok ağ yapıları tasarladı. Bilgisayarli görü problemlerinin birisinde işe yarayan bir sinir ağı bazen belki de şaşırtıcı bir şekilde başka görü problemlerin de işe yarayabiliyor. Sonuç olarak, pratik bir sistem oluşturmak icin genellikle başkasının geliştirdiği bir ağ yapısı ile başlanılır. Eğer mümkünse açık kaynak olarak yazılmış bir yapıyı kullanabilirsiniz, çünkü açık kaynak bir program öğrenme katsayısı, "case scheduler" ve diğer gerekli hiper-parametreler gibi bütün titizlik gerektiren detayları düşünüp, en yüksek performans alacak haline getirmiş (optimize etmiş) olabilir. Son olarak, başka birisi haftalarca uğraşıp bir modeli yarım düzine GPU ve bir milyon resim kullanarak eğitmiş olabilir. Başkasının önceden eğittiği modeli kendi veri kümeniz için ince ayarlarla uyarlayıp kullanırsanız, uygulamaya çok daha hızlı geçmiş olursunuz. Ama gerekli bilişim altyapınız ve isteğiniz de varsa tabi ki kendi sinir ağınızı eğitip sıfırdan yaratabilirsiniz. Hele kendi bilgisayarlı görü algoritmanizi icat etmek istiyorsanız, bunu yapmak zorunda olabilirsiniz. Evet, bu haftanın da sonuna geldik. Umarım bu farklı bilgisayarlı görü yapılarını görmek size ne tip tekniklerin işe yaradığı hakkında fikir vermiştir. Bu haftanın programlama ödevlerinde başka bir programlama çerçevesi öğrenip onunla ResNet'i kodlayacaksınız. Umarım o ödevi yapmaktan zevk alırsınız. Görüşmek üzere.
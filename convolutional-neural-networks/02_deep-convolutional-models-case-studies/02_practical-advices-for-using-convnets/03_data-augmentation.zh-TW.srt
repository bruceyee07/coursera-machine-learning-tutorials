1
00:00:00,000 --> 00:00:03,836
大部分的電腦視覺任務可以使用更多的資料

2
00:00:03,836 --> 00:00:07,350
所以資料擴增是一種技術

3
00:00:07,350 --> 00:00:11,995
通常用來增進電腦視覺系統的效能

4
00:00:11,995 --> 00:00:15,535
我認為電腦視覺是一項相當複雜的工作

5
00:00:15,535 --> 00:00:16,745
您必須輸入這個影像

6
00:00:16,745 --> 00:00:21,870
所有這些像素，然後找出是什麼在這照片上

7
00:00:21,870 --> 00:00:26,615
似乎是您需要學習一種相當複雜的函數來作用

8
00:00:26,615 --> 00:00:32,160
實作上，幾乎更多的資料都會對
所有的電腦視覺有所幫助

9
00:00:32,160 --> 00:00:36,580
這不像其他領域，有時候您可以有足夠的資料

10
00:00:36,580 --> 00:00:39,610
不會對於取得更多資料有那麼大的壓力

11
00:00:39,610 --> 00:00:42,428
而在今天，電腦視覺的資料

12
00:00:42,428 --> 00:00:44,655
對於大部分的電腦視覺問題

13
00:00:44,655 --> 00:00:47,655
我們總是覺得資料量不夠

14
00:00:47,655 --> 00:00:50,783
對於所有的機器學習而言，這不一定是對的

15
00:00:50,783 --> 00:00:53,490
但對於電腦視覺而言，這是真的

16
00:00:53,490 --> 00:00:57,120
意思是當您訓練電腦視覺模型時

17
00:00:57,120 --> 00:00:59,880
通常資料擴增是有幫助的

18
00:00:59,880 --> 00:01:02,520
而即便您使用轉移學習

19
00:01:02,520 --> 00:01:05,720
使用別人預先訓練的權重來開始

20
00:01:05,720 --> 00:01:09,055
或是從零開始訓練一個新的模型，都是真的

21
00:01:09,055 --> 00:01:13,755
我們來看一看在電腦視覺的資料擴增

22
00:01:13,755 --> 00:01:19,920
或許最簡單的資料擴增方式是對垂直軸做鏡射

23
00:01:19,920 --> 00:01:22,995
當如果您有這個例子在您的訓練集

24
00:01:22,995 --> 00:01:27,045
您垂直的翻轉這個影像變成右邊

25
00:01:27,045 --> 00:01:29,300
對電腦視覺的任務來說

26
00:01:29,300 --> 00:01:33,475
如果左邊的照片是貓，鏡射的結果也同樣是貓

27
00:01:33,475 --> 00:01:35,610
而如果鏡射的運算

28
00:01:35,610 --> 00:01:38,890
會保存影像中所有的特徵

29
00:01:38,890 --> 00:01:43,395
這就會是一個很好的數據擴增技術

30
00:01:43,395 --> 00:01:47,035
另一個常見的數據擴增技術是隨機裁切

31
00:01:47,035 --> 00:01:48,725
給予這個資料集

32
00:01:48,725 --> 00:01:50,190
我們選一些隨機剪裁

33
00:01:50,190 --> 00:01:51,536
所以您或許選擇這裡

34
00:01:51,536 --> 00:01:56,442
拿這個剪裁，或者拿這部分，成這個剪裁

35
00:01:56,442 --> 00:01:59,460
拿這裡，成為這個剪裁，所以這

36
00:01:59,460 --> 00:02:02,508
給您不同的例子來餵進您的訓練例子

37
00:02:02,508 --> 00:02:04,350
一種不同的隨機剪裁在您的資料集

38
00:02:04,350 --> 00:02:08,310
隨機剪裁並不是一種完美的資料擴增方式

39
00:02:08,310 --> 00:02:14,760
如果隨機剪裁的結果已經不像貓

40
00:02:14,760 --> 00:02:18,110
但實作上，這樣方式作用很好，只要

41
00:02:18,110 --> 00:02:21,920
您的隨機剪裁佔真正影像的合理大小子集

42
00:02:21,920 --> 00:02:26,700
所以鏡射跟隨機剪裁是最常用的，理論上

43
00:02:26,700 --> 00:02:29,580
你還可以旋轉、

44
00:02:29,580 --> 00:02:31,086
剪切影像

45
00:02:31,086 --> 00:02:34,233
就像您對影像這樣做

46
00:02:34,233 --> 00:02:35,883
這樣歪曲

47
00:02:35,883 --> 00:02:39,130
利用不同樣式的局部扭曲等等

48
00:02:39,130 --> 00:02:42,253
全部一起試用也無妨

49
00:02:42,253 --> 00:02:45,805
實作上似乎比較少這樣做

50
00:02:45,805 --> 00:02:48,159
或許因為它們的複雜度

51
00:02:48,159 --> 00:02:58,345
第二種常用方式的資料擴增是色彩偏移

52
00:02:58,345 --> 00:03:01,080
給一張這樣的照片

53
00:03:01,080 --> 00:03:04,950
假設您加入 R

54
00:03:04,950 --> 00:03:09,783
G 跟 B 通道一些扭曲

55
00:03:09,783 --> 00:03:12,260
這個例子，我們在

56
00:03:12,260 --> 00:03:16,410
紅色跟藍色通道加入減去綠色通道的值

57
00:03:16,410 --> 00:03:20,320
所以紅色跟藍色變成紫色

58
00:03:20,320 --> 00:03:23,360
這會讓整個影像帶一點紫色，而

59
00:03:23,360 --> 00:03:27,080
建立一個扭曲的影像在訓練集上

60
00:03:27,080 --> 00:03:29,435
為了描述起見，我

61
00:03:29,435 --> 00:03:32,775
在色彩上做了相當大的改變，實作上

62
00:03:32,775 --> 00:03:39,720
您將 R,G, 跟 B 用一些分佈修改，可以改變小一點

63
00:03:39,720 --> 00:03:43,608
但您做的是，用不同的值在 R,

64
00:03:43,608 --> 00:03:46,410
G, B 上，用它們來扭曲色彩通道

65
00:03:46,410 --> 00:03:48,480
第二個例子

66
00:03:48,480 --> 00:03:50,695
我們讓它們少一點紅

67
00:03:50,695 --> 00:03:52,415
多一點綠跟多一點藍

68
00:03:52,415 --> 00:03:57,109
所以讓影像偏黃

69
00:03:57,109 --> 00:04:01,407
這個，我們讓它多一些藍

70
00:04:01,407 --> 00:04:03,155
就只有多一點

71
00:04:03,155 --> 00:04:04,868
實作上，R

72
00:04:04,868 --> 00:04:09,465
G, B 的數值會從一些機率分佈而來

73
00:04:09,465 --> 00:04:15,370
這樣做的動機是，或許陽光會

74
00:04:15,370 --> 00:04:20,187
偏黃，或許室內照明會偏黃

75
00:04:20,187 --> 00:04:23,730
這很容易會改變影像的色彩

76
00:04:23,730 --> 00:04:27,745
但貓的身份，或者內容的身份

77
00:04:27,745 --> 00:04:30,840
y 標籤，應該要一樣

78
00:04:30,840 --> 00:04:35,798
所以加入這些色彩的扭曲，或者說色彩的偏移

79
00:04:35,798 --> 00:04:46,435
會讓您的學習演算法對於
影像的色彩的改變更健全

80
00:04:46,435 --> 00:04:54,880
給這個課程比較進階學生的一些註解

81
00:04:54,880 --> 00:04:59,997
如果您不懂我將要說的（紅色部分），沒有關係

82
00:04:59,997 --> 00:05:04,280
有不同的方式來對 R, G, 跟 B 取樣

83
00:05:04,280 --> 00:05:08,790
一種方式來建置色彩扭曲是
使用一個稱為 PCA 的演算法

84
00:05:08,790 --> 00:05:11,465
這是稱為 主要成分分析 (Principle Component Analysis)

85
00:05:11,465 --> 00:05:14,345
是我在

86
00:05:14,345 --> 00:05:22,750
Coursera 上的機器學習課程中 (ml-class.org) 談過的

87
00:05:22,750 --> 00:05:29,080
但這些細節實際上是在 AlexNet  論文中

88
00:05:29,080 --> 00:05:36,080
有時候稱為 PCA 色彩擴增

89
00:05:36,080 --> 00:05:41,585
但大概的想法對於 PCA 色彩擴增是，舉例

90
00:05:41,585 --> 00:05:44,160
如果您的影像主要是紫色

91
00:05:44,160 --> 00:05:47,540
如果它主要是紅色，藍色的色調

92
00:05:47,540 --> 00:05:49,010
比較少綠色

93
00:05:49,010 --> 00:05:52,399
那 PCA 色彩擴增

94
00:05:52,399 --> 00:05:55,120
會對紅色跟藍色減去很多

95
00:05:55,120 --> 00:05:56,510
對於綠色改變比較小

96
00:05:56,510 --> 00:06:01,770
似乎要讓全部的色彩，色調一致

97
00:06:01,770 --> 00:06:05,390
如果您不明白這些，不用擔心

98
00:06:05,390 --> 00:06:09,677
但如果您在網上搜尋

99
00:06:09,677 --> 00:06:13,905
您願意的話，您也可以讀一下 AlexNet  論文

100
00:06:13,905 --> 00:06:18,500
您也可以找到一些開源的 PCA 色彩擴增的建置

101
00:06:18,500 --> 00:06:21,685
直接使用

102
00:06:21,685 --> 00:06:30,010
所以，您或許將您的訓練資料儲存在硬碟上，使用這個符號

103
00:06:30,010 --> 00:06:33,705
這個圓筒形符號代表您的硬碟

104
00:06:33,705 --> 00:06:36,000
而如果您有小的訓練集

105
00:06:36,000 --> 00:06:38,336
您可以做任何事，您會沒事的

106
00:06:38,336 --> 00:06:42,785
但如果是很大的訓練集，人們通常會這樣建置

107
00:06:42,785 --> 00:06:52,705
也就是您或許有一個 CPU 執行緒，
不斷地從您的硬碟載入影像

108
00:06:52,705 --> 00:07:00,235
因此，您會有一個影像流
從您的硬碟出來

109
00:07:00,235 --> 00:07:08,535
而您可以做的是或許一個 CPU 執行緒來做這個扭曲

110
00:07:08,535 --> 00:07:11,000
也就是隨機剪裁

111
00:07:11,000 --> 00:07:13,795
或者色彩推移，或者鏡射

112
00:07:13,795 --> 00:07:16,710
但對於每個影像

113
00:07:16,710 --> 00:07:21,000
您或許最終有一些扭曲版本

114
00:07:21,000 --> 00:07:22,950
假設這個影像

115
00:07:22,950 --> 00:07:28,310
我將它鏡射，跟使用色彩推移等等

116
00:07:28,310 --> 00:07:35,120
如果這個影像最終被色彩推移

117
00:07:35,120 --> 00:07:41,470
您會有一個不同顏色的貓

118
00:07:41,470 --> 00:07:48,395
因此您的 CPU 執行緒不斷地載入影像同時

119
00:07:48,395 --> 00:07:56,810
建置一些需要做的扭曲，
變成一個批次，或者很多批次的資料

120
00:07:56,810 --> 00:08:05,045
而這些資料則不斷地傳到一些執行緒或者其他程序

121
00:08:05,045 --> 00:08:08,815
來做訓練，這可以用 CPU 來做，或者

122
00:08:08,815 --> 00:08:14,075
越來越多人使用 GPU 
如果您有很大的神經網路要訓練

123
00:08:14,075 --> 00:08:17,710
所以，相當常見的方式來做

124
00:08:17,710 --> 00:08:22,235
資料擴增是用一個執行緒

125
00:08:22,235 --> 00:08:26,540
或更多的執行緒，來

126
00:08:26,540 --> 00:08:30,635
負責載入資料跟建置扭曲

127
00:08:30,635 --> 00:08:32,840
然後傳給其他的執行緒或者

128
00:08:32,840 --> 00:08:35,935
其他程序來做訓練

129
00:08:35,935 --> 00:08:38,435
而通常，這個跟這個

130
00:08:38,435 --> 00:08:39,650
可以平行執行

131
00:08:39,650 --> 00:08:46,121
所以這就是資料擴增

132
00:08:46,121 --> 00:08:49,970
而類似其他訓練深度神經網路般

133
00:08:49,970 --> 00:08:55,250
資料擴增程序也會有一些超參數，像是

134
00:08:55,250 --> 00:09:00,965
多少色彩推移來建置，真正用什麼參數來做隨機剪裁

135
00:09:00,965 --> 00:09:03,500
類似電腦視覺其他部分

136
00:09:03,500 --> 00:09:06,335
一個好的開始的地方或許是

137
00:09:06,335 --> 00:09:10,920
使用其他人的開源建置
對於他們如何使用資料擴增

138
00:09:10,920 --> 00:09:15,640
但當然，如果您想捕捉更多的變異

139
00:09:15,640 --> 00:09:19,235
您想其他人的開源建置並沒有足夠變異

140
00:09:19,235 --> 00:09:24,230
或許自己調整這些超參數也是合理的

141
00:09:24,230 --> 00:09:27,980
如此，我希望您會使用資料擴增

142
00:09:27,980 --> 00:09:31,250
來讓您的電腦視覺應用作用得更好
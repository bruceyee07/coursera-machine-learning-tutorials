1
00:00:01,040 --> 00:00:05,360
いくつかの 非常に有効な ニューラルネットワークと

2
00:00:05,360 --> 00:00:07,750
ConvNet 構造を学んできた

3
00:00:07,750 --> 00:00:12,040
ここからの数本のビデオでは 実践的なアドバイスをしたい

4
00:00:12,040 --> 00:00:17,056
どのように それらを使うかについて
初めは オープンソース実装を 使うことについてだ

5
00:00:17,056 --> 00:00:21,870
多くのニューラルネットワークは 難しかったり ひどく凝っていて

6
00:00:21,870 --> 00:00:26,660
真似するのが難しい
なぜなら ハイパーパラメータをチューニングするのに とても多くの細かなことがあるからで

7
00:00:26,660 --> 00:00:31,430
例えば学習係数の減衰や他のものが 性能に何らかの違いをもたらすからだ

8
00:00:31,430 --> 00:00:34,890
それは 時々難しいことがあるし さらに言えば

9
00:00:34,890 --> 00:00:40,140
トップ大学の AI やディープラーニングの博士課程の学生でさえ

10
00:00:40,140 --> 00:00:45,130
誰か他の人が公開したものを その論文を読むだけで 真似るのが 難しいことがある

11
00:00:45,130 --> 00:00:47,860
幸運なことに ディープラーニング研究者たちは

12
00:00:47,860 --> 00:00:52,880
日常的に 自分たちの仕事をインターネットに公開している
GitHub等に

13
00:00:52,880 --> 00:00:55,680
あなた自身がそうするように 強く勧める

14
00:00:55,680 --> 00:01:00,420
あなたのコードをオープンソース コミュニティに貢献し返すことを 

15
00:01:00,420 --> 00:01:04,930
でも もし 研究論文を見て その結果の上に 自分で何か作りたい場合は

16
00:01:04,930 --> 00:01:06,500
やった方がいいかもしれないことが一つある

17
00:01:06,500 --> 00:01:11,770
私がよくやることなんだが オープンソース実装をオンラインで探すことだ

18
00:01:11,770 --> 00:01:16,284
なぜなら 作者の実装を手に入れられたならば 通常は

19
00:01:16,284 --> 00:01:20,000
スクラッチでをそれを再実装する場合より 非常に速く進めるからだ

20
00:01:20,000 --> 00:01:23,414
もっとも 時々 スクラッチでそれを再実装するのは

21
00:01:23,414 --> 00:01:24,350
良い練習にもなるけどね

22
00:01:24,350 --> 00:01:27,800
もし 既に GitHubの使い方に慣れているなら

23
00:01:27,800 --> 00:01:32,080
このビデオは あまり必要でも重要でもないだろう

24
00:01:32,080 --> 00:01:35,960
でも もしも GitHubからオープンソース コードをダウンロードするのに慣れていないなら

25
00:01:35,960 --> 00:01:38,300
どれ程簡単か サクッと見せよう

26
00:01:42,589 --> 00:01:46,270
Residual Network に発奮して それを使いたいとしよう

27
00:01:46,270 --> 00:01:49,700
じゃ GitHubで resnets を検索しよう

28
00:01:50,880 --> 00:01:55,870
GitHub に ResNet の多くの異なる実装があるのが分かる

29
00:01:55,870 --> 00:01:58,840
この最初のURLに行くよ

30
00:01:58,840 --> 00:02:02,760
これは ResNet の実装を持つ GitHubリポジトリだ

31
00:02:02,760 --> 00:02:06,346
この GitHubウェブページで 下にスクロールすると ある文章がある

32
00:02:06,346 --> 00:02:09,840
それは そこでの実装についての記述だ

33
00:02:09,840 --> 00:02:13,980
このリポジトリの このGitHubリポジトリは

34
00:02:13,980 --> 00:02:19,090
ResNet 論文のオリジナルの著者によるものだった

35
00:02:19,090 --> 00:02:22,940
そして このコード そのライセンスは MITライセンスだ

36
00:02:22,940 --> 00:02:27,110
クリックして このライセンスの効力を見ることができる

37
00:02:27,110 --> 00:02:29,454
MITライセンスは かなり寛容な方で

38
00:02:29,454 --> 00:02:32,420
とてもオープンなオープンソースライセンスだ

39
00:02:32,420 --> 00:02:37,650
それじゃ 先に進もう
コードをダウンロードするには このリンクをクリックする

40
00:02:37,650 --> 00:02:41,327
これは コードをダウンロードするためのURLだ

41
00:02:41,327 --> 00:02:45,455
ここのボタンを押して URLをクリップボードにコピーする

42
00:02:45,455 --> 00:02:46,527
それから ここに来る

43
00:02:46,527 --> 00:02:53,100
それから しなくてはならないのは "git clone " とタイプして
それから Ctrl+V で URLを入れて Enter を叩く

44
00:02:53,100 --> 00:02:55,450
そうしたら 数秒でダウンロードが終わり

45
00:02:55,450 --> 00:02:58,726
自分のハードディスクに このリポジトリが複製される

46
00:02:58,726 --> 00:03:03,290
このディレクトリに入って 中を見てみよう

47
00:03:03,290 --> 00:03:09,900
私は Windowsよりも Macをよく使うけど
まぁ 見てみよう "prototxt" に行ってみよう

48
00:03:09,900 --> 00:03:15,450
ここは ネットワークを指定するファイルの置き場だ

49
00:03:15,450 --> 00:03:21,722
このファイルを見てみよう
これは とても長いファイルで

50
00:03:21,722 --> 00:03:28,030
101層の ResNet の詳細設定が指定されている

51
00:03:28,030 --> 00:03:32,640
このWebページを見れば

52
00:03:32,640 --> 00:03:36,830
この特定の実装は Cafe フレームワークを使っているようだ

53
00:03:39,112 --> 00:03:42,516
でも このコードの実装の

54
00:03:42,516 --> 00:03:45,930
他のプログラミングフレームワークを使っているものが欲しいなら
同じように それを探すことができるだろう

55
00:03:48,198 --> 00:03:51,752
もし コンピュータ ビジョン アプリケーション を開発しているなら

56
00:03:51,752 --> 00:03:56,030
非常に一般的な進め方は 好みの構造を選んで

57
00:03:56,030 --> 00:03:59,405
もしかしたら それは このコースで学んだものかもしれないし

58
00:03:59,405 --> 00:04:03,415
友人から聞いたり 何かの文献で見たものかもしれない

59
00:04:03,415 --> 00:04:06,035
そして オープンソース実装を探して

60
00:04:06,035 --> 00:04:09,655
GitHub からダウンロードして そこから始める

61
00:04:09,655 --> 00:04:14,300
こうすることの利点の１つは これらのネットワークは 時折

62
00:04:14,300 --> 00:04:18,380
長時間の学習が必要で 他の誰かが 複数のGPUと

63
00:04:18,380 --> 00:04:22,110
とても大きなデータセットを使って
いつくかのネットワークは事前訓練されているかもしれないということだ

64
00:04:22,110 --> 00:04:25,410
そして これによって これらのネットワークに

65
00:04:25,410 --> 00:04:28,930
次のビデオで議論する転移学習を行えることになる

66
00:04:28,930 --> 00:04:33,679
もちろん あなたがコンピュータ ビジョン研究者で
スクラッチで実装するのなら

67
00:04:33,679 --> 00:04:36,623
進め方は 異なるだろう

68
00:04:36,623 --> 00:04:37,615
もし そうなら

69
00:04:37,615 --> 00:04:40,969
自身の成果を オープンソース コミュニティに還元しよう

70
00:04:40,969 --> 00:04:46,037
しかし とても多くの ビジョン 研究者が これらの構造を実装する とても多くの仕事をしてきたので

71
00:04:46,037 --> 00:04:51,183
次のことがよく見られる
オープンソース実装から始めることで

72
00:04:51,183 --> 00:04:55,820
新しいプロジェクトを始めるのが より良く より速くなる ということが
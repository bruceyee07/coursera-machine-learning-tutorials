いくつかの 非常に有効な ニューラルネットワークと ConvNet 構造を学んできた ここからの数本のビデオでは 実践的なアドバイスをしたい どのように それらを使うかについて
初めは オープンソース実装を 使うことについてだ 多くのニューラルネットワークは 難しかったり ひどく凝っていて 真似するのが難しい
なぜなら ハイパーパラメータをチューニングするのに とても多くの細かなことがあるからで 例えば学習係数の減衰や他のものが 性能に何らかの違いをもたらすからだ それは 時々難しいことがあるし さらに言えば トップ大学の AI やディープラーニングの博士課程の学生でさえ 誰か他の人が公開したものを その論文を読むだけで 真似るのが 難しいことがある 幸運なことに ディープラーニング研究者たちは 日常的に 自分たちの仕事をインターネットに公開している
GitHub等に あなた自身がそうするように 強く勧める あなたのコードをオープンソース コミュニティに貢献し返すことを でも もし 研究論文を見て その結果の上に 自分で何か作りたい場合は やった方がいいかもしれないことが一つある 私がよくやることなんだが オープンソース実装をオンラインで探すことだ なぜなら 作者の実装を手に入れられたならば 通常は スクラッチでをそれを再実装する場合より 非常に速く進めるからだ もっとも 時々 スクラッチでそれを再実装するのは 良い練習にもなるけどね もし 既に GitHubの使い方に慣れているなら このビデオは あまり必要でも重要でもないだろう でも もしも GitHubからオープンソース コードをダウンロードするのに慣れていないなら どれ程簡単か サクッと見せよう Residual Network に発奮して それを使いたいとしよう じゃ GitHubで resnets を検索しよう GitHub に ResNet の多くの異なる実装があるのが分かる この最初のURLに行くよ これは ResNet の実装を持つ GitHubリポジトリだ この GitHubウェブページで 下にスクロールすると ある文章がある それは そこでの実装についての記述だ このリポジトリの このGitHubリポジトリは ResNet 論文のオリジナルの著者によるものだった そして このコード そのライセンスは MITライセンスだ クリックして このライセンスの効力を見ることができる MITライセンスは かなり寛容な方で とてもオープンなオープンソースライセンスだ それじゃ 先に進もう
コードをダウンロードするには このリンクをクリックする これは コードをダウンロードするためのURLだ ここのボタンを押して URLをクリップボードにコピーする それから ここに来る それから しなくてはならないのは "git clone " とタイプして
それから Ctrl+V で URLを入れて Enter を叩く そうしたら 数秒でダウンロードが終わり 自分のハードディスクに このリポジトリが複製される このディレクトリに入って 中を見てみよう 私は Windowsよりも Macをよく使うけど
まぁ 見てみよう "prototxt" に行ってみよう ここは ネットワークを指定するファイルの置き場だ このファイルを見てみよう
これは とても長いファイルで 101層の ResNet の詳細設定が指定されている このWebページを見れば この特定の実装は Cafe フレームワークを使っているようだ でも このコードの実装の 他のプログラミングフレームワークを使っているものが欲しいなら
同じように それを探すことができるだろう もし コンピュータ ビジョン アプリケーション を開発しているなら 非常に一般的な進め方は 好みの構造を選んで もしかしたら それは このコースで学んだものかもしれないし 友人から聞いたり 何かの文献で見たものかもしれない そして オープンソース実装を探して GitHub からダウンロードして そこから始める こうすることの利点の１つは これらのネットワークは 時折 長時間の学習が必要で 他の誰かが 複数のGPUと とても大きなデータセットを使って
いつくかのネットワークは事前訓練されているかもしれないということだ そして これによって これらのネットワークに 次のビデオで議論する転移学習を行えることになる もちろん あなたがコンピュータ ビジョン研究者で
スクラッチで実装するのなら 進め方は 異なるだろう もし そうなら 自身の成果を オープンソース コミュニティに還元しよう しかし とても多くの ビジョン 研究者が これらの構造を実装する とても多くの仕事をしてきたので 次のことがよく見られる
オープンソース実装から始めることで 新しいプロジェクトを始めるのが より良く より速くなる ということが
1
00:00:01,040 --> 00:00:05,360
您已經學過很多高效能的神經網路跟

2
00:00:05,360 --> 00:00:07,750
卷積網路架構

3
00:00:07,750 --> 00:00:12,040
我想在下幾段影片中，分享一下一些實作的建議

4
00:00:12,040 --> 00:00:17,056
如何使用它們，從如何使用開源建置開始

5
00:00:17,056 --> 00:00:21,870
實際上很多神經網路是很難且很挑剔去複製

6
00:00:21,870 --> 00:00:26,660
因為很多細節有關調教超參數像是

7
00:00:26,660 --> 00:00:31,430
學習率衰減，跟其他項目會造成績效不同

8
00:00:31,430 --> 00:00:34,890
所以有時候我發現很難，對於

9
00:00:34,890 --> 00:00:40,140
人工智慧、深度學習的博士生，即使在頂尖大學

10
00:00:40,140 --> 00:00:45,130
要複製其他人發表的作品，只讀論文很難

11
00:00:45,130 --> 00:00:47,860
幸運地，很多深度學習研究人員

12
00:00:47,860 --> 00:00:52,880
經常開放他們的開源原始程式在網路上，像是 Github

13
00:00:52,880 --> 00:00:55,680
當您自己做一些東西時，我當然也鼓勵您

14
00:00:55,680 --> 00:01:00,420
考慮貢獻回您的程式到開源社群中

15
00:01:00,420 --> 00:01:04,930
但如果您看一份研究報告，您想建構一些東西在上面

16
00:01:04,930 --> 00:01:06,500
您應該考慮的一件事是

17
00:01:06,500 --> 00:01:11,770
我常常這樣做，找看看線上的開源建置

18
00:01:11,770 --> 00:01:16,284
因為如果您可以得到作者的建置，您通常會

19
00:01:16,284 --> 00:01:20,000
做得很快比起您從頭開始建置

20
00:01:20,000 --> 00:01:23,414
雖然有時候重頭開始建置也會是一個

21
00:01:23,414 --> 00:01:24,350
好的練習

22
00:01:24,350 --> 00:01:27,800
如果您已經很熟悉如何使用 GitHub

23
00:01:27,800 --> 00:01:32,080
這段影片對您或許比較不重要，沒太大幫助

24
00:01:32,080 --> 00:01:35,960
但如果您不習慣從 GitHub 下載開源原始程式

25
00:01:35,960 --> 00:01:38,300
我來很快地演示，這是相當容易的

26
00:01:42,589 --> 00:01:46,270
假設您對殘差網路有興趣，您想使用它

27
00:01:46,270 --> 00:01:49,700
所以我們搜尋 ResNet GitHub 

28
00:01:50,880 --> 00:01:55,870
您實際上會發現 GitHub 上很多 ResNet 的建置

29
00:01:55,870 --> 00:01:58,840
我將用第一個出現的 URL （網址）

30
00:01:58,840 --> 00:02:02,760
這是一個 Github 的儲存庫，用來建置殘差網路

31
00:02:02,760 --> 00:02:06,346
順著 Github 的網頁，您往下捲動會看到一些文字

32
00:02:06,346 --> 00:02:09,840
描述它如何作用跟特定的建置

33
00:02:09,840 --> 00:02:13,980
在這個特定的 GitHub 儲存庫

34
00:02:13,980 --> 00:02:19,090
實際上是 深度殘差網路的原始作者的論文

35
00:02:19,090 --> 00:02:22,940
而這些程式的版權是根據麻省理工學院的版權許可

36
00:02:22,940 --> 00:02:27,110
您可以點擊來看這個版權許可的含義

37
00:02:27,110 --> 00:02:29,454
麻省理工學院版權是一種較寬鬆

38
00:02:29,454 --> 00:02:32,420
一種較開放的開源版權

39
00:02:32,420 --> 00:02:37,650
所以我將繼續，下載這些程式，點擊這個連結

40
00:02:37,650 --> 00:02:41,327
這會給您一個網址來下載程式

41
00:02:41,327 --> 00:02:45,455
我將點擊這個按鈕來複製這個網址到我的剪貼簿

42
00:02:45,455 --> 00:02:46,527
然後到這裡

43
00:02:46,527 --> 00:02:53,100
您要做的是鍵入 git clone 然後
 Ctrl-V 來貼上這個網址，然後按 Enter

44
00:02:53,100 --> 00:02:55,450
等幾秒鐘，它就會下載完

45
00:02:55,450 --> 00:02:58,726
複製一份儲存庫到我們本地硬碟上

46
00:02:58,726 --> 00:03:03,290
讓我們進入這個目錄，看一下

47
00:03:03,290 --> 00:03:09,900
比起 Windows 我比較習慣用 Mac ，但我們來看一下 prototxt

48
00:03:09,900 --> 00:03:15,450
我想這個檔案具體說明了這個網路

49
00:03:15,450 --> 00:03:21,722
讓我們看看這個檔案，因為這是很長的一個檔案

50
00:03:21,722 --> 00:03:28,030
具體描述了深度殘差網路的詳細配置，有 101 層，對吧？

51
00:03:28,030 --> 00:03:32,640
我似乎記得從這個網頁上看到的

52
00:03:32,640 --> 00:03:36,830
這個特定的建置使用 Caffe 框架

53
00:03:39,112 --> 00:03:42,516
但如果您想建置這個程式使用其他

54
00:03:42,516 --> 00:03:45,930
程式框架，您或許也能找到

55
00:03:48,198 --> 00:03:51,752
所以如果您建置一個電腦視覺應用

56
00:03:51,752 --> 00:03:56,030
一個相當常見的工作流程是
選擇一個您喜歡的架構

57
00:03:56,030 --> 00:03:59,405
或許您從這個課程學到的

58
00:03:59,405 --> 00:04:03,415
或許從您的朋友或論文中聽到的

59
00:04:03,415 --> 00:04:06,035
尋找一個開源的建置

60
00:04:06,035 --> 00:04:09,655
從 GitHub 下載，從那裡開始建置

61
00:04:09,655 --> 00:04:14,300
這樣做的好處之一是有時候這些網路

62
00:04:14,300 --> 00:04:18,380
花很久的時間來訓練，其他人或許使用多個 GPU

63
00:04:18,380 --> 00:04:22,110
在很大的資料集上來預先訓練這些網路

64
00:04:22,110 --> 00:04:25,410
這讓您可以用轉移學習來使用

65
00:04:25,410 --> 00:04:28,930
這些網路，我們會在下一段影片中討論

66
00:04:28,930 --> 00:04:33,679
當然，如果您是電腦視覺研究人員
想從頭建置這些東西

67
00:04:33,679 --> 00:04:36,623
那您的工作流程會有所不同

68
00:04:36,623 --> 00:04:37,615
如果您這樣做

69
00:04:37,615 --> 00:04:40,969
請貢獻您的工作回開源社群

70
00:04:40,969 --> 00:04:46,037
但因為已經有很多研究人員
做了很多的建置架構

71
00:04:46,037 --> 00:04:51,183
我發現從開源建置開始

72
00:04:51,183 --> 00:04:55,820
是比較好的方式，當然更快速開始一個新的專案
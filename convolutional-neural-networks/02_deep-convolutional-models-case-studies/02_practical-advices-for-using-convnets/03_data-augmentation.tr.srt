1
00:00:00,000 --> 00:00:03,836
Çoğu bilgisayarlı görme görevi daha fazla veriye ihtiyaç duyar

2
00:00:03,836 --> 00:00:07,350
ve bunun için kullanılan veri çoğaltma, bilgisayarlı görü sistemlerinin

3
00:00:07,350 --> 00:00:11,995
başarımını artırmak için sıklıkla kullanılan yöntemlerden biridir.

4
00:00:11,995 --> 00:00:15,535
Bilgisayarlı görmenin oldukça karmaşık bir görev olduğunu düşünüyorum

5
00:00:15,535 --> 00:00:16,745
Bir görüntüyü girdi olarak verip,

6
00:00:16,745 --> 00:00:21,870
tüm bu imge noktalarını, ve fotoğrafta ne olduğunu anlamaya çalışıyorsunuz.

7
00:00:21,870 --> 00:00:26,615
Ve görünen o ki, bunu yapmak için gayet karmaşık bir fonksiyonu öğrenmeniz gerekiyor.

8
00:00:26,615 --> 00:00:32,160
Ve pratikte, aslında tüm bilgisayarlı görme görevlerinde, daha fazla veriye sahip olmanın yardımı olacaktır

9
00:00:32,160 --> 00:00:36,580
Bu durum, yeterince veriye erişebildiğiniz başka alanlardakine benzemez,

10
00:00:36,580 --> 00:00:39,610
bu alanlarda çalışanlar daha fazla veri elde etmek için o kadar baskı hissetmezler

11
00:00:39,610 --> 00:00:42,428
Ama bugün, bana göre bilgisayarlı görmenin şu anki durumunda

12
00:00:42,428 --> 00:00:44,655
bilgisayarlı görme problemlerinin çoğu için,

13
00:00:44,655 --> 00:00:47,655
elimizdeki veri asla yetmez gibi hissediyoruz.

14
00:00:47,655 --> 00:00:50,783
Ve bu durum tüm makine öğrenme uygulamaları için geçerli değildir,

15
00:00:50,783 --> 00:00:53,490
ancak bu, bilgisayarlı görme için geçerlidir gibi hissediliyor.

16
00:00:53,490 --> 00:00:57,120
Bunun anlamı, bir bilgisayarlı görme modeli eğitirken,

17
00:00:57,120 --> 00:00:59,880
genellikle, veri çoğaltma faydalı olacaktır.

18
00:00:59,880 --> 00:01:02,520
Ve bu durum, öğrenme aktarımı kullanıyor da olsanız

19
00:01:02,520 --> 00:01:05,720
bir başkasının önceden eğitilmiş ağırlıklarını kullanarak başlasanız da

20
00:01:05,720 --> 00:01:09,055
ya da sıfırdan bir şeyi eğitmeye çalışıyor da olsanız geçerlidir.

21
00:01:09,055 --> 00:01:13,755
Şimdi bilgisayarlı görmede çok kullanılan veri çoğaltma yöntemlerine bir bakalım

22
00:01:13,755 --> 00:01:19,920
Belki de en basit veri çoğaltma metodu dikey eksende yansıtmadır

23
00:01:19,920 --> 00:01:22,995
bu durumda, eğer öğrenme kümenizde bu örnek varsa

24
00:01:22,995 --> 00:01:27,045
onu yatayda ters çevirerek sağdaki görüntüyü elde edebilirsiniz

25
00:01:27,045 --> 00:01:29,300
Ve çoğu bilgisayarlı görme görevinde

26
00:01:29,300 --> 00:01:33,475
eğer soldaki fotoğraf kedi ise sağdaki hala kedidir.

27
00:01:33,475 --> 00:01:35,610
Eğer yansıtma işlemi

28
00:01:35,610 --> 00:01:38,890
fotoğrafta tanımaya çalıştığınız şeyi koruyorsa

29
00:01:38,890 --> 00:01:43,395
bu kullanışlı bir veri çoğaltma yöntemidir.

30
00:01:43,395 --> 00:01:47,035
Bir başka yaygın kullanılan yöntem ise rastgele kırpmadır

31
00:01:47,035 --> 00:01:48,725
Yani bu veri kümesi göz önüne alındığında,

32
00:01:48,725 --> 00:01:50,190
birkaç gelişigüzel kırpma yapalım.

33
00:01:50,190 --> 00:01:51,536
Bunu seçebilirsiniz

34
00:01:51,536 --> 00:01:56,442
bu kırpmayı seçebilirsiniz, ya da şunu, ya da bunu

35
00:01:56,442 --> 00:01:59,460
bunu kırpmayı ya da bunu. Yani bu işlem

36
00:01:59,460 --> 00:02:02,508
eğitim kümenizi beslemek için farklı örnekler verir,

37
00:02:02,508 --> 00:02:04,350
veri kümeniz için gelişigüzel kırpmalar.

38
00:02:04,350 --> 00:02:08,310
Diğer taraftan gelişigüzel kırpmalar veri artırımı için mükemmel bir yöntem değildir

39
00:02:08,310 --> 00:02:14,760
Ya tesadüfen kediye çok da benzemeyen şu kırpmayı alırsanız?

40
00:02:14,760 --> 00:02:18,110
ama pratikte bu yöntem çalışır, yeter ki

41
00:02:18,110 --> 00:02:21,920
gelişigüzel kırpmalarınız asıl görüntünün yeterince büyük altkümeleri olsun.

42
00:02:21,920 --> 00:02:26,700
Yani yansıtma ve gelişigüzel kırpma sıklıkla kullanılır ve teorik olarak

43
00:02:26,700 --> 00:02:29,580
döndürme,

44
00:02:29,580 --> 00:02:31,086
görüntüyü yamultma gibi şeyler de kullanabilirsiniz,

45
00:02:31,086 --> 00:02:34,233
yani görüntüye bunu yaparsanız,

46
00:02:34,233 --> 00:02:35,883
görüntüyü böyle bozar,

47
00:02:35,883 --> 00:02:39,130
çeşitli bölgesel bozulmalar oluşturur vb.

48
00:02:39,130 --> 00:02:42,253
muhtemelen karmaşıklıklarından dolayı

49
00:02:42,253 --> 00:02:45,805
pratikte daha az kullanılıyor olsalar da

50
00:02:45,805 --> 00:02:48,159
bütün bunları denemenin bir zararı yoktur.

51
00:02:48,159 --> 00:02:58,345
Veri çoğaltmanın sıklıkla ikinci bir türü de renk kaydırmadır.

52
00:02:58,345 --> 00:03:01,080
Yani, böyle bir fotoğraf verildiğinde,

53
00:03:01,080 --> 00:03:04,950
diyelim ki, R, G,

54
00:03:04,950 --> 00:03:09,783
ve B kanallarına farklı sapmalar ekliyorsunuz.

55
00:03:09,783 --> 00:03:12,260
Bu örnekte kırmızı ve mavi kanallarına ekliyoruz

56
00:03:12,260 --> 00:03:16,410
ve yeşil kanalından çıkarıyoruz.

57
00:03:16,410 --> 00:03:20,320
Böylece kırmızı ve mavi, mor oluşturuyor.

58
00:03:20,320 --> 00:03:23,360
Bu, tüm görüntüyü biraz morlaştırıyor ve bu,

59
00:03:23,360 --> 00:03:27,080
öğrenme kümeniz için bozulmuş bir görüntü oluşturuyor.

60
00:03:27,080 --> 00:03:29,435
Örnek olsun diye, renklerde

61
00:03:29,435 --> 00:03:32,775
aşırıya kaçan değişiklikler yapıyorum. Pratikte

62
00:03:32,775 --> 00:03:39,720
R, G ve B'yi bir dağılımdan seçebilirsiniz ki bu çok küçük de olabilir.

63
00:03:39,720 --> 00:03:43,608
Ama yapacağınız şey, R, G ve B için

64
00:03:43,608 --> 00:03:46,410
farklı değerler alıp, bunları kullanarak renk kanallarını bozmaktır.

65
00:03:46,410 --> 00:03:48,480
İkinci örnekte,

66
00:03:48,480 --> 00:03:50,695
kırmızıyı azaltıp

67
00:03:50,695 --> 00:03:52,415
yeşil ve maviyi artırıyoruz,

68
00:03:52,415 --> 00:03:57,109
böylece, bu, görüntümüzü biraz sarılaştırıyor.

69
00:03:57,109 --> 00:04:01,407
Ve burada, çok daha mavi yapıyoruz,

70
00:04:01,407 --> 00:04:03,155
ve çok az da kırmızı.

71
00:04:03,155 --> 00:04:04,868
Ancak, pratikte, R, G, ve B değerleri

72
00:04:04,868 --> 00:04:09,465
bir olasılık dağılımından çekilir.

73
00:04:09,465 --> 00:04:15,370
Bunun amacı, belki gün ışığı biraz daha sarıdır

74
00:04:15,370 --> 00:04:20,187
ya da belki hedefteki aydınlanma daha sarıdır

75
00:04:20,187 --> 00:04:23,730
bu da, görüntünün rengini kolaylıkla değiştirebilir

76
00:04:23,730 --> 00:04:27,745
ancak, kedi, ya da içeriğin özü,

77
00:04:27,745 --> 00:04:30,840
y etiketi aynı kalır.

78
00:04:30,840 --> 00:04:35,798
Böylelikle, bu renk sapmalarını eklemek, ya da renk kaydırmak,

79
00:04:35,798 --> 00:04:46,435
öğrenme algoritmanızı, görüntülerinizdeki renklerin değişimine daha dirençli bir hale getirir.

80
00:04:46,435 --> 00:04:54,880
Bu dersi alan ileri düzeydeki kişiler için bir ekleme yapacak olursak,

81
00:04:54,880 --> 00:04:59,997
yani birazdan söyleyeceklerimi anlayamazsanız sorun değil,

82
00:04:59,997 --> 00:05:04,280
R, G, ve B'yi örneklemenin başka yolları da vardır

83
00:05:04,280 --> 00:05:08,790
Renk bozulmasını uygulamanın yollarından biri de PCA isimli bir algoritmadır.

84
00:05:08,790 --> 00:05:11,465
Bu, Temel Bileşen Çözümlemesidir.

85
00:05:11,465 --> 00:05:14,345
Bunu, Coursera'daki makina öğrenmesi,

86
00:05:14,345 --> 00:05:22,750
ml-class.org, dersinde anlatmıştım.

87
00:05:22,750 --> 00:05:29,080
Ancak, bunun detayları aslında AlexNet makalesinde verilmiştir

88
00:05:29,080 --> 00:05:36,080
ve buna bazen PCA Renk Artırımı da denir.

89
00:05:36,080 --> 00:05:41,585
ama PCA Renk Artırımının anafikri kabaca,

90
00:05:41,585 --> 00:05:44,160
eğer görüntünüz çoğunlukla mor ise

91
00:05:44,160 --> 00:05:47,540
eğer çoğunlukla kırmızı ve mavi tonları varsa

92
00:05:47,540 --> 00:05:49,010
ve çok az yeşile sahipse

93
00:05:49,010 --> 00:05:52,399
burada, PCA Renk Artırımı,

94
00:05:52,399 --> 00:05:55,120
kırmızı ve maviye çokça ekleme ve çıkarma yapacaktır

95
00:05:55,120 --> 00:05:56,510
ve yeşile nispeten daha az yapacaktır

96
00:05:56,510 --> 00:06:01,770
böylece genel renk tonlamasını aşağı yukarı aynı tutacaktır.

97
00:06:01,770 --> 00:06:05,390
Eğer bunların hiçbirini anlamadıysanız endişelenmeyin.

98
00:06:05,390 --> 00:06:09,677
Ancak eğer bu konuda internet araştırması yaparsanız,

99
00:06:09,677 --> 00:06:13,905
isterseniz AlexNet makalesinin detaylarını okuyabilirsiniz,

100
00:06:13,905 --> 00:06:18,500
ve ayrıca PCA Renk Artırımı için açık kaynak kodlu uygulamalar bulabilirsiniz.

101
00:06:18,500 --> 00:06:21,685
ve kullanabilirsiniz.

102
00:06:21,685 --> 00:06:30,010
Yani, eğitim verilerinizi bir sabit diskte depolayabilir ve bu sembolü kullanır,

103
00:06:30,010 --> 00:06:33,705
bu yuvarlak kova sembolünü sabit diski göstermek için kullanırsak

104
00:06:33,705 --> 00:06:36,000
ve eğer küçük bir öğrenme kümeniz varsa

105
00:06:36,000 --> 00:06:38,336
ne yaparsanız yapın, bir sorununuz olmaz.

106
00:06:38,336 --> 00:06:42,785
Ancak, eğer çok büyük bir öğrenme kümeniz var ise, ki bunu insanlar şöyle uygularlar,

107
00:06:42,785 --> 00:06:52,705
bir CPU izleği (thread) sabit diskten sürekli olarak görüntü yükler.

108
00:06:52,705 --> 00:07:00,235
Yani sabit diskinizden sürekli olarak gelen görüntüleriniz vardır,

109
00:07:00,235 --> 00:07:08,535
Burada yapabileceğiniz şey belki de bir CPU izleği kullanarak bozulmaları uygulamaktır,

110
00:07:08,535 --> 00:07:11,000
bu, gelişigüzel kırpma olabilir

111
00:07:11,000 --> 00:07:13,795
ya da renk kaydırma veya yansıtma,

112
00:07:13,795 --> 00:07:16,710
ve her bir görüntünün

113
00:07:16,710 --> 00:07:21,000
bozulmuş bir sürümünü elde edebilirsiniz.

114
00:07:21,000 --> 00:07:22,950
Mesela bu görüntü için,

115
00:07:22,950 --> 00:07:28,310
öncelikle yansıtma, sonrasında eğer renk bozulması vb. de uygulayacağım

116
00:07:28,310 --> 00:07:35,120
belki bu görüntü de renk kaydırmasına uğramıştır,

117
00:07:35,120 --> 00:07:41,470
böylece farklı renkte bir kediniz olur.

118
00:07:41,470 --> 00:07:48,395
Böylelikle, CPU izleğiniz, veriyi sürekli olarak yüklerken bir yandan da

119
00:07:48,395 --> 00:07:56,810
veri yığınını, ya da küçük veri yığınlarını oluştururken gereken bozulmaları uygular.

120
00:07:56,810 --> 00:08:05,045
Ve bu veriler, öğrenme uygulaması için sürekli olarak başka izleklere ya da işlemlere gönderilir

121
00:08:05,045 --> 00:08:08,815
ve bu, CPU'da ya da eğer öğretmeniz gereken

122
00:08:08,815 --> 00:08:14,075
büyük bir sinir ağı varsa, giderek artan bir şekilde, GPU'da uygulanır.

123
00:08:14,075 --> 00:08:17,710
Bunu uygulamanın sıklıkla kullanılan bir yolu,

124
00:08:17,710 --> 00:08:22,235
veri çoğaltmaya bir izlek,

125
00:08:22,235 --> 00:08:26,540
ya da en çok dört izlek ayrılması;

126
00:08:26,540 --> 00:08:30,635
ki bu izlek(ler) veriyi yüklemek ve bozulmaları uygulamaktan,

127
00:08:30,635 --> 00:08:32,840
ve sonrasında başka bir izleğe ya da

128
00:08:32,840 --> 00:08:35,935
öğrenmeyi yapan başka bir işleme aktarmaktan sorumludur.

129
00:08:35,935 --> 00:08:38,435
Ve genelde, bu ve bu,

130
00:08:38,435 --> 00:08:39,650
paralel olarak çalışabilir.

131
00:08:39,650 --> 00:08:46,121
Veri çoğaltma için durum böyle.

132
00:08:46,121 --> 00:08:49,970
Ve derin bir sinir ağının diğer parçalarında olduğu gibi,

133
00:08:49,970 --> 00:08:55,250
veri çoğaltma işleminin de birkaç üst parametresi vardır, örneğin,

134
00:08:55,250 --> 00:09:00,965
uygulayacağınız renk kaydırma miktarı, ya da gelişigüzel kırpma işlemi için uygulayacağınız yöntem ve kullanacağınız parametrelerin neler olacağı gibi.

135
00:09:00,965 --> 00:09:03,500
Başka bilgisayarlı görme işlerinde olduğu gibi,

136
00:09:03,500 --> 00:09:06,335
veri çoğaltmayı nasıl kullandıklarını görmek için,

137
00:09:06,335 --> 00:09:10,920
başlanacak en iyi yer, bir başkasının açık kaynak kodlu uygulaması olabilir.

138
00:09:10,920 --> 00:09:15,640
Ancak, eğer daha fazla değişmezlik (invariance) yakalamak isterseniz

139
00:09:15,640 --> 00:09:19,235
ve başkalarının açık kaynak kodlu uygulamaları bunu yapmıyorsa,

140
00:09:19,235 --> 00:09:24,230
bu üst parametreleri kendinizin öğretmesi daha akılcı olabilir.

141
00:09:24,230 --> 00:09:27,980
Bunlarla birlikte, umarım, bilgisayarlı görme uygulamalarınızın

142
00:09:27,980 --> 00:09:31,250
daha iyi çalışması için, veri çoğaltmayı kullanıyor olursunuz.
深度學習已經成功地 應用在電腦視覺，自然語言處理 語音辨識，線上廣告 物流，很多很多問題 有一些東西是很獨特的在 深度學習的電腦視覺應用上 有關電腦視覺的狀況 這段影片中，我將跟您分享一些有關深度學習的 電腦視覺的觀察，我希望會幫助您瀏覽一些論文 跟那裡的一些觀念 跟您如何建置您自己的電腦視覺系統 您可以想像大部分的機器學習問題落在 這個光譜內，介於相對少的資料 到您有很多資料 舉例來說，我想今日我們有相當多量的 語音辨識資料，相對於這個問題的複雜度而言、 即使有 合理大小的資料集在於影像辨識或者影像分類 因為影像辨識 就是一個複雜的問題，看所有的像素來找出它是什麼 似乎線上資料集相當大，超過一百萬個影像 感覺似乎我們要更多的資料 而有一些問題像是物件偵測
我們擁有很少的資料 提醒一下，影像辨識的問題是 看這一張照片然後告訴您是不是一隻貓 而物件偵測是看著照片，實際上您要放一個 邊緣框告訴您 照片中的物件在哪裡 而因為要做 邊緣框的成本也就是要標籤物件跟邊緣框很貴 所以我們往往在物件偵測的資料
比影像辨識的資料少 而我們會在下週討論物件偵測 所以如果您看一下機器學習問題的光譜 您看到平均而言，有很多的資料的部分，發現人們 會使用較簡單的演算法，跟比較少的手工工程 因此，比較不需要小心地設計問題的特徵 但取而代之，您可以使用大的神經網路 即使簡單的架構，使用神經網路 就會學習我們要的學習，因為我們有很多的資料 而相對的，當我們沒有那麼多資料， 平均而言，人們會從事更多的手工工程 而如果您不客氣說的話，
您可以說用了很多駭客手法 但我想當您沒有很多資料，那 手工工程實際上是最佳的方式
來獲得最好的績效 所以，當我看一個機器學習的應用時 我想通常我們有的學習演算法
有兩種知識來源 一個知識來源是標籤的資料 實際上的 (x,y) 讓您用來做監督式學習 而第二種知識來源是手工工程 而有很多種方式來做手工工程系統 可以小心的手工設計這些特徵 小心地手工設計 網路架構，或許系統上其他的元件 所以當您沒有太多的標籤資料 您就只能多依賴手工工程 因此，我想電腦視覺試著學習相當複雜的函數 而通常我們覺得我們
沒有足夠的資料來做電腦視覺 即使資料集越來越大 通常我們就是沒有足夠所需的資料 而這是為什麼電腦視覺歷史上 即使在今天都非常依賴手工工程 我想這也是為什麼電腦視覺 開發一些相當複雜的網路架構 正是因為缺少很多資料 為獲取更佳的績效，要花比較多的時間在架構上 或者在網路架構上鬼混 如果您認為我在 貶低手工工程，這不是我的原意 當您沒有足夠的資料，手工工程是一個很難 很有技術，需要很多洞察力的 而有人有此洞見在手工工程的話，
會獲得較好的績效 會在這個專案上有很大的貢獻 做手工工程，當您沒有足夠的資料時 如果您有很多資料的話，我就不會花時間在做手工工程 我會花時間來建立學習系統 但我想從歷史來看，電腦視覺領域使用相當少的資料集 所以傳統的電腦視覺的論文 相當依賴很多的手工工程 即使在幾年前，資料的數量 在電腦視覺的任務中急遽的增加 我想已經造成 手工工程數量明顯減少很多 但還是有很多的手工工程的網路架構在電腦視覺 這也是為什麼您會見到
很複雜的超參數選擇在電腦視覺上 比起其他的領域更複雜 實際上，因為您通常有 較少的物件偵測資料集
比起影像辨識資料集而言 當我們下個禮拜談到物件偵測這個任務 您會看到的演算法 變得相當複雜，使用甚至於更特定的元件 幸運地，有一件事對於少資料有很大的幫助，那就是轉移學習 我會說從前面的投影片中的例子， Tigger, Misty 或兩者皆不是的偵測問題 您只有很少資料，而轉移學習有相當的幫助 所以這是另一種常常使用的技術 當您只有相對少的資料 如果您看電腦視覺論文 看那裡的一些觀念 您也會見到人們很熱衷於 他們真的做得很好在 標準的基準資料集上，然後贏了比賽 而對於電腦視覺研究者而言，如果您在 基準資料做得很棒的話，很容易讓這些論文發表 所以有很多的注意力想
在這些基準資料上做得更好 正面來說 它幫助了整個社群來發現最佳的演算法 但您也會見到一些論文，人們做的讓您在基準資料上做得很好 但您不會真的用在 上線的系統，
或者部署一個這樣的系統在真正的應用上 所以這裡有一些建議
讓您在基準資料上做得很棒 然而這些東西我並不會真的用 在實際服務客戶的系統上 一種方式是總效果 (ensembling) 這個的意思是 在你找到你想要的神經網路之後 獨立訓練多個神經網路並將輸出做平均 所以，隨機初始 3, 5 或 7 個神經網路，然後訓練這些神經網路 然後將他們的輸出平均 順道提一下，平均他們的輸出 y-hat 是很重要的 不要平均他們的權重，這不可行 看著您的假設 7 個神經網路 有 7 個不同的預測，將他們平均 而這會讓您或許 1% 更好，或者  2% 更好 所以會做得好一點點
在一些基準資料上 而這樣做會讓您做得好一點點 或許有時候達到 1%  或者 2% 這會幫助您贏得比賽 但因為總效果的意思是在每個影像做測試 您或許需要跑一個影像經過 可能 3 到 15 個不同的網路，這相當常見 這會減低您的執行時間變成 3 到 15 倍 有時候更長 所以總效果是一個秘訣讓人們 在基準上做得很好來贏得比賽 但我想幾乎不會用在實際應用上來服務客戶 我猜除非您有去大的計算預算，不 擔心燒錢在每個客戶的影像上 另一件事您在論文中見到的
真的會幫助在基準資料上 是多重剪裁在測試時 我的意思是您已經見過資料擴增 而多重剪裁是一種應用資料擴增的方式
在您的測試影像上 舉例來說，假設看到一隻貓的影像 只是將他們複製四次，包含兩次鏡射的版本 有一種技巧稱為 10-剪裁 基本上是假設您拿中間的區域然後剪裁 然後用它跑在分類器中 然後拿左上角的剪裁，跑在分類器中 右上角用綠色顯示 左下角用黃色顯示 右下角用橘色顯示 將他們跑進分類器中 然後在鏡射影像中做同樣的事 是的，我會拿中間剪裁 然後拿四個角落的剪裁 所以，這個是中間剪裁在這裡跟這裡 這裡有四個角落的剪裁在這裡跟這裡 如果您將這些加總，總共會有提過的 10 個剪裁 所以名為  10-剪裁 所以您要做的是，您將這 10  個影像經過 您的分類器然後將結果平均 所以如果您有足夠的計算預算，您可以這樣做 或許不需要到 10-剪裁這麼多 您可以使用一些剪裁 而這或許會給您一些好一點的績效
在真正上線的系統上 上線的系統指的是
您部署到真正客戶手上的系統 但這是另一種技巧用在很多在基準上 作用得很好而不是在上線的系統上 總效果的一個大問題是 您需要保持所有這些不同的網路 所以就是會佔用很多電腦記憶體 對於多重剪裁，至少您只保留一個網路 所以它並不會吃太多的記憶體 但它還是會讓您的執行時間慢很多 所以這些是您看到的技巧，
而在研究論文中也會引用的技巧 但我自己並不會用這些方法在 上線的系統上，即使它們在 基準上做得很好，用來贏得比賽 因為很多的電腦視覺問題是在小的資料區域 其他人也做了很多的手工工程
在網路的架構方面 而一個神經網路在一種視覺問題上作用得很好，或許令人驚訝的 它們在另一種視覺問題上也可以作用 所以，要建立一個實作的系統，通常您會 開始於別人的神經網路架構 可能的話，您可以使用開源建置 因為開源建置或許已經找出 所有挑剔的細節，像是學習率 （聽不清楚） 跟其他超參數 最後，別人或許已經花幾個星期來訓練一個模型 在半打的 GPU 上，用了上百萬個影像 所以使用別人預先訓練的模型，微調在您的資料集上 您通常可以讓一個應用進展更快速 但當然如果您有計算資源跟志趣 不要讓我阻止您從頭開始訓練 實際上，如果您想發明
您自己的電腦視覺演算法 這樣做可能是必需的 所以，這個星期到此結束 我希望看過一些 電腦視覺的架構，幫助您了解哪些是可行的 在這個禮拜的練習，您實際上會學到 另一種程式框架，使用它來建置殘差網路 我希望您享受那個練習，我期待下週與您相見
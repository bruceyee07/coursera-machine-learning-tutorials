大多数的计算机视觉工作能用到很多数据. 因此数据增强是其中一种常用技术 用于来改善计算机视觉系统的性能. 我认为, 计算机视觉是一件十分复杂的工作. 你必须要输入这个图像, 包括所有的像素, 并试着弄清楚图像中内容. 貌似你需要训练出一个相当复杂的函数来做这件事. 事实上, 更多的数据对几乎所有的计算机视觉工作都有好处 这和其他一些领域不一样. 只要获得了足够的数据, 那些领域并不需要获得了更多数据了. 但是我认为如今, 计算机视觉的状态是 对于绝大多数的问题, 我们总是不能获得足够的数据. 这点对机器学习应用来说并不成立, 但对计算机视觉来说是成立的 那么, 这就意味着, 当你在训练计算机视觉模型时, 数据增强常常会有所帮助. 无论你是用迁移学习还是 其他人预先训练好的模型来开头, 或者你试着从零开始训练你自己的模型, 这点都是成立的 让我们看一下计算机视觉中常见的数据增强方法 最简单的数据增强方式应该是(对图片)做垂直镜像. 假设这是你训练集中的一个例子, 通过水平翻转你获得了右边图像. 对大部分计算机视觉工作来说, 如果左边的图片是一只猫, 那镜像后仍然是一只猫. 如果镜像操作 保留了你试着识别的任何图像内容, 这将是一种很好用的数据增强技术. 另一种常用技术是随机裁剪. 就拿这个数据集来说, 让我们来做一些随机裁剪. 你也许会选取那块, 裁剪下来,或者你会选另一块裁剪下来, 或选这块图像,裁剪下来. 这样就获得了不同的示例来扩充你的训练集, 对数据集的不同随机裁剪. 但是随机裁剪并不是一种完美的数据增强方式. 假如你随机裁剪下那块看起来不像猫的一片 但是实际随机裁剪效果还不错 只要随机裁剪的部分占原图片的相当大一部分. 因此,我们经常使用镜像和随机裁剪, 而且理论上, 你还可以用其他方式例如旋转, 剪切图像, 例如你这样处理图片, 使其变形, 引入不同类型的局部弯曲等. 尝试所有这些方式也没有什么坏处, 虽然实践中这些方法不那么常用, 也可能是因为他们的复杂程度. 第二类常用的数据增强方式是色彩变化. 以这个图片为例, 让我们在R(红)G(绿)B(蓝)通道 加入不同的扰动. 在这里示例中,我们 增加了红和蓝色通道的值, 减小了绿色通道值. 红色混蓝色是紫色. 所以这使得整个图片颜色偏紫 这样就给训练集增加了一个干扰后图像. 为了起到展示效果, 我将 对色彩做一些明显的改变, 事实上你在红绿蓝通道上做的干扰也可以非常小. 你要做的是采取不同的红绿蓝数值, 来干扰不同颜色通道. 所以,在第二个示例中, 我们减少红色的值, 增加绿色和蓝色的值, 所以图片变得有点偏黄. 在这个图片里, 我们多增加点蓝色的值, 和一点点红色的值. 在实践中, 红绿蓝的数值 是通过些概率分布来获得的. 这样做的出发点是有时候日光有点偏黄, 或者室内的照明有点偏黄色, 这些都会很轻松的改变图片的颜色, 但是猫的身份或者说内容的身份 标记 y, 应该保持不变. 因此, 通过引入颜色干扰或是色彩变化, 使得 你的学习算法在应对图像色彩变化时健壮性更好. 这里给这个课程的高阶学生们一个建议, 如果你不懂我接下来红笔写的内容也没有关系. 有不同的方式来采样红绿蓝通道值. 其中一种色彩干扰的算法被称为PCA. 即主成成分分析 我在ml-cross.org 机器学习课程中有谈到. 但此算法的细节在AlexNet论文中有描述, 有时也被称为PCA色彩增强. 但那时被称为PCA色彩增强的大致想法是这样的, 如果你的图像主要呈紫色, 即主要是红色和蓝色, 带一点点绿色, 那么PCA色彩增强 会增加和减少许多红色和蓝色值, 却对绿色值做很小修改, 因此来保持整体和之前相同的着色. 如果你不理解上述内容,不用担心. 但是如果你愿意,可以在网上搜索一下, 了解下AlextNet论文中关于此算法的细节, 而且你也可以找到一些关于PCA色彩增强的开源实现, 直接用即可. 你也许将训练样本存在一个硬盘上, 这里用这个圆筒来代表你的硬盘. 如果你有一个小的训练集合, 你可以做任何事情,都没有问题. 但是如果是非常大训练集合, 这是一个很常见的情况 这里你也许会有一个CPU进程, 不断的从硬盘中加载图像. 那么从你的硬盘中有这个图片流进来. 你能做的是用一个CPU进程来实现失真, 可以是随机裁剪, 或色彩变换, 或镜像, 对于每个图像, 你会得到一些它的失真的版本. 这里我们看下这个图片, 我会对它做镜像,或者再做下色彩失真处理等. 而这个图像也许做些色彩变换, 这样你就获得了一些不同色彩的猫图片. 这里你的CPU线程不断的加载数据并做 一些必要的失真处理, 来形成一批或几小批数据. 这些数据会不断的传给其他线程或进程 来实现训练学习, 这些可以在CPU或者GPU上实现, 如果要训练一个大的神经网络, 后者越来越多被用到. 因此, 一种常见的数据增强方法是 通过一个线程, 几乎是四个线程, 用来加载数据并做失真处理, 然后传递给其他线程或 进程来做深度学习训练. 通常,这部分和这部分, 可以并行. 以上, 这就是数据增强. 同其他训练深度神经网络的模块一样, 数据增强也有一些超参数,例如需要实现多大 程度的色彩变化和具体用什么参数来做随机裁剪? 所以, 同计算机视觉的其他部分一样, 直接用其他人用到的数据增强的开源实现 也许是一个很好的开始. 当然,如果你想捕捉到更多细节变化, 并且你认为其他人的开源实现并没有做到这点, 你自己来调整超参数也是有合理的. 以上, 我希望通过数据增强, 可以让你的计算机视觉应用更好的工作.
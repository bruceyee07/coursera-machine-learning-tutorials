Çoğu bilgisayarlı görme görevi daha fazla veriye ihtiyaç duyar ve bunun için kullanılan veri çoğaltma, bilgisayarlı görü sistemlerinin başarımını artırmak için sıklıkla kullanılan yöntemlerden biridir. Bilgisayarlı görmenin oldukça karmaşık bir görev olduğunu düşünüyorum Bir görüntüyü girdi olarak verip, tüm bu imge noktalarını, ve fotoğrafta ne olduğunu anlamaya çalışıyorsunuz. Ve görünen o ki, bunu yapmak için gayet karmaşık bir fonksiyonu öğrenmeniz gerekiyor. Ve pratikte, aslında tüm bilgisayarlı görme görevlerinde, daha fazla veriye sahip olmanın yardımı olacaktır Bu durum, yeterince veriye erişebildiğiniz başka alanlardakine benzemez, bu alanlarda çalışanlar daha fazla veri elde etmek için o kadar baskı hissetmezler Ama bugün, bana göre bilgisayarlı görmenin şu anki durumunda bilgisayarlı görme problemlerinin çoğu için, elimizdeki veri asla yetmez gibi hissediyoruz. Ve bu durum tüm makine öğrenme uygulamaları için geçerli değildir, ancak bu, bilgisayarlı görme için geçerlidir gibi hissediliyor. Bunun anlamı, bir bilgisayarlı görme modeli eğitirken, genellikle, veri çoğaltma faydalı olacaktır. Ve bu durum, öğrenme aktarımı kullanıyor da olsanız bir başkasının önceden eğitilmiş ağırlıklarını kullanarak başlasanız da ya da sıfırdan bir şeyi eğitmeye çalışıyor da olsanız geçerlidir. Şimdi bilgisayarlı görmede çok kullanılan veri çoğaltma yöntemlerine bir bakalım Belki de en basit veri çoğaltma metodu dikey eksende yansıtmadır bu durumda, eğer öğrenme kümenizde bu örnek varsa onu yatayda ters çevirerek sağdaki görüntüyü elde edebilirsiniz Ve çoğu bilgisayarlı görme görevinde eğer soldaki fotoğraf kedi ise sağdaki hala kedidir. Eğer yansıtma işlemi fotoğrafta tanımaya çalıştığınız şeyi koruyorsa bu kullanışlı bir veri çoğaltma yöntemidir. Bir başka yaygın kullanılan yöntem ise rastgele kırpmadır Yani bu veri kümesi göz önüne alındığında, birkaç gelişigüzel kırpma yapalım. Bunu seçebilirsiniz bu kırpmayı seçebilirsiniz, ya da şunu, ya da bunu bunu kırpmayı ya da bunu. Yani bu işlem eğitim kümenizi beslemek için farklı örnekler verir, veri kümeniz için gelişigüzel kırpmalar. Diğer taraftan gelişigüzel kırpmalar veri artırımı için mükemmel bir yöntem değildir Ya tesadüfen kediye çok da benzemeyen şu kırpmayı alırsanız? ama pratikte bu yöntem çalışır, yeter ki gelişigüzel kırpmalarınız asıl görüntünün yeterince büyük altkümeleri olsun. Yani yansıtma ve gelişigüzel kırpma sıklıkla kullanılır ve teorik olarak döndürme, görüntüyü yamultma gibi şeyler de kullanabilirsiniz, yani görüntüye bunu yaparsanız, görüntüyü böyle bozar, çeşitli bölgesel bozulmalar oluşturur vb. muhtemelen karmaşıklıklarından dolayı pratikte daha az kullanılıyor olsalar da bütün bunları denemenin bir zararı yoktur. Veri çoğaltmanın sıklıkla ikinci bir türü de renk kaydırmadır. Yani, böyle bir fotoğraf verildiğinde, diyelim ki, R, G, ve B kanallarına farklı sapmalar ekliyorsunuz. Bu örnekte kırmızı ve mavi kanallarına ekliyoruz ve yeşil kanalından çıkarıyoruz. Böylece kırmızı ve mavi, mor oluşturuyor. Bu, tüm görüntüyü biraz morlaştırıyor ve bu, öğrenme kümeniz için bozulmuş bir görüntü oluşturuyor. Örnek olsun diye, renklerde aşırıya kaçan değişiklikler yapıyorum. Pratikte R, G ve B'yi bir dağılımdan seçebilirsiniz ki bu çok küçük de olabilir. Ama yapacağınız şey, R, G ve B için farklı değerler alıp, bunları kullanarak renk kanallarını bozmaktır. İkinci örnekte, kırmızıyı azaltıp yeşil ve maviyi artırıyoruz, böylece, bu, görüntümüzü biraz sarılaştırıyor. Ve burada, çok daha mavi yapıyoruz, ve çok az da kırmızı. Ancak, pratikte, R, G, ve B değerleri bir olasılık dağılımından çekilir. Bunun amacı, belki gün ışığı biraz daha sarıdır ya da belki hedefteki aydınlanma daha sarıdır bu da, görüntünün rengini kolaylıkla değiştirebilir ancak, kedi, ya da içeriğin özü, y etiketi aynı kalır. Böylelikle, bu renk sapmalarını eklemek, ya da renk kaydırmak, öğrenme algoritmanızı, görüntülerinizdeki renklerin değişimine daha dirençli bir hale getirir. Bu dersi alan ileri düzeydeki kişiler için bir ekleme yapacak olursak, yani birazdan söyleyeceklerimi anlayamazsanız sorun değil, R, G, ve B'yi örneklemenin başka yolları da vardır Renk bozulmasını uygulamanın yollarından biri de PCA isimli bir algoritmadır. Bu, Temel Bileşen Çözümlemesidir. Bunu, Coursera'daki makina öğrenmesi, ml-class.org, dersinde anlatmıştım. Ancak, bunun detayları aslında AlexNet makalesinde verilmiştir ve buna bazen PCA Renk Artırımı da denir. ama PCA Renk Artırımının anafikri kabaca, eğer görüntünüz çoğunlukla mor ise eğer çoğunlukla kırmızı ve mavi tonları varsa ve çok az yeşile sahipse burada, PCA Renk Artırımı, kırmızı ve maviye çokça ekleme ve çıkarma yapacaktır ve yeşile nispeten daha az yapacaktır böylece genel renk tonlamasını aşağı yukarı aynı tutacaktır. Eğer bunların hiçbirini anlamadıysanız endişelenmeyin. Ancak eğer bu konuda internet araştırması yaparsanız, isterseniz AlexNet makalesinin detaylarını okuyabilirsiniz, ve ayrıca PCA Renk Artırımı için açık kaynak kodlu uygulamalar bulabilirsiniz. ve kullanabilirsiniz. Yani, eğitim verilerinizi bir sabit diskte depolayabilir ve bu sembolü kullanır, bu yuvarlak kova sembolünü sabit diski göstermek için kullanırsak ve eğer küçük bir öğrenme kümeniz varsa ne yaparsanız yapın, bir sorununuz olmaz. Ancak, eğer çok büyük bir öğrenme kümeniz var ise, ki bunu insanlar şöyle uygularlar, bir CPU izleği (thread) sabit diskten sürekli olarak görüntü yükler. Yani sabit diskinizden sürekli olarak gelen görüntüleriniz vardır, Burada yapabileceğiniz şey belki de bir CPU izleği kullanarak bozulmaları uygulamaktır, bu, gelişigüzel kırpma olabilir ya da renk kaydırma veya yansıtma, ve her bir görüntünün bozulmuş bir sürümünü elde edebilirsiniz. Mesela bu görüntü için, öncelikle yansıtma, sonrasında eğer renk bozulması vb. de uygulayacağım belki bu görüntü de renk kaydırmasına uğramıştır, böylece farklı renkte bir kediniz olur. Böylelikle, CPU izleğiniz, veriyi sürekli olarak yüklerken bir yandan da veri yığınını, ya da küçük veri yığınlarını oluştururken gereken bozulmaları uygular. Ve bu veriler, öğrenme uygulaması için sürekli olarak başka izleklere ya da işlemlere gönderilir ve bu, CPU'da ya da eğer öğretmeniz gereken büyük bir sinir ağı varsa, giderek artan bir şekilde, GPU'da uygulanır. Bunu uygulamanın sıklıkla kullanılan bir yolu, veri çoğaltmaya bir izlek, ya da en çok dört izlek ayrılması; ki bu izlek(ler) veriyi yüklemek ve bozulmaları uygulamaktan, ve sonrasında başka bir izleğe ya da öğrenmeyi yapan başka bir işleme aktarmaktan sorumludur. Ve genelde, bu ve bu, paralel olarak çalışabilir. Veri çoğaltma için durum böyle. Ve derin bir sinir ağının diğer parçalarında olduğu gibi, veri çoğaltma işleminin de birkaç üst parametresi vardır, örneğin, uygulayacağınız renk kaydırma miktarı, ya da gelişigüzel kırpma işlemi için uygulayacağınız yöntem ve kullanacağınız parametrelerin neler olacağı gibi. Başka bilgisayarlı görme işlerinde olduğu gibi, veri çoğaltmayı nasıl kullandıklarını görmek için, başlanacak en iyi yer, bir başkasının açık kaynak kodlu uygulaması olabilir. Ancak, eğer daha fazla değişmezlik (invariance) yakalamak isterseniz ve başkalarının açık kaynak kodlu uygulamaları bunu yapmıyorsa, bu üst parametreleri kendinizin öğretmesi daha akılcı olabilir. Bunlarla birlikte, umarım, bilgisayarlı görme uygulamalarınızın daha iyi çalışması için, veri çoğaltmayı kullanıyor olursunuz.
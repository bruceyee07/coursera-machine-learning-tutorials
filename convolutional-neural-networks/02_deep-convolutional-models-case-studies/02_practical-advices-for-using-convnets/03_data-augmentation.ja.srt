1
00:00:00,000 --> 00:00:03,836
殆どのコンピュータ ビジョン タスクでは より多くのデータを使用できる

2
00:00:03,836 --> 00:00:07,350
そして "Data Augmentation"(訳注: "水増し"という訳を見かけるが 英語のままの方が一般的のようだ) は 

3
00:00:07,350 --> 00:00:11,995
コンピュータ ビジョン システムで 性能を上げるためによく使われる技術だ

4
00:00:11,995 --> 00:00:15,535
コンピュータ ビジョンは すごく複雑なタスクだ

5
00:00:15,535 --> 00:00:16,745
画像を入力して

6
00:00:16,745 --> 00:00:21,870
全てのピクセルを使い その写真に何が移っているかを当てる

7
00:00:21,870 --> 00:00:26,615
それをやるには 相当複雑な関数を学習する必要があるだろう

8
00:00:26,615 --> 00:00:32,160
実際には 殆どのコンピュータ ビジョン タスクでは より多くのデータを持つことが助けになる

9
00:00:32,160 --> 00:00:36,580
それは 他の分野のように そこそこ十分なデータを得られるのとは違い

10
00:00:36,580 --> 00:00:39,610
より多くのデータを集めるのが そんなに楽しいことじゃ無い

11
00:00:39,610 --> 00:00:42,428
今日の このコンピュータ ビジョンの状態は

12
00:00:42,428 --> 00:00:44,655
主要なコンピュータ ビジョン問題である

13
00:00:44,655 --> 00:00:47,655
十分なデータを得られないと感じていて

14
00:00:47,655 --> 00:00:50,783
全ての機械学習のアプリケーションにとっては そうじゃないけど

15
00:00:50,783 --> 00:00:53,490
コンピュータ ビジョンに対しては そう感じられる

16
00:00:53,490 --> 00:00:57,120
このことは コンピュータ ビジョン モデルを訓練する時

17
00:00:57,120 --> 00:00:59,880
"Data Augmentation" が助けになることを意味する

18
00:00:59,880 --> 00:01:02,520
転移学習を使っていても

19
00:01:02,520 --> 00:01:05,720
他の誰かの 事前学習済み重みから始めても

20
00:01:05,720 --> 00:01:09,055
自分でスクラッチで何かを訓練していても これは正しい

21
00:01:09,055 --> 00:01:13,755
コンピュータ ビジョンにおける一般的な "Data Augmentation" を見てみよう

22
00:01:13,755 --> 00:01:19,920
おそらく 最も単純な "Data Augmentation" は 垂直軸での反転だろう

23
00:01:19,920 --> 00:01:22,995
もし この例が 学習セットにあったなら

24
00:01:22,995 --> 00:01:27,045
横方向にひっくり返して 右にある画像を得る

25
00:01:27,045 --> 00:01:29,300
そして 殆どのコンピュータ ビジョン タスクでは

26
00:01:29,300 --> 00:01:33,475
左の写真が猫なら 反転したのも猫だ

27
00:01:33,475 --> 00:01:35,610
そして もし反転操作で

28
00:01:35,610 --> 00:01:38,890
写真中で認識したいものが変わらないなら

29
00:01:38,890 --> 00:01:43,395
これは 使うべき 良い "Data Augmentation" 技術だろう

30
00:01:43,395 --> 00:01:47,035
もう１つの よく使われる 技術は "Random Crop"(ランダム切り抜き) だ

31
00:01:47,035 --> 00:01:48,725
このデータセットに対し

32
00:01:48,725 --> 00:01:50,190
数個のランダムな切り抜きを行う

33
00:01:50,190 --> 00:01:51,536
ここを切り抜けば

34
00:01:51,536 --> 00:01:56,442
こんな切り抜きが得られて
ここを切り抜けば こんな切り抜きになる

35
00:01:56,442 --> 00:01:59,460
ここを取れば この切り抜きになる こうやって

36
00:01:59,460 --> 00:02:02,508
学習セットに 異なるサンプルを加える

37
00:02:02,508 --> 00:02:04,350
データセットから 異なる ランダムな切り抜きを得る

38
00:02:04,350 --> 00:02:08,310
"Random Crop" は 完璧な "Data Augmentation" では無い

39
00:02:08,310 --> 00:02:14,760
ランダムにこのような切り抜きをした結果 猫に見えなくなったらどうする？

40
00:02:14,760 --> 00:02:18,110
しかし 実際には

41
00:02:18,110 --> 00:02:21,920
"Random Crop" が実際の画像の十分大きなサブセットである限りは やる価値がある

42
00:02:21,920 --> 00:02:26,700
反転と"Random Crop" は よく使われる
そして 理論上は

43
00:02:26,700 --> 00:02:29,580
回転や剪断変形

44
00:02:29,580 --> 00:02:31,086
のようなこともできる

45
00:02:31,086 --> 00:02:34,233
剪断変形とは 画像をこうすることだ

46
00:02:34,233 --> 00:02:35,883
こんな風に歪ませる

47
00:02:35,883 --> 00:02:39,130
色々な局所変形 等も導入できる

48
00:02:39,130 --> 00:02:42,253
これらも 行なうのに害はないが

49
00:02:42,253 --> 00:02:45,805
実際には あまり 使われてはいない

50
00:02:45,805 --> 00:02:48,159
多分 これらは複雑なためだ

51
00:02:48,159 --> 00:02:58,345
２番目のタイプの "Data Augmentation" は 変色だ

52
00:02:58,345 --> 00:03:01,080
このような写真があったら

53
00:03:01,080 --> 00:03:04,950
R G B チャンネルに

54
00:03:04,950 --> 00:03:09,783
異なる 歪みを与える

55
00:03:09,783 --> 00:03:12,260
この例では

56
00:03:12,260 --> 00:03:16,410
赤と青を追加し 緑を減らしている

57
00:03:16,410 --> 00:03:20,320
赤と青は 紫になるので

58
00:03:20,320 --> 00:03:23,360
この画像は 全体として 少しだけ紫よりになり

59
00:03:23,360 --> 00:03:27,080
学習セットに 変化した画像を作った

60
00:03:27,080 --> 00:03:29,435
説明のため

61
00:03:29,435 --> 00:03:32,775
いくぶんか劇的な変更をしたが 実際には

62
00:03:32,775 --> 00:03:39,720
ある分布から R G B をずらす量は とても小さいだろう

63
00:03:39,720 --> 00:03:43,608
結局やることは 異なる値の R G B を

64
00:03:43,608 --> 00:03:46,410
使って 色チャンネルを乱すことだ

65
00:03:46,410 --> 00:03:48,480
それじゃ ２番目の例では

66
00:03:48,480 --> 00:03:50,695
赤を少なくして

67
00:03:50,695 --> 00:03:52,415
緑と青を増やそう

68
00:03:52,415 --> 00:03:57,109
そうしたら 画像は より黄色っぽくなる

69
00:03:57,109 --> 00:04:01,407
それから ここには もっと青を加えたのを

70
00:04:01,407 --> 00:04:03,155
少しだけ 赤も増やして

71
00:04:03,155 --> 00:04:04,868
実際には

72
00:04:04,868 --> 00:04:09,465
R G B は ある確率分布から決められる

73
00:04:09,465 --> 00:04:15,370
これを行う動機としては 太陽光が

74
00:04:15,370 --> 00:04:20,187
少し黄色だったり 室内照明が黄色がかったりすることがある

75
00:04:20,187 --> 00:04:23,730
それは 画像の色を簡単に変えるだろう

76
00:04:23,730 --> 00:04:27,745
しかし 猫の識別は 中身の識別は

77
00:04:27,745 --> 00:04:30,840
ラベル y は 同じままだ

78
00:04:30,840 --> 00:04:35,798
変色による このような色の乱れを入れることは

79
00:04:35,798 --> 00:04:46,435
画像の色の違いに対する アルゴリズムの学習を より堅牢にしてくれる

80
00:04:46,435 --> 00:04:54,880
このコースの上級の学習者へのコメントを１つしよう

81
00:04:54,880 --> 00:04:59,997
赤を使う時 私が言ったことを理解していなくても問題ない

82
00:04:59,997 --> 00:05:04,280
R G B を取得する方法は 色々ある

83
00:05:04,280 --> 00:05:08,790
色の乱れを実装する方法の１つは PCAと呼ばれるアルゴリズムを使うことだ

84
00:05:08,790 --> 00:05:11,465
これは 主成分分析 (Principles Component Analysis) と呼ばれていて

85
00:05:11,465 --> 00:05:14,345
前に話したことがある

86
00:05:14,345 --> 00:05:22,750
機械学習MOOC, ml-class.org, Coursera の機械学習コースでね

87
00:05:22,750 --> 00:05:29,080
でも それの詳細は AlexNet 論文に書かれていて

88
00:05:29,080 --> 00:05:36,080
時々 "PCA Color Augmentation" と呼ばれる

89
00:05:36,080 --> 00:05:41,585
"PCA Color Augmentation" の大まかな考えは 例えば

90
00:05:41,585 --> 00:05:44,160
もし 画像が主に紫だったら

91
00:05:44,160 --> 00:05:47,540
それは 主に 赤と青の色合いを持つ

92
00:05:47,540 --> 00:05:49,010
そして 少しだけ緑だ

93
00:05:49,010 --> 00:05:52,399
"PCA Color Augmentation" は

94
00:05:52,399 --> 00:05:55,120
赤と青に対しては 大きく 足したり 引いたりして

95
00:05:55,120 --> 00:05:56,510
緑には少し行う

96
00:05:56,510 --> 00:06:01,770
そうして 全体の色合いを同じに保つ

97
00:06:01,770 --> 00:06:05,390
これについて何も理解できなくても 心配いらない

98
00:06:05,390 --> 00:06:09,677
もし それについて オンラインで検索できるなら

99
00:06:09,677 --> 00:06:13,905
AlexNet 論文で詳細を読みたいと思うなら そうできる

100
00:06:13,905 --> 00:06:18,500
"PCA Color Augmentation" のオープンソース実装も探すことができて

101
00:06:18,500 --> 00:06:21,685
それを使えるだろう

102
00:06:21,685 --> 00:06:30,010
学習データをハードディスクに保存するよね この標識を使おう

103
00:06:30,010 --> 00:06:33,705
この丸いバケツは ハードディスクを表す

104
00:06:33,705 --> 00:06:36,000
もし 少ない学習セットがあるなら

105
00:06:36,000 --> 00:06:38,336
殆どあらゆることができで それで良しだ

106
00:06:38,336 --> 00:06:42,785
でも 本当に大きな学習セットでは 人々はよくこんな方法を使う

107
00:06:42,785 --> 00:06:52,705
それは １つのCPUスレッドを使って 連続してハードディスクから画像をロードし

108
00:06:52,705 --> 00:07:00,235
つまり ハードディスクから来る画像ストリームを持つことになり

109
00:07:00,235 --> 00:07:08,535
そして １つのCPUスレッドを使って乱れを作る

110
00:07:08,535 --> 00:07:11,000
"Random Crop" や

111
00:07:11,000 --> 00:07:13,795
変色 や 反転を行う

112
00:07:13,795 --> 00:07:16,710
そして 各画像には

113
00:07:16,710 --> 00:07:21,000
最終的に 複数の乱れたバージョンができる

114
00:07:21,000 --> 00:07:22,950
この画像を見てみよう

115
00:07:22,950 --> 00:07:28,310
反転しよう 変色等も行う

116
00:07:28,310 --> 00:07:35,120
この画像を変色したなら

117
00:07:35,120 --> 00:07:41,470
何か別の色の猫になる

118
00:07:41,470 --> 00:07:48,395
つまり CPUスレッドで 連続的にデータをロードし 同じく

119
00:07:48,395 --> 00:07:56,810
どのような乱れが必要となるにせよ それを作り
データバッチを 実際にはミニバッチを 作る

120
00:07:56,810 --> 00:08:05,045
そして このデータは 連続的に訓練するため 他の別スレッドや別プロセスに渡される

121
00:08:05,045 --> 00:08:08,815
これは CPUで行うことができるし

122
00:08:08,815 --> 00:08:14,075
大きなニューラルネットワークを訓練する場合は GPUで行われることが本当に増えてきた

123
00:08:14,075 --> 00:08:17,710
"Data Augmentation" を実行する

124
00:08:17,710 --> 00:08:22,235
とても一般的な方法は １つのスレッド もしくは

125
00:08:22,235 --> 00:08:26,540
複数のスレッドを使うことで

126
00:08:26,540 --> 00:08:30,635
データのロードと乱れの挿入を行う

127
00:08:30,635 --> 00:08:32,840
それから それを 他のスレッドや

128
00:08:32,840 --> 00:08:35,935
他のプロセスに渡し それから訓練する

129
00:08:35,935 --> 00:08:38,435
そして しばしば これと これは

130
00:08:38,435 --> 00:08:39,650
平行して 実行し得る

131
00:08:39,650 --> 00:08:46,121
これで "Data Augmentation" は以上だ

132
00:08:46,121 --> 00:08:49,970
ディープニューラルネットワークを訓練する他の部分に似て

133
00:08:49,970 --> 00:08:55,250
"Data Augmentation" には いくつかのハイパーパラメータがある

134
00:08:55,250 --> 00:09:00,965
どのくらい 変色させるのかとか "Random Crop" に本当はどんなパラメータを使うのかとか

135
00:09:00,965 --> 00:09:03,500
コンピュータ ビジョンの他の場合と同じく

136
00:09:03,500 --> 00:09:06,335
始めるのに良いのは

137
00:09:06,335 --> 00:09:10,920
他の人の オープンソース実装を使って

138
00:09:10,920 --> 00:09:15,640
どのように "Data Augmentation" を使うか見ることだ
ただし もちろん より多くの変種を得たい場合には

139
00:09:15,640 --> 00:09:19,235
他の誰かのオープンソース実装ではなく

140
00:09:19,235 --> 00:09:24,230
自分自身のハイパーパラメータを使うのが理にかなっているだろう

141
00:09:24,230 --> 00:09:27,980
あなたが "Data Augmentation" を使う気になったといいな

142
00:09:27,980 --> 00:09:31,250
あなたのコンピュータ ビジョン アプリケーションをより良く動かすために
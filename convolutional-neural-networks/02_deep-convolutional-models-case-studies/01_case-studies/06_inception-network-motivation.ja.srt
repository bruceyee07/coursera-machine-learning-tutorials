1
00:00:00,000 --> 00:00:03,370
ConvNet の層を設計する場合 選ばなくてはならない

2
00:00:03,370 --> 00:00:05,430
1 x 3 フィルターにしたいか？

3
00:00:05,430 --> 00:00:07,385
それとも 3 x 3 か？  5 x 5 か？

4
00:00:07,385 --> 00:00:09,180
プーリング層を入れたいか？

5
00:00:09,180 --> 00:00:11,920
Inception ネットワークは こう言っている

6
00:00:11,920 --> 00:00:13,095
全部やれば？

7
00:00:13,095 --> 00:00:16,255
これは ネットワーク構造をより複雑にする

8
00:00:16,255 --> 00:00:18,380
だが 著しくうまく動く

9
00:00:18,380 --> 00:00:19,720
これが実際にどう作用するのかを見てみましょう。

10
00:00:19,720 --> 00:00:23,380
例として 入力に

11
00:00:23,380 --> 00:00:26,990
28 x 28 x 192 次元ボリュームがあるとする

12
00:00:26,990 --> 00:00:32,500
Inceptionネットワーク Inception層が 言っているのは

13
00:00:32,500 --> 00:00:36,600
畳み込み層に 欲しいサイズを選ぶ代わりに

14
00:00:36,600 --> 00:00:40,205
さらに 畳み込み層なのか プーリング層なのか ということまで含めて

15
00:00:40,205 --> 00:00:46,795
全てやってしまおう ということだ
もし 1 x 1 畳み込みを使えたら

16
00:00:46,795 --> 00:00:50,750
28 x 28 x いくつか の出力になる

17
00:00:50,750 --> 00:00:56,180
28 x 28 x 64 としよう

18
00:00:56,180 --> 00:00:58,405
ここに ボリュームを得た

19
00:00:58,405 --> 00:01:06,510
さらに 3 x 3 をやれば 28 x 28 x 128 を得る

20
00:01:06,510 --> 00:01:13,975
それから この２番目のボリュームを 最初のボリュームに積み重ねる

21
00:01:13,975 --> 00:01:16,415
次元数を合わせるために

22
00:01:16,415 --> 00:01:19,470
これを Same畳み込みとする

23
00:01:19,470 --> 00:01:23,500
よって 出力の次元は 28 x 28 のままだ

24
00:01:23,500 --> 00:01:26,965
高さと幅においては 入力の次元と同じだ

25
00:01:26,965 --> 00:01:31,300
ただし 28 x 28 x この例では128

26
00:01:31,300 --> 00:01:34,510
多分 あなたは 私が賭けを分散したいと 思っているでしょ

27
00:01:34,510 --> 00:01:36,710
もしかしたら 5 x 5 フィルターの方がいいかも

28
00:01:36,710 --> 00:01:44,755
それもやってみよう そうしたら 28 x 28 x 32 の出力になった

29
00:01:44,755 --> 00:01:49,435
それから 次元数を保つために Same畳み込みを また使う

30
00:01:49,435 --> 00:01:52,715
また もしかしたら 畳み込み層は 欲しくないかもしれない

31
00:01:52,715 --> 00:01:58,560
プーリングを入れよう
もう１つの出力を得るので 同じように積み重ねる

32
00:01:58,560 --> 00:02:05,070
このプーリングは 28 x 28 x 32 を出力する

33
00:02:05,070 --> 00:02:09,195
さて 全ての次元数を合わせるために

34
00:02:09,195 --> 00:02:12,560
最大プーリングにパディングが必要になる

35
00:02:12,560 --> 00:02:15,950
これは 通常の正式なプーリングではない なぜなら

36
00:02:15,950 --> 00:02:19,985
28 x 28 の入力を得て 出力を

37
00:02:19,985 --> 00:02:24,395
他の全ての次元を 28 x 28 に合わせるから

38
00:02:24,395 --> 00:02:31,020
よって Sameパディングで 且つ ストライド１のプーリングを使う必要がある

39
00:02:31,020 --> 00:02:34,230
この詳細は 今は ちょっと変に思えるかもしれない

40
00:02:34,230 --> 00:02:35,520
でも このまま続けよう

41
00:02:35,520 --> 00:02:39,310
後で これら全てを 動かすよ

42
00:02:39,310 --> 00:02:43,170
このような Inceptionモジュールでは

43
00:02:43,170 --> 00:02:46,080
あるボリュームを入力して ある出力をする

44
00:02:46,080 --> 00:02:48,640
この例では これらの数を全て足せば

45
00:02:48,640 --> 00:02:51,705
32 + 32 + 128 + 64

46
00:02:51,705 --> 00:02:54,915
これは 256 だ

47
00:02:54,915 --> 00:03:01,515
つまり 1つの Inception モジュールは 28 x 28 x 129 の入力を

48
00:03:01,515 --> 00:03:06,275
28 x 28 x 256 の出力にする

49
00:03:06,275 --> 00:03:11,300
そして これが Inception モジュールの心臓部で これは

50
00:03:11,300 --> 00:03:13,260
Christian Szegedy, Wei Liu,

51
00:03:13,260 --> 00:03:15,130
Yangqing Jia, Pierre Sermanet,

52
00:03:15,130 --> 00:03:17,750
Scott Reed, Dragomir Anguelov, Dumitru Erhan,

53
00:03:17,750 --> 00:03:20,660
Vincent Vanhoucke そして Andrew Rabinovich の功績だ

54
00:03:20,660 --> 00:03:23,950
基本的なアイデアは

55
00:03:23,950 --> 00:03:30,000
これらのフィルターサイズの1つや プーリング を選んで それに委ねるのではなく

56
00:03:30,000 --> 00:03:33,200
全てを行い 全ての出力を結合する

57
00:03:33,200 --> 00:03:36,270
そして ネットワークに学ばせる
どんなパラメータ値がいいのか

58
00:03:36,270 --> 00:03:40,050
どんなフィルターサイズの組み合わせがいいのか を

59
00:03:40,050 --> 00:03:42,420
ここで ひとつ問題がある

60
00:03:42,420 --> 00:03:44,745
ここで説明した Inception層のだ

61
00:03:44,745 --> 00:03:46,795
それは 計算コストだ

62
00:03:46,795 --> 00:03:48,060
次のスライドでは

63
00:03:48,060 --> 00:03:54,485
ここにある 5 x 5 フィルターの計算コストが

64
00:03:54,485 --> 00:03:56,655
どうなるのか 明らかにしよう

65
00:03:56,655 --> 00:04:02,735
前のスライドの 5 x 5 の塊りに注目しよう

66
00:04:02,735 --> 00:04:07,010
入力は 28 x 28 x 192 ブロックだ

67
00:04:07,010 --> 00:04:14,620
5 x 5  32フィルターのSame畳み込みで 28 x 28 x 32 を出力する

68
00:04:14,620 --> 00:04:18,750
前のスライドでは これは 紫の薄い切れ端になっていた

69
00:04:18,750 --> 00:04:23,035
ここでは より通常の形の 青いブロックで描く

70
00:04:23,035 --> 00:04:30,700
それじゃ この 28 x 28 x 32 の計算コストを見てみよう

71
00:04:30,700 --> 00:04:38,065
出力が 32チャンネルなので 32フィルターだ

72
00:04:38,065 --> 00:04:44,805
各フィルターは 5 x 5 x 192 になる

73
00:04:44,805 --> 00:04:48,410
出力サイズは 28 x 28 x 32 なので

74
00:04:48,410 --> 00:04:53,600
28 x 28 x 32 の数を計算する必要がある

75
00:04:53,600 --> 00:04:58,685
ここのそれぞれに対し この多くの掛け算を行う必要がある いいかい？

76
00:04:58,685 --> 00:05:01,185
5 x 5 x 192

77
00:05:01,185 --> 00:05:03,550
よって 掛け算の総数は

78
00:05:03,550 --> 00:05:07,010
出力値のそれぞれに必要な計算数

79
00:05:07,010 --> 00:05:12,615
掛ける 出力数だ

80
00:05:12,615 --> 00:05:15,330
そして これらの数を全て掛ければ

81
00:05:15,330 --> 00:05:18,790
１億２千万だ

82
00:05:18,790 --> 00:05:24,725
現在のコンピューターなら １億２千万の掛け算を行うことはできるが

83
00:05:24,725 --> 00:05:27,385
それでも かなり高くつく

84
00:05:27,385 --> 00:05:32,390
次のスライドでは 1 x 1 畳み込みを使い

85
00:05:32,390 --> 00:05:34,210
前のビデオで見たよね

86
00:05:34,210 --> 00:05:38,630
計算コストを 大体10倍くらい減らすことができる

87
00:05:38,630 --> 00:05:44,400
１億２千万回の掛け算を 約10分の１にする

88
00:05:44,400 --> 00:05:48,575
120(M)という数値を覚えておいて

89
00:05:48,575 --> 00:05:52,045
次のスライドで見るのと比較するから １億２千万ね

90
00:05:52,045 --> 00:05:58,540
代わりの構造はこうだ この 28 x 28 x 192 入力と

91
00:05:58,540 --> 00:06:03,020
28 x 28 x 32 出力の 代わりはこう

92
00:06:03,020 --> 00:06:05,175
入力ボリュームがあり

93
00:06:05,175 --> 00:06:14,580
1 x 1 畳み込みを使い 192チャンネルを 16チャンネルに減らす

94
00:06:14,580 --> 00:06:17,370
それから このとても小さくしたボリュームに

95
00:06:17,370 --> 00:06:21,915
5 x 5 畳み込みを掛けて 最終出力を得る

96
00:06:21,915 --> 00:06:24,665
入力と出力の次元数は 同じままだ

97
00:06:24,665 --> 00:06:31,280
入力は 28 x 28 x 192 で 出力は 28 x 28 x 32 だ

98
00:06:31,280 --> 00:06:33,865
前のスライドと同じ

99
00:06:33,865 --> 00:06:37,340
でも 今やったのは 左にある 非常に大きなボリュームを

100
00:06:37,340 --> 00:06:42,110
この とても小さい中間のボリュームに縮めた

101
00:06:42,110 --> 00:06:46,740
それは 192チャンネルではなく 16しか持っていない

102
00:06:46,740 --> 00:06:53,000
時々 これは ボトルネック層と呼ばれる

103
00:06:53,600 --> 00:06:59,890
ボトルネックとは 通常 何か一番小さい部分のことだからね

104
00:06:59,890 --> 00:07:04,820
こんな風なガラス瓶があるだろう

105
00:07:04,820 --> 00:07:09,065
ここには コルクが来るよね

106
00:07:09,065 --> 00:07:13,615
そして ボトルネックとは この瓶の一番小さい部分だ

107
00:07:13,615 --> 00:07:18,035
同様に ボトルネック層とは このネットワークの一番小さい部分だ

108
00:07:18,035 --> 00:07:22,625
大きさを再び増やす前に 表現を縮小した

109
00:07:22,625 --> 00:07:26,945
それじゃ ここに含まれる計算コストを見てみよう

110
00:07:26,945 --> 00:07:30,320
1 x 1 畳み込みを適用するには

111
00:07:30,320 --> 00:07:32,510
16フィルターがあるから

112
00:07:32,510 --> 00:07:37,145
各フィルターは 1 x 1 x 192 となり

113
00:07:37,145 --> 00:07:40,170
この 192 は この 192 と合う

114
00:07:40,170 --> 00:07:43,300
28 x 28 x 16 ボリュームの

115
00:07:43,300 --> 00:07:45,870
計算コストは

116
00:07:45,870 --> 00:07:48,205
これだけの出力が必要で

117
00:07:48,205 --> 00:07:54,900
そのそれぞれには 192回の掛け算が要る

118
00:07:54,900 --> 00:07:58,515
1 x 1 x 192 って書いてもいいけど いいね？

119
00:07:58,515 --> 00:08:00,960
それは これだしね
そして 掛け算すると

120
00:08:00,960 --> 00:08:02,650
これは 240万だ

121
00:08:02,650 --> 00:08:04,370
約240万だ

122
00:08:04,370 --> 00:08:05,655
じゃ ２番目は？

123
00:08:05,655 --> 00:08:11,325
これは 最初の畳み込み層のコストだ

124
00:08:11,325 --> 00:08:15,670
２番目の畳み込み層のコストは

125
00:08:15,670 --> 00:08:17,290
これだけ多くの出力があるので

126
00:08:17,290 --> 00:08:19,340
28 x 28 x 32 の出力がある

127
00:08:19,340 --> 00:08:28,200
この出力の各々に 5 x 5 x 16 次元のフィルターを適用しなければならない

128
00:08:28,200 --> 00:08:31,305
よって x 5 x 5 x 16

129
00:08:31,305 --> 00:08:36,520
そして 掛け算すると 10.0
(訳注: 単位をMとして話しているので 10.0M = １千万)

130
00:08:36,520 --> 00:08:41,160
よって 計算数の合計は これらを合わせて

131
00:08:41,160 --> 00:08:45,020
1,240万 だ

132
00:08:45,020 --> 00:08:47,955
じゃ 前のスライドの値と比べよう

133
00:08:47,955 --> 00:08:53,095
１億２千万回の掛け算の計算コストが

134
00:08:53,095 --> 00:08:55,810
約10分の１に減って

135
00:08:55,810 --> 00:08:59,335
1,240万回の掛け算になった

136
00:08:59,335 --> 00:09:02,345
必要な足し算の数は

137
00:09:02,345 --> 00:09:06,305
必要な掛け算の数に比べて 非常に小さい

138
00:09:06,305 --> 00:09:10,230
だから 掛け算の数だけ数えた

139
00:09:10,230 --> 00:09:13,490
纏めると ニューラルネットワークの層を作る場合

140
00:09:13,490 --> 00:09:16,140
決める必要は無い

141
00:09:16,140 --> 00:09:17,820
1 x 1 か

142
00:09:17,820 --> 00:09:20,095
3 x 3 か 5 x 5 か それとも プーリング層か

143
00:09:20,095 --> 00:09:23,560
Inception モジュールが それらを全部やらせてくれる

144
00:09:23,560 --> 00:09:25,645
結果を結合してくれて

145
00:09:25,645 --> 00:09:28,720
それから 計算コストの問題に対処した

146
00:09:28,720 --> 00:09:32,460
ここで見たのは どのように 1 x 1 畳み込み層を使うかだ

147
00:09:32,460 --> 00:09:34,585
このボトルネック層を作成して

148
00:09:34,585 --> 00:09:38,115
計算コストを著しく減らすことができる

149
00:09:38,115 --> 00:09:39,725
もしかしたら 疑問に思っているかもしれない

150
00:09:39,725 --> 00:09:43,370
表現のサイズを そんなに劇的に縮めて

151
00:09:43,370 --> 00:09:46,730
ニューラルネットワークの性能を損ねないのか？と

152
00:09:46,730 --> 00:09:52,440
この理由でボトルネック層を実装する限りにおいては

153
00:09:52,440 --> 00:09:56,530
表現のサイズを極端に減らすことができ

154
00:09:56,530 --> 00:09:59,240
性能を損ねないことが 分かっている

155
00:09:59,240 --> 00:10:01,700
そして 計算を節約できる

156
00:10:01,700 --> 00:10:07,835
これらが Inception モジュールのキーとなるアイデアだ

157
00:10:07,835 --> 00:10:09,790
次のビデオでは

158
00:10:09,790 --> 00:10:14,100
これらを 合わせて フル Inception ネットワークがどんなだか 見てみよう
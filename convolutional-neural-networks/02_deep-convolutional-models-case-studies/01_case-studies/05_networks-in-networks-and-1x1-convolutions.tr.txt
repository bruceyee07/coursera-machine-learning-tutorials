Evrişim ağı(ConvNet) mimarileri tasarlarken, gerçekten yardımcı olan fikirlerden birisi, 1x1 evrişim(convolution) kullanmaktır. Şimdi, merak edebilirsiniz 1x1 evrişim ne yapıyor? Bu yalnızca sayılarla çarpmak değil mi? Bunu yapmak komik bir şey gibi görünüyor. Aslında öyle değil Hadi inceleyelim. Burada 1x1 bir filtre var buraya 2 koyalım, ve bu 6x6 görüntüyü alırsanız 6x6x1 ve bunu 1x1 filtre ile evriştirirseniz sadece görüntüyü alıp 2 ile çarpmış olursunuz Yani, bir, iki, üç iki, dört ve altı olur 1x1 filtre ile evrişim uygulamak özellikle faydalı görünmüyor. Yalnızca bir sayı ile çarpıyorsunuz Ancak bu 6x6x(1) kanallı görüntüler için geçerli 1 yerine 6x6x(32) olsaydı, 1x1 filtre ile evriştirmek daha mantıklı bir şey yapabilir. Ve özellikle, 1x1 evrişimin ne yapacağı, buradaki 36 farklı pozisyona bakarak, soldaki 32 sayı ile filtrenin içindeki 32 sayıyı eleman eleman çarpacak ve sonra da ReLU aktivasyon fonksiyonu uygulayacak Bu 36 pozisyondan bir tanesine bakarsak belki bu yığından(volume) bir dilim, bu 32 sayıyı alıyorsunuz ve bu yığındaki 1x1'lik bir dilim ile çarpıyorsunuz ve en sonunda çıktının içine yazılan 1 rakam elde ediyorsunuz Aslında, 1x1x32'lik filtrenin içindeki 32 sayıyı düşünmenin bir yolu girdi olarak alan bir nöron varmış gibi 32 sayının her birini bu dilimdeki 32 sayıyla çarparak aynı pozisyondaki, yükseklik genişlik, 32 farklı kanalla 32 ağırlıkla/parametreyle çarpar ve sonra da ReLU aktivasyon fonksiyonunu uygulayarak, buradaki ilgili çıktıyı üretir Ve daha genel olarak, eğer sadece 1 filtreniz yoksa birçok filtreniz varsa o zaman sadece bir birim varmış gibi değil, birçok birim varmış gibi bir dilimdeki bütün sayıları girdi olarak alır ve sonra 6x6xn_f filtre sayısı kadar çıktıyı oluşturur 1x1 evrişimin düşünmenin yollarından biri basitçe tam-bağlantılı sinir ağını alıp bu 62 pozisyonun her birine uygulamak. Peki bu tam-bağlantılı sinir ağı ne yapıyor? 32 sayıyı girdi olarak alıyor ve n_filters çıktı üretiyor. Sanırım bu notasyonda bu aslında nc(l+1) eğer bu bir sonraki katman ise Ve bunu 36 pozisyonun her birine yapmak, 6 x 6 pozisyonun her birine, 6x6xn_f(filtre sayısı) boyutlu bir çıktı elde edersiniz. Ve bu girdi yığınınızda(volume) oldukça önemli bir hesaplamaya yol açabilir. Bu fikir genelde 1x1 evrişim olarak biliniyor ama bazende ağ içinde ağ olarakta adlandırılıyor, ve Min Lin, Qiang Chen, ve Schuicheng Yan. tarafından bu makalede anlatılmış. Ve makaledeki bu mimarinin detayları çok fazla kullanılmasada bu 1x1 evrişim fikri veya ağ içinde ağ fikri çok etkili olmuştur, diğer birçok sinir ağı mimarisi etkilemiştir Bir sonraki videoda göreceğimiz Inception Ağı(Network)'da dahil olmak üzere. 1x1 evrişimin nerelerde faydalı olduğu görmek adına bir örnek vermek için, burada yapabileceğiniz bir şey var. Diyelim ki 28x28x192'lik bir yığınınız var. Eğer yükseklik ve genişliği küçültmek isterseniz örnekleme(pooling) katmanı kullanabilirsiniz. Bunun nasıl yapılacağını biliyoruz. Ancak kanal sayısı çok büyük ve bunu küçültmek istiyoruz. Bunu 28x28x32 boyutlu bir yığına nasıl küçültebiliriz? Yapabileceğiniz şey 1x1'lik 32 tane filtre kullanmak Ve teknik olarak, her filtre 1x1x192 boyutlu olur, çünkü filtrenizdeki kanal sayısı girdideki yığının kanal sayısıyla eşleşmek zorunda. Ancak 32 filtre kullanıyorsunuz ve bu işlemin çıktısı 28x28x32'lik bir yığın olur. Yani bu nc'yi küçültmenin bir yolu, nH ve nW'yi küçültmek için kullandığımız örnekleme katmanlarının aksine. Bu yığınların yüksekliği ve genişliği. Ve daha sonra bu 1x1 evrişimlerin, kanal sayısını küçültmeye yardımcı olduklarını ve böylece bazı ağlarda hesaplamadan tasarruf edildiğini göreceğiz Ve tabiki, kanal sayısını 192 tutmak isterseniz bu da mümkün ve 1x1 evrişimin etkisi sadece doğrusalsızlık(non-linearity) eklemek olur. Bu da ağınıza 28x28x192'lik girdi alan ve 28x28x192'lik çıktı üreten ve daha karmaşık bir fonksiyon öğrenmenize yardımcı olan bir katman eklemenize izin verir. İşte, 1x1'lik evrişim katmanının oldukça önemli bir şey yaptığını ve sinir ağlarına doğrusalsızlık(non-linearity) eklediğini ve kanal sayısını isterseniz düşürmeye veya aynı tutmaya, veya isterseniz arttırmaya kullanılabileceğini gördük. Sonra, bunun Inception Ağını(Network) oluşturmak için ne kadar yararlı olacağını göreceksiniz. Buna bir sonraki videoda bakalım 1x1 evrişim işleminin aslında oldukça önemli bir işlem yaptığını ve yığınlarınızdaki kanal sayısını düşürebileceğinizi veya aynı tutabileceğinizi ve hatta isterseniz arttırabileceğiniz gördük. Bir sonraki videoda, Bunun Inception Ağlarını oluşturmak için nasıl kullanılabileceğini göreceksiniz. Hadi bir sonraki videoya geçelim.
1
00:00:00,010 --> 00:00:03,935
談到有關於卷積網路的架構

2
00:00:03,935 --> 00:00:09,140
有一種觀念相當有幫助是使用 1乘1 卷積

3
00:00:09,140 --> 00:00:10,685
現在，您或許會想

4
00:00:10,685 --> 00:00:13,035
一個 1乘1 卷積能做什麼？

5
00:00:13,035 --> 00:00:15,170
不就是乘上一個數字嗎？

6
00:00:15,170 --> 00:00:17,150
似乎是個很可笑的方式

7
00:00:17,150 --> 00:00:18,680
其實不然

8
00:00:18,680 --> 00:00:20,223
讓我們來看看

9
00:00:20,223 --> 00:00:22,740
您將見到 1乘1 過濾器

10
00:00:22,740 --> 00:00:24,970
我們放一個數字 2 在這裡

11
00:00:24,970 --> 00:00:27,460
而如果您拿這個 6乘6 影像

12
00:00:27,460 --> 00:00:31,310
6乘6乘1 跟 1乘1乘1 過濾器卷積

13
00:00:31,310 --> 00:00:33,940
您最終只是拿這個影像的數字乘 2

14
00:00:33,940 --> 00:00:37,580
所以 1, 2, 3 會變成 2, 

15
00:00:37,580 --> 00:00:40,190
4, 6 等等

16
00:00:40,190 --> 00:00:43,940
所以卷積一個 1乘1 過濾器

17
00:00:43,940 --> 00:00:45,350
好像不特別有用

18
00:00:45,350 --> 00:00:47,615
您只是乘上一個數字

19
00:00:47,615 --> 00:00:53,635
但因為這是 6乘6乘1 通道的影像

20
00:00:53,635 --> 00:00:58,415
如果您看的是 6乘6乘32 而不是一個通道

21
00:00:58,415 --> 00:01:04,995
那跟一個 1乘1 過濾器做卷積，可能就會有意義

22
00:01:04,995 --> 00:01:08,945
特別是，一個 1乘1 卷積會做的是它會

23
00:01:08,945 --> 00:01:13,620
看 36 個不同的位置中每一個位置

24
00:01:13,620 --> 00:01:16,720
它會做一個逐元素相乘介於

25
00:01:16,720 --> 00:01:21,185
在左邊的 32 個數字跟過濾器的 32 個數字

26
00:01:21,185 --> 00:01:26,230
之後再應用 ReLU 非線性函數

27
00:01:26,230 --> 00:01:29,405
所以只看 36 個位置中一個

28
00:01:29,405 --> 00:01:32,840
或許是一段像這個容積

29
00:01:32,840 --> 00:01:41,525
您拿這 36 （應該是 32) 個數字，跟一段容積相乘

30
00:01:41,525 --> 00:01:43,535
您最後會得到

31
00:01:43,535 --> 00:01:49,945
一個單獨的實數，然後畫在輸出上面像這樣

32
00:01:49,945 --> 00:01:52,535
實際上，用一種方式來看

33
00:01:52,535 --> 00:01:56,645
這 32 個數字在這個 1乘1乘32 過濾器中

34
00:01:56,645 --> 00:02:01,020
就像您有一個神經元，拿一個輸入

35
00:02:01,020 --> 00:02:06,770
32 個數字，乘上每一個這 32 個數字

36
00:02:06,770 --> 00:02:12,285
同一個位置的這一段，但在不同的通道上

37
00:02:12,285 --> 00:02:15,665
將它們乘上 32 個權重，應用

38
00:02:15,665 --> 00:02:22,115
ReLU 非線性函數，然後輸出相對的值在這裡

39
00:02:22,115 --> 00:02:28,875
更一般而言，如果您不只用一個過濾器

40
00:02:28,875 --> 00:02:31,020
如果使用多個過濾器

41
00:02:31,020 --> 00:02:36,240
就像這樣做，您就不只會有一個單元，而是多個單元

42
00:02:36,240 --> 00:02:40,950
所有輸入數字的一段

43
00:02:40,950 --> 00:02:49,530
將它們建置起來，變成一個輸出為 6乘6乘 過濾器的數目

44
00:02:49,530 --> 00:02:53,260
1乘1 卷積可以用一種方式來想像

45
00:02:53,260 --> 00:02:59,115
基本上是用一個全連結的神經網路

46
00:02:59,115 --> 00:03:04,015
然後應用到這 62 (應該是 36) 個不同位置上

47
00:03:04,015 --> 00:03:05,920
而這個全連結神經網路做的是

48
00:03:05,920 --> 00:03:13,210
輸入 32 個數字然後
輸出過濾器數目的數字

49
00:03:13,210 --> 00:03:14,555
我想依據您所使用的符號

50
00:03:14,555 --> 00:03:15,910
這應該是 nc[l+1]

51
00:03:15,910 --> 00:03:19,440
因為是下一層

52
00:03:19,440 --> 00:03:22,710
在 36 個位置上每個都這樣做

53
00:03:22,710 --> 00:03:24,160
在 6乘6 每個位置上

54
00:03:24,160 --> 00:03:29,850
您最後的輸出會是 6乘6乘過濾器的數目

55
00:03:29,850 --> 00:03:35,830
而這會帶給您在輸入容積上
進行非顯而易見的計算

56
00:03:35,830 --> 00:03:40,755
這種觀念通常稱為 1乘1 卷積

57
00:03:40,755 --> 00:03:46,655
有時候也會稱為網路中的網路

58
00:03:46,655 --> 00:03:49,468
這是在這份論文中描述

59
00:03:49,468 --> 00:03:53,485
作者是 Min Lin, Qiang Chen, 跟 Schuicheng Yan

60
00:03:53,485 --> 00:03:58,400
即使這份論文中的詳細架構
並沒有被廣泛應用

61
00:03:58,400 --> 00:04:01,460
但這個 1乘1 卷積或者

62
00:04:01,460 --> 00:04:05,300
有時候稱為網路中的網路的觀念，造成重大影響

63
00:04:05,300 --> 00:04:08,090
影響到很多其他的神經網路架構

64
00:04:08,090 --> 00:04:11,860
包括我們在下一段影片要介紹的Inception網路

65
00:04:11,860 --> 00:04:16,180
但為了要您了解為什麼 1乘1 卷積是有用的

66
00:04:16,180 --> 00:04:18,443
這是您可以做的

67
00:04:18,443 --> 00:04:23,070
假設您有 28乘28乘192 容積

68
00:04:23,070 --> 00:04:25,715
如果您想縮小高度跟寬度

69
00:04:25,715 --> 00:04:27,310
您可以使用池層

70
00:04:27,310 --> 00:04:28,800
我們已經知道可以怎麼做

71
00:04:28,800 --> 00:04:34,265
但如果是通道的數目太大呢？我們想要縮小它

72
00:04:34,265 --> 00:04:40,260
您如何將它縮成 28乘28乘32 維度容積

73
00:04:40,260 --> 00:04:48,058
您可以用 32 個 1乘1 的過濾器

74
00:04:48,058 --> 00:04:52,700
技術上而言，每個過濾器會是 1乘1乘192

75
00:04:52,700 --> 00:04:55,440
因為您過濾器的通道數目

76
00:04:55,440 --> 00:04:58,570
要等於輸入容積的通道數目

77
00:04:58,570 --> 00:05:08,035
但您使用了 32 個過濾器，所以輸出會是 28乘28乘32 容積

78
00:05:08,035 --> 00:05:12,850
這也是讓您縮小 nc 的方式

79
00:05:12,850 --> 00:05:17,750
而池層，是我用來縮小 nH 跟 nW 

80
00:05:17,750 --> 00:05:20,436
也就是容積的高度跟寬度

81
00:05:20,436 --> 00:05:23,510
我們以後會看到，這個 1乘1 卷積的觀念

82
00:05:23,510 --> 00:05:28,670
讓您可以縮小通道的數目，所以

83
00:05:28,670 --> 00:05:31,450
能夠節省在一些網路上的一些計算力

84
00:05:31,450 --> 00:05:37,165
但當然，如果您要保留通道的數目為 192，也是可以

85
00:05:37,165 --> 00:05:41,470
而影響所及，這個 1乘1 卷積只是加入非線性

86
00:05:41,470 --> 00:05:45,740
它讓您的網路學習更複雜的函數，加入

87
00:05:45,740 --> 00:05:52,423
另一層，輸入為 28乘28乘192 而輸出為 28乘28乘192

88
00:05:52,423 --> 00:05:54,620
所以這是

89
00:05:54,620 --> 00:05:58,280
1乘1 卷積層實際上做一些非顯而易見的事

90
00:05:58,280 --> 00:06:01,190
且加入非線性到您的神經網路

91
00:06:01,190 --> 00:06:04,525
讓您降低或者如果您要保持一樣，

92
00:06:04,525 --> 00:06:08,565
或增加通道數目在您的容積上

93
00:06:08,565 --> 00:06:13,960
接下來您會見到這在 Inception 網路中是很有用的

94
00:06:13,960 --> 00:06:16,860
我們在下一段影片會繼續談這部分

95
00:06:16,860 --> 00:06:22,145
所以，現在您見到了 1乘1 卷積運算如何是一個

96
00:06:22,145 --> 00:06:26,255
相當非顯而易見的運算，而它讓您能夠

97
00:06:26,255 --> 00:06:28,640
縮小您容積上的通道數目

98
00:06:28,640 --> 00:06:31,270
保持一樣，甚至您想增加也可以

99
00:06:31,270 --> 00:06:33,077
在下一個影片中

100
00:06:33,077 --> 00:06:36,140
您會見到這可以用來幫助

101
00:06:36,140 --> 00:06:39,670
建立 Inception 網路，我們繼續下一段
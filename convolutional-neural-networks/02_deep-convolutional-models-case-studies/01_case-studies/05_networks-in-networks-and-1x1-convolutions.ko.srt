1
00:00:00,010 --> 00:00:03,935
컨텐츠 아키텍처 설계에 있어서,

2
00:00:03,935 --> 00:00:09,140
정말 도움되는 방안은 1 x 1 컨볼루션을 사용하는 것입니다.

3
00:00:09,140 --> 00:00:10,685
이제, 궁금하실 텐데요,

4
00:00:10,685 --> 00:00:13,035
1 x 1 컨볼루션은 무엇일까요?

5
00:00:13,035 --> 00:00:15,170
그냥 숫자를 곱하는 거 아닐까요?

6
00:00:15,170 --> 00:00:17,150
재미있어 보이는데요,

7
00:00:17,150 --> 00:00:18,680
사실 그렇진 않은 것 같죠. 한 번 보시죠.

8
00:00:18,680 --> 00:00:20,223
한번 자세히 살펴볼까요.

9
00:00:20,223 --> 00:00:22,740
1 x 1 필터가 있습니다.

10
00:00:22,740 --> 00:00:24,970
숫자 2가 여기 들어가있습니다.

11
00:00:24,970 --> 00:00:27,460
그리고 6 x 6 이미지,

12
00:00:27,460 --> 00:00:31,310
즉, 6 x 6 x 1 이미지를 1 x 1 x 1 필터와 컨벌브하면,

13
00:00:31,310 --> 00:00:33,940
이미지를 취해서 여기에 2를 곱하면 됩니다.

14
00:00:33,940 --> 00:00:37,580
따라서 1, 2, 3 은 2, 4, 6

15
00:00:37,580 --> 00:00:40,190
이렇게 되겠죠.

16
00:00:40,190 --> 00:00:43,940
따라서, 1 x 1필터의 컨볼루션은

17
00:00:43,940 --> 00:00:45,350
특별히 유용해 보이지는 않습니다.

18
00:00:45,350 --> 00:00:47,615
그냥 어떤 숫자로 곱하기를 하는것 뿐이죠.

19
00:00:47,615 --> 00:00:53,635
하지만 이건 6 x 6 x1 채널 이미지의 경우입니다.

20
00:00:53,635 --> 00:00:58,415
6 x 6 에 32 대신 1을 곱하면

21
00:00:58,415 --> 00:01:04,995
1 x 1 필터를 가진 컨볼루션이 훨씬 의미 있는 일을 할 수 있게 됩니다.

22
00:01:04,995 --> 00:01:08,945
특히 1 x 1 컨볼루션이 수행 할 작업은

23
00:01:08,945 --> 00:01:13,620
여기에 있는 36 가지 위치를 각각 살펴보고

24
00:01:13,620 --> 00:01:16,720
왼쪽의 32 개 숫자와 필터의 32 개 숫자 사이에

25
00:01:16,720 --> 00:01:21,185
요소 간 곱셈을 하는 것 입니다.

26
00:01:21,185 --> 00:01:26,230
그리고 나서 여기에 ReLU 비선형성을 적용하십시오.

27
00:01:26,230 --> 00:01:29,405
36 가지 위치 중 하나, 즉,

28
00:01:29,405 --> 00:01:32,840
아마도 이 볼륨을 통과하는 하나의 조각을 살펴보기 위해서는

29
00:01:32,840 --> 00:01:41,525
이 36개 숫자들을 취한 후, 이렇게 이 볼륨을 통과하는 조각 하나를 곱해줍니다.

30
00:01:41,525 --> 00:01:43,535
그러면 여러분은 마지막에

31
00:01:43,535 --> 00:01:49,945
이런 아웃풋 중의 하나로 표시되는 실제 숫자를 얻게 됩니다.

32
00:01:49,945 --> 00:01:52,535
사실, 1 x 1 x 32 필터 안에 들어갈

33
00:01:52,535 --> 00:01:56,645
32개 숫자에 대해 생각하는 한 가지 방법은

34
00:01:56,645 --> 00:02:01,020
이는 마치 인풋을 받아들이는 뉴런을 여러분이 가지고 있는 것과 같은 건데요,

35
00:02:01,020 --> 00:02:06,770
32 개 숫자, 같은 위치에서 높이를 지닌 한 조각 안에 있는

36
00:02:06,770 --> 00:02:12,285
32개의 숫자들 각각을 이 32개의 다른 채널과 곱하고,

37
00:02:12,285 --> 00:02:15,665
즉, 32 가중치로 곱하는 것입니다. 그리고 나서

38
00:02:15,665 --> 00:02:22,115
ReLU 비선형성을 적용한 후 대응되는 것을 이쪽에 아웃풋하면 되는 거죠.

39
00:02:22,115 --> 00:02:28,875
더 일반적으로, 필터가 하나가 아니라

40
00:02:28,875 --> 00:02:31,020
필터가 여러 개인 경우

41
00:02:31,020 --> 00:02:36,240
하나의 유닛이 아닌, 여러 개의 유닛을 가진 것과 같습니다.

42
00:02:36,240 --> 00:02:40,950
이는 하나의 조각에 모든 숫자를 인풋한 다음

43
00:02:40,950 --> 00:02:49,530
6 x 6 x필터의 개수 의 아웃풋으로 이것들을 만들어내면 되는 것이죠.

44
00:02:49,530 --> 00:02:53,260
따라서 1 x 1 컨볼루션에 대해 생각해볼 수 있는 한가지 방법은

45
00:02:53,260 --> 00:02:59,115
기본적으로 완전 연결 신경망을 사용하여

46
00:02:59,115 --> 00:03:04,015
62 개의 서로 다른 위치에 적용하는 것입니다

47
00:03:04,015 --> 00:03:05,920
완전 연결 신경망은 무엇을 할까요?

48
00:03:05,920 --> 00:03:13,210
인풋이 32개고 아웃풋은 필터의 개수이죠

49
00:03:13,210 --> 00:03:14,555
따라서 수식으로 보면

50
00:03:14,555 --> 00:03:15,910
이게 다음 레이어라면

51
00:03:15,910 --> 00:03:19,440
nc(l + 1) 이 됩니다.

52
00:03:19,440 --> 00:03:22,710
각각의 36개의 위치,

53
00:03:22,710 --> 00:03:24,160
즉 각각 6 x 6 위치에서 이렇게 함으로서

54
00:03:24,160 --> 00:03:29,850
6 x 6 x 필터의 개수 인 아웃풋을 만들어낼 수 있습니다.

55
00:03:29,850 --> 00:03:35,830
그리고 이것은 여러분의 인풋 볼륨에 대해 아주 단순한 계산을 수행할 수 있습니다.

56
00:03:35,830 --> 00:03:40,755
이런 아이디어를 바로 1 x 1 컨볼루션 이라고 부릅니다.

57
00:03:40,755 --> 00:03:46,655
어떤 때에는 Min Lin, Qiang Chen, and Schuicheng Yan 이라는 저자들이 쓴

58
00:03:46,655 --> 00:03:49,468
논문에 설명된 바와 같이

59
00:03:49,468 --> 00:03:53,485
‘Network in Network’라고 부르기도 합니다.

60
00:03:53,485 --> 00:03:58,400
논문에 나오는 아키텍쳐의 세부적인 사항들이 아직 널리 사용되고 있지는 않지만

61
00:03:58,400 --> 00:04:01,460
1 x 1 컨볼루션이라는 방안이나

62
00:04:01,460 --> 00:04:05,300
이 Network in Network 방안은 매우 영향력이 있어서,

63
00:04:05,300 --> 00:04:08,090
많은 다른 신경망 아키텍쳐에 영향을 미치고 있습니다.

64
00:04:08,090 --> 00:04:11,860
다음 강의에서 보게 될 인셉션 네트워크 또한 포함해서 영향을 주는 것이죠.

65
00:04:11,860 --> 00:04:16,180
1 x 1 컨볼루션이 유용하게 쓰이는 예시를 하나 들어보자면,

66
00:04:16,180 --> 00:04:18,443
여기 하나가 있습니다.

67
00:04:18,443 --> 00:04:23,070
28 x 28 x 192 볼륨이라고 가정해보죠.

68
00:04:23,070 --> 00:04:25,715
높이와 넓이를 줄이고 싶다면

69
00:04:25,715 --> 00:04:27,310
pooling 레이어를 사용하면 됩니다.

70
00:04:27,310 --> 00:04:28,800
우린 이걸 하는 방법을 알고 있죠.

71
00:04:28,800 --> 00:04:34,265
많은 채널 중의 하나가 과하게 커서 이걸 줄이고 싶다면,

72
00:04:34,265 --> 00:04:40,260
28 x 28 x 32 차원 볼륨으로 어떻게 줄일 수 있을까요?

73
00:04:40,260 --> 00:04:48,058
1 x 1인 32 개의 필터를 사용하는 것입니다.

74
00:04:48,058 --> 00:04:52,700
기술적으로 각각의 필터는 1 x 1 x 192입니다.

75
00:04:52,700 --> 00:04:55,440
필터안에 있는 채널의 수는

76
00:04:55,440 --> 00:04:58,570
여러분의 인풋 볼륨에 있는 채널의 숫자와 매치가 되야 하기 때문입니다.

77
00:04:58,570 --> 00:05:08,035
하지만 32개의 필터를 사용하면, 이 과정의 아웃풋이 28 x 28 x 32볼륨이 되는 겁니다.

78
00:05:08,035 --> 00:05:12,850
따라서 이것이 nc 또한 줄일 수 있는 방법입니다.

79
00:05:12,850 --> 00:05:17,750
반면 pooling 레이어는 nH 와 nW 를 줄이려고 사용했었죠.

80
00:05:17,750 --> 00:05:20,436
이것은 이 볼륨의 높이(H)와 넓이(W)를 가리키는 것입니다.

81
00:05:20,436 --> 00:05:23,510
1 x 1 컨볼루션이 어떻게 채널의 수를 줄이는 것을

82
00:05:23,510 --> 00:05:28,670
가능하게 해주는 지는 다음 강의에서 볼 것입니다.

83
00:05:28,670 --> 00:05:31,450
따라서, 네트워크에서는 연산은 좀 아껴두기로 하죠.

84
00:05:31,450 --> 00:05:37,165
하지만 물론, 채널 수를 192로 유지하고자 한다면, 그것도 괜찮습니다.

85
00:05:37,165 --> 00:05:41,470
그리고 1 x 1 컨볼루션의 효과는 비선형성을 추가하는 것입니다.

86
00:05:41,470 --> 00:05:45,740
이렇게 하면 28 x 28 x 192 인풋을 주고, 28 x 28 x 192 를 아웃풋하는 또 다른 레이어를 추가하여

87
00:05:45,740 --> 00:05:52,423
네트워크의 더 복잡한 기능을 배울 수 있게 해줍니다.

88
00:05:52,423 --> 00:05:54,620
자, 이게 어떻게 1 x 1 컨볼루션 레이어가

89
00:05:54,620 --> 00:05:58,280
실제로 아주 단순하지 않은 작업을 수행하는 방법입니다.

90
00:05:58,280 --> 00:06:01,190
신경망에 비선형성을 추가하여

91
00:06:01,190 --> 00:06:04,525
원하는 경우 볼륨의 채널 수를 줄이거나 그대로 유지하거나

92
00:06:04,525 --> 00:06:08,565
아니면 늘리는 것도 가능합니다.

93
00:06:08,565 --> 00:06:13,960
다음으로, 이것이 사실상 초기 네트워크 구축에 매우 유용하다는 것을 알 수 있습니다.

94
00:06:13,960 --> 00:06:16,860
다음 강의에서는 그걸 보도록 하죠.

95
00:06:16,860 --> 00:06:22,145
자, 이제까지 1 x 1 컨볼루션 연산이 어떻게 실제로

96
00:06:22,145 --> 00:06:26,255
그리 단순하지 않은 연산을 수행하는지 살펴보았습니다.

97
00:06:26,255 --> 00:06:28,640
이는 여러분의 볼륨에서 채널의 수를 줄일 수도 있고

98
00:06:28,640 --> 00:06:31,270
같게 유지하거나 심지어 늘릴 수 있습니다. 다음 강의에서는,

99
00:06:31,270 --> 00:06:33,077
다음 비디오에서는

100
00:06:33,077 --> 00:06:36,140
이것이 인셉션 네트워크를 구축하기 위해 사용되는 것을 볼 수 있습니다.

101
00:06:36,140 --> 00:06:39,670
다음 강의로 가시죠.
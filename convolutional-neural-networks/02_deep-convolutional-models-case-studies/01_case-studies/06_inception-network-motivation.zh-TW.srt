1
00:00:00,000 --> 00:00:03,370
當設計一個卷積網路層時，您或許需要去選擇

2
00:00:03,370 --> 00:00:05,430
您要用 1乘3 過濾器

3
00:00:05,430 --> 00:00:07,385
或者 3乘3，5乘5

4
00:00:07,385 --> 00:00:09,180
或者您要一個池層？

5
00:00:09,180 --> 00:00:11,920
而 Inception 網路的方式是

6
00:00:11,920 --> 00:00:13,095
為什麼不全都做呢？

7
00:00:13,095 --> 00:00:16,255
而這會讓網路架構更加複雜

8
00:00:16,255 --> 00:00:18,380
但也作用得特別好

9
00:00:18,380 --> 00:00:19,720
我們來看看要怎麼做？

10
00:00:19,720 --> 00:00:23,380
假設為了討論的例子，您有一個輸入為

11
00:00:23,380 --> 00:00:26,990
28乘28乘192 維度的容積

12
00:00:26,990 --> 00:00:32,500
Inception 網路或者說 Inception 層的方式是

13
00:00:32,500 --> 00:00:36,600
與其選擇在卷積層使用多大的過濾器

14
00:00:36,600 --> 00:00:40,205
或甚至於您要選擇卷積層或者池層

15
00:00:40,205 --> 00:00:46,795
我們通通都做，如果您使用 1乘1 卷積

16
00:00:46,795 --> 00:00:50,750
這個會輸出 28乘28乘 一個數

17
00:00:50,750 --> 00:00:56,180
假設 28乘28乘64 輸出

18
00:00:56,180 --> 00:00:58,405
您會有一個容積在那裏

19
00:00:58,405 --> 00:01:06,510
但或許您也想試一個 3乘3，輸出或許會是 28乘28乘128

20
00:01:06,510 --> 00:01:13,975
您要做的是將第二個容積跟第一個容積疊在一起

21
00:01:13,975 --> 00:01:16,415
讓這兩個維度相吻合

22
00:01:16,415 --> 00:01:19,470
我們假設這是用相同卷積

23
00:01:19,470 --> 00:01:23,500
所以輸出維度依然是 28乘28

24
00:01:23,500 --> 00:01:26,965
跟輸入維度相同，指的是高度跟寬度

25
00:01:26,965 --> 00:01:31,300
在這個例子 28乘28乘128

26
00:01:31,300 --> 00:01:34,510
或許您要說，我想兩方押寶

27
00:01:34,510 --> 00:01:36,710
或許 5乘5 過濾器作用得更好

28
00:01:36,710 --> 00:01:44,755
我們也一起做，輸出會是 28乘28乘32

29
00:01:44,755 --> 00:01:49,435
再提一次，您使用相同卷積來保持維度相同

30
00:01:49,435 --> 00:01:52,715
而或許您不想用卷積層

31
00:01:52,715 --> 00:01:58,560
我們用池層，這會有一些輸出，我們將這些疊起來

32
00:01:58,560 --> 00:02:05,070
而這裡池層輸出為 28乘28乘32

33
00:02:05,070 --> 00:02:09,195
現在為了讓所有維度相吻合

34
00:02:09,195 --> 00:02:12,560
您實際上需要使用填充來做最大池化

35
00:02:12,560 --> 00:02:15,950
這是一種非常態的池層，因為為了您希望

36
00:02:15,950 --> 00:02:19,985
輸入高度跟寬度是 28乘28，而輸出

37
00:02:19,985 --> 00:02:24,395
您要配合其他維度
成為 28乘28

38
00:02:24,395 --> 00:02:31,020
那您需要用到相同填充跟跨步為 1 在池層上

39
00:02:31,020 --> 00:02:34,230
這些細節現在看起來很滑稽

40
00:02:34,230 --> 00:02:35,520
但讓我們繼續

41
00:02:35,520 --> 00:02:39,310
我們等一下會讓這些都有用

42
00:02:39,310 --> 00:02:43,170
但使用像這樣的 Inception 模組

43
00:02:43,170 --> 00:02:46,080
您可以輸入一些容積，而輸出

44
00:02:46,080 --> 00:02:48,640
在這個例子，如果您將所有這些數字相加

45
00:02:48,640 --> 00:02:51,705
32 加 32 加 128 加 64

46
00:02:51,705 --> 00:02:54,915
這會是 256

47
00:02:54,915 --> 00:03:01,515
所以您會有一個 inception 模組，輸入是 28乘28乘129

48
00:03:01,515 --> 00:03:06,275
而輸出為 28乘28乘256

49
00:03:06,275 --> 00:03:11,300
而這就是 inception 網路的核心，由

50
00:03:11,300 --> 00:03:13,260
Christian Szegedy, Wei Liu,

51
00:03:13,260 --> 00:03:15,130
Yangqing Jia, Pierre Sermanet,

52
00:03:15,130 --> 00:03:17,750
Scott Reed, Dragomir Anguelov, Dumitru Erhan,

53
00:03:17,750 --> 00:03:20,660
Vincent Vanhoucke and Andrew Rabinovich. 提出

54
00:03:20,660 --> 00:03:23,950
而基本的想法是

55
00:03:23,950 --> 00:03:30,000
與其您必須選擇過濾器大小，或者要不要用池層

56
00:03:30,000 --> 00:03:33,200
您可以全部都做，然後將輸出結合起來

57
00:03:33,200 --> 00:03:36,270
而讓網路來決定什麼樣的參數它要使用

58
00:03:36,270 --> 00:03:40,050
什麼樣的過濾器大小是它要的

59
00:03:40,050 --> 00:03:42,420
但現在有一個問題

60
00:03:42,420 --> 00:03:44,745
使用像這樣描述的 inception 層

61
00:03:44,745 --> 00:03:46,795
會有計算成本的問題

62
00:03:46,795 --> 00:03:48,060
在下一張投影片

63
00:03:48,060 --> 00:03:54,485
我們來算一下這個 5乘5 過濾器的計算成本

64
00:03:54,485 --> 00:03:56,655
也就是這一區塊

65
00:03:56,655 --> 00:04:02,735
所以聚焦在這個上一張投影片的 5乘5 容積

66
00:04:02,735 --> 00:04:07,010
我們的輸入是 28乘28乘129 區塊

67
00:04:07,010 --> 00:04:14,620
而您建置一個5乘5 相同卷積 32 個過濾器，輸出為 28乘28乘32

68
00:04:14,620 --> 00:04:18,750
在前一張投影片，我用淡紫色來畫

69
00:04:18,750 --> 00:04:23,035
但這裡我用看起來正常的藍色來畫

70
00:04:23,035 --> 00:04:30,700
我們來看一下輸出這個 28乘28乘32 的計算成本

71
00:04:30,700 --> 00:04:38,065
您有 32 個過濾器，因為輸出是 32 通道

72
00:04:38,065 --> 00:04:44,805
每一個過濾器都是 5乘5乘192

73
00:04:44,805 --> 00:04:48,410
而輸出是 28乘28乘32

74
00:04:48,410 --> 00:04:53,600
所以您必須計算 28乘28乘32 個數字

75
00:04:53,600 --> 00:04:58,685
中間每一個數字，您都需要做乘法，對吧？

76
00:04:58,685 --> 00:05:01,185
5乘5乘192

77
00:05:01,185 --> 00:05:03,550
所以整個要做乘法的數目是

78
00:05:03,550 --> 00:05:07,010
您需要的每一個輸出值的乘法數目乘上

79
00:05:07,010 --> 00:05:12,615
您需要計算的所有輸出值

80
00:05:12,615 --> 00:05:15,330
而如果您乘上這些所有數字

81
00:05:15,330 --> 00:05:18,790
會等於 一億兩千萬個 (120 million) 乘法

82
00:05:18,790 --> 00:05:24,725
所以，當然您可以在當今電腦上做一億兩千萬乘法

83
00:05:24,725 --> 00:05:27,385
但這還是相當昂貴的運算

84
00:05:27,385 --> 00:05:32,390
在下一張投影片，您會見到如何使用 1乘1 卷積的觀念

85
00:05:32,390 --> 00:05:34,210
您在前面學到的

86
00:05:34,210 --> 00:05:38,630
您能夠降低計算成本大約 十分之一

87
00:05:38,630 --> 00:05:44,400
從一億兩千萬個乘法降為大約十分之一

88
00:05:44,400 --> 00:05:48,575
所以請記住這個一億兩千萬，將來您可以

89
00:05:48,575 --> 00:05:52,045
在下一張投影片做比較，一億兩千萬

90
00:05:52,045 --> 00:05:58,540
這裡有另外一種架構來輸入 28乘28乘192

91
00:05:58,540 --> 00:06:03,020
輸出為28乘28乘32，如下

92
00:06:03,020 --> 00:06:05,175
您將這個輸入容積

93
00:06:05,175 --> 00:06:14,580
使用一個 1乘1 卷積來降低容積為
 16 個通道，而不是192 個通道

94
00:06:14,580 --> 00:06:17,370
然後在這個較小的容積

95
00:06:17,370 --> 00:06:21,915
跑一個 5乘5 卷積來給您一個最終輸出

96
00:06:21,915 --> 00:06:24,665
請注意，輸入跟輸出的維度跟之前一樣

97
00:06:24,665 --> 00:06:31,280
您的輸入是 28乘28乘192 輸出是 28乘28乘32

98
00:06:31,280 --> 00:06:33,865
跟之前投影片一樣

99
00:06:33,865 --> 00:06:37,340
但我們做到的是，我們將在左邊這個巨大的容積

100
00:06:37,340 --> 00:06:42,110
我們將其縮小為中間這個小很多的容積

101
00:06:42,110 --> 00:06:46,740
現在只有 16 個而不是 192 個通道

102
00:06:46,740 --> 00:06:53,000
有時候這個被稱為瓶頸層

103
00:06:53,600 --> 00:06:59,890
我猜因為瓶頸通常指的是東西最小的部分，對吧？

104
00:06:59,890 --> 00:07:04,820
我猜如果您有玻璃瓶像這樣

105
00:07:04,820 --> 00:07:09,065
然後我猜軟木塞這樣走

106
00:07:09,065 --> 00:07:13,615
而瓶頸就是瓶子最窄的部分

107
00:07:13,615 --> 00:07:18,035
同樣的，瓶頸層就是這網路的最小部分

108
00:07:18,035 --> 00:07:22,625
我們先縮小，再增加大小

109
00:07:22,625 --> 00:07:26,945
現在讓我們來看相關計算成本

110
00:07:26,945 --> 00:07:30,320
為了應用這 1乘1卷積

111
00:07:30,320 --> 00:07:32,510
我們使用了 16 個過濾器

112
00:07:32,510 --> 00:07:37,145
每一個過濾器的維度是 1乘1乘192

113
00:07:37,145 --> 00:07:40,170
這個 192 跟這個 192 互相吻合

114
00:07:40,170 --> 00:07:43,300
所以計算成本對於這個

115
00:07:43,300 --> 00:07:45,870
28乘28乘16 容積

116
00:07:45,870 --> 00:07:48,205
您需要這麼多輸出

117
00:07:48,205 --> 00:07:54,900
每一個輸出您需要做 192 個乘法

118
00:07:54,900 --> 00:07:58,515
我可以寫成 1乘1乘192，對吧？

119
00:07:58,515 --> 00:08:00,960
也就是這個，如果您將他們乘出來

120
00:08:00,960 --> 00:08:02,650
這是兩百四十萬 (2.4 million)

121
00:08:02,650 --> 00:08:04,370
大約兩百四十萬

122
00:08:04,370 --> 00:08:05,655
第二個呢？

123
00:08:05,655 --> 00:08:11,325
剛剛是第一個卷積層的成本

124
00:08:11,325 --> 00:08:15,670
第二個卷積層的成本會是

125
00:08:15,670 --> 00:08:17,290
您有這麼多的輸出

126
00:08:17,290 --> 00:08:19,340
28乘28乘32

127
00:08:19,340 --> 00:08:28,200
對於每一個輸出，您需要應用 5乘5乘16 維度的過濾器

128
00:08:28,200 --> 00:08:31,305
所以是 5乘5乘16

129
00:08:31,305 --> 00:08:36,520
如果您將它們相乘，會是一千萬 (10 million)

130
00:08:36,520 --> 00:08:41,160
所以整個相乘的數目是您需要把兩項相加

131
00:08:41,160 --> 00:08:45,020
也就是 一千兩百四十萬

132
00:08:45,020 --> 00:08:47,955
如果跟我們之前投影片的數字相比

133
00:08:47,955 --> 00:08:53,095
您從大約 一億兩千萬降低計算成本

134
00:08:53,095 --> 00:08:55,810
約十分之一

135
00:08:55,810 --> 00:08:59,335
到一千兩百四十萬的乘法

136
00:08:59,335 --> 00:09:02,345
而需要相加的數目

137
00:09:02,345 --> 00:09:06,305
大約類似於需要做乘法的數目

138
00:09:06,305 --> 00:09:10,230
所以這是為什麼我只算乘法的數目

139
00:09:10,230 --> 00:09:13,490
總結一下，如果您要建

140
00:09:13,490 --> 00:09:16,140
一個神經網路層，您不想要決定

141
00:09:16,140 --> 00:09:17,820
您要 1乘1，

142
00:09:17,820 --> 00:09:20,095
3乘3，或者 5乘5 或者池層

143
00:09:20,095 --> 00:09:23,560
在 inception 模組，讓您全部都做

144
00:09:23,560 --> 00:09:25,645
再全部連結起來

145
00:09:25,645 --> 00:09:28,720
然後我們會碰到計算成本的問題

146
00:09:28,720 --> 00:09:32,460
您在這裡看到的是如何使用 1乘1 卷積

147
00:09:32,460 --> 00:09:34,585
您可以建立一個瓶頸層

148
00:09:34,585 --> 00:09:38,115
來明顯降低計算成本

149
00:09:38,115 --> 00:09:39,725
您或許會疑惑

150
00:09:39,725 --> 00:09:43,370
如此巨大的縮減大小

151
00:09:43,370 --> 00:09:46,730
會不會傷害您的神經網路的績效

152
00:09:46,730 --> 00:09:52,440
實際上只要您建置瓶頸層在這種情況下

153
00:09:52,440 --> 00:09:56,530
您可以明顯地縮減大小

154
00:09:56,530 --> 00:09:59,240
而不至於傷害到績效

155
00:09:59,240 --> 00:10:01,700
但卻減少很多計算成本

156
00:10:01,700 --> 00:10:07,835
所以這是 inception 模組的主要觀念

157
00:10:07,835 --> 00:10:09,790
讓我們將它們放在一起

158
00:10:09,790 --> 00:10:14,100
在下一段影片顯示您全 inception 網路的樣子
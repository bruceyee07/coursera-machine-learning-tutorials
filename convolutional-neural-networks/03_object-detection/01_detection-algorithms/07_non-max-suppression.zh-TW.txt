目前你所學的物件偵測，有一個問題是 你的演算法對同一個物件可能會找出多個偵測： 對於一個物件，他不會只偵測出一次 他有可能會多次偵測之。 「抑制非最大值」(non-max suppression) 可以 確保你的演算法對一個物件只會偵測一次 讓我們看個例子 假設你想要在這張照片偵測出 行人、汽車和機車 你會在上面放格子 這是 19乘19 的格子 那麼，技術上來說這輛車只會有一個中心點 所以他只會被交給某一個格子 左邊的汽車也只有一個中間點 所以應該只會有一個格子會預測出這裡有輛車。 然而實務上，你會對 每一個格子跑物件分類/定位演算法 所以還滿有可能 這個格子會覺得汽車的中心點在他裡面 這格可能也會 這格也有可能。而對於左邊的汽車也一樣 可能不只這一格 如果之前看過這張測試圖片 不只這個格子會覺得他找到車了 可能這個格子、這一格、其他格 也會覺得他們找到車子了。 所以讓我們透過實例來看看「抑制非最大值」怎麼進行 因為你對於 每個格子去執行分類/定位演算法 在這些 361 個格子上。 有可能其中很多格子會舉手說 「我的 p_c、我覺得我裡面有物件的機率很高」 在 361 個格子裡，可能不會只有兩個格子 覺得他們偵測到了物件。 所以你的演算法在跑的時候 每一個物件可能都有多種偵測結果 那麼，「抑制非最大值」做的是 把這一堆偵測結果清乾淨 所以最終每輛車只會有一個偵測結果 不會一輛車就有多種偵測。 這演算法具體的作法是 他會先看每個偵測的機率 可以算是 p_c — 雖然 你在本週的作業會學到一些細節 這其實是 p_c 乘以 c_1 或 c_2 或 c_3 不過在這裡我們先假設 p_c 是那個偵測的機率 演算法會先拿最大的一個 在這例子就是 0.9，然後說 「那是我最有信心的偵測 所以讓他變亮、突顯出在這裡找到了車」 這步完畢後，接下來「抑制非最大值」的步驟是 看過剩下所有的長方形，而對於那些重疊很多 有很高 IoU 的 疊到剛剛亮亮輸出的，那些會被抑制 所以這裡這兩個 0.6, 0.7 的長方形 這兩個都和亮藍色的長方形重疊很多 所以你會抑制、隱藏那些 把他們變暗，表示他們被抑制了。 接下來，你在剩下的長方形當中 找出有最高機率的那個 有最高的 p_c，在這例子是 0.8 的這個 所以我們就交出去說 「好我這邊找到一輛車了」 然後抑制非最大值的步驟 就把其他如果有高 IoU 的丟掉。 所以現在，每個長方形要嘛亮的要嘛暗的 如果你把暗的長方形拿掉 剩下的就是亮的 這兩個就會是最終的預測。 那麼，這就是「抑制非最大值」(non-max suppression) 「非最大值」意味著你會 輸出有最大機率的分類預測 並抑制周圍「非最大」的預測 所以被稱作抑制非最大值。 讓我們進一步看看這演算法的細節 第一，在這 19乘19 的格子上 你會得到 19乘19乘8 的輸出容積 不過在這例子 我想簡化成，你只是要做汽車的偵測 所以讓我丟掉 c_1, c_2, c_3, 假設在這張投影片 19乘19 其中每個的輸出 361 個中每個 — 也就是 19 的平方 對於每一個位置 你會得到如下的輸出： 有物件的機率、 然後是邊界框 如果你只有一種物件 就不會預測 c_1, c_2, c_3。 至於有多種物件的時候 其中的細節的話 我們就留到程式作業 你在這周結束時會做到的。 那麼，要實作抑制非最大值 第一件事，你可以丟掉那一些， 把預測的 p_c 在某個邊界值以下，例如 0.6 的那些邊界框都丟掉。 所以我們會說：除非你覺得至少有 0.6 的機率會有物件，否則我們就丟掉他吧 所以這步會丟掉所有低機率的邊界框。 你可以把這步驟想成，對於 361 每個位置 你會輸出一個邊界框， 還會輸出「這個邊界框很好」的機率 所以我們會丟掉 每個只有低機率的框框。 接下來，如果還有 沒丟掉、或是沒處理的邊界框 每一次，你會挑出最高機率的框框 有最高 p_c 的框 然後輸出它，當作一個預測 所以這步驟就是前一張投影片中，我們挑出某個邊界框 讓他變成亮色的 所以你會把那一個交出去，預測那邊會有輛車。 接下來，你會丟掉剩下的邊界框 那些還沒輸出的 之前也沒被丟掉的 — 所以把剩下那些重疊很多的邊界框、 有很高 IoU 的、 與前一步輸出的框重疊很多的，把他們丟掉。 所以迴圈裡的第二步，就是在前張投影片 你黑掉其他的邊界框 — 就是那些跟你剛剛變亮的 有重疊很多的邊界框。 所以，你不斷這樣做， 只要還有尚未處理的邊界框， 一直做到每一個邊界框已經變成預測結果 或是因為重疊很高被丟掉 有很高的 IoU 與前一步剛輸出的框框、 偵測出物件的邊界框重疊很高的。 這張投影片提的，是只有一種物件的方法 如果你想要偵測三種物件，假設是路人、 汽車、和機車，這樣輸出的向量有額外三個維度 這樣子的話，正確的方法是 各自獨立，進行三次「抑制非最大值」 每一種類別做一次。 不過其中的細節，我就 留待這禮拜的程式作業，讓你自己去做 你會需要實作有多種物件的抑制非最大值。 那麼，這就是「抑制非最大值」(non-max suppression) 如果你照我們所教的，做出物件偵測的演算法 你其實會得到滿不錯的結果。 不過在總結 YOLO 演算法之前 我還想和你分享最後一個概念 能夠讓這演算法更加厲害 也就是 "anchor boxes" (錨框) 讓我們進入下一段影片
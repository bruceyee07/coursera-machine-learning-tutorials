1
00:00:00,000 --> 00:00:05,040
你要怎麼知道，你的物件偵測表現好不好呢？

2
00:00:05,040 --> 00:00:10,234
這段影片你會學到一個函數，叫「交集除以聯集」
(Intersection Over Union)

3
00:00:10,234 --> 00:00:14,115
我們會拿他來評估你物件偵測法的好壞

4
00:00:14,115 --> 00:00:16,485
在下部影片，也會拿來

5
00:00:16,485 --> 00:00:20,625
放到你的物件偵測演算法

6
00:00:20,625 --> 00:00:22,610
讓你的演算法更厲害

7
00:00:22,610 --> 00:00:25,495
讓我們開始吧。在物件偵測的任務中

8
00:00:25,495 --> 00:00:28,920
你會需要定位其中的物件

9
00:00:28,920 --> 00:00:31,870
假設這個是邊界框的解答

10
00:00:31,870 --> 00:00:35,890
而你的演算法輸出的是這個紫色的框

11
00:00:35,890 --> 00:00:38,900
這個結果是好還是壞呢？

12
00:00:38,900 --> 00:00:44,610
「交集除以聯集」所作的

13
00:00:44,610 --> 00:00:53,650
簡稱 IoU，是計算兩個邊界框的交集再除以聯集

14
00:00:53,650 --> 00:00:59,195
所以，兩個邊界框的聯集是這塊區域

15
00:00:59,195 --> 00:01:06,090
被兩個框中的任一個所涵蓋的面積

16
00:01:06,090 --> 00:01:11,580
而交集則是這塊比較小的區域

17
00:01:11,580 --> 00:01:18,850
所以「交集除以聯集」是計算交集的大小

18
00:01:18,850 --> 00:01:22,598
也就是橘色這塊面積

19
00:01:22,598 --> 00:01:27,520
然後除以聯集的大小

20
00:01:27,520 --> 00:01:30,430
也就是綠色的這塊。

21
00:01:30,430 --> 00:01:34,195
根據慣例，在很多電腦視覺的問題中

22
00:01:34,195 --> 00:01:39,355
會認為 IoU 大於 0.5 的答案是正確的

23
00:01:39,355 --> 00:01:45,310
如果預測出來的邊界框和真實答案剛好一樣

24
00:01:45,310 --> 00:01:47,054
那 IoU 會是 1

25
00:01:47,054 --> 00:01:50,105
因為交集會等於聯集

26
00:01:50,105 --> 00:01:55,195
不過一般來說，只要 IoU 大於等於 0.5

27
00:01:55,195 --> 00:01:59,685
那答案會看起來不錯，還行

28
00:01:59,685 --> 00:02:03,880
根據慣例，0.5 常被拿來

29
00:02:03,880 --> 00:02:10,130
當作預測的邊界框是否「正確」的一個分界

30
00:02:10,130 --> 00:02:11,650
這只是個慣例

31
00:02:11,650 --> 00:02:12,975
如果你要更嚴格

32
00:02:12,975 --> 00:02:14,790
你可以認為 IoU 要在

33
00:02:14,790 --> 00:02:19,845
0.6 以上、或是其他數字以上，才能叫正確。

34
00:02:19,845 --> 00:02:21,570
總之 IoU 越高

35
00:02:21,570 --> 00:02:24,425
邊界框就越準。

36
00:02:24,425 --> 00:02:27,625
所以，這方法可以將物件的「位置」

37
00:02:27,625 --> 00:02:32,560
轉化成「正確率」：只要用這樣的定義數一數

38
00:02:32,560 --> 00:02:37,815
這個演算法偵測/定位到物件的正確次數；

39
00:02:37,815 --> 00:02:42,410
定位是否「正確」是採用這個定義。

40
00:02:42,410 --> 00:02:46,515
再次強調，0.5 只是大家選的一個慣例

41
00:02:46,515 --> 00:02:49,535
沒有特別理論上的考量

42
00:02:49,535 --> 00:02:54,640
如果要更嚴格，你可以選其他的分界像是 0.6

43
00:02:54,640 --> 00:03:00,070
我偶爾看到有人用更嚴格的 0.6 或 0.7

44
00:03:00,070 --> 00:03:04,100
我幾乎沒看過有人用比 0.5 還低的。

45
00:03:04,100 --> 00:03:08,065
那麼，我們知道了 IoU 定義的由來

46
00:03:08,065 --> 00:03:10,540
所以拿他來評估，去計算

47
00:03:10,540 --> 00:03:14,080
你的物件定位演算法是否準確，

48
00:03:14,080 --> 00:03:20,340
不過更廣泛地說，IoU 可以度量兩個邊界框重疊的多寡

49
00:03:20,340 --> 00:03:22,430
如果你有兩個框

50
00:03:22,430 --> 00:03:23,980
你可以計算其交集

51
00:03:23,980 --> 00:03:29,040
算出其聯集，然後算出兩個面積的比例

52
00:03:29,040 --> 00:03:34,985
所以這也是拿來衡量兩個框框有多像的一個指標

53
00:03:34,985 --> 00:03:37,535
在下部影片談到 "non-max suppression" 時

54
00:03:37,535 --> 00:03:40,225
會再看到這種用法。

55
00:03:40,225 --> 00:03:46,170
那麼，這就是 IoU，「交集除以聯集」

56
00:03:46,170 --> 00:03:50,720
不要和本票裡面的 IOU 搞混了

57
00:03:50,720 --> 00:03:53,610
你借別人錢，別人寫個借據：

58
00:03:53,610 --> 00:03:55,940
「我欠你這些錢」這也叫 IOU (I owe you)

59
00:03:55,940 --> 00:03:58,110
這兩個完全不一樣

60
00:03:58,110 --> 00:04:03,111
不過這兩個東西有相同的名字還滿酷的

61
00:04:03,111 --> 00:04:07,730
所以你現在知道了 IoU 交集除以聯集

62
00:04:07,730 --> 00:04:09,055
在下一個影片中

63
00:04:09,055 --> 00:04:12,045
我想和你討論 "non-max suppression"
（抑制非最大值）

64
00:04:12,045 --> 00:04:16,770
是一個能讓 YOLO 輸出的結果變得更好的工具

65
00:04:16,770 --> 00:04:18,470
讓我們進入下一段影片
1
00:00:00,000 --> 00:00:05,695
物体の位置決めと ランドマーク検出について 学んだ

2
00:00:05,695 --> 00:00:09,470
では 他の物体検出のアルゴリズムに行こう

3
00:00:09,470 --> 00:00:13,005
このビデオでは ConvNet を使い

4
00:00:13,005 --> 00:00:18,150
スライディング ウィンドウ 検出アルゴリズム
と呼ばれるものを使った物体検出のやり方を学ぶ

5
00:00:18,150 --> 00:00:21,154
車検出アルゴリズムを作りたい とする

6
00:00:21,154 --> 00:00:22,315
こんなことができる

7
00:00:22,315 --> 00:00:24,734
最初に ラベル付けした学習セットを作り

8
00:00:24,734 --> 00:00:29,100
つまり x と y だ それに ピッタリに切り抜いた車

9
00:00:29,100 --> 00:00:32,970
画像 x は 正のサンプルで 車がある

10
00:00:32,970 --> 00:00:35,140
ここに車、ここに車

11
00:00:35,140 --> 00:00:37,755
それから ここには車が無い ここにも無い

12
00:00:37,755 --> 00:00:39,840
この学習セットの目的は

13
00:00:39,840 --> 00:00:43,733
ピッタリ切り抜いた車の画像から 始められることだ

14
00:00:43,733 --> 00:00:47,365
つまり x は ほぼ車しか無い

15
00:00:47,365 --> 00:00:49,650
写真を取って 切り抜きし

16
00:00:49,650 --> 00:00:52,340
車だけにして 車以外を排除できる

17
00:00:52,340 --> 00:00:57,450
最終的に ほぼ画像全体が 車を中心に置いたものになる

18
00:00:57,450 --> 00:01:01,090
このラベル付けした学習セットで

19
00:01:01,090 --> 00:01:05,412
ConvNet を訓練できる

20
00:01:05,412 --> 00:01:07,977
ピッタリ切り抜いた これらの画像でね

21
00:01:07,977 --> 00:01:12,135
そして ConvNet の仕事は y を出力することだ

22
00:01:12,135 --> 00:01:15,090
0 か 1 か 車の有無を

23
00:01:15,090 --> 00:01:17,044
この ConvNet を訓練し終えたら

24
00:01:17,044 --> 00:01:20,515
スライディング ウィンドウ検出に それを使う

25
00:01:20,515 --> 00:01:21,870
やり方は こうだ

26
00:01:21,870 --> 00:01:25,560
このようなテスト画像があるとしたら

27
00:01:25,560 --> 00:01:29,625
下にあるような あるウィンドウのサイズを選び

28
00:01:29,625 --> 00:01:35,070
それから ConvNet に 小さな四角形を入力する

29
00:01:35,070 --> 00:01:38,670
赤い四角の下にある ここだけ取って

30
00:01:38,670 --> 00:01:41,235
ConvNet に 入力する

31
00:01:41,235 --> 00:01:43,020
そして ConvNet が予測を行う

32
00:01:43,020 --> 00:01:47,215
そして おそらく この赤い四角にある 小さい領域に対しては

33
00:01:47,215 --> 00:01:50,640
こう言ってくるだろう "無いよ この小さい赤い四角に 車は無い"

34
00:01:50,640 --> 00:01:52,310
スライディング ウィンドウ検出アルゴリズムでは

35
00:01:52,310 --> 00:01:56,900
それから ２番目の画像を

36
00:01:56,900 --> 00:02:00,000
入力として渡す その画像は

37
00:02:00,000 --> 00:02:03,970
少しだけずらした赤い四角で囲まれたもので それをConvNetに喰わせる

38
00:02:03,970 --> 00:02:06,715
赤い四角内の画像領域だけを ConvNetに喰わせて

39
00:02:06,715 --> 00:02:10,665
再び ConvNet を走らせる

40
00:02:10,665 --> 00:02:16,275
それから ３番目の画像でそれをやり 以下同様に続ける

41
00:02:16,275 --> 00:02:23,415
画像内の全ての位置にウィンドウを スライドさせるまで 続ける

42
00:02:23,415 --> 00:02:28,975
この例では かなり大きなストライドを使っているが、それは アニメーションを速くするためだ

43
00:02:28,975 --> 00:02:34,700
ただし このサイズの全ての領域を通過させるのが 基本的な考え方だ

44
00:02:34,700 --> 00:02:38,460
そして あるストライドで得られる各位置において

45
00:02:38,460 --> 00:02:45,125
沢山の小さな切り取った画像を ConvNetに渡し 0 か 1 か の分類をする

46
00:02:45,125 --> 00:02:47,085
さて これを一度やったら

47
00:02:47,085 --> 00:02:54,230
これは 画像を総なめする スライディング ウィンドウと呼ぶが

48
00:02:54,230 --> 00:02:55,295
これを繰り返す

49
00:02:55,295 --> 00:02:57,710
ただし 今度は より大きなウィンドウでだ

50
00:02:57,710 --> 00:03:02,191
今度は 少しだけ大きな領域を取り その領域を調べる

51
00:03:02,191 --> 00:03:06,440
ConvNetが 想定している入力サイズが何であっても 領域の大きさを変えて

52
00:03:06,440 --> 00:03:10,235
それを ConvNet に喰わせて 0 か 1 の出力を得る

53
00:03:10,235 --> 00:03:15,305
それから ウィンドウを また あるストライドでスライドさせていく

54
00:03:15,305 --> 00:03:20,500
そして 終わりに来るまで 画像全体を舐める

55
00:03:20,500 --> 00:03:26,283
それから ３回目は さらに大きなウィンドウで 行なう

56
00:03:26,283 --> 00:03:29,738
よろしい
望んでいるのは これを行う場合

57
00:03:29,738 --> 00:03:36,080
画像のどこかに車がある限りは 対応するウィンドウがあるだろうということだ

58
00:03:36,080 --> 00:03:40,200
例えば もし このウィンドウをConvNet に渡せば

59
00:03:40,200 --> 00:03:44,890
うまくいけば ConvNet は この入力領域に 1 を出力するだろう

60
00:03:44,890 --> 00:03:47,825
それで そこに車があると検出する

61
00:03:47,825 --> 00:03:52,895
このアルゴリズムは スライディング ウィンドウ 検出と呼ばれる
なぜなら これらのウィンドウを

62
00:03:52,895 --> 00:03:58,745
これらの四角い箱を 画像全体に渡って スライドさせるからだ

63
00:03:58,745 --> 00:04:05,770
そして あるストライドの 全ての四角い領域で 車の有無を判定する

64
00:04:05,770 --> 00:04:10,055
さて スライディング ウィンドウ 検出には 大きな欠点がある

65
00:04:10,055 --> 00:04:12,704
それは 計算コストだ

66
00:04:12,704 --> 00:04:16,460
なぜなら とても多くの異なる四角い領域を 画像から切り抜いて

67
00:04:16,460 --> 00:04:21,370
それぞれを 個別に ConvNet にかけるからだ

68
00:04:21,370 --> 00:04:24,505
もし 非常に荒いストライドを使えば

69
00:04:24,505 --> 00:04:26,745
とても大きなストライド とても大きなステップサイズを使えば

70
00:04:26,745 --> 00:04:31,598
ConvNet に通すウィンドウの数は減るだろう

71
00:04:31,598 --> 00:04:35,810
しかし その粒度の荒さによって 性能は落ちるかもしれない

72
00:04:35,810 --> 00:04:39,630
代わりに もし とても細かい粒度 非常に小さいストライドを 使えば

73
00:04:39,630 --> 00:04:44,005
この小さい領域の総数は巨大になって

74
00:04:44,005 --> 00:04:48,995
ConvNet に通すと 計算コストがとても高くなる

75
00:04:48,995 --> 00:04:54,180
ニューラルネットワークの登場前 人々は はるかに単純な分類器を使っていた

76
00:04:54,180 --> 00:04:56,910
手作業による調整をした

77
00:04:56,910 --> 00:05:00,450
単純な線形分類器のようなものを 物体検出に使っていた

78
00:05:00,450 --> 00:05:04,870
当時は 各分類器は 比較的安く計算できた

79
00:05:04,870 --> 00:05:06,480
それは ただの線形関数で

80
00:05:06,480 --> 00:05:08,980
スライディング ウィンドウ 検出を実行しても問題無い

81
00:05:08,980 --> 00:05:10,395
それは 悪くない方法だった

82
00:05:10,395 --> 00:05:15,450
しかし ConvNet では １つの分類タスクを走らせるのが

83
00:05:15,450 --> 00:05:21,125
とても高価で このやり方のスライディング ウィンドウは 実行不可能なほど遅い

84
00:05:21,125 --> 00:05:26,305
また とても細かい粒度 とても小さなストライド を使わないと

85
00:05:26,305 --> 00:05:32,850
画像内に実在する物体の 位置決めも できなくなる

86
00:05:32,850 --> 00:05:38,575
しかし 幸運にも この計算コスト問題には とても良い解決策がある

87
00:05:38,575 --> 00:05:41,845
特に スライディング ウィンドウ 物体検出器は

88
00:05:41,845 --> 00:05:45,935
畳み込んで とても効率的に 実装することができる

89
00:05:45,935 --> 00:05:48,310
次のビデオで どうやってそれをやるのか見よう
1
00:00:00,000 --> 00:00:03,235
物体検出の文献を見れば

2
00:00:03,235 --> 00:00:06,790
領域候補と呼ばれる一連のアイデアが見つかる

3
00:00:06,790 --> 00:00:10,995
それは コンピュータビジョンにも 大きな影響を与えてきた

4
00:00:10,995 --> 00:00:14,460
このビデオをオプションにしたかったのは 

5
00:00:14,460 --> 00:00:19,275
私が 領域候補のアルゴリズムを あまり多くは 使わないからだ しかし それにも関わらず

6
00:00:19,275 --> 00:00:22,170
ずっと影響力を持ち続けていて

7
00:00:22,170 --> 00:00:25,675
あなた自身の仕事で 出会うアイデアかもしれないからだ

8
00:00:25,675 --> 00:00:29,640
見てみよう スライディング ウィンドウのアイデアを思い出せば

9
00:00:29,640 --> 00:00:33,225
訓練を 一斉射撃で行うだろう

10
00:00:33,225 --> 00:00:37,695
これら異なるウィンドウ全てに跨り 検出器を走らせ

11
00:00:37,695 --> 00:00:40,190
車 歩行者 もしくは バイクがあるかを調べる

12
00:00:40,190 --> 00:00:42,515
そして アルゴリズムを畳み込んで 動かすことができた

13
00:00:42,515 --> 00:00:45,570
ただし このアルゴリズムの欠点は

14
00:00:45,570 --> 00:00:49,410
明らかに物体が存在しない沢山の領域をも一斉射撃することだ

15
00:00:49,410 --> 00:00:52,569
この下の四角は ほとんど空っぽだ

16
00:00:52,569 --> 00:00:55,658
ここには 明らかに 分類すべきものが無い

17
00:00:55,658 --> 00:00:58,610
この四角で走らせても そうだ

18
00:00:58,610 --> 00:01:01,365
そこには 何も興味を引くものは無いようだ

19
00:01:01,365 --> 00:01:04,275
Russ Girshik, Jeff Donahue, Trevor Darrell, そして Jitendra Malik が

20
00:01:04,275 --> 00:01:06,548
論文で 提供したのは

21
00:01:06,548 --> 00:01:07,905
このスライドの下に引用先を示したけど

22
00:01:07,905 --> 00:01:10,470
R-CNN と呼ばれるアルゴリズムだ

23
00:01:10,470 --> 00:01:15,915
それは "Regions with Convolution Networks" もしくは "Regions with CNNs" を表している

24
00:01:15,915 --> 00:01:18,330
それは

25
00:01:18,330 --> 00:01:22,925
一斉射撃を行う意味のある 少数の領域を抽出しようとするものだ

26
00:01:22,925 --> 00:01:27,505
つまり 全てのウィンドウで 実行するのではなく

27
00:01:27,505 --> 00:01:30,330
代わりに 少数のウィンドウを選んで

28
00:01:30,330 --> 00:01:33,570
少数のウィンドウでのみ 盛大に一斉射撃を行う

29
00:01:33,570 --> 00:01:35,205
候補領域を 出すには

30
00:01:35,205 --> 00:01:40,425
セグメンテーション アルゴリズムと呼ばれるアルゴリズムを実行する

31
00:01:40,425 --> 00:01:42,915
そうすると 右のような出力が得られる

32
00:01:42,915 --> 00:01:46,170
これにより 物体で有り得る部分を識別する

33
00:01:46,170 --> 00:01:50,306
例えば セグメンテーション アルゴリズムは ここで模様を見つける

34
00:01:50,306 --> 00:01:53,625
そうしたら その境界箱を選んで こう言うんだ

35
00:01:53,625 --> 00:01:55,680
"この模様に一斉射撃を行おう"

36
00:01:55,680 --> 00:01:58,730
ここに小さい緑があるようだ ここに模様が見つかるので

37
00:01:58,730 --> 00:02:00,960
この四角形に一斉射撃を行えば

38
00:02:00,960 --> 00:02:04,650
興味を引くものがあるかどうか分かる

39
00:02:04,650 --> 00:02:06,000
この例では

40
00:02:06,000 --> 00:02:08,830
この青い模様 これに一斉射撃を行うと

41
00:02:08,830 --> 00:02:10,793
上手くいけば 歩行者が見つかる

42
00:02:10,793 --> 00:02:13,575
それから この薄いシアンの模様で行なえば

43
00:02:13,575 --> 00:02:16,120
車が 見つかるかもしれないし 見つからないかもしれない

44
00:02:16,120 --> 00:02:17,535
これの詳細は

45
00:02:17,535 --> 00:02:20,080
セグメンテーション アルゴリズムと呼ばれているが

46
00:02:20,080 --> 00:02:25,410
実行すると 多分2000個くらいの模様を見つけけるかもしれない

47
00:02:25,410 --> 00:02:31,544
その2000個に境界箱を置き その2000の模様にだけ 一斉射撃を行うんだ

48
00:02:31,544 --> 00:02:34,380
これで 場所の数は とても少なくなるだろう

49
00:02:34,380 --> 00:02:37,529
大規模一斉射撃を行う場所の数がね

50
00:02:37,529 --> 00:02:40,935
画像全体を通した 全ての位置で 行うのよりもね

51
00:02:40,935 --> 00:02:44,172
これは特別なケースだ 一斉射撃を行うのは

52
00:02:44,172 --> 00:02:48,055
正方形の領域でだけではない

53
00:02:48,055 --> 00:02:51,870
歩行者を見つけるのに 背の高い痩せた領域で行なったり

54
00:02:51,870 --> 00:02:57,915
車を見つけるのに 幅広の太った領域で行なったり
同様に様々な大きさで行なったりする

55
00:02:57,915 --> 00:03:02,170
これが R-CNN もしくは "Region with CNN" だ

56
00:03:02,170 --> 00:03:04,380
"Region with CNN" が持つアイデアだ

57
00:03:04,380 --> 00:03:08,305
さて R-CNN アルゴリズムは とても遅いことが分かる

58
00:03:08,305 --> 00:03:13,320
このアルゴリズムを速くするために 一連の仕事が為されてきた

59
00:03:13,320 --> 00:03:16,920
基本のR-CNN アルゴリズムは 候補領域を

60
00:03:16,920 --> 00:03:20,933
何らかのアルゴリズムで選んで それから 候補領域に１度に１つずつ射撃を行う

61
00:03:20,933 --> 00:03:22,380
そして 各領域それぞれに

62
00:03:22,380 --> 00:03:23,844
ラベルを出力する

63
00:03:23,844 --> 00:03:25,960
車が有るかか？ 歩行者が居るか？

64
00:03:25,960 --> 00:03:27,580
そこに バイクはあるか？

65
00:03:27,580 --> 00:03:30,090
それから さらに 境界箱も出力する

66
00:03:30,090 --> 00:03:36,510
もし その領域に 物体が実際にあるなら 正確な境界箱を得られる

67
00:03:36,510 --> 00:03:37,645
明らかにしておくと

68
00:03:37,645 --> 00:03:42,075
R-CNN アルゴリズムは 所与の境界箱には頼らないんだ

69
00:03:42,075 --> 00:03:44,540
それ自身 境界箱を出力する

70
00:03:44,540 --> 00:03:46,620
bx by bh bw

71
00:03:46,620 --> 00:03:51,045
より正確な境界箱を得るには

72
00:03:51,045 --> 00:03:56,070
画像セグメンテーション アルゴリズムで得られる模様は どんな大きさにでも囲える

73
00:03:56,070 --> 00:03:58,705
それは とても正確な境界箱になるだろう

74
00:03:58,705 --> 00:04:03,425
R-CNN アルゴリズムの欠点は 実際には とても遅いということだ

75
00:04:03,425 --> 00:04:04,470
何年間も

76
00:04:04,470 --> 00:04:08,295
R-CNN アルゴリズムは ちょっとずつ改良されてきた

77
00:04:08,295 --> 00:04:12,180
Russ Girshik は Fast R-CNN アルゴリズムを提案した

78
00:04:12,180 --> 00:04:15,150
それは 基本的には R-CNN アルゴリズムだけど

79
00:04:15,150 --> 00:04:18,290
スライディング ウィンドウの畳み込み処理を行う

80
00:04:18,290 --> 00:04:23,745
元の実装では 領域の分類を １度に１つ行っていた

81
00:04:23,745 --> 00:04:28,955
Fast R-CNN では スライディング ウィンドウの畳み込み処理を使う

82
00:04:28,955 --> 00:04:35,550
それは 今週の４番目のビデオで見たアイデアと 大体同じだ

83
00:04:35,550 --> 00:04:39,850
それで R-CNN をかなり速くする

84
00:04:40,390 --> 00:04:46,680
Fast R-CNN アルゴリズムにも １つ問題があった

85
00:04:46,680 --> 00:04:53,270
候補領域を集約するステップが まだ とても遅いことだ そこで 別のグループ

86
00:04:53,270 --> 00:04:56,025
Shaoqing Ren, Kaiming He, Ross Girshick, そして Jian Son が

87
00:04:56,025 --> 00:04:59,043
Faster R-CNN アルゴリズムを提案した

88
00:04:59,043 --> 00:05:02,520
それは 畳み込みニューラルネットワークを

89
00:05:02,520 --> 00:05:07,550
候補領域の模様を取り出すための伝統的なセグメンテーション アルゴリズムの代わりに使った

90
00:05:07,550 --> 00:05:12,487
それにより Fast R-CNN アルゴリズムよりも もっと速くなった

91
00:05:12,487 --> 00:05:15,810
ただし 私が思うに Faster R-CNN アルゴリズムは

92
00:05:15,810 --> 00:05:21,730
殆どの実装が YOLO アルゴリズムよりも かなり遅いままだ

93
00:05:21,730 --> 00:05:27,090
領域候補のアイデアは コンピュータ ビジョンにおいて 多くの影響を及ぼしてきた

94
00:05:27,090 --> 00:05:32,995
これらのアイデアを知っておいてほしい
なぜなら 他の人が これらのアイデアを使っているのを見るからね

95
00:05:32,995 --> 00:05:35,595
私の場合は 個人な意見だけど

96
00:05:35,595 --> 00:05:38,893
コンピュータ ビジョン研究コミュニティ全体としての意見ではないけど

97
00:05:38,893 --> 00:05:44,100
領域候補は 興味深いアイデアだけど ２つのステップが無いと思う

98
00:05:44,100 --> 00:05:45,630
最初は 領域候補 そして 一斉射撃

99
00:05:45,630 --> 00:05:49,800
それらを 全て同時に行えるということを

100
00:05:49,800 --> 00:05:53,085
YOLO "You Only Look Once" アルゴリズムと同じようにね

101
00:05:53,085 --> 00:05:56,885
それは 長期的に見た場合 より有望に思える

102
00:05:56,885 --> 00:05:58,995
ただし これは 私の個人的な見解で 必ずしも

103
00:05:58,995 --> 00:06:01,865
コンピュータ ビジョン研究コミュニティ全体の意見じゃない

104
00:06:01,865 --> 00:06:04,868
だから そのまま鵜呑みには しないでね

105
00:06:04,868 --> 00:06:07,550
でも R-CNN のアイデアは

106
00:06:07,550 --> 00:06:10,438
他の人が 使っているのに出くわすことがあるだろう

107
00:06:10,438 --> 00:06:14,460
だから 他の人のアルゴリズムを理解するには 学んでおく価値のあるものだ

108
00:06:14,460 --> 00:06:21,565
さーて 物体検出についての 今週の教材は これで終わり

109
00:06:21,565 --> 00:06:25,133
今週のプログラミング演習での作業を楽しんでほしい

110
00:06:25,133 --> 00:06:27,000
次週 会えるのを楽しみにしているよ
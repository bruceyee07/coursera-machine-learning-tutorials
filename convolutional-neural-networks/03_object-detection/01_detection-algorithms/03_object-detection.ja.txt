物体の位置決めと ランドマーク検出について 学んだ では 他の物体検出のアルゴリズムに行こう このビデオでは ConvNet を使い スライディング ウィンドウ 検出アルゴリズム
と呼ばれるものを使った物体検出のやり方を学ぶ 車検出アルゴリズムを作りたい とする こんなことができる 最初に ラベル付けした学習セットを作り つまり x と y だ それに ピッタリに切り抜いた車 画像 x は 正のサンプルで 車がある ここに車、ここに車 それから ここには車が無い ここにも無い この学習セットの目的は ピッタリ切り抜いた車の画像から 始められることだ つまり x は ほぼ車しか無い 写真を取って 切り抜きし 車だけにして 車以外を排除できる 最終的に ほぼ画像全体が 車を中心に置いたものになる このラベル付けした学習セットで ConvNet を訓練できる ピッタリ切り抜いた これらの画像でね そして ConvNet の仕事は y を出力することだ 0 か 1 か 車の有無を この ConvNet を訓練し終えたら スライディング ウィンドウ検出に それを使う やり方は こうだ このようなテスト画像があるとしたら 下にあるような あるウィンドウのサイズを選び それから ConvNet に 小さな四角形を入力する 赤い四角の下にある ここだけ取って ConvNet に 入力する そして ConvNet が予測を行う そして おそらく この赤い四角にある 小さい領域に対しては こう言ってくるだろう "無いよ この小さい赤い四角に 車は無い" スライディング ウィンドウ検出アルゴリズムでは それから ２番目の画像を 入力として渡す その画像は 少しだけずらした赤い四角で囲まれたもので それをConvNetに喰わせる 赤い四角内の画像領域だけを ConvNetに喰わせて 再び ConvNet を走らせる それから ３番目の画像でそれをやり 以下同様に続ける 画像内の全ての位置にウィンドウを スライドさせるまで 続ける この例では かなり大きなストライドを使っているが、それは アニメーションを速くするためだ ただし このサイズの全ての領域を通過させるのが 基本的な考え方だ そして あるストライドで得られる各位置において 沢山の小さな切り取った画像を ConvNetに渡し 0 か 1 か の分類をする さて これを一度やったら これは 画像を総なめする スライディング ウィンドウと呼ぶが これを繰り返す ただし 今度は より大きなウィンドウでだ 今度は 少しだけ大きな領域を取り その領域を調べる ConvNetが 想定している入力サイズが何であっても 領域の大きさを変えて それを ConvNet に喰わせて 0 か 1 の出力を得る それから ウィンドウを また あるストライドでスライドさせていく そして 終わりに来るまで 画像全体を舐める それから ３回目は さらに大きなウィンドウで 行なう よろしい
望んでいるのは これを行う場合 画像のどこかに車がある限りは 対応するウィンドウがあるだろうということだ 例えば もし このウィンドウをConvNet に渡せば うまくいけば ConvNet は この入力領域に 1 を出力するだろう それで そこに車があると検出する このアルゴリズムは スライディング ウィンドウ 検出と呼ばれる
なぜなら これらのウィンドウを これらの四角い箱を 画像全体に渡って スライドさせるからだ そして あるストライドの 全ての四角い領域で 車の有無を判定する さて スライディング ウィンドウ 検出には 大きな欠点がある それは 計算コストだ なぜなら とても多くの異なる四角い領域を 画像から切り抜いて それぞれを 個別に ConvNet にかけるからだ もし 非常に荒いストライドを使えば とても大きなストライド とても大きなステップサイズを使えば ConvNet に通すウィンドウの数は減るだろう しかし その粒度の荒さによって 性能は落ちるかもしれない 代わりに もし とても細かい粒度 非常に小さいストライドを 使えば この小さい領域の総数は巨大になって ConvNet に通すと 計算コストがとても高くなる ニューラルネットワークの登場前 人々は はるかに単純な分類器を使っていた 手作業による調整をした 単純な線形分類器のようなものを 物体検出に使っていた 当時は 各分類器は 比較的安く計算できた それは ただの線形関数で スライディング ウィンドウ 検出を実行しても問題無い それは 悪くない方法だった しかし ConvNet では １つの分類タスクを走らせるのが とても高価で このやり方のスライディング ウィンドウは 実行不可能なほど遅い また とても細かい粒度 とても小さなストライド を使わないと 画像内に実在する物体の 位置決めも できなくなる しかし 幸運にも この計算コスト問題には とても良い解決策がある 特に スライディング ウィンドウ 物体検出器は 畳み込んで とても効率的に 実装することができる 次のビデオで どうやってそれをやるのか見よう
どうしたら 物体検出アルゴリズムが うまく動いているか わかるだろうか？ このビデオでは "Intersection over Union" と呼ばれる関数について学ぶ それは 物体検出アルゴリズムを評価するのに使われる 次のビデオでも やるけどね それを使い 物体検出アルゴリズムに もう１つ要素を追加して もっと よく機能するようにする じゃ 始めよう
物体検出タスクでは 物体の位置を特定することも 期待されている これが 真の境界箱だ そして アルゴリズムが この紫の境界箱を出力したなら これは いい結果か それとも 悪い結果か？ "Intersection over Union" 関数は もしくは IoU は これら２つの境界箱の 結合域に対する 重なり域の比を計算する つまり この２つの境界箱を合わせたのは この領域で 両方の境界箱を含む領域のことだ 一方 重なり域は ここの小さい領域だ よって "Intersection over Union" は 重なり域の大きさ オレンジの影を付けた面積を 結合域のサイズ で割ったものだ それは 緑の影を付けた面だ そして 慣例では 多くのコンピュータ ビジョン タスクで 答えが正しいかは IoU が 0.5 より大きいかで判断される そして もし 予測と真の 境界箱が 完全に重なる場合 IoU は１になる なぜなら 重なり域が 結合域と 同じだからだ でも 一般的には IoU が 0.5 以上でありさえすれば 答えは OK で バッチリだ 慣例では 0.5 は 閾値として とても良く使われていて 予測した境界箱が 正しいか否かを 判定する これは 慣例に過ぎないけど もっと厳密にしたければ 答えが正しいという判定を IoU が 0.6 や それ以上にすればいい IoU を高くすれば 境界箱は より正確になる これが 位置決めを 行う方法の１つだ アルゴリズムが 正しく物体検出し 位置決めした回数を 数えるだけだ ここにあるような定義を使って 物体が正しく位置決めされたかどうかを また言うけど 0.5 は 人間が選んだ規約に過ぎない それには 特に深い論理的な理由がある訳ではない もっと厳密にしたければ 0.6 等 他の閾値を使える 時々 より厳しい 0.6 や 0.7 を使っているのを見かける 0.5 より小さいのにするのは 殆ど見ないけどね IoU を定義するは 物体検出アルゴリズムの 精度を評価するためだ 一般的には ２つの境界箱の重なり域を測る ２つの箱があれば 重なり域を計算できて 結合域も計算できて ２領域の比が分かる それから これは ２つの箱が お互いどのくらい似ているかの指標にもなる このやり方は 次のビデオで また見るよ "Non-Max Suppression" について話すときにね これが IoU "Intersection over Union" だ 約束手形の IOU と勘違いしないでね 誰かにお金を貸したときに 書いてもらう 「これだけのお金を "I Owe You"(借りがある)」も IOU と呼ばれる 全く違う概念だからね この２つが 似た名前なのは 面白いけどね 今度は この概念の IoU "Intersection over Union" についてだが 次のビデオでは "Non-Max Suppression" を議論したい それは YOLO の出力を もっと良くすることができるツールだ では次のビデオにいきましょう
你已经了解了目标定位和地标（特征点）检测 现在让我们来开始搭建一个目标检测算法 在这节视频中，你将会学习如何用一个<br />卷积神经网络(ConvNet) 和滑动窗口(sliding windows)检测的算法进行目标检测 假设你想搭建一个汽车检测算法 你可以这样做 你可以先创建一个有标记的训练数据集，X和对应的y 训练集中包含紧密剪裁的汽车样例 比如说，这张图像X是一个正类(是汽车)的样例 这是一辆车，这也是一辆车 这不是一辆车，这也不是一辆车 考虑到我们这个训练集的目的 你可以用紧密剪裁的汽车图像 也就是说X(图像中)基本上只包含车 你可以拍一张照片 把其余不是车的部分全部剪裁掉 然后得到一张汽车居中并占几乎全部画面的图像 有了这个有标记的训练数据集 你就可以训练一个卷积神经网络 输入一张紧密剪裁的图像 然后卷积神经网络负责输出y 1或0，是或不是车 当你训练好了这个卷积神经网络之后 你就可以把它用在滑动窗口检测中了 具体方法是 如果你有一张这样的测试图像，你要做的是 先选择一个如图所示的窗口尺寸 然后将一个小的矩形窗口(的图像)<br />输入到这个卷积神经网络中 也就是说，只取这个小的红色框内(的图像) 把它输入到卷积神经网络中 然后让卷积神经网络做一个预测 假设对于（图中左上角）那个红色小框的区域 它会说那个红色小框里没有车 在滑动窗口检测算法中 你然后要做的是输入 传递第二个图像作为输入 把这个移动了一点的红色小框范围内的图像<br />输入卷积神经网络 也就是说你只输入这个红色框区域内的图像 到卷积神经网络中，再运行一遍卷积神经网络 然后再用第三个图像做同样的工作 一直继续，直到你滑动窗口遍历了图像中的所有位置 我这里用了一个比较大的滑动步长(stride) <br />只为了让来让动画更快 但是基本思路是
遍历所有这个(红色窗口)尺寸的图像区域 将这些小的裁剪出来的图像 传递到卷积神经网络中 <br />然后将一定步长下每个位置(的图像)分类为0或1 现在，遍历完一次 用这个称为“滑动窗口”，遍历完图像之后 你再重复一次 不过这次用更大的窗口口 也就是说现在你取一个稍微大一点的区域 根据卷积神经网络的要求调整这个区域的大小 然后把它输入到卷积神经网络中 把这个窗口在一定步长下继续滑动 遍历整个图像 然后你可以用更大的窗口再执行第三次 我们的期望是，如果这么做 只要图像中某处有一辆车，就会有某个窗口 比如说你输入这个窗口区域里的图像 我们希望卷积神经网络会输出1 这样你就检测到了这里有一辆车 这个算法之所以被称为滑动窗口检测，是因为你把这些窗口 这些正方形边框，在一定步长下滑过整个图像 然后判定每个方框内的区域是否含有车 不过，滑动窗口检测有一个很大的缺点 就是它的计算成本 因为你裁剪出了很多不同的正方形的图像 并让每个图像都单独通过卷积神经网络的运算 如果你使用了一个不密集的步长 一个很大的步长，一个很大的步幅 那么通过卷积神经网络的窗口数量会减少 但是比较粗糙的颗粒度会影响算法表现 而如果你用了比较精细的颗粒度，也就是很小的步长 那么这些小区域的数量会巨大 将他们全部通过卷积神经网络意味着很高的计算成本 因此，在神经网络兴起之前，人们常用更简单的分类器 把一个简单的线性分类器 运用在手动设计的特征上进行目标检测 而且在那个时代，因为每个分类器的计算成本都相对较低 只是一个线性方程 滑动窗口检测是可行的 不是一个差方法 但是卷积神经网络运行一次分类任务的代价更高 这样的滑动窗口检测慢得不可行 而且除非你用很精细的颗粒度，也就是很小的步长 你最终很难在图像中精确地定位到目标 幸运的是，这个计算成本的问题有一个很好的解决方案 更确切地说，滑动窗口目标检测器 可以用卷积的形式(convolutionally)来更高效地实现 让我们在下一节视频中看看如何做到
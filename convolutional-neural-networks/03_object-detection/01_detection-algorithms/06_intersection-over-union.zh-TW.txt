你要怎麼知道，你的物件偵測表現好不好呢？ 這段影片你會學到一個函數，叫「交集除以聯集」
(Intersection Over Union) 我們會拿他來評估你物件偵測法的好壞 在下部影片，也會拿來 放到你的物件偵測演算法 讓你的演算法更厲害 讓我們開始吧。在物件偵測的任務中 你會需要定位其中的物件 假設這個是邊界框的解答 而你的演算法輸出的是這個紫色的框 這個結果是好還是壞呢？ 「交集除以聯集」所作的 簡稱 IoU，是計算兩個邊界框的交集再除以聯集 所以，兩個邊界框的聯集是這塊區域 被兩個框中的任一個所涵蓋的面積 而交集則是這塊比較小的區域 所以「交集除以聯集」是計算交集的大小 也就是橘色這塊面積 然後除以聯集的大小 也就是綠色的這塊。 根據慣例，在很多電腦視覺的問題中 會認為 IoU 大於 0.5 的答案是正確的 如果預測出來的邊界框和真實答案剛好一樣 那 IoU 會是 1 因為交集會等於聯集 不過一般來說，只要 IoU 大於等於 0.5 那答案會看起來不錯，還行 根據慣例，0.5 常被拿來 當作預測的邊界框是否「正確」的一個分界 這只是個慣例 如果你要更嚴格 你可以認為 IoU 要在 0.6 以上、或是其他數字以上，才能叫正確。 總之 IoU 越高 邊界框就越準。 所以，這方法可以將物件的「位置」 轉化成「正確率」：只要用這樣的定義數一數 這個演算法偵測/定位到物件的正確次數； 定位是否「正確」是採用這個定義。 再次強調，0.5 只是大家選的一個慣例 沒有特別理論上的考量 如果要更嚴格，你可以選其他的分界像是 0.6 我偶爾看到有人用更嚴格的 0.6 或 0.7 我幾乎沒看過有人用比 0.5 還低的。 那麼，我們知道了 IoU 定義的由來 所以拿他來評估，去計算 你的物件定位演算法是否準確， 不過更廣泛地說，IoU 可以度量兩個邊界框重疊的多寡 如果你有兩個框 你可以計算其交集 算出其聯集，然後算出兩個面積的比例 所以這也是拿來衡量兩個框框有多像的一個指標 在下部影片談到 "non-max suppression" 時 會再看到這種用法。 那麼，這就是 IoU，「交集除以聯集」 不要和本票裡面的 IOU 搞混了 你借別人錢，別人寫個借據： 「我欠你這些錢」這也叫 IOU (I owe you) 這兩個完全不一樣 不過這兩個東西有相同的名字還滿酷的 所以你現在知道了 IoU 交集除以聯集 在下一個影片中 我想和你討論 "non-max suppression"
（抑制非最大值） 是一個能讓 YOLO 輸出的結果變得更好的工具 讓我們進入下一段影片
1
00:00:00,000 --> 00:00:05,695
Karakteristik Nokta Saptama ve Nesne Yerseme'yi öğrendiniz.

2
00:00:05,695 --> 00:00:09,470
Şimdi, diğer nesne sezim algoritmalarına doğru ilerleyelim.

3
00:00:09,470 --> 00:00:13,005
Bu videoda, Kayan Pencerelerle Sezme Algoritması adı verilen şeyi

4
00:00:13,005 --> 00:00:18,150
kullanarak ConvNet'in nesne sezimine nasıl uygulandığını öğreneceksiniz.

5
00:00:18,150 --> 00:00:21,154
Diyelim ki bir araba sezim algoritması geliştirmek istiyorsunuz.

6
00:00:21,154 --> 00:00:22,315
İşte yapabilecekleriniz.

7
00:00:22,315 --> 00:00:24,734
İlk olarak bir etiketli eğitim seti oluşturabilirsiniz,

8
00:00:24,734 --> 00:00:29,100
birbirine benzer kırpılmış araba örnekleri ile x ve y.

9
00:00:29,100 --> 00:00:32,970
Yani, bu görüntü x bir pozitif örnek, bir araba var,

10
00:00:32,970 --> 00:00:35,140
bir araba var, bir araba var,

11
00:00:35,140 --> 00:00:37,755
ve sonra bu bir araba değil, bu bir araba değil.

12
00:00:37,755 --> 00:00:39,840
Ve bu eğitim setindeki amaç için,

13
00:00:39,840 --> 00:00:43,733
birbirine benzer kırpılmış araba görsellerinden biriyle başlayabilirsiniz.

14
00:00:43,733 --> 00:00:47,365
Yani x neredeyse tamamen yalnızca bir arabadır.

15
00:00:47,365 --> 00:00:49,650
Bunun için, bir fotoğrafı alın ve kesin, yalnızca

16
00:00:49,650 --> 00:00:52,340
arabanın bir parçası olmayan yerleri kesin.

17
00:00:52,340 --> 00:00:57,450
Böylece, tüm görüntünün neredeyse tamamında ortalanmış bir araba elde edersiniz.

18
00:00:57,450 --> 00:01:01,090
Bu etiketli eğitim seti göz önünde tutulursa,

19
00:01:01,090 --> 00:01:05,412
sonra bu birbirine benzer kırpılmış görüntülerden birine benzeyen

20
00:01:05,412 --> 00:01:07,977
bir görüntü ile ConvNet'i eğitebilirsiniz.

21
00:01:07,977 --> 00:01:12,135
Ve sonra ConvNet'in işi bir y çıktısı vermek,

22
00:01:12,135 --> 00:01:15,090
sıfır veya bir, bir araba var veya yok.

23
00:01:15,090 --> 00:01:17,044
Bu ConvNet'i eğittiğinizde,

24
00:01:17,044 --> 00:01:20,515
artık onu Kayan Pencerelerle Sezme'de kullanabilirsiniz.

25
00:01:20,515 --> 00:01:21,870
Bunu yapmanın yolu,

26
00:01:21,870 --> 00:01:25,560
eğer bunun gibi bir test görüntünüz varsa, yaptığınız

27
00:01:25,560 --> 00:01:29,625
gösterilen belirli bir pencere boyutunu seçerek başlamak.

28
00:01:29,625 --> 00:01:35,070
Ve sonra bu ConvNet'e küçük bir dörtgen bölgeyi gireceksiniz.

29
00:01:35,070 --> 00:01:38,670
Yani, sadece bu küçük kırmızı kareyi alın

30
00:01:38,670 --> 00:01:41,235
ve onu ConvNet'e girin

31
00:01:41,235 --> 00:01:43,020
ve ConvNet'e bir öngörü yaptırın.

32
00:01:43,020 --> 00:01:47,215
Ve büyük olasılıkla kırmızı kare içindeki bu küçük bölge için,

33
00:01:47,215 --> 00:01:50,640
"hayır, bu küçük kırmızı kare bir araba içermiyor" diyecek.

34
00:01:50,640 --> 00:01:52,310
Kayan Pencerelerle Sezme Algoritmasında,

35
00:01:52,310 --> 00:01:56,900
yaptığınız şimdi kırmızı kare tarafından sınırlandırılan

36
00:01:56,900 --> 00:02:00,000
ikinci görüntüyü biraz daha kaydırmak

37
00:02:00,000 --> 00:02:03,970
ve ConvNet'i onunla beslemek.

38
00:02:03,970 --> 00:02:06,715
Yani, ConvNet'i sadece kırmızı karedeki görüntü bölgesiyle

39
00:02:06,715 --> 00:02:10,665
besliyorsunuz ve ConvNet'i tekrar çalıştırıyorsunuz.

40
00:02:10,665 --> 00:02:16,275
Ve sonra bunu üçüncü görüntüyle yapıyorsunuz ve böyle devam ediyorsunuz.

41
00:02:16,275 --> 00:02:23,415
Ve pencereyi görüntüdeki tüm pozisyonda boydan boya kaydırana kadar devam ediyorsunuz.

42
00:02:23,415 --> 00:02:28,975
Ve bu örnekte, animasyonun daha hızlı ilerlemesini sağlamak için oldukça büyük bir adımı kullanıyorum.

43
00:02:28,975 --> 00:02:34,700
Ancak amaç, temelde bu boyuttaki her bölgeden geçmeniz,

44
00:02:34,700 --> 00:02:38,460
çok sayıda küçük kırpılmış görüntüyü ConvNet'e geçirmeniz ve

45
00:02:38,460 --> 00:02:45,125
bir adım olarak her pozisyonu sıfır veya bir olarak sınıflandırmanızdır.

46
00:02:45,125 --> 00:02:47,085
Şimdi, görüntü boyunca kayan pencereler olarak adlandırılan

47
00:02:47,085 --> 00:02:54,230
bunu bir kez çalıştırarak yaptık.

48
00:02:54,230 --> 00:02:55,295
Sonra onu tekrar edin,

49
00:02:55,295 --> 00:02:57,710
ancak şimdi daha geniş bir pencere kullanın.

50
00:02:57,710 --> 00:03:02,191
Böylelikle, şimdi kayan daha geniş bir bölge alacak ve onu çalıştıracaksınız.

51
00:03:02,191 --> 00:03:06,440
Yani, girdi boyutu ne olursa olsun bu bölgeyi yeniden boyutlandırıp ConvNet'e girmeniz,

52
00:03:06,440 --> 00:03:10,235
ConvNet'i onunla beslemeniz ve sıfır veya bir çıktısı almanız beklenir.

53
00:03:10,235 --> 00:03:15,305
Ve sonra birkaç adım kullanarak pencereyi kaydırın ve böyle devam edin.

54
00:03:15,305 --> 00:03:20,500
Ve bitirene dek girdiğiniz görüntüyü boydan boya çalıştırın.

55
00:03:20,500 --> 00:03:26,283
Ve sonra üçüncü kez daha da geniş pencerelerle yapabilir ve böyle devam edebilirsiniz.

56
00:03:26,283 --> 00:03:29,738
Tamam. Ve bunu yaparsanız umulan şudur ki

57
00:03:29,738 --> 00:03:36,080
görüntünün bir yerinde bir araba olduğu sürece bir pencere olacak,

58
00:03:36,080 --> 00:03:40,200
örneğin bu pencereyi ConvNet'e geçirirseniz,

59
00:03:40,200 --> 00:03:44,890
umuyorum ki ConvNet şu girdi bölgesi için bir çıktısı verecek.

60
00:03:44,890 --> 00:03:47,825
Böylelikle orada olan bir arabayı sezeceksiniz.

61
00:03:47,825 --> 00:03:52,895
Bu algoritma Kayan Pencerelerle Sezme olarak adlandırılıyor çünkü bu çerçeveleri,

62
00:03:52,895 --> 00:03:58,745
bu kare kutuları alıyor ve onları girilen görüntü boyunca kaydırıyorsunuz

63
00:03:58,745 --> 00:04:05,770
ve küçük adımlarla her kare bölgeyi araba içeriyor veya içermiyor diye sınıflandırıyorsunuz.

64
00:04:05,770 --> 00:04:10,055
Bu noktada, Kayan Pencerelerle Sezmenin büyük bir dezavantajı var,

65
00:04:10,055 --> 00:04:12,704
o da işlem maliyeti.

66
00:04:12,704 --> 00:04:16,460
Çünkü görüntüde birçok farklı kare bölgeyi kesiyorsunuz

67
00:04:16,460 --> 00:04:21,370
ve her birini bağımsız olarak ConvNet'te çalıştırıyorsunuz.

68
00:04:21,370 --> 00:04:24,505
Ve eğer çok kaba, çok büyük bir adım

69
00:04:24,505 --> 00:04:26,745
boyutu kullanırsanız,

70
00:04:26,745 --> 00:04:31,598
bu ConvNet'e geçirmeniz gereken pencerelerin sayısını azaltacaktır,

71
00:04:31,598 --> 00:04:35,810
ancak bu kaba tanecikler performansa zarar verebilir.

72
00:04:35,810 --> 00:04:39,630
Oysa çok iyi tanecikler veya çok küçük adımlar kullanırsanız,

73
00:04:39,630 --> 00:04:44,005
o zaman ConvNet'e girdiğiniz bu çok sayıda küçük bölgelerin tümü

74
00:04:44,005 --> 00:04:48,995
çok yüksek işlem maliyeti anlamına gelir.

75
00:04:48,995 --> 00:04:54,180
Sinir Ağları'nın yükselişinden önce, insanlar nesne sezme uygulamaları için

76
00:04:54,180 --> 00:04:56,910
mühendislik özellikleriyle eldeki basit bir doğrusal sınıflandırıcı

77
00:04:56,910 --> 00:05:00,450
gibi basit sınıflandırıcıları kullanırlardı.

78
00:05:00,450 --> 00:05:04,870
Ve o dönemde, her sınıflandırıcı hesaplamak için nispeten maliyetsizdi,

79
00:05:04,870 --> 00:05:06,480
sadece bir doğrusal fonksiyondu.

80
00:05:06,480 --> 00:05:08,980
Kayan Pencerelerle Sezme iyi geldi.

81
00:05:08,980 --> 00:05:10,395
Kötü bir yöntem değildi,

82
00:05:10,395 --> 00:05:15,450
ancak şimdi ConvNet'le tekil bir sınıflandırma görevi

83
00:05:15,450 --> 00:05:21,125
çok maliyetli ve bu yolla pencereleri kaydırmak imkansız derecede yavaş.

84
00:05:21,125 --> 00:05:26,305
Çok iyi bir tanecik veya çok küçük bir adım kullanıncaya dek,

85
00:05:26,305 --> 00:05:32,850
görüntü içindeki nesneleri doğru biçimde yerseyemezsiniz.

86
00:05:32,850 --> 00:05:38,575
Ancak şükür ki, bu işlem maliyeti probleminin çok iyi bir çözümü var.

87
00:05:38,575 --> 00:05:41,845
Özellikle, Kayan Pencerelerle Nesne Sezici

88
00:05:41,845 --> 00:05:45,935
evrişimli veya çok daha verimli bir şekilde uygulanabilir.

89
00:05:45,935 --> 00:05:48,310
Hadi nasıl yapabileceğinizi sonraki videoda görelim.
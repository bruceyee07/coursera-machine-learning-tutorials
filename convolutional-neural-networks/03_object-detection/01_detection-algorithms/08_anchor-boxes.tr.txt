Şimdiye kadar gördüğümüz nesne algılama ile ilgili sorunlardan biri her sistem hücresinin sadece bir nesneyi algılayabilmesi. Peki ya bir grid hücre birden çok nesneyi algılamak istiyorsa? İşte yapabileceğiniz şey. Çapa kutuları fikrini kullanabilirsiniz. Bir örnek ile başlayalım. Diyelim ki böyle bir görüntü var ve bu örnekte, 3 e 3 lük bir grid kullanmaya devam edeceğim. Yayanın ve arabanın orta noktalarının hemen hemen aynı yerde olduğuna ve her ikisinin de aynı grid hücresine girdiğine dikkat edin. Yani, bu grid hücresi için, eğer Y bu vektörü 3 sebep tespit ettiğiniz bir yere çıkartıyorsa, yayalar, arabalar ve motorsikletler, 2 tespit çıktı vermesi mümkün olmayacaktır. Yani, çıktı için 2 tespitten birini seçmem gerekecek. Çapa kutusu fikri ile, yapacağınız, çapa kutular veya çapa kutu şekilleri adını verdiğiniz iki farklı şekili önceden tanımlamaktır. Ve şimdi yapacağınız ise, iki öngörüyü iki çapa kutusu ile ilişkilendirebilmektir. Ve genel olarak, daha fazla çapa kutusu kullanabilirsiniz, belki 5 veya hatta daha fazla. Fakat bu video için, ben tanımlamayı daha kolay yapabilmek için iki çapa kutusu kullanacağım. İşte yapacağınız, çapraz etiketi, soldaki bu vektör yerine tanımlıyorsunuz, bunu iki kere tekrarlıyorsunuz. Yani, PC, PX, PY PH, PW, C1, C2, C3 oluyor, ve bunlar çapa kutusu 1 ile ilişkilendirilmiş sekiz çıktı olmuş oluyor. Ve sonra PC'yi tekrar ediyorsunuz PX ve en aşağıda C1'e kadar, C2, C3 ve çağa kutusu 2 ile ilişkilendirilmiş diğer sekiz çıktıyı. Yani, şeklinden ötürü yaya çapa kutusu 1'in ve çapa kutusu 2'nin şekline daha yakın, PC'yi bir olarak kodlamak için bu sekiz sayıyı kullanabilirsiniz. Evet burada bir yaya var. Bunu yayanın çevresinde bir sınırlayıcı kutu kodlamak için kullanın, ve sonra bunu nesnenin bir yaya olduğunu kodlamak için kullanın. Ve sonra arabanın çevresindeki kutu çapa kutusu 1'e kıyasla çapa kutusu 2'nin şekline daha yakın olduğu için, sonra bunu buradaki ikinci nesnenin araba olduğunu kodlamak için kullanabilirsiniz, ve sınırlayıcı kutunuz olabilir ve tüm parametreler tanımlanmış araba ile ilişkilendirilebilir. Yani, özetlemek gerekirse, çapa kutularını kullanmadan önce, şunu yaptınız, eğitim setindeki tüm nesneler ve eğitim seti görseli için, o nesnenin orta noktasına denk gelen grid hücresine tanımlanmıştı. Ve Y çıktısı 3e 3e 8 di çünkü 3e 3lük bir grid var. Ve her bir grid pozisyonu için, PC olan çıktı vektörümüz ve sınırlayıcı kutumuz C1, C2, C3 ümüz var. Çapa kutusu ile, şimdi şunu yapıyoruz. Şimdi, her bir nesne daha önce olduğunun aynı grid hücresine atanıyor, nesnenin orta noktasını içeren grid hücresine atanıyor, ama bir grid hücresine atanıyor ve nesnenin şekli ile en yüksek IoU'ya sahip çapa kutusuna. Yani, iki çapa kutunuz var, Bir nesne alacak ve bakacaksınız. Yani, bu şekilde bir nesneniz varsa, yapacağınız iki çapa kutunuzu almaktır. Belki bir çapa kutusu, çapa kutusu 1, bu şekildir belki çapa kutusu 2 bu şekildir, ve sonra bu iki çapa kutunuzdan hangisinin daha yüksek IoU'ya sahip olduğuna bakacaksınız, sınırlayıcı kutu kanalıyla çizilecek. Ve hangisi olursa, o nesne daha sonra sadece bir grid hücresine değil bir çifte atanmış oluyor. Bir grid hücresi virgül bir çapa kutusu çiftine atanmış oluyor. Ve bu, bu nesnenin hedef etikete nasıl kodlandığıdır. Ve şimdi, Y çıktısı 3e 3e 16 olmuş olacak. Çünkü önceki slaytta gördüğünüz gibi, Y şimdi 16 boyutlu. Veya isterseniz, bunu 3e 3e 2ye 8 olarak da görebilirsiniz çünkü şimdi iki çapa kutusu var ve Y sekiz boyutlu. Ve Y'nin boyutunun sekiz olması üç nesnemiz olması sebebiyledir daha fazla nesnemiz lsa Y'nin boyutu daha da yüksek olacaktır. Şimdi, bütün bir örnek üzerinden gidelim. Bu grid hücresi için, şimdi Y'nin ne olduğunu tanımlayalım. Yaya çapa kutusu 1'in şekline daha yakın. Yani yaya için, bu vektörün üst yarısına atayacağız. Yani evet, burada bir nesne var, bu yaya ile ilişkili bir sınırlayıcı kutu olacak. Ve tahmin ediyorum ki, eğer yaya cos bir olacaksa, biri bir olarak göreceğiz ve sonra sıfır, sıfır. Ve sonra arabanın şekli çapa kutusu 2ye daha yakın Ve yani bu vektörün kalanı bir olack ve sonra araba ile ilişkili sınırlayıcı kutu, ve sonra araba C2 yani burada sıfır, bir, sıfır. Ve işte bu da bu okun işaret ettiği aşağı orta grid hücresi için Y etiketi. Şimdi, ya bu grid hücresinde sadece bir araba olsaydı ve hiç yaya olmasaydı? Eğer sadece bir araba olsaydı, Çevresindeki sınırlayıcı kutunun şeklinden hareketle, arabanın şeklinin yine de çapa kutusu ikiye daha yakın olduğunu söyleyebilirdir. ve sonra hedef etiket Y, eğer orada sadece araba olsaydı ve yaya gitmiş olsaydı, yine de çapa kutusu 2 bileşeni için aynı olacaktı. Hatırlayın k, bu çapa kutusu 2'ye karşılık gelen vektörün bir parçası. Ve çapa kutusu 1e karşılık gelen vektörün parçası için, sadece orada bir nesne olmadığını söylüyorsunuz. Yani PC sıfır, ve sonra bu kalanlar önemsenmeyenler oluyor. Şimdi, sadece birkaç ilave detay. Ya iki çapa kutunuz ve aynı grid hücresi içinde üç objeniz varsa? Bu, bu algoritmanın iyi ele alamadığı durumlardan biridir. Umalım ki bu olmasın. Ama eğer olursa, bu algoritmanın bununla baş etmek için iyi bir yolu yok. Bu durumda sadece önceden tanımlı bir eşitlik bozucuyu tetikleyecektir. Veya, ya aynı grid hücresi ile ilişkili iki nesneniz varsa, ama her ikisi de aynı çapa kutu şekline sahipse? Yine bu, bu algoritmanın iyi ele alamadığı durumlardan biridir. Eğer bu olduğunda önceden tanımlanmış bir eşitlik bozucuyu tetiklerseniz, umarız ki veri setinizde bu olmaz, çok olmayacaktır. Ve böylece, performansı çok etkilemeyecektir. İşte, çapa kutuları için anlatacaklarımız bu kadar. Ve her ne kadar çapa kutularını nesneler aynı grid hücresinde olduğunda ne yapılacağı konusunda bir yol olarak özendirmiş olsam da, pratikte bu oldukça nadiren olur, özellikle eğer 3e 3ten se 19a 19luk bir grid kullanıyorsanız. bu 361 hücrede iki nesnenin aynı orta noktaya sahip olmaları, bu olabilir, ama çok sık olmaz. Belki çapa kutularının size verebileceği daha iyi bir motivasyon veya daha iyi sonuçlar öğrenme algoritmanızın daha iyi özelleşmesine izin vermesidir. Özellikle, eğer veri setinizde yayalar gibi uzun ve ince nesneler varsa, ve arabalar gibi bazı beyaz objeler varsa, bu öğrenme algoritmanızın özelleşmesine izin veriyor ve böylece bazı çıktılar beyazı tanımlamada özelleşiyor, arabalar gibi tombul nesneleri, ve bazı çıktı üniteleri yayalar gibi uzun, ince objeleri tanımlamada özelleşiyor. Son olarak, bu çapa kutuları nasıl seçiyorsunuz? Ve insan oları sadece elle seçiyordu ve tanımlıyormuşsunuz gibi görünen nesne tiplerini kapsarmış gibi görünen çeşitli şekil aralığındaki beş veya 10 çapa kutusu. Çok daha gelişmiş bir sürümde, önden makina öğrenmesi bilgisi olanlar için, daha sonraki YOLO araştırma makalelerinden birinde, bunun çok daha iyi bir yol, Elinizde olma eğiliminde olan iki nesne şeklini bir araya gruplamak için K merkezli algoritma kullanmaktır. Ve sonra bunu saptamaya çalıştığınız belki birden çok belki düzinelerce nesne sebebini en basmakalıp şekilde temsil edecek çapa kutusu setlerini seçmek için kullanmaktır. Fakat çapa kutularını otomatik olarak seçmek için daha gelişmiş bir yol var. Ve eğer elle, nesne seçillerini mantıklı bir şekilde büyüten çeşitli şekiller seçerseniz, bazı uzun, ince olanları bazı tombul beyaz olanları tespit etmeyi umabilirsiniz. Bunlarla da çalışmalıdır. Çapa kutular için anlatacaklarımız bu kadar. Bir sonraki videoda, gördüğümüz herşeyi alalım ve YOLO algoritmasına bağlayalım.
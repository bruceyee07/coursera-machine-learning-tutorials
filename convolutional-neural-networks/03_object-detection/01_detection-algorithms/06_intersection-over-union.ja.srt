1
00:00:00,000 --> 00:00:05,040
どうしたら 物体検出アルゴリズムが うまく動いているか わかるだろうか？

2
00:00:05,040 --> 00:00:10,234
このビデオでは "Intersection over Union" と呼ばれる関数について学ぶ

3
00:00:10,234 --> 00:00:14,115
それは 物体検出アルゴリズムを評価するのに使われる

4
00:00:14,115 --> 00:00:16,485
次のビデオでも やるけどね

5
00:00:16,485 --> 00:00:20,625
それを使い 物体検出アルゴリズムに もう１つ要素を追加して

6
00:00:20,625 --> 00:00:22,610
もっと よく機能するようにする

7
00:00:22,610 --> 00:00:25,495
じゃ 始めよう
物体検出タスクでは

8
00:00:25,495 --> 00:00:28,920
物体の位置を特定することも 期待されている

9
00:00:28,920 --> 00:00:31,870
これが 真の境界箱だ

10
00:00:31,870 --> 00:00:35,890
そして アルゴリズムが この紫の境界箱を出力したなら

11
00:00:35,890 --> 00:00:38,900
これは いい結果か それとも 悪い結果か？

12
00:00:38,900 --> 00:00:44,610
"Intersection over Union" 関数は

13
00:00:44,610 --> 00:00:53,650
もしくは IoU は これら２つの境界箱の 結合域に対する 重なり域の比を計算する

14
00:00:53,650 --> 00:00:59,195
つまり この２つの境界箱を合わせたのは この領域で

15
00:00:59,195 --> 00:01:06,090
両方の境界箱を含む領域のことだ

16
00:01:06,090 --> 00:01:11,580
一方 重なり域は ここの小さい領域だ

17
00:01:11,580 --> 00:01:18,850
よって "Intersection over Union" は 重なり域の大きさ

18
00:01:18,850 --> 00:01:22,598
オレンジの影を付けた面積を

19
00:01:22,598 --> 00:01:27,520
結合域のサイズ で割ったものだ

20
00:01:27,520 --> 00:01:30,430
それは 緑の影を付けた面だ

21
00:01:30,430 --> 00:01:34,195
そして 慣例では 多くのコンピュータ ビジョン タスクで

22
00:01:34,195 --> 00:01:39,355
答えが正しいかは IoU が 0.5 より大きいかで判断される

23
00:01:39,355 --> 00:01:45,310
そして もし 予測と真の 境界箱が 完全に重なる場合

24
00:01:45,310 --> 00:01:47,054
IoU は１になる

25
00:01:47,054 --> 00:01:50,105
なぜなら 重なり域が 結合域と 同じだからだ

26
00:01:50,105 --> 00:01:55,195
でも 一般的には IoU が 0.5 以上でありさえすれば

27
00:01:55,195 --> 00:01:59,685
答えは OK で バッチリだ

28
00:01:59,685 --> 00:02:03,880
慣例では 0.5 は 閾値として とても良く使われていて

29
00:02:03,880 --> 00:02:10,130
予測した境界箱が 正しいか否かを 判定する

30
00:02:10,130 --> 00:02:11,650
これは 慣例に過ぎないけど

31
00:02:11,650 --> 00:02:12,975
もっと厳密にしたければ

32
00:02:12,975 --> 00:02:14,790
答えが正しいという判定を

33
00:02:14,790 --> 00:02:19,845
IoU が 0.6 や それ以上にすればいい

34
00:02:19,845 --> 00:02:21,570
IoU を高くすれば

35
00:02:21,570 --> 00:02:24,425
境界箱は より正確になる

36
00:02:24,425 --> 00:02:27,625
これが 位置決めを 行う方法の１つだ

37
00:02:27,625 --> 00:02:32,560
アルゴリズムが 正しく物体検出し 位置決めした回数を 数えるだけだ

38
00:02:32,560 --> 00:02:37,815
ここにあるような定義を使って

39
00:02:37,815 --> 00:02:42,410
物体が正しく位置決めされたかどうかを

40
00:02:42,410 --> 00:02:46,515
また言うけど 0.5 は 人間が選んだ規約に過ぎない

41
00:02:46,515 --> 00:02:49,535
それには 特に深い論理的な理由がある訳ではない

42
00:02:49,535 --> 00:02:54,640
もっと厳密にしたければ 0.6 等 他の閾値を使える

43
00:02:54,640 --> 00:03:00,070
時々 より厳しい 0.6 や 0.7 を使っているのを見かける

44
00:03:00,070 --> 00:03:04,100
0.5 より小さいのにするのは 殆ど見ないけどね

45
00:03:04,100 --> 00:03:08,065
IoU を定義するは

46
00:03:08,065 --> 00:03:10,540
物体検出アルゴリズムの

47
00:03:10,540 --> 00:03:14,080
精度を評価するためだ

48
00:03:14,080 --> 00:03:20,340
一般的には ２つの境界箱の重なり域を測る

49
00:03:20,340 --> 00:03:22,430
２つの箱があれば

50
00:03:22,430 --> 00:03:23,980
重なり域を計算できて

51
00:03:23,980 --> 00:03:29,040
結合域も計算できて ２領域の比が分かる

52
00:03:29,040 --> 00:03:34,985
それから これは ２つの箱が お互いどのくらい似ているかの指標にもなる

53
00:03:34,985 --> 00:03:37,535
このやり方は 次のビデオで また見るよ

54
00:03:37,535 --> 00:03:40,225
"Non-Max Suppression" について話すときにね

55
00:03:40,225 --> 00:03:46,170
これが IoU "Intersection over Union" だ

56
00:03:46,170 --> 00:03:50,720
約束手形の IOU と勘違いしないでね

57
00:03:50,720 --> 00:03:53,610
誰かにお金を貸したときに 書いてもらう

58
00:03:53,610 --> 00:03:55,940
「これだけのお金を "I Owe You"(借りがある)」も IOU と呼ばれる

59
00:03:55,940 --> 00:03:58,110
全く違う概念だからね

60
00:03:58,110 --> 00:04:03,111
この２つが 似た名前なのは 面白いけどね

61
00:04:03,111 --> 00:04:07,730
今度は この概念の IoU "Intersection over Union" についてだが

62
00:04:07,730 --> 00:04:09,055
次のビデオでは

63
00:04:09,055 --> 00:04:12,045
"Non-Max Suppression" を議論したい

64
00:04:12,045 --> 00:04:16,770
それは YOLO の出力を もっと良くすることができるツールだ

65
00:04:16,770 --> 00:04:18,470
では次のビデオにいきましょう
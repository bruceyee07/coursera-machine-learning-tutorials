你已經見過了物件偵測大部分的要素 在這部影片，讓我們集結所有要素 組成 YOLO 物件偵測演算法 首先，讓我們看看如何建造訓練集 假設你想訓練演算法去偵測 三種物件：路人、汽車和機車 你不用特別把背景類別寫出來 所以用這些標籤就好。 如果你用兩個錨框 那麼輸出 y 會是 3乘3 — 因為你用 3乘3 格子 — 乘以2，這是錨框的數量 — 乘以8，因為是這邊的維度 8 其實是 5 再加上類別的數量 而 5 是因為你有 p_c 還有邊界框 這樣是 5；然後是 c_1, c_2, c_3 — 這等於類別的數量。 你可以把這看成是 3乘3乘2乘8 或是 3乘3乘16。 那麼，要建出訓練集 你對於 9 個格子的每一格，做出適當的目標向量 y 所以拿第一格 這一格裡沒有值得偵測的東西 行人汽車機車都沒有 在左上角這格出現，所以 這一格對應的目標 y 會等於這個 其中第一個錨框的 p_c 是 0，因為沒有任何物件和這個錨框有關聯 第二個錨框也是 0 所以其他的值都是「無關」。 那麼，大部分的格子裡面都沒東西 不過呢，對於那一個格子 你會有這一個目標向量 y 假設你的訓練資料對於這輛車有這樣的邊界框 他稍微寬一點、不是高的 所以如果你的錨框是這樣 這是錨框1 這是錨框2 那麼這紅色框框跟錨框2的 IoU 比較大 於是這輛車會連結到向量的下半部 所以注意到錨框1的 p_c 是 0 所以這邊都是「無關」 然後，這個 p_c 等於 1 然後你要用這些值代表紅色邊界框的位置 然後，你要指定這物件的正確類別是類別2 這是一輛車。 所以你照這樣子做，對於 9 格位置的每一格、3乘3格子的每一格 你會算出像這樣的向量 給出 16 維的向量， 這就是為什麼最終的輸出容積是 3乘3乘16 照例地為了簡便，我用的是 3乘3 的格子 實務上這比較像是 19乘19乘16 或者實際上，如果你使用更多錨框 可能會是 19乘19乘5乘8 — 5乘8是40 所以會是 19乘19乘40 如果用五個錨框會是這樣。 那麼，這就是訓練。你訓練一個 ConvNet，輸入一張圖 可能是 100乘100乘3 而 ConvNet 最後輸出這樣的容積，在我們的例子是 3乘3乘16，或是 3乘3乘2乘8。 接下來，讓我們看看你的演算法怎麼做預測 給一張圖片，你的神經網路會輸出這 3乘3乘2乘8 的容積 其中，九格的每一格會有像這樣的向量 所以對於左上角的這格 如果沒有物件 希望你的神經網路會在這邊輸出 0 這邊放 0，然後其他輸出某些值 你的神經網路無法輸出問號 沒辦法輸出「無關」項 所以其餘的地方我會放某些數字 不過基本上那些數字會被忽略 因為神經網路告訴我們沒有物件 所以無論輸出什麼邊界框、輸出是不是車，這些都不重要 基本上就是某些數字，算是種噪音。 相較之下，對於這一格，我們希望 那一格輸出的 y 的值 希望對於第一個邊界框會像是 0 然後一堆數字、噪音 然後希望，你也會輸出一些數字 能夠準確地對應到車子的邊界框。 這就是神經網路如何做預測。 最後，你會跑過「抑制非最大值」 為了更有趣 我們來看一張新的測試圖片 你會這樣子跑抑制非最大值： 如果你用兩個錨框 那麼對於九格中每一格 你得到兩個預測的邊界框 他們有一些會有非常低的機率 非常低的 p_c，不過你仍然得到 兩個邊界框的預測，對於這九格的每一格。 所以假設這些是你拿到的邊界框 注意到一些邊界框的長寬 會超出他所在的格子。 接下來，你丟掉機率低的預測 丟掉那些神經網路覺得 「天啊這物件大概不在這」的預測 所以，丟掉那些。 最後呢，如果你想偵測的類別有三種 你想偵測行人、汽車跟機車 你要做的是，對於三個類別的每一類 各自獨立跑抑制非最大值 跑在那些被預測成同一類的物件們 對預測成路人的，做抑制非最大值 對預測成汽車類別的，跑抑制非最大值 對預測成機車類別的，跑抑制非最大值 基本上跑過三次，生出最後的預測。 這個輸出，我們希望你能偵測到 這張圖裡所有的汽車和行人。 那麼，這就是 YOLO 物件偵測演算法 他是最有效的物件偵測演算法之一 他也包含很多非常棒的想法 包括眾多和物件偵測有關的電腦視覺文獻 而現在，你有機會練習自己實作裡面很多的元件 就在這禮拜的程式作業。 所以我希望你能享受這禮拜的程式練習 這部影片後還有一部選修的影片 你可以選擇看或不看 不過無論如何，我很期待我們下禮拜的見面
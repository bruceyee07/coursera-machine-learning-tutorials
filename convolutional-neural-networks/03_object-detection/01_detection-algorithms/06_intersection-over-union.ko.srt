1
00:00:00,000 --> 00:00:05,040
객체 탐지 알고리즘이 잘 작동하는지 어떻게 알 수 있습니까?

2
00:00:05,040 --> 00:00:10,234
이 강의에서는 'Intersection over Union, (IoU)’ 이라는 함수에 대해 배우게 됩니다.

3
00:00:10,234 --> 00:00:14,115
우리는 객체 탐지 알고리즘을 평가할 때와

4
00:00:14,115 --> 00:00:16,485
다음 강의에서 다룰 내용인

5
00:00:16,485 --> 00:00:20,625
그것을 사용하여 다른 물체 탐지 알고리즘에 다른 구성 요소를 추가하여 더 잘 작동되도록 하는 것

6
00:00:20,625 --> 00:00:22,610
이 둘 모두를 위해서 이것을 사용합니다.

7
00:00:22,610 --> 00:00:25,495
시작해봅시다. 객체 탐지 과제를 할 때,

8
00:00:25,495 --> 00:00:28,920
객체의 위치를 측정하기를 원합니다.

9
00:00:28,920 --> 00:00:31,870
그것이 실측된 바운딩 박스라면

10
00:00:31,870 --> 00:00:35,890
그리고 여러분의 알고리즘이 보라색으로 된 이 바운딩박스를 아웃풋 한다면,

11
00:00:35,890 --> 00:00:38,900
이것은 좋은 결과일까요 나쁜 결과일까요?

12
00:00:38,900 --> 00:00:44,610
그래서 이 Intersection over Union 즉 IoU 함수가 하는 일은

13
00:00:44,610 --> 00:00:53,650
이 두 개의 바운딩 박스의 Intersection over Union를 계산하는 것입니다.

14
00:00:53,650 --> 00:00:59,195
따라서, 이 두 개의 바운딩박스 결합부위는 이 영역인데요,

15
00:00:59,195 --> 00:01:06,090
이것은 이 두 개의 바운딩 박스 중 모두에게 있는 것이죠.

16
00:01:06,090 --> 00:01:11,580
반면 교차점은 더 작은 영역에 있는 것이죠.

17
00:01:11,580 --> 00:01:18,850
결합된 부위의 교차점이 하는 일은 교차점의 사이즈를 계산하는 것 입니다.

18
00:01:18,850 --> 00:01:22,598
오렌지색으로 칠해진 이 영역을,

19
00:01:22,598 --> 00:01:27,520
결합된 사이즈로 나누고,

20
00:01:27,520 --> 00:01:30,430
그러면 이 초록색으로 칠한 영역이 되겠죠

21
00:01:30,430 --> 00:01:34,195
컨벤션에 의해, 낮게 계산된 시야는 여러분의 답안이 옳다고 판단할 것입니다.

22
00:01:34,195 --> 00:01:39,355
만약 IoU가 0.5 보다 크다면요.

23
00:01:39,355 --> 00:01:45,310
그리고 만약 예측된 바운딩 박스와 실측된 바운딩박스가 완벽하게 겹쳐지면

24
00:01:45,310 --> 00:01:47,054
IoU는 1 이 되는 것입니다.

25
00:01:47,054 --> 00:01:50,105
왜냐하면 교차점은 이 결합부위와 같기 때문입니다.

26
00:01:50,105 --> 00:01:55,195
일반적으로, IoU는 0.5보다 크거나 같기 때문에

27
00:01:55,195 --> 00:01:59,685
그 답안은 옳은 것으로 간주되고, 꽤 괜찮아 보이는 것이죠.

28
00:01:59,685 --> 00:02:03,880
습관적으로, 매우 흔하게 0.5는

29
00:02:03,880 --> 00:02:10,130
예측된 바운딩박스 값이 옳은지를 판단하는 한계 값으로 사용되어집니다.

30
00:02:10,130 --> 00:02:11,650
이것은 그냥 관습적인 것인데요.

31
00:02:11,650 --> 00:02:12,975
보다 엄격하게 하고 싶으시다면

32
00:02:12,975 --> 00:02:14,790
IoU가 0.6과 같거나 큰 경우에만

33
00:02:14,790 --> 00:02:19,845
올바른 답안인 것으로 판단하면 됩니다.

34
00:02:19,845 --> 00:02:21,570
IoU가 더 높을수록

35
00:02:21,570 --> 00:02:24,425
바운딩박스 값은 더욱 정확합니다.

36
00:02:24,425 --> 00:02:27,625
이것이 바로 위치 측정을 정확하게 매핑하는 한 방법입니다.

37
00:02:27,625 --> 00:02:32,560
이렇게 하여 알고리즘이 객체를 정확하게 감지하고 위치를 측정하는 횟수를 세어서

38
00:02:32,560 --> 00:02:37,815
객체가 정확하게 위치 측정되는지 아닌지 그 정의를 이용하면

39
00:02:37,815 --> 00:02:42,410
정확성 있게 물체의 위치를 측정할 수 있습니다.

40
00:02:42,410 --> 00:02:46,515
다시 말하지만, 0.5는 사람이 선택한 관습적인 숫자입니다.

41
00:02:46,515 --> 00:02:49,535
특별하게 깊이 있는 논리적 이유가 있는 것이 아닙니다.

42
00:02:49,535 --> 00:02:54,640
또한 더 정확하게 하고 싶으시다면 0.6 같은 다른 역치값을 선택해도 괜찮습니다.

43
00:02:54,640 --> 00:03:00,070
때로 0.6이나 0.7같은 더욱 엄격한 기준을 사용하는 사람들을 많이 보게 되기도 합니다.

44
00:03:00,070 --> 00:03:04,100
0.5 아래로 역치값을 떨어뜨리는 사람은 거의 찾아볼 수가 없죠.

45
00:03:04,100 --> 00:03:08,065
이제, IoU의 정의를 내리는 것에 동기 부여하는 것은,

46
00:03:08,065 --> 00:03:10,540
객체 위치 측정 알고리즘이 정확성 여부를

47
00:03:10,540 --> 00:03:14,080
평가하는 방법입니다.

48
00:03:14,080 --> 00:03:20,340
그러나 더 일반적으로, IoU는 두 경계 상자 사이의 중첩되는 척도입니다.

49
00:03:20,340 --> 00:03:22,430
두 개의 상자가 있는 경우

50
00:03:22,430 --> 00:03:23,980
교차점을 계산하고

51
00:03:23,980 --> 00:03:29,040
결합 부분을 계산하고, 두 영역의 비율을 계산할 수 있습니다.

52
00:03:29,040 --> 00:03:34,985
그리고 이것은 또한 이 두 상자가 서로 얼마나 비슷한지를 측정하는 방법이 기도합니다.

53
00:03:34,985 --> 00:03:37,535
이걸 다음 강의에서 다시 보긴 하겠지만,

54
00:03:37,535 --> 00:03:40,225
그리고 non-max 억제에 대해 이야기 할 때

55
00:03:40,225 --> 00:03:46,170
이것은 IoU 즉 Intersection over Union 을 위한 것입니다.

56
00:03:46,170 --> 00:03:50,720
IoU의 약속 어음 개념과 혼동해서는 안되는대요,

57
00:03:50,720 --> 00:03:53,610
만약 누군가에게 돈을 빌려줄 때,

58
00:03:53,610 --> 00:03:55,940
‘저는 이만큼의 돈을 당신에게 빚 졌습니다'라고 쓰여있는 메모를 주는 것,

59
00:03:55,940 --> 00:03:58,110
이것은 완전히 다른 개념입니다.

60
00:03:58,110 --> 00:04:03,111
이 두 가지가 비슷한 이름을 가지고 있다는 건 좋지만 말이죠.

61
00:04:03,111 --> 00:04:07,730
IoU의 정의는 Intersection of Union입니다. 다음 강의에서는,

62
00:04:07,730 --> 00:04:09,055
다음 비디오에서는

63
00:04:09,055 --> 00:04:12,045
YOLO의 아웃풋을 훨씬 더 멋지게 만드는 데 사용할 수 있는 도구,

64
00:04:12,045 --> 00:04:16,770
non-max 억제에 대해 논의해 보도록 하겠습니다. 다음 강의로 가시죠.

65
00:04:16,770 --> 00:04:18,470
다음 강좌로 가보시죠
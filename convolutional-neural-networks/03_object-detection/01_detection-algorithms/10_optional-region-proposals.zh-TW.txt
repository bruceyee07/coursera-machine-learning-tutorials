如果你去看物件偵測的文獻 有一類的想法叫 Region Proposals (候選區域) 在電腦視覺的領域也很有影響力 我把這部影片變成選修，因為 我不大常用 Region Proposal 一類的演算法。儘管如此 這研究一直很有影響力 在你自己的研究可能也會碰到的一種想法， 就讓我們看看吧。如果你還記得滑動視窗的概念 你會拿個訓練好的分類器，讓他跑過 所有這些不同的範圍，執行偵測器，看看有沒有車、 路人、或是機車 那麼，你可以用卷積化的方式跑這演算法 不過這演算法的一個缺點是，他會去 辨別很多個顯然就沒有物件的區域 所以下面這個長方形算是空白的 那邊顯然沒有任何有趣的東西可以拿來分類 也許，他也會跑過這個長方形區域 而裡面看起來沒啥感興趣的。 於是，Ross Girshick, Jeff Donahue, Trevor Darrell, 和 Jitendra Malik 在這篇論文提出了 — 投影片下方引用的 是一個叫 R-CNN 的演算法 代表卷積網路的區域、regions with CNNs 他所做的是，嘗試只挑一些區域 一些在上面跑 ConvNet 分類才有意義的區域 所以並不是在每一個視窗上跑滑動視窗 而是只選擇一些視窗範圍 只在那些視窗上跑 ConvNet 分類器。 而候選出區域的方式 是跑一個叫「分割」的演算法 (segmentation) 得到像右邊的結果 藉以了解什麼可能是物件。 例如，分割演算法在這裡發現一團東西 所以你可能挑出那個邊界框，然後說 「讓我們在那一團東西上跑個分類」 看起來那邊有個小小綠綠的，我們找到了一團 所以你也可能會跑個分類器 在那一個長方形上，看看那邊是否有好玩的東西 以這個例子而言 這一團藍色的，如果他在上面跑個分類 我們期望你會找到一位行人 而如果你跑在這團青色的東西上 你可能會找到一輛車，也可能不會， 所以這個的細節 這叫分割演算法 你所做的是找出大約2000團東西，然後 在那些周圍放置邊界框，僅在這兩千團東西上執行分類 這樣的話，需要執行 ConvNet 分類的地方 其數量就會非常少 — 跟掃過圖片的每一個位置比較的話 特別是當你要跑你的 ConvNet 不只在方形的區域，也跑在 瘦瘦高高的區域以試著找到路人，或者 跑在寬寬胖胖的區域上以找到汽車、
甚至跑在多種大小規模的區域上 那麼這就是 R-CNN，或稱 CNN 的區域 有卷積特徵的區域 然而， R-CNN 演算法仍然頗慢 所以有一系列的研究去探索要如何加速這方法 基本的 R-CNN 演算法，利用某個方法找出候選區域 然後一次分類一個候選區域 而對於每一個區域 他會輸出一個標籤 有沒有車？有沒有行人？ 那裡有沒有機車？ 然後也會輸出一個邊界框 所以如果那區域真的有物件，你能得到一個準確的邊界框 只是要釐清一下 R-CNN 演算法不會全然信任你給他的邊界框 他也會輸出一個邊界框 b_x, b_y, b_h, b_w 為了能得到更準確的邊界框 來框住分割演算法給他的一團東西 所以他可以得到滿準確的邊界框 那麼，一個 R-CNN 演算法的缺點是：他頗慢 所以這些年來 R-CNN 法有很多的改良 Russ Girshik 提出了 "fast R-CNN" (快速R-CNN) 基本上他是 R-CNN，但是 利用了卷積化的滑動視窗 所以原本的作法其實只會一次分類一個區域 而快速 R-CNN 用了卷積化的滑動視窗實作 基本上和這周第四部影片的概念類似 這讓 R-CNN 加速了不少 然而，其實快速 R-CNN 其中一個問題是 為了挑出候選區域的群集步驟仍然很慢，所以另一群人 Shaoqing Ren, Kaiming He, Ross Girshick 和 Jian Sun 提出了 "faster R-CNN" (更快速R-CNN) 利用了卷積網路而非傳統的 分割演算法來選出那一堆的區域 而這樣最終能比「快速R-CNN」更快速 雖然，我覺得「更快速R-CNN」 絕大部分的實作通常還是比 YOLO 演算法慢一些 那麼，「候選區域」這個想法在電腦視覺的領域
一直有著影響力 我想讓你知道這些概念，因為你能發現其他人仍然在使用 至於我，這只是我個人的意見 並不是整個研究電腦視覺的社群的意見 我覺得候選區域是個有趣的想法。但是，如果能不花兩步 — 第一先選出區域，然後再分類之 如果能做得更多，能夠同時做到 類似像 YOLO「你只需看一次」演算法 這種方向就長遠來看比較有希望 不過這只是個人意見，並不一定是 整個電腦視覺社群的意見 所以也可以聽聽參考就好 但我認為 R-CNN 這種想法 你可能會碰到其他人在用 所以也值得一學，這樣你就能更瞭解其他的演算法 那麼，這禮拜物件偵測的課程就到這邊 我希望你能喜歡這禮拜的程式練習 也期待在下禮拜見到你
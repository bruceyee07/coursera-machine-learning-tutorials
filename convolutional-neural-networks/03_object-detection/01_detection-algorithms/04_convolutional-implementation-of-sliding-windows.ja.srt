1
00:00:00,000 --> 00:00:01,440
前回のビデオで

2
00:00:01,440 --> 00:00:03,705
ConvNet を使った

3
00:00:03,705 --> 00:00:08,170
スライディング ウィンドウ 物体検出アルゴリズムについて学んだ
しかし それは とても遅かった

4
00:00:08,170 --> 00:00:13,090
このビデオでは そのアルゴリズムを 畳み込む実装方法を学ぶ

5
00:00:13,090 --> 00:00:14,640
それが意味するところを見てみましょう

6
00:00:14,640 --> 00:00:20,040
スライディング ウィンドウの畳み込み実装を構築するために 最初に見せよう

7
00:00:20,040 --> 00:00:25,590
どのように ニューラルネットワークの全結合層を 畳み込み層に 変えることができるのか を

8
00:00:25,590 --> 00:00:28,620
最初は このスライドで それを見せて 次のスライドで

9
00:00:28,620 --> 00:00:33,600
このスライドから得たアイデアを使って 畳み込み実装を見せよう

10
00:00:33,600 --> 00:00:39,560
では 物体検出アルゴリズムの入力が 14 x 14 x 3 だとする

11
00:00:39,560 --> 00:00:42,240
これは とても小さいけど 絵に描くためだ

12
00:00:42,240 --> 00:00:45,650
それから  5 x 5 フィルターを使うとしよう

13
00:00:45,650 --> 00:00:52,155
そして それを 16個使うものとすると 14 x 14 x 3 は 10 x 10 x 16 に変換される

14
00:00:52,155 --> 00:00:56,970
それから 2 x 2 最大プーリングを行い 5 x 5 x 16 に縮める

15
00:00:56,970 --> 00:01:01,700
それから 全結合層で 400 ユニットと結合する

16
00:01:01,700 --> 00:01:07,425
それから 別の全結合層 そして 最後は ソフトマックス ユニットで y を出力する

17
00:01:07,425 --> 00:01:11,220
次の変化で 必要となるので

18
00:01:11,220 --> 00:01:14,100
この絵を少し変更して

19
00:01:14,100 --> 00:01:18,105
y を４つの数にする

20
00:01:18,105 --> 00:01:21,035
それらは クラスの確率に対応している

21
00:01:21,035 --> 00:01:26,050
ソフトマックス ユニットが分類する全クラスの確率だ

22
00:01:26,050 --> 00:01:31,405
全クラスとは 歩行者

23
00:01:31,405 --> 00:01:35,609
車 バイク 背景 もしくは 他の何か 等になるだろう

24
00:01:35,609 --> 00:01:38,530
さて 私が見せたいのは

25
00:01:38,530 --> 00:01:43,030
どのようにして これらの層を 畳み込み層に 変えられるか だ

26
00:01:43,030 --> 00:01:47,710
ConvNet を 最初の数層は 前と同じに描いて

27
00:01:47,710 --> 00:01:51,010
そして 今度は この次の層を実装する１つの方法は

28
00:01:51,010 --> 00:01:55,030
この全結合層を 5 x 5 フィルターで実装する

29
00:01:55,030 --> 00:02:02,625
400 個の 5 x 5 フィルターを使う

30
00:02:02,625 --> 00:02:08,950
つまり もし 5 x 5 x 16 画像を 1つの 5 x 5 フィルターで畳み込むなら

31
00:02:08,950 --> 00:02:13,450
5 x 5 フィルターは 5 x 5 x 16 として実装される

32
00:02:13,450 --> 00:02:19,240
なぜなら この１つのフィルターは 16 チャンネル全てに跨がるからね

33
00:02:19,240 --> 00:02:25,375
だから この 16 と この 16 が合い 出力は 1 x 1 だ

34
00:02:25,375 --> 00:02:30,445
そして もし 400 個の 5 x 5 x 16 フィルターがあるなら

35
00:02:30,445 --> 00:02:36,056
出力次元は 1 x 1 x 400 になる

36
00:02:36,056 --> 00:02:41,016
この 400 を 単なるノードの集合として見ずに

37
00:02:41,016 --> 00:02:44,602
1 x 1 x 400 ボリュームとして見ている

38
00:02:44,602 --> 00:02:50,260
数学的には これは 全結合層と同じだ

39
00:02:50,260 --> 00:02:57,154
なぜなら この 400 ノードのそれぞれは 5 x 5 x 16 次元のフィルターを持つからだ

40
00:02:57,154 --> 00:02:59,770
この 400 個の値の一つ一つが

41
00:02:59,770 --> 00:03:07,705
前の層から 5 x 5 x 16 の線形関数で 活性化されたものだ

42
00:03:07,705 --> 00:03:10,654
次は 次の畳み込み層を実装する

43
00:03:10,654 --> 00:03:14,230
1 x 1 畳み込みを実装する

44
00:03:14,230 --> 00:03:18,500
もし 400 個の 1 x 1 フィルターがあるなら

45
00:03:18,500 --> 00:03:24,955
次の層は 400 個のフィルターで また 1 x 1 x 400 だ

46
00:03:24,955 --> 00:03:29,030
これが 次の全結合層になる

47
00:03:29,030 --> 00:03:35,215
それから 最後は 別の 1 x 1 フィルターだ

48
00:03:35,215 --> 00:03:37,360
その後に ソフトマックス活性が続く

49
00:03:37,360 --> 00:03:40,140
つまり 1 x 1 x 4 ボリュームにすれば

50
00:03:40,140 --> 00:03:46,115
ネットワークが出力する この４つの数になる

51
00:03:46,115 --> 00:03:50,035
これが どうやって 全結合層を

52
00:03:50,035 --> 00:03:54,310
畳み込み層で実装するかだ

53
00:03:54,310 --> 00:03:57,815
これらの ユニットの集合は 今は

54
00:03:57,815 --> 00:04:02,680
1 x 1 x 400 と 1 x 1 x 4 ボリュームで実装されている

55
00:04:02,680 --> 00:04:06,580
この変換の後は

56
00:04:06,580 --> 00:04:11,400
スライディング ウィンドウ 物体検出 の 畳み込み実装方法を見よう

57
00:04:11,400 --> 00:04:16,850
このスライドのプレゼンは OverFeat 論文が基礎になっている

58
00:04:16,850 --> 00:04:18,650
参照先は 下部の

59
00:04:18,650 --> 00:04:21,010
Pierre Sermanet, David Eigen, Xiang Zhang

60
00:04:21,010 --> 00:04:24,290
Michael Mathieu, Rob Fergus, そして Yann LeCun

61
00:04:24,290 --> 00:04:31,385
スライディング ウィンドウ ConvNet の入力を 14 x 14 x 3 画像だとする

62
00:04:31,385 --> 00:04:35,495
再び この 14 x 14 画像のような小さな数を使う

63
00:04:35,495 --> 00:04:40,790
このスライドでは 数や絵を 簡単にしておく

64
00:04:40,790 --> 00:04:44,450
前と同様に 次のようなニューラルネットワークにして

65
00:04:44,450 --> 00:04:49,100
だんだんと 出力は 1 x 1 x 4 ボリュームになる

66
00:04:49,100 --> 00:04:52,465
これは ソフトマックスの出力だ

67
00:04:52,465 --> 00:04:54,815
ここでは 絵を簡単にするため

68
00:04:54,815 --> 00:05:01,185
14 x 14 x 3 は 本当はボリュームだ
5 x 5 も 10 x 10 x 16 も

69
00:05:01,185 --> 00:05:02,530
本当はボリュームだ

70
00:05:02,530 --> 00:05:04,490
でも このスライドでは 絵を簡単にするため

71
00:05:04,490 --> 00:05:07,620
ボリュームの前の面だけを描く

72
00:05:07,620 --> 00:05:10,940
1 x 1 x 400 ボリュームを描く代わりに

73
00:05:10,940 --> 00:05:14,480
その中の 1 x 1 を描く

74
00:05:14,480 --> 00:05:19,368
このスライドでは これらの 3D 要素は削除する

75
00:05:19,368 --> 00:05:23,810
よって ConvNet の入力は 14 x 14 画像 もしくは

76
00:05:23,810 --> 00:05:29,035
14 x 14 x 3 画像で
テスト画像は 16 x 16 x 3 画像としよう

77
00:05:29,035 --> 00:05:33,615
この画像の端に 黄色い帯が加わった

78
00:05:33,615 --> 00:05:36,335
オリジナルのスライディング ウインドウ アルゴリズムでは

79
00:05:36,335 --> 00:05:41,150
ConvNet には 青い領域を 入力して

80
00:05:41,150 --> 00:05:46,485
実行して クラス 0 か 1 か を出したい
それから 少し下にずらして

81
00:05:46,485 --> 00:05:54,020
２ピクセルのストライドを使う それから 右に２ピクセル スライドし

82
00:05:54,020 --> 00:05:56,090
この緑の

83
00:05:56,090 --> 00:05:59,130
四角を ConvNet に入力して

84
00:05:59,130 --> 00:06:02,945
ConvNet を走らせて 別のラベル 0 か 1 を得る

85
00:06:02,945 --> 00:06:05,180
それから

86
00:06:05,180 --> 00:06:12,595
このオレンジの領域を ConvNet に入力して もう一度走らせて 別のラベルを得る

87
00:06:12,595 --> 00:06:21,634
それから ４番目 最後に この右下の 紫の四角で それを行う

88
00:06:21,634 --> 00:06:26,115
この 16 x 16 x 3 のとても小さい画像に スライディング ウィンドウをかけるには

89
00:06:26,115 --> 00:06:32,065
この ConvNet を４回走らせて ４つのラベルを得ればよい

90
00:06:32,065 --> 00:06:34,685
しかし この４つの ConvNet で行う

91
00:06:34,685 --> 00:06:38,345
計算の多くは かなり重複している

92
00:06:38,345 --> 00:06:42,485
スライディング ウィンドウの畳み込み実装は

93
00:06:42,485 --> 00:06:48,150
ConvNet の この４つの準伝播に 計算の多くを共有させる

94
00:06:48,150 --> 00:06:49,955
具体的には こうやってできる

95
00:06:49,955 --> 00:06:54,170
ConvNet を同じパラメータで動かす

96
00:06:54,170 --> 00:06:56,731
同じ 5 x 5 フィルターで

97
00:06:56,731 --> 00:07:00,230
同じ16個の 5 x 5 フィルターを使い 動かす

98
00:07:00,230 --> 00:07:04,850
そうすると 12 x 12 x 16 出力ボリュームを得る

99
00:07:04,850 --> 00:07:07,280
それから 最大プーリングを 前と同じに行う

100
00:07:07,280 --> 00:07:09,210
今度は 6 x 6 x 16 になる

101
00:07:09,210 --> 00:07:18,093
同じ 400個の 5 x 5 フィルターに通すと 今度は 40個の 2 x 2 ボリュームになる

102
00:07:18,093 --> 00:07:24,835
今度は 1 x 1 x 400 ボリュームの代わりに

103
00:07:24,835 --> 00:07:29,105
2 x 2 x 400 ボリュームを得る

104
00:07:29,105 --> 00:07:32,870
1 x 1 フィルターを通すと

105
00:07:32,870 --> 00:07:37,260
1 x 1 x 400 の代わりに 別の 2 x 2 x 400 を得る

106
00:07:37,260 --> 00:07:40,220
それを もう一度行って

107
00:07:40,220 --> 00:07:44,320
1 x 1 x 4 の代わりに 2 x 2 x 4 の出力ボリュームを得る

108
00:07:44,320 --> 00:07:49,250
この青い 1 x 1 x 4 の一部は

109
00:07:49,250 --> 00:07:54,368
左上角の 14 x 14 画像をかけた結果だ

110
00:07:54,368 --> 00:08:01,215
この 1 x 1 x 4 ボリュームの右上 は 右上の結果だ

111
00:08:01,215 --> 00:08:04,820
左下は

112
00:08:04,820 --> 00:08:08,660
左下の 14 x 14 域を ConvNet にかけた結果だ

113
00:08:08,660 --> 00:08:13,310
そして 1 x 1 x 4 ボリュームの右下は 

114
00:08:13,310 --> 00:08:18,040
右下の 14 x 14 域を ConvNet にかけた結果だ

115
00:08:18,040 --> 00:08:20,990
そして もし 計算の全てのステップを行うなら

116
00:08:20,990 --> 00:08:23,110
緑の例を見て

117
00:08:23,110 --> 00:08:25,850
もし この領域だけを切り抜き

118
00:08:25,850 --> 00:08:29,120
ConvNet の先頭に渡したら

119
00:08:29,120 --> 00:08:34,105
最初の層の活性は この領域ピッタリになる

120
00:08:34,105 --> 00:08:37,037
次の層の活性 最大プーリングの後は

121
00:08:37,037 --> 00:08:40,490
ピッタリこの領域で それから 次の層は

122
00:08:40,490 --> 00:08:43,460
次の層は こんな風に続いていく

123
00:08:43,460 --> 00:08:44,805
このプロセスが行うのは

124
00:08:44,805 --> 00:08:47,216
この 畳み込み実装が行うのは

125
00:08:47,216 --> 00:08:50,345
４つの伝播を走らせる代わりに

126
00:08:50,345 --> 00:08:54,635
入力画像の４つの部分を 別々に処理する代わりに

127
00:08:54,635 --> 00:08:58,730
４つ全てを一つの計算にまとめて

128
00:08:58,730 --> 00:09:02,713
共通する領域の沢山の計算を共有することだ

129
00:09:02,713 --> 00:09:07,895
ここにある 14 x 14 の４つの断片全てをね

130
00:09:07,895 --> 00:09:09,935
では もっと大きな例に行こう

131
00:09:09,935 --> 00:09:14,845
今度は 28 x 28 x 3 画像に スライディング ウィンドウを走らせたいとする

132
00:09:14,845 --> 00:09:16,820
もし 同じ方法で ４つの切り抜きを

133
00:09:16,820 --> 00:09:21,410
走らせたら 8 x 8 x 4 の出力になる

134
00:09:21,410 --> 00:09:27,735
これは この 14 x 14 域のスライディング ウィンドウを実行したことに対応している

135
00:09:27,735 --> 00:09:33,380
最初のこの領域での スライディング ウィンドウの実行に対しては

136
00:09:33,380 --> 00:09:36,496
出力の 左上角が対応する

137
00:09:36,496 --> 00:09:39,661
それから ウィンドウを ストライド２でずらすと

138
00:09:39,661 --> 00:09:43,775
１つのウィンドウ １つのウィンドウ 以下同じで ８つの位置

139
00:09:43,775 --> 00:09:48,830
それで 最初の行が得られ それから 画像を下にも動かす

140
00:09:48,830 --> 00:09:53,350
それを全てやると 8 x 8 x 4 の出力を得る

141
00:09:53,350 --> 00:09:58,760
なぜなら ２の最大プーリングを使っていて それは

142
00:09:58,760 --> 00:10:04,055
元の画像を ２のストライドを持つ ニューラルネットワークで動かすのに対応しているからだ
(訳注: ここで言う"ニューラルネットワーク"は 畳み込みのことを指していると思われる)

143
00:10:04,055 --> 00:10:05,335
まとめると

144
00:10:05,335 --> 00:10:07,853
スライディング ウィンドウを実装するには

145
00:10:07,853 --> 00:10:11,715
前のやり方では 領域を切り抜き

146
00:10:11,715 --> 00:10:14,750
それが 14 x 14 だとしよう

147
00:10:14,750 --> 00:10:18,811
そして ConvNet にかけて 次の領域にもそれを行う

148
00:10:18,811 --> 00:10:21,604
それから 次の 14 x 14 域にも行う

149
00:10:21,604 --> 00:10:23,210
それから 次 それから 次

150
00:10:23,210 --> 00:10:25,700
それから 次 それから 次 以下同様

151
00:10:25,700 --> 00:10:29,070
うまくいけば これが車を認識する

152
00:10:29,070 --> 00:10:31,610
しかし 今度は それを次々と行う代わりに

153
00:10:31,610 --> 00:10:35,540
前のスライドで見た この畳み込み実装を使い

154
00:10:35,540 --> 00:10:37,745
画像全体を実行できる

155
00:10:37,745 --> 00:10:42,890
全て(それは 28 x 28 かもしれない)の予測を 畳み込みで 同時に作成できる

156
00:10:42,890 --> 00:10:46,270
この大きな ConvNet への 一度の準伝播で

157
00:10:46,270 --> 00:10:50,357
そして うまく行けば 車の位置を認識する

158
00:10:50,357 --> 00:10:53,490
これが スライディング ウィンドウの畳み込み実装の方法だ

159
00:10:53,490 --> 00:10:57,700
これで 全てが とても効率良くなる

160
00:10:57,700 --> 00:10:59,960
ただし このアルゴリズムには １つ欠点がある

161
00:10:59,960 --> 00:11:04,585
それは 境界箱の位置が それ程 正確にはならないということだ

162
00:11:04,585 --> 00:11:05,786
次のビデオでは

163
00:11:05,786 --> 00:11:08,030
この問題の修正方法を見よう
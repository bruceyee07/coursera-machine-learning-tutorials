1
00:00:00,000 --> 00:00:04,790
目前你看過的物件偵測法，有一個問題是

2
00:00:04,790 --> 00:00:08,870
每一個格子只能偵測一個物件

3
00:00:08,870 --> 00:00:12,500
如果一個格子想要偵測多個物件呢？

4
00:00:12,500 --> 00:00:14,050
你可以這樣做

5
00:00:14,050 --> 00:00:16,700
你用一個概念叫「錨框」(anchor boxes)

6
00:00:16,700 --> 00:00:17,920
讓我們先從一個例子開始

7
00:00:17,920 --> 00:00:20,990
假設你有這樣的照片

8
00:00:20,990 --> 00:00:22,460
在這個例子

9
00:00:22,460 --> 00:00:26,160
我還是用 3乘3 的格子

10
00:00:26,160 --> 00:00:31,190
注意到路人的中心點以及汽車的中心點

11
00:00:31,190 --> 00:00:37,340
幾乎在同個地方，兩者都在同一個格子中

12
00:00:37,340 --> 00:00:38,590
所以對於那個格子

13
00:00:38,590 --> 00:00:44,559
如果 y 輸出這個向量，其中偵測的類別有三個

14
00:00:44,559 --> 00:00:48,105
行人、汽車和機車

15
00:00:48,105 --> 00:00:51,530
他並沒辦法同時輸出兩種偵測

16
00:00:51,530 --> 00:00:55,545
所以我必須在兩個偵測中挑一個。

17
00:00:55,545 --> 00:00:57,297
而運用錨框 (anchor box) 的概念

18
00:00:57,297 --> 00:00:59,170
你會這樣子做：

19
00:00:59,170 --> 00:01:03,129
事先定義好兩種不同的形狀，叫做錨框

20
00:01:03,129 --> 00:01:08,015
或叫錨框形狀，而你要做的是

21
00:01:08,015 --> 00:01:13,085
能夠將這兩個預測連結到這兩個錨框

22
00:01:13,085 --> 00:01:15,585
一般來說，你可能要用更多個錨框

23
00:01:15,585 --> 00:01:17,660
可能五個或更多，

24
00:01:17,660 --> 00:01:20,060
不過在這部影片，我只會用

25
00:01:20,060 --> 00:01:23,660
兩個錨框，方便講解。

26
00:01:23,660 --> 00:01:27,680
你要做的是，定義類別的標籤

27
00:01:27,680 --> 00:01:30,190
並不是單用左邊的向量，

28
00:01:30,190 --> 00:01:33,170
而基本上是重複兩次

29
00:01:33,170 --> 00:01:35,120
所以你會有 p_c,

30
00:01:35,120 --> 00:01:39,610
b_x, b_y, b_h, b_w,

31
00:01:39,610 --> 00:01:46,047
c_1, c_2, c_3 — 這八個輸出會和錨框1有關聯

32
00:01:46,047 --> 00:01:50,355
然後，你再重複 p_c,

33
00:01:50,355 --> 00:01:51,905
b_x, ... c_1

34
00:01:51,905 --> 00:01:59,490
c_2, c_3，另外這八個輸出連結到錨框2

35
00:01:59,490 --> 00:02:01,820
那麼，因為路人的形狀

36
00:02:01,820 --> 00:02:06,012
和第一個錨框比較像，和錨框2比較不像

37
00:02:06,012 --> 00:02:13,730
你可以這八個數字來表示，p_c 是 1

38
00:02:13,730 --> 00:02:15,020
對，有個路人

39
00:02:15,020 --> 00:02:20,739
用這些來表示路人的邊界框

40
00:02:20,739 --> 00:02:26,300
然後用這些來表示這個物件是行人。

41
00:02:26,300 --> 00:02:29,240
然後，因為汽車的邊界框

42
00:02:29,240 --> 00:02:32,516
和錨框1相比，他和錨框2的形狀比較相近

43
00:02:32,516 --> 00:02:40,021
你就能用這些來表示這第二個物件是汽車

44
00:02:40,021 --> 00:02:42,830
讓邊界框和其他參數

45
00:02:42,830 --> 00:02:45,984
來代表關聯到的這輛汽車。

46
00:02:45,984 --> 00:02:50,459
總結一下，在之前

47
00:02:50,459 --> 00:02:51,693
在用錨框之前

48
00:02:51,693 --> 00:02:53,505
你會這樣做

49
00:02:53,505 --> 00:02:57,665
對於訓練集圖片裡面的每個物件

50
00:02:57,665 --> 00:03:03,580
你會根據他的中心點，分配給相對應的格子

51
00:03:03,580 --> 00:03:11,298
所以輸出 y 會是 3乘3乘8，

52
00:03:11,298 --> 00:03:13,400
因為你有3乘3格子，而且對於每個格子

53
00:03:13,400 --> 00:03:17,080
我們有一個輸出向量：p_c, 邊界框還有 c_1, c_2, c_3

54
00:03:17,080 --> 00:03:18,892
而有了錨框後

55
00:03:18,892 --> 00:03:21,877
你現在會這樣做：

56
00:03:21,877 --> 00:03:27,553
每個物件和以前一樣，會分配給

57
00:03:27,553 --> 00:03:29,860
含有其中心點的格子

58
00:03:29,860 --> 00:03:33,488
不過，他也會分配給

59
00:03:33,488 --> 00:03:41,020
和物件形狀有最高 IoU 的錨框

60
00:03:41,020 --> 00:03:43,070
你有兩個錨框

61
00:03:43,070 --> 00:03:45,845
你會拿物件，看看他...

62
00:03:45,845 --> 00:03:50,060
所以如果你的物件是這種形狀

63
00:03:50,060 --> 00:03:53,270
你會拿兩個錨框

64
00:03:53,270 --> 00:03:55,286
可能錨框1是這種形狀

65
00:03:55,286 --> 00:03:58,325
錨框2是這種形狀

66
00:03:58,325 --> 00:04:01,940
然後你看這兩個錨框哪一個 IoU 最高

67
00:04:01,940 --> 00:04:04,500
與物件的邊界框。

68
00:04:04,500 --> 00:04:05,810
無論是哪個錨框

69
00:04:05,810 --> 00:04:11,055
物件不僅會分配給格子

70
00:04:11,055 --> 00:04:18,905
他會分配給 (格子, 錨框) 這個組合

71
00:04:18,905 --> 00:04:22,985
這就是這物件轉換成目標標籤的方法。

72
00:04:22,985 --> 00:04:31,505
所以現在呢，輸出的 y 會是 3乘3乘16

73
00:04:31,505 --> 00:04:34,120
因為就像你在前張投影片看到的

74
00:04:34,120 --> 00:04:36,610
y 現在是 16 維

75
00:04:36,610 --> 00:04:37,788
— 如果你想

76
00:04:37,788 --> 00:04:42,565
你也可以看成 3乘3乘2乘8

77
00:04:42,565 --> 00:04:48,675
因為現在有兩個錨框，而 y 是 8 維

78
00:04:48,675 --> 00:04:54,516
而 y 會是 8 維是因為我們有三個物件的類別

79
00:04:54,516 --> 00:05:01,070
如果物件種類更多，那麼 y 的維度會更高。

80
00:05:01,070 --> 00:05:04,890
讓我們跑個實際的例子

81
00:05:04,890 --> 00:05:09,040
對於這一個格子

82
00:05:09,040 --> 00:05:12,070
讓我們寫出 y 是什麼

83
00:05:12,070 --> 00:05:21,075
路人的形狀和錨框1比較像

84
00:05:21,075 --> 00:05:22,280
所以對於這路人

85
00:05:22,280 --> 00:05:25,620
我們把他分配給這向量的上半部：

86
00:05:25,620 --> 00:05:27,235
是的，有物件

87
00:05:27,235 --> 00:05:31,150
這路人有某個邊界框

88
00:05:31,150 --> 00:05:33,734
如果路人是類別1

89
00:05:33,734 --> 00:05:36,665
那麼我們有第一個值 1，然後 0 和 0

90
00:05:36,665 --> 00:05:41,420
然後這汽車的形狀比較像錨框2

91
00:05:41,420 --> 00:05:43,430
所以這向量剩下的部份是

92
00:05:43,430 --> 00:05:47,960
1，然後汽車的邊界框

93
00:05:47,960 --> 00:05:51,330
然後車子是 c_2

94
00:05:51,330 --> 00:05:53,170
所以是 0, 1, 0。

95
00:05:53,170 --> 00:05:56,715
所以這就是標籤 y

96
00:05:56,715 --> 00:06:02,685
這邊箭頭所指的下層中間格子的 y。

97
00:06:02,685 --> 00:06:09,760
那麼，如果這個格子只有車但是沒有行人呢

98
00:06:09,760 --> 00:06:11,410
如果它只有汽車

99
00:06:11,410 --> 00:06:14,300
那麼假設汽車邊界框的形狀

100
00:06:14,300 --> 00:06:18,460
還是跟錨框2比較像

101
00:06:18,460 --> 00:06:20,410
那麼這個目標標籤 y

102
00:06:20,410 --> 00:06:24,325
如果只有汽車而人不見了

103
00:06:24,325 --> 00:06:30,271
錨框2的這部份還是相同

104
00:06:30,271 --> 00:06:37,530
還記得向量的這一部份是對應到錨框2

105
00:06:37,530 --> 00:06:42,590
而對於錨框1對應到的向量部份

106
00:06:42,590 --> 00:06:46,017
你只需要說那邊沒有物件

107
00:06:46,017 --> 00:06:47,912
所以 p_c 是 0

108
00:06:47,912 --> 00:06:52,900
然後其餘的是「無關」

109
00:06:52,900 --> 00:06:55,155
現在，還有一些細節

110
00:06:55,155 --> 00:06:59,730
萬一你有兩個錨框，但是同一格子裡有三個物件呢？

111
00:06:59,730 --> 00:07:04,000
演算法對這個例子沒辦法處理好

112
00:07:04,000 --> 00:07:06,705
希望這不會發生

113
00:07:06,705 --> 00:07:11,440
不過如果真有其事，這演算法並沒有好法子處理

114
00:07:11,440 --> 00:07:15,025
對這種情形，我會寫某種挑選的機制。

115
00:07:15,025 --> 00:07:17,160
還有，萬一有兩個物件在同一個格子

116
00:07:17,160 --> 00:07:21,316
但是兩個都和同一個錨框的形狀一樣呢？

117
00:07:21,316 --> 00:07:24,335
同樣地，這演算法也無法處理好這情況

118
00:07:24,335 --> 00:07:28,855
如果發生這種情況，你實作一些挑選的機制 (tiebreaking)

119
00:07:28,855 --> 00:07:31,101
— 希望你的資料集不會出現這種例子

120
00:07:31,101 --> 00:07:32,740
希望不會常發生

121
00:07:32,740 --> 00:07:35,834
這樣的話，對成效影響應該不大。

122
00:07:35,834 --> 00:07:38,575
那麼，這就是「錨框」(anchor box)

123
00:07:38,575 --> 00:07:42,370
即使我講述錨框時，把他視作一種

124
00:07:42,370 --> 00:07:46,880
處理同一個格子有兩個物件的手段

125
00:07:46,880 --> 00:07:49,345
但實務上，這很少發生

126
00:07:49,345 --> 00:07:54,335
特別是你用 19乘19 而不只是 3乘3 格子

127
00:07:54,335 --> 00:07:59,065
在 361 個格子有兩個物件的中心點在同一個格子

128
00:07:59,065 --> 00:08:02,340
的確有這機會，但不會很常發生。

129
00:08:02,340 --> 00:08:06,810
或許，用錨框更好的理由、錨框有更好結果的情況

130
00:08:06,810 --> 00:08:12,325
是它讓你的演算法更能應付特殊狀況

131
00:08:12,325 --> 00:08:15,400
特別是，如果你的資料有一些高高的、

132
00:08:15,400 --> 00:08:17,380
瘦瘦的物件，例如路人，

133
00:08:17,380 --> 00:08:20,245
還有一些寬寬的物件，像汽車

134
00:08:20,245 --> 00:08:23,590
這樣的話，錨框就能讓你的演算法特化

135
00:08:23,590 --> 00:08:27,115
讓一些輸出特別能偵測出寬的、

136
00:08:27,115 --> 00:08:28,750
胖的物件，像是車子

137
00:08:28,750 --> 00:08:32,243
以及有些輸出單元能特化、偵測出高的

138
00:08:32,243 --> 00:08:34,830
瘦瘦的物件，例如路人。

139
00:08:34,830 --> 00:08:38,005
最後，你要怎麼選擇錨框呢？

140
00:08:38,005 --> 00:08:43,435
大家曾經是手動挑選，可能設計五或十個錨框

141
00:08:43,435 --> 00:08:46,270
讓他們有各種不同形狀

142
00:08:46,270 --> 00:08:49,510
看起來能涵蓋你想偵測的物件種類。

143
00:08:49,510 --> 00:08:51,505
而更進階的版本

144
00:08:51,505 --> 00:08:55,890
— 如果你有其他一些機器學習的知識

145
00:08:55,890 --> 00:09:00,385
最近的某篇 YOLO 論文提出了更好的方法

146
00:09:00,385 --> 00:09:02,430
是利用 K-means 演算法 (K-平均)：

147
00:09:02,430 --> 00:09:05,795
把兩種想偵測的物件的形狀集合起來

148
00:09:05,795 --> 00:09:09,150
然後利用那演算法，挑選出一些錨框

149
00:09:09,150 --> 00:09:13,140
最具代表性的、讓他們能展現出想偵測的

150
00:09:13,140 --> 00:09:16,330
多種各個類別的物件。

151
00:09:16,330 --> 00:09:20,915
不過這種自動選擇錨框的方法比較進階

152
00:09:20,915 --> 00:09:24,160
如果你手動挑選各式各樣的形狀

153
00:09:24,160 --> 00:09:27,580
能夠擴展出想偵測的物件形狀

154
00:09:27,580 --> 00:09:29,260
你想找高的、

155
00:09:29,260 --> 00:09:31,270
瘦的、胖的寬的...

156
00:09:31,270 --> 00:09:33,535
應該也能表現不錯。

157
00:09:33,535 --> 00:09:34,760
那麼，這就是錨框

158
00:09:34,760 --> 00:09:37,120
在下一個影片中

159
00:09:37,120 --> 00:09:42,000
讓我們回顧所有學過的東西，組合回 YOLO 演算法
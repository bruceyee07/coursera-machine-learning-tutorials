1
00:00:00,000 --> 00:00:05,695
你已經學會了「物件定位」和「特徵點偵測」

2
00:00:05,695 --> 00:00:09,470
那現在，就讓我們邁向「物件偵測」演算法

3
00:00:09,470 --> 00:00:13,005
在這部影片，你將會學到怎麼利用 Convnet

4
00:00:13,005 --> 00:00:18,150
加上 Sliding Windows (滑動視窗) 偵測法
來做到物件偵測

5
00:00:18,150 --> 00:00:21,154
假設你想做偵測汽車的演算法

6
00:00:21,154 --> 00:00:22,315
你可以這樣做

7
00:00:22,315 --> 00:00:24,734
首先，創一個標記好的訓練集 x, y

8
00:00:24,734 --> 00:00:29,100
含有準確切好的車子圖片

9
00:00:29,100 --> 00:00:32,970
所以這圖片 x 是個正面的例子，裡面有車

10
00:00:32,970 --> 00:00:35,140
這有車、這有車

11
00:00:35,140 --> 00:00:37,755
然後這張沒車、這沒有車

12
00:00:37,755 --> 00:00:39,840
要創造這個訓練資料

13
00:00:39,840 --> 00:00:43,733
你可以從緊密精準的切圖開始

14
00:00:43,733 --> 00:00:47,365
也就是 x 裡面大概就只有車

15
00:00:47,365 --> 00:00:49,650
你可以照張照片，把周圍切掉

16
00:00:49,650 --> 00:00:52,340
把不屬於車的地方切掉

17
00:00:52,340 --> 00:00:57,450
所以最後車子會佔滿整張圖片中間。

18
00:00:57,450 --> 00:01:01,090
有了這個標好的訓練資料

19
00:01:01,090 --> 00:01:05,412
接下來就能訓練一個 ConvNet，輸入一張圖片

20
00:01:05,412 --> 00:01:07,977
例如這張切好的圖片

21
00:01:07,977 --> 00:01:12,135
然後 ConvNet 要做的是輸出 y

22
00:01:12,135 --> 00:01:15,090
0 或 1，代表有沒有車

23
00:01:15,090 --> 00:01:17,044
一旦你訓練好了這個 ConvNet

24
00:01:17,044 --> 00:01:20,515
你就能用它來做 Sliding Windows (滑動視窗) 偵測

25
00:01:20,515 --> 00:01:21,870
方法如下：

26
00:01:21,870 --> 00:01:25,560
如果你有個測試的圖片，像這張，那你要做的是

27
00:01:25,560 --> 00:01:29,625
先挑某個視窗大小，如下圖示

28
00:01:29,625 --> 00:01:35,070
然後你把一個小的方形區域輸入 ConvNet

29
00:01:35,070 --> 00:01:38,670
就挑這小小的紅色區塊

30
00:01:38,670 --> 00:01:41,235
輸入到 ConvNet

31
00:01:41,235 --> 00:01:43,020
讓 ConvNet 預測他

32
00:01:43,020 --> 00:01:47,215
在這例子，那一個紅色區域

33
00:01:47,215 --> 00:01:50,640
ConvNet 會說那個紅色方框裡面沒有車。

34
00:01:50,640 --> 00:01:52,310
Sliding Windows 偵測法的意思是

35
00:01:52,310 --> 00:01:56,900
接下來你會輸入

36
00:01:56,900 --> 00:02:00,000
第二張小圖片，也就是

37
00:02:00,000 --> 00:02:03,970
平移一點點後的紅框框，再把他餵進去 ConvNet

38
00:02:03,970 --> 00:02:06,715
你只需要把紅色框框圍起來的區域

39
00:02:06,715 --> 00:02:10,665
餵給 ConvNet，再跑一次 ConvNet。

40
00:02:10,665 --> 00:02:16,275
然後第三個小圖片也這樣做，依此類推

41
00:02:16,275 --> 00:02:23,415
直到你把這紅框視窗滑過圖片的每個位置

42
00:02:23,415 --> 00:02:28,975
在這裡我移的步伐很大，這只是為了讓動畫快一點

43
00:02:28,975 --> 00:02:34,700
但概念是，你根據某個步伐，滑過每一個這樣大小的區域

44
00:02:34,700 --> 00:02:38,460
把這堆大量的切好的小圖片

45
00:02:38,460 --> 00:02:45,125
餵給 ConvNet，將每個位置分類成 0 或 1

46
00:02:45,125 --> 00:02:47,085
那麼，這樣做過一遍

47
00:02:47,085 --> 00:02:54,230
這個過程，叫做對這張圖片跑一次 sliding window

48
00:02:54,230 --> 00:02:55,295
接下來你再重複一遍

49
00:02:55,295 --> 00:02:57,710
但是用大一點的視窗

50
00:02:57,710 --> 00:03:02,191
所以你用大一點的區域，用這個區域來跑

51
00:03:02,191 --> 00:03:06,440
然後把這區域縮放到 ConvNet 能吃的大小、

52
00:03:06,440 --> 00:03:10,235
餵給 ConvNet，讓他輸出 0 或 1

53
00:03:10,235 --> 00:03:15,305
然後同樣地根據某個步伐大小，把這視窗滑過去

54
00:03:15,305 --> 00:03:20,500
就一直這樣跑到底為止，看過整張圖片

55
00:03:20,500 --> 00:03:26,283
接下來，你可能可以用更大的視窗做第三次，依此類推

56
00:03:26,283 --> 00:03:29,738
我們的期望是，如果你這樣掃

57
00:03:29,738 --> 00:03:36,080
只要圖片的某處有車，那就會有某個視窗

58
00:03:36,080 --> 00:03:40,200
例如如果你把這一個視窗丟進 ConvNet

59
00:03:40,200 --> 00:03:44,890
希望 ConvNet 能對這個區域輸出 1

60
00:03:44,890 --> 00:03:47,825
所以你就偵測到那邊有輛車。

61
00:03:47,825 --> 00:03:52,895
這之所以叫 Sliding Windows 偵測法，是因為你拿這些視窗、

62
00:03:52,895 --> 00:03:58,745
這些框框，滑過整張圖片

63
00:03:58,745 --> 00:04:05,770
跨幾步，分類每個方框，看看裡面有沒有車

64
00:04:05,770 --> 00:04:10,055
那麼，sliding windows 偵測法有個很大的缺點

65
00:04:10,055 --> 00:04:12,704
就是運算成本

66
00:04:12,704 --> 00:04:16,460
因為你要從圖片切出非常多的區域

67
00:04:16,460 --> 00:04:21,370
每一個都要獨立跑過 ConvNet

68
00:04:21,370 --> 00:04:24,505
如果你滑得非常粗略

69
00:04:24,505 --> 00:04:26,745
跨步 (stride) 非常大、非常遠

70
00:04:26,745 --> 00:04:31,598
這樣可以減少要餵給 ConvNet 的視窗個數

71
00:04:31,598 --> 00:04:35,810
但是粗略地跑可能會影響成效

72
00:04:35,810 --> 00:04:39,630
而如果你很細膩地跑、跨很小步來掃

73
00:04:39,630 --> 00:04:44,005
那就會有很大量的區域

74
00:04:44,005 --> 00:04:48,995
要通過 ConvNet，意味著運算成本非常高

75
00:04:48,995 --> 00:04:54,180
因此，在神經網路崛起之前，大家用非常簡單的分類器

76
00:04:54,180 --> 00:04:56,910
例如用人類的智慧取特徵

77
00:04:56,910 --> 00:05:00,450
再套用簡單的線性迴歸，來作到物件偵測

78
00:05:00,450 --> 00:05:04,870
在那個時代，因為這種分類器運算比較快

79
00:05:04,870 --> 00:05:06,480
就只是個線性函數

80
00:05:06,480 --> 00:05:08,980
sliding window 偵測還可以

81
00:05:08,980 --> 00:05:10,395
這方法並不壞

82
00:05:10,395 --> 00:05:15,450
但用了 ConvNet 後，跑一次分類

83
00:05:15,450 --> 00:05:21,125
要花更多的時間，這樣 sliding window 會慢到無法接受

84
00:05:21,125 --> 00:05:26,305
但是除非你掃得很密集、用很小的跨步

85
00:05:26,305 --> 00:05:32,850
否則你無法準確地定位到圖片中的物件

86
00:05:32,850 --> 00:05:38,575
不過好險，這個運算成本的難題其實有很好的解法

87
00:05:38,575 --> 00:05:41,845
特別是，sliding window 偵測

88
00:05:41,845 --> 00:05:45,935
能夠用卷積的方式實作、更有效率

89
00:05:45,935 --> 00:05:48,310
讓我們在下部影片看看要怎麼做
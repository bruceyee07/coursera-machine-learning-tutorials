1
00:00:00,000 --> 00:00:03,900
あなたは 既に 物体検出のほとんどの要素を見た

2
00:00:03,900 --> 00:00:06,690
このビデオでは 全ての要素を一緒にして

3
00:00:06,690 --> 00:00:10,850
YOLO 物体検出アルゴリズムを作ってみよう

4
00:00:10,850 --> 00:00:14,130
最初は どのように 訓練セットを作るかだ

5
00:00:14,130 --> 00:00:16,380
３個の物体を検出するアルゴリズムを 訓練しようとしている とする

6
00:00:16,380 --> 00:00:19,425
歩行者 車 そして バイク だ

7
00:00:19,425 --> 00:00:23,262
明示的な背景クラスは不要で

8
00:00:23,262 --> 00:00:25,390
ここでは ３つのクラスラベルだけになる

9
00:00:25,390 --> 00:00:28,305
もし ２種類のアンカーボックスを使うなら

10
00:00:28,305 --> 00:00:33,495
出力 y は 3 x 3 格子を使うなら 3 x 3

11
00:00:33,495 --> 00:00:36,225
x 2 アンカーの数

12
00:00:36,225 --> 00:00:39,880
x 8 この次元

13
00:00:39,880 --> 00:00:45,650
８は ５個に クラス数を加えたものだ

14
00:00:45,650 --> 00:00:49,533
５というのは Pc と境界箱だ

15
00:00:49,533 --> 00:00:53,505
それが５個で それから c1 c2 c3

16
00:00:53,505 --> 00:00:56,340
クラス数と同じ次元だ

17
00:00:56,340 --> 00:00:59,535
これは 3 x 3 x 2 x 8 でもいいし

18
00:00:59,535 --> 00:01:03,310
3 x 3 x 16 でもいい

19
00:01:03,310 --> 00:01:05,415
訓練セットを作るには

20
00:01:05,415 --> 00:01:11,160
これらの９つの格子セル それぞれに対し 目的ベクトル y を作る

21
00:01:11,160 --> 00:01:13,050
この最初のセルでやってみよう

22
00:01:13,050 --> 00:01:16,470
この格子セルには 検出に値するものは何も無い

23
00:01:16,470 --> 00:01:19,410
歩行者 車 バイク の３クラスのどれでも無い

24
00:01:19,410 --> 00:01:22,680
左上の格子セルは分かった

25
00:01:22,680 --> 00:01:27,870
この格子セルに対応する 目的 y は これと同じになるだろ

26
00:01:27,870 --> 00:01:31,276
最初のアンカーボックスの Pc は

27
00:01:31,276 --> 00:01:34,215
0 だ なぜなら 最初のアンカーボックスに対応するものは何も無いから

28
00:01:34,215 --> 00:01:37,830
そして ２番目のアンカーボックスのも 0 だ

29
00:01:37,830 --> 00:01:42,355
それから 同じく これらの他の値は 気にしない

30
00:01:42,355 --> 00:01:45,227
さて 殆どの格子セルには 何も無い

31
00:01:45,227 --> 00:01:47,790
しかし ここにあるボックスでは

32
00:01:47,790 --> 00:01:53,550
目的ベクトル y は こうなるだろう

33
00:01:53,550 --> 00:01:58,680
訓練セットは 車に対して このような境界箱を持つだろう

34
00:01:58,680 --> 00:02:01,560
それは 背の高さより 少しだけ幅広だ

35
00:02:01,560 --> 00:02:04,005
そして アンカーボックスがこんなだとすると

36
00:02:04,005 --> 00:02:05,475
これが アンカーボックス１

37
00:02:05,475 --> 00:02:07,191
そして これが アンカーボックス２

38
00:02:07,191 --> 00:02:12,475
そして 赤い箱は アンカーボックス２に 少しだけ高い IoU を持つ

39
00:02:12,475 --> 00:02:17,320
そして この車は このベクトルの下の部分に充てられる

40
00:02:17,320 --> 00:02:22,435
アンカーボックス１に対する Pc は 0 だと分かる

41
00:02:22,435 --> 00:02:24,965
ここの要素は 全て気にしない

42
00:02:24,965 --> 00:02:28,005
よって この Pc は １と等しくなり

43
00:02:28,005 --> 00:02:33,390
これらは 赤い境界箱の位置を指定するのに使い

44
00:02:33,390 --> 00:02:38,820
それから これで 物体が

45
00:02:38,820 --> 00:02:41,865
クラス２ 車 であることを示す

46
00:02:41,865 --> 00:02:44,010
これを それぞれに対して行う

47
00:02:44,010 --> 00:02:47,485
９格子セルの位置で 3 x 3 格子のそれぞれの位置でね

48
00:02:47,485 --> 00:02:50,085
このようなベクトルを作り出す

49
00:02:50,085 --> 00:02:52,299
16次元のベクトルを作り出す

50
00:02:52,299 --> 00:02:59,375
よって 最終的な出力ボリュームは 3 x 3 x 16 になる

51
00:02:59,375 --> 00:03:04,530
それから 例によって このスライドでは簡単のため 3 x 3 格子にしている

52
00:03:04,530 --> 00:03:09,540
実際には それは 19 x 19 x 16 とかになるだろう

53
00:03:09,540 --> 00:03:12,265
また 実際に もっと多くのアンカーボックスを使う場合は

54
00:03:12,265 --> 00:03:17,363
19 x 19 x 5 x 8 とかになり 5 x 8 = 40 だから

55
00:03:17,363 --> 00:03:20,405
これは 19 x 19 x 40 になる

56
00:03:20,405 --> 00:03:23,475
５つのアンカーボックスを使う場合はこうなる

57
00:03:23,475 --> 00:03:30,080
これが 訓練だ ConvNet に 画像を入力して訓練する

58
00:03:30,080 --> 00:03:32,395
例えば 100 x 100 x 3

59
00:03:32,395 --> 00:03:39,565
そして ConvNet は 出力ボリュームを出力する この例では

60
00:03:39,565 --> 00:03:43,204
3 x 3 x 16 もしくは 3 x 3 x 2 x 8 だ

61
00:03:43,204 --> 00:03:47,505
次に アルゴリズムが どのようにして 予測を作るかを見てみよう

62
00:03:47,505 --> 00:03:53,445
画像を与えると ニューラルネットワークは この 3 x 3 x 2 x 8 ボリュームを出力する

63
00:03:53,445 --> 00:03:57,690
９つの格子セルそれぞれで このようなベクトルを得る

64
00:03:57,690 --> 00:04:00,795
この左上の格子セルでは

65
00:04:00,795 --> 00:04:02,925
何の物体も無いので

66
00:04:02,925 --> 00:04:06,150
望むところでは ニューラルネットワークは ここに０を出力する

67
00:04:06,150 --> 00:04:08,990
ここも０で その他の値も何か出力する

68
00:04:08,990 --> 00:04:11,080
ニューラルネットワークは ？マークを出力できないので

69
00:04:11,080 --> 00:04:12,540
"気にしない"とは出力できないからね

70
00:04:12,540 --> 00:04:15,205
よって 残りには何らかの値を出しておく

71
00:04:15,205 --> 00:04:17,400
ただし これらの数は 基本的には無視される なぜなら

72
00:04:17,400 --> 00:04:20,580
ニューラルネットワークが そこに物体は無いと 言っているからだ

73
00:04:20,580 --> 00:04:23,910
だから 出力に境界箱や車があっても 全く問題にならない

74
00:04:23,910 --> 00:04:28,170
ただの数の組み合わせ ノイズに過ぎない

75
00:04:28,170 --> 00:04:32,370
対照的に この箱では 願わくば

76
00:04:32,370 --> 00:04:37,308
下の左の箱への 出力 y の値は
(訳注："左"は"中央"の言い間違いと思われる)

77
00:04:37,308 --> 00:04:40,850
境界箱１に対しては ０になり

78
00:04:40,850 --> 00:04:43,650
それから 一連の数 ただのノイズ を出力し

79
00:04:43,650 --> 00:04:47,880
さらに 一連の数を出力して

80
00:04:47,880 --> 00:04:52,980
この車の非常に正確な境界箱が指定される

81
00:04:52,980 --> 00:04:56,970
このようにして ニューラルネットワークが 予測を作る

82
00:04:56,970 --> 00:05:00,675
最後に Non-Max Suppression を行う

83
00:05:00,675 --> 00:05:02,240
ちょっと面白いことをやってみよう

84
00:05:02,240 --> 00:05:04,740
この新たな テストセット画像を見て

85
00:05:04,740 --> 00:05:08,280
Non-Max Suppression は こんな風に行う

86
00:05:08,280 --> 00:05:10,680
もし ２種類のアンカーボックスを使うなら

87
00:05:10,680 --> 00:05:12,690
９つの格子セルのそれぞれに

88
00:05:12,690 --> 00:05:15,445
２つの予測された境界箱を得る

89
00:05:15,445 --> 00:05:17,835
それらの幾つかは とても低い存在確率

90
00:05:17,835 --> 00:05:20,760
とても低い Pc だ しかし それでも

91
00:05:20,760 --> 00:05:24,235
９つの格子セルそれぞれに ２つの予測された境界箱を得る

92
00:05:24,235 --> 00:05:27,540
例えば このような境界箱を得るだろう

93
00:05:27,540 --> 00:05:30,060
これらの境界箱の中には

94
00:05:30,060 --> 00:05:34,645
それが紐付いている格子セルの 高さや幅を超えるものも有り得る

95
00:05:34,645 --> 00:05:38,725
次に 低い存在確率のものを削除する

96
00:05:38,725 --> 00:05:41,635
ニューラルネットワークが こう言うものを削除する

97
00:05:41,635 --> 00:05:44,025
"えー この物体は 多分存在しません"

98
00:05:44,025 --> 00:05:45,855
それらを削除する

99
00:05:45,855 --> 00:05:49,868
それから 最後は ３種類のクラスを検出しようとしているなら

100
00:05:49,868 --> 00:05:53,665
歩行者 車 そして バイク を検出しようとしているのなら

101
00:05:53,665 --> 00:05:56,655
３つのクラスそれぞれに

102
00:05:56,655 --> 00:05:59,760
独立して Non-Max Suppression を行う

103
00:05:59,760 --> 00:06:03,010
そのクラスになると予測された物体毎にね

104
00:06:03,010 --> 00:06:07,620
歩行者クラスと予測されたものに Non-Max Suppression を行い

105
00:06:07,620 --> 00:06:10,080
車クラスに Non-Max Suppression を行い

106
00:06:10,080 --> 00:06:13,100
そして バイククラスに Non-Max Suppression を行う

107
00:06:13,100 --> 00:06:17,865
基本的に３回実行して 最終予測を得る

108
00:06:17,865 --> 00:06:20,970
そして 望ましくは この出力では

109
00:06:20,970 --> 00:06:25,465
この画像にある 全ての車と全ての歩行者が予測されるだろう

110
00:06:25,465 --> 00:06:29,170
これが YOLO 物体検出アルゴリズムだ

111
00:06:29,170 --> 00:06:33,170
最も効果的な物体検出アルゴリズムの１つだ

112
00:06:33,170 --> 00:06:36,560
多くの優れたアイデアを合わせ持っている

113
00:06:36,560 --> 00:06:41,275
それは 物体検出に関係するコンピュータ ビジョン全てに跨るものだ

114
00:06:41,275 --> 00:06:46,056
そして あなたには この要素の多くを自分自身で実装するチャンスがある

115
00:06:46,056 --> 00:06:47,840
今週のプログラミング演習でね

116
00:06:47,840 --> 00:06:51,520
今週のプログラミング演習を楽しんで欲しい

117
00:06:51,520 --> 00:06:54,120
それに続く 追加のビデオもある

118
00:06:54,120 --> 00:06:57,010
見ても見なくても お好きなように

119
00:06:57,010 --> 00:07:01,000
どちらにせよ 次週会うのを楽しみにしているよ
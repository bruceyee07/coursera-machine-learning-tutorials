あなたは 既に 物体検出のほとんどの要素を見た このビデオでは 全ての要素を一緒にして YOLO 物体検出アルゴリズムを作ってみよう 最初は どのように 訓練セットを作るかだ ３個の物体を検出するアルゴリズムを 訓練しようとしている とする 歩行者 車 そして バイク だ 明示的な背景クラスは不要で ここでは ３つのクラスラベルだけになる もし ２種類のアンカーボックスを使うなら 出力 y は 3 x 3 格子を使うなら 3 x 3 x 2 アンカーの数 x 8 この次元 ８は ５個に クラス数を加えたものだ ５というのは Pc と境界箱だ それが５個で それから c1 c2 c3 クラス数と同じ次元だ これは 3 x 3 x 2 x 8 でもいいし 3 x 3 x 16 でもいい 訓練セットを作るには これらの９つの格子セル それぞれに対し 目的ベクトル y を作る この最初のセルでやってみよう この格子セルには 検出に値するものは何も無い 歩行者 車 バイク の３クラスのどれでも無い 左上の格子セルは分かった この格子セルに対応する 目的 y は これと同じになるだろ 最初のアンカーボックスの Pc は 0 だ なぜなら 最初のアンカーボックスに対応するものは何も無いから そして ２番目のアンカーボックスのも 0 だ それから 同じく これらの他の値は 気にしない さて 殆どの格子セルには 何も無い しかし ここにあるボックスでは 目的ベクトル y は こうなるだろう 訓練セットは 車に対して このような境界箱を持つだろう それは 背の高さより 少しだけ幅広だ そして アンカーボックスがこんなだとすると これが アンカーボックス１ そして これが アンカーボックス２ そして 赤い箱は アンカーボックス２に 少しだけ高い IoU を持つ そして この車は このベクトルの下の部分に充てられる アンカーボックス１に対する Pc は 0 だと分かる ここの要素は 全て気にしない よって この Pc は １と等しくなり これらは 赤い境界箱の位置を指定するのに使い それから これで 物体が クラス２ 車 であることを示す これを それぞれに対して行う ９格子セルの位置で 3 x 3 格子のそれぞれの位置でね このようなベクトルを作り出す 16次元のベクトルを作り出す よって 最終的な出力ボリュームは 3 x 3 x 16 になる それから 例によって このスライドでは簡単のため 3 x 3 格子にしている 実際には それは 19 x 19 x 16 とかになるだろう また 実際に もっと多くのアンカーボックスを使う場合は 19 x 19 x 5 x 8 とかになり 5 x 8 = 40 だから これは 19 x 19 x 40 になる ５つのアンカーボックスを使う場合はこうなる これが 訓練だ ConvNet に 画像を入力して訓練する 例えば 100 x 100 x 3 そして ConvNet は 出力ボリュームを出力する この例では 3 x 3 x 16 もしくは 3 x 3 x 2 x 8 だ 次に アルゴリズムが どのようにして 予測を作るかを見てみよう 画像を与えると ニューラルネットワークは この 3 x 3 x 2 x 8 ボリュームを出力する ９つの格子セルそれぞれで このようなベクトルを得る この左上の格子セルでは 何の物体も無いので 望むところでは ニューラルネットワークは ここに０を出力する ここも０で その他の値も何か出力する ニューラルネットワークは ？マークを出力できないので "気にしない"とは出力できないからね よって 残りには何らかの値を出しておく ただし これらの数は 基本的には無視される なぜなら ニューラルネットワークが そこに物体は無いと 言っているからだ だから 出力に境界箱や車があっても 全く問題にならない ただの数の組み合わせ ノイズに過ぎない 対照的に この箱では 願わくば 下の左の箱への 出力 y の値は
(訳注："左"は"中央"の言い間違いと思われる) 境界箱１に対しては ０になり それから 一連の数 ただのノイズ を出力し さらに 一連の数を出力して この車の非常に正確な境界箱が指定される このようにして ニューラルネットワークが 予測を作る 最後に Non-Max Suppression を行う ちょっと面白いことをやってみよう この新たな テストセット画像を見て Non-Max Suppression は こんな風に行う もし ２種類のアンカーボックスを使うなら ９つの格子セルのそれぞれに ２つの予測された境界箱を得る それらの幾つかは とても低い存在確率 とても低い Pc だ しかし それでも ９つの格子セルそれぞれに ２つの予測された境界箱を得る 例えば このような境界箱を得るだろう これらの境界箱の中には それが紐付いている格子セルの 高さや幅を超えるものも有り得る 次に 低い存在確率のものを削除する ニューラルネットワークが こう言うものを削除する "えー この物体は 多分存在しません" それらを削除する それから 最後は ３種類のクラスを検出しようとしているなら 歩行者 車 そして バイク を検出しようとしているのなら ３つのクラスそれぞれに 独立して Non-Max Suppression を行う そのクラスになると予測された物体毎にね 歩行者クラスと予測されたものに Non-Max Suppression を行い 車クラスに Non-Max Suppression を行い そして バイククラスに Non-Max Suppression を行う 基本的に３回実行して 最終予測を得る そして 望ましくは この出力では この画像にある 全ての車と全ての歩行者が予測されるだろう これが YOLO 物体検出アルゴリズムだ 最も効果的な物体検出アルゴリズムの１つだ 多くの優れたアイデアを合わせ持っている それは 物体検出に関係するコンピュータ ビジョン全てに跨るものだ そして あなたには この要素の多くを自分自身で実装するチャンスがある 今週のプログラミング演習でね 今週のプログラミング演習を楽しんで欲しい それに続く 追加のビデオもある 見ても見なくても お好きなように どちらにせよ 次週会うのを楽しみにしているよ
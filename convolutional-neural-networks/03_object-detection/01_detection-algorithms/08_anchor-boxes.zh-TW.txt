目前你看過的物件偵測法，有一個問題是 每一個格子只能偵測一個物件 如果一個格子想要偵測多個物件呢？ 你可以這樣做 你用一個概念叫「錨框」(anchor boxes) 讓我們先從一個例子開始 假設你有這樣的照片 在這個例子 我還是用 3乘3 的格子 注意到路人的中心點以及汽車的中心點 幾乎在同個地方，兩者都在同一個格子中 所以對於那個格子 如果 y 輸出這個向量，其中偵測的類別有三個 行人、汽車和機車 他並沒辦法同時輸出兩種偵測 所以我必須在兩個偵測中挑一個。 而運用錨框 (anchor box) 的概念 你會這樣子做： 事先定義好兩種不同的形狀，叫做錨框 或叫錨框形狀，而你要做的是 能夠將這兩個預測連結到這兩個錨框 一般來說，你可能要用更多個錨框 可能五個或更多， 不過在這部影片，我只會用 兩個錨框，方便講解。 你要做的是，定義類別的標籤 並不是單用左邊的向量， 而基本上是重複兩次 所以你會有 p_c, b_x, b_y, b_h, b_w, c_1, c_2, c_3 — 這八個輸出會和錨框1有關聯 然後，你再重複 p_c, b_x, ... c_1 c_2, c_3，另外這八個輸出連結到錨框2 那麼，因為路人的形狀 和第一個錨框比較像，和錨框2比較不像 你可以這八個數字來表示，p_c 是 1 對，有個路人 用這些來表示路人的邊界框 然後用這些來表示這個物件是行人。 然後，因為汽車的邊界框 和錨框1相比，他和錨框2的形狀比較相近 你就能用這些來表示這第二個物件是汽車 讓邊界框和其他參數 來代表關聯到的這輛汽車。 總結一下，在之前 在用錨框之前 你會這樣做 對於訓練集圖片裡面的每個物件 你會根據他的中心點，分配給相對應的格子 所以輸出 y 會是 3乘3乘8， 因為你有3乘3格子，而且對於每個格子 我們有一個輸出向量：p_c, 邊界框還有 c_1, c_2, c_3 而有了錨框後 你現在會這樣做： 每個物件和以前一樣，會分配給 含有其中心點的格子 不過，他也會分配給 和物件形狀有最高 IoU 的錨框 你有兩個錨框 你會拿物件，看看他... 所以如果你的物件是這種形狀 你會拿兩個錨框 可能錨框1是這種形狀 錨框2是這種形狀 然後你看這兩個錨框哪一個 IoU 最高 與物件的邊界框。 無論是哪個錨框 物件不僅會分配給格子 他會分配給 (格子, 錨框) 這個組合 這就是這物件轉換成目標標籤的方法。 所以現在呢，輸出的 y 會是 3乘3乘16 因為就像你在前張投影片看到的 y 現在是 16 維 — 如果你想 你也可以看成 3乘3乘2乘8 因為現在有兩個錨框，而 y 是 8 維 而 y 會是 8 維是因為我們有三個物件的類別 如果物件種類更多，那麼 y 的維度會更高。 讓我們跑個實際的例子 對於這一個格子 讓我們寫出 y 是什麼 路人的形狀和錨框1比較像 所以對於這路人 我們把他分配給這向量的上半部： 是的，有物件 這路人有某個邊界框 如果路人是類別1 那麼我們有第一個值 1，然後 0 和 0 然後這汽車的形狀比較像錨框2 所以這向量剩下的部份是 1，然後汽車的邊界框 然後車子是 c_2 所以是 0, 1, 0。 所以這就是標籤 y 這邊箭頭所指的下層中間格子的 y。 那麼，如果這個格子只有車但是沒有行人呢 如果它只有汽車 那麼假設汽車邊界框的形狀 還是跟錨框2比較像 那麼這個目標標籤 y 如果只有汽車而人不見了 錨框2的這部份還是相同 還記得向量的這一部份是對應到錨框2 而對於錨框1對應到的向量部份 你只需要說那邊沒有物件 所以 p_c 是 0 然後其餘的是「無關」 現在，還有一些細節 萬一你有兩個錨框，但是同一格子裡有三個物件呢？ 演算法對這個例子沒辦法處理好 希望這不會發生 不過如果真有其事，這演算法並沒有好法子處理 對這種情形，我會寫某種挑選的機制。 還有，萬一有兩個物件在同一個格子 但是兩個都和同一個錨框的形狀一樣呢？ 同樣地，這演算法也無法處理好這情況 如果發生這種情況，你實作一些挑選的機制 (tiebreaking) — 希望你的資料集不會出現這種例子 希望不會常發生 這樣的話，對成效影響應該不大。 那麼，這就是「錨框」(anchor box) 即使我講述錨框時，把他視作一種 處理同一個格子有兩個物件的手段 但實務上，這很少發生 特別是你用 19乘19 而不只是 3乘3 格子 在 361 個格子有兩個物件的中心點在同一個格子 的確有這機會，但不會很常發生。 或許，用錨框更好的理由、錨框有更好結果的情況 是它讓你的演算法更能應付特殊狀況 特別是，如果你的資料有一些高高的、 瘦瘦的物件，例如路人， 還有一些寬寬的物件，像汽車 這樣的話，錨框就能讓你的演算法特化 讓一些輸出特別能偵測出寬的、 胖的物件，像是車子 以及有些輸出單元能特化、偵測出高的 瘦瘦的物件，例如路人。 最後，你要怎麼選擇錨框呢？ 大家曾經是手動挑選，可能設計五或十個錨框 讓他們有各種不同形狀 看起來能涵蓋你想偵測的物件種類。 而更進階的版本 — 如果你有其他一些機器學習的知識 最近的某篇 YOLO 論文提出了更好的方法 是利用 K-means 演算法 (K-平均)： 把兩種想偵測的物件的形狀集合起來 然後利用那演算法，挑選出一些錨框 最具代表性的、讓他們能展現出想偵測的 多種各個類別的物件。 不過這種自動選擇錨框的方法比較進階 如果你手動挑選各式各樣的形狀 能夠擴展出想偵測的物件形狀 你想找高的、 瘦的、胖的寬的... 應該也能表現不錯。 那麼，這就是錨框 在下一個影片中 讓我們回顧所有學過的東西，組合回 YOLO 演算法
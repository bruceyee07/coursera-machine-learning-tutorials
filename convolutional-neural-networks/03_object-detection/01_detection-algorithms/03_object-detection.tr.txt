Karakteristik Nokta Saptama ve Nesne Yerseme'yi öğrendiniz. Şimdi, diğer nesne sezim algoritmalarına doğru ilerleyelim. Bu videoda, Kayan Pencerelerle Sezme Algoritması adı verilen şeyi kullanarak ConvNet'in nesne sezimine nasıl uygulandığını öğreneceksiniz. Diyelim ki bir araba sezim algoritması geliştirmek istiyorsunuz. İşte yapabilecekleriniz. İlk olarak bir etiketli eğitim seti oluşturabilirsiniz, birbirine benzer kırpılmış araba örnekleri ile x ve y. Yani, bu görüntü x bir pozitif örnek, bir araba var, bir araba var, bir araba var, ve sonra bu bir araba değil, bu bir araba değil. Ve bu eğitim setindeki amaç için, birbirine benzer kırpılmış araba görsellerinden biriyle başlayabilirsiniz. Yani x neredeyse tamamen yalnızca bir arabadır. Bunun için, bir fotoğrafı alın ve kesin, yalnızca arabanın bir parçası olmayan yerleri kesin. Böylece, tüm görüntünün neredeyse tamamında ortalanmış bir araba elde edersiniz. Bu etiketli eğitim seti göz önünde tutulursa, sonra bu birbirine benzer kırpılmış görüntülerden birine benzeyen bir görüntü ile ConvNet'i eğitebilirsiniz. Ve sonra ConvNet'in işi bir y çıktısı vermek, sıfır veya bir, bir araba var veya yok. Bu ConvNet'i eğittiğinizde, artık onu Kayan Pencerelerle Sezme'de kullanabilirsiniz. Bunu yapmanın yolu, eğer bunun gibi bir test görüntünüz varsa, yaptığınız gösterilen belirli bir pencere boyutunu seçerek başlamak. Ve sonra bu ConvNet'e küçük bir dörtgen bölgeyi gireceksiniz. Yani, sadece bu küçük kırmızı kareyi alın ve onu ConvNet'e girin ve ConvNet'e bir öngörü yaptırın. Ve büyük olasılıkla kırmızı kare içindeki bu küçük bölge için, "hayır, bu küçük kırmızı kare bir araba içermiyor" diyecek. Kayan Pencerelerle Sezme Algoritmasında, yaptığınız şimdi kırmızı kare tarafından sınırlandırılan ikinci görüntüyü biraz daha kaydırmak ve ConvNet'i onunla beslemek. Yani, ConvNet'i sadece kırmızı karedeki görüntü bölgesiyle besliyorsunuz ve ConvNet'i tekrar çalıştırıyorsunuz. Ve sonra bunu üçüncü görüntüyle yapıyorsunuz ve böyle devam ediyorsunuz. Ve pencereyi görüntüdeki tüm pozisyonda boydan boya kaydırana kadar devam ediyorsunuz. Ve bu örnekte, animasyonun daha hızlı ilerlemesini sağlamak için oldukça büyük bir adımı kullanıyorum. Ancak amaç, temelde bu boyuttaki her bölgeden geçmeniz, çok sayıda küçük kırpılmış görüntüyü ConvNet'e geçirmeniz ve bir adım olarak her pozisyonu sıfır veya bir olarak sınıflandırmanızdır. Şimdi, görüntü boyunca kayan pencereler olarak adlandırılan bunu bir kez çalıştırarak yaptık. Sonra onu tekrar edin, ancak şimdi daha geniş bir pencere kullanın. Böylelikle, şimdi kayan daha geniş bir bölge alacak ve onu çalıştıracaksınız. Yani, girdi boyutu ne olursa olsun bu bölgeyi yeniden boyutlandırıp ConvNet'e girmeniz, ConvNet'i onunla beslemeniz ve sıfır veya bir çıktısı almanız beklenir. Ve sonra birkaç adım kullanarak pencereyi kaydırın ve böyle devam edin. Ve bitirene dek girdiğiniz görüntüyü boydan boya çalıştırın. Ve sonra üçüncü kez daha da geniş pencerelerle yapabilir ve böyle devam edebilirsiniz. Tamam. Ve bunu yaparsanız umulan şudur ki görüntünün bir yerinde bir araba olduğu sürece bir pencere olacak, örneğin bu pencereyi ConvNet'e geçirirseniz, umuyorum ki ConvNet şu girdi bölgesi için bir çıktısı verecek. Böylelikle orada olan bir arabayı sezeceksiniz. Bu algoritma Kayan Pencerelerle Sezme olarak adlandırılıyor çünkü bu çerçeveleri, bu kare kutuları alıyor ve onları girilen görüntü boyunca kaydırıyorsunuz ve küçük adımlarla her kare bölgeyi araba içeriyor veya içermiyor diye sınıflandırıyorsunuz. Bu noktada, Kayan Pencerelerle Sezmenin büyük bir dezavantajı var, o da işlem maliyeti. Çünkü görüntüde birçok farklı kare bölgeyi kesiyorsunuz ve her birini bağımsız olarak ConvNet'te çalıştırıyorsunuz. Ve eğer çok kaba, çok büyük bir adım boyutu kullanırsanız, bu ConvNet'e geçirmeniz gereken pencerelerin sayısını azaltacaktır, ancak bu kaba tanecikler performansa zarar verebilir. Oysa çok iyi tanecikler veya çok küçük adımlar kullanırsanız, o zaman ConvNet'e girdiğiniz bu çok sayıda küçük bölgelerin tümü çok yüksek işlem maliyeti anlamına gelir. Sinir Ağları'nın yükselişinden önce, insanlar nesne sezme uygulamaları için mühendislik özellikleriyle eldeki basit bir doğrusal sınıflandırıcı gibi basit sınıflandırıcıları kullanırlardı. Ve o dönemde, her sınıflandırıcı hesaplamak için nispeten maliyetsizdi, sadece bir doğrusal fonksiyondu. Kayan Pencerelerle Sezme iyi geldi. Kötü bir yöntem değildi, ancak şimdi ConvNet'le tekil bir sınıflandırma görevi çok maliyetli ve bu yolla pencereleri kaydırmak imkansız derecede yavaş. Çok iyi bir tanecik veya çok küçük bir adım kullanıncaya dek, görüntü içindeki nesneleri doğru biçimde yerseyemezsiniz. Ancak şükür ki, bu işlem maliyeti probleminin çok iyi bir çözümü var. Özellikle, Kayan Pencerelerle Nesne Sezici evrişimli veya çok daha verimli bir şekilde uygulanabilir. Hadi nasıl yapabileceğinizi sonraki videoda görelim.
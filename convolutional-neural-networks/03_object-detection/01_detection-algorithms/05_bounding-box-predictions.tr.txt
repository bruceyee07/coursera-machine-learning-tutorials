Son videoda, kayan pencerelerin evrişimli uygulamasının nasıl kullanıldığını öğrendiniz. Bu hesaplama açısından daha verimli, fakat bunun (bu yöntemin) hala, en uygun sınırlayıcı kutuyu tam olarak çıktı vermemesi (olumsuz) gibi bir problemi var. Bu videoda, sınırlayıcı kutu tahminlerinizi nasıl daha doğru elde edebileceğinizi birlikte görelim. Bu videoda, sınırlayıcı kutu tahminlerinizi nasıl daha doğru elde edebileceğinizi birlikte görelim. Kayan pencereler ile, siz, yerlerden oluşan 3 set alıyorsunuz ve çapraz ateşe alıyorsunuz onları. Kayan pencereler ile, siz, yerlerden oluşan 3 set alıyorsunuz ve çapraz ateşe alıyorsunuz onları. Ve bu durumda hiçbir kutu, gerçekten arabanın pozisyonu ile tam anlamıyla uyuşmuyor. Yani, belki o kutu en iyi uyandır. Ve de, içinden çizilmiş gibi görünüyor, tam sınırlayıcı kutu tam bir kare bile değil, o aslında biraz daha geniş bir dikdörtgene veya hafif bir yatay görünüş oranına sahip. Acaba, bu algoritmanın daha doğru çıktılar vermesini sağlayacak bir yol var mıdır ? Bu çıktıyı daha doğru sınırlayıcı kutu olarak elde etmenin iyi bir yolu YOLO algoritmasıdır. YOLO, "Siz Sadece Bir defa Bakarsınız" ((Tek Bakışta) Gerçek Zamanlı Nesne Tepiti) demektir. Ve Joseph Redmon, Santosh Divvala, Ross Girshick
 ile Ali Farhadi tarafından geliştirilmiş bir algoritmadır. Ve Joseph Redmon, Santosh Divvala, Ross Girshick
 ile Ali Farhadi tarafından geliştirilmiş bir algoritmadır. Yapmanız gereken şudur. Üzerinde 100 x 100 birimlik (birim karelik) ızgara (tipinde bir) (ölçeklendirme) sistemi oturtacağınız 
bir resim girdiniz olduğunu varsayalım. Üzerinde 100 x 100 birimlik (birim karelik) ızgara (tipinde bir) (ölçeklendirme) sistemi oturtacağınız 
bir resim girdiniz olduğunu varsayalım. Gerçek bir uygulamada sizin, belki 19 x 19 birim kareliğe benzer,
daha iyi bir örneklem kullanacak olmanıza rağmen, ben, 
örnekleme amacıyla, 3x3 birim karelik bir örneklem kullanacağım. Gerçek bir uygulamada sizin, belki 19 x 19 birim kareliğe benzer,
daha iyi bir örneklem kullanacak olmanıza rağmen, ben, 
örnekleme amacıyla, 3x3 birim karelik bir örneklem kullanacağım. Gerçek bir uygulamada sizin, belki 19 x 19 birim kareliğe benzer,
daha iyi bir örneklem kullanacak olmanıza rağmen, ben, 
örnekleme amacıyla, 3x3 birim karelik bir örneklem kullanacağım. Gerçek bir uygulamada sizin, belki 19 x 19 birim kareliğe benzer,
daha iyi bir örneklem kullanacak olmanıza rağmen, ben, 
örnekleme amacıyla, 3x3 birim karelik bir örneklem kullanacağım. Gerçek bir uygulamada sizin, belki 19 x 19 birim kareliğe benzer,
daha iyi bir örneklem kullanacak olmanıza rağmen, ben, 
örnekleme amacıyla, 3x3 birim karelik bir örneklem kullanacağım. Ve buradaki temel fikir, 
bir kaç video öncesinde gördüğünüz resmin sınıflandırılması ve yerinin saptanması algoritmasını almanız 
ve bunu 9 adet hücreden oluşan örneklemin her bir hücresine uygulamanızdır. Ve buradaki temel fikir, 
bir kaç video öncesinde gördüğünüz resmin sınıflandırılması ve yerinin saptanması algoritmasını almanız 
ve bunu 9 adet hücreden oluşan örneklemin her bir hücresine uygulamanızdır. Ve buradaki temel fikir, 
bir kaç video öncesinde gördüğünüz resmin sınıflandırılması ve yerinin saptanması algoritmasını almanız 
ve bunu 9 adet hücreden oluşan örneklemin her bir hücresine uygulamanızdır. Buradaki temel fikir, 
bu haftanın ilk videosunda gördüğünüz resmin sınıflandırılması ve yerinin saptanması algoritmasını almanız ve
 onu bu resmin 9 adet hücreden oluşan örneklemin her bir hücresine uygulamanızdır. Buradaki temel fikir, 
bu haftanın ilk videosunda gördüğünüz resmin sınıflandırılması ve yerinin saptanması algoritmasını almanız ve
 onu bu resmin 9 adet hücreden oluşan örneklemin her bir hücresine uygulamanızdır. Buradaki temel fikir, 
bu haftanın ilk videosunda gördüğünüz resmin sınıflandırılması ve yerinin saptanması algoritmasını almanız ve
 onu bu resmin 9 adet hücreden oluşan örneklemin her bir hücresine uygulamanızdır. Daha somut (elle tutulur) olması için, 
eğitim amacıyla kullanacağınız etiketleri nasıl tanımlayacağınızı şimdi göstereceğim. Daha somut (elle tutulur) olması için, 
eğitim amacıyla kullanacağınız etiketleri nasıl tanımlayacağınızı şimdi göstereceğim. 9 kareden oluşan her bir hücre için, 
daha önce gördüğünüz gibi, her bir Y etiketinin 8 boyutlu vektörden oluştuğu, 
bir adet Y etiketi tanımlarsınız. 9 kareden oluşan her bir hücre için, 
daha önce gördüğünüz gibi, her bir Y etiketinin 8 boyutlu vektörden oluştuğu, 
bir adet Y etiketi tanımlarsınız. 9 kareden oluşan her bir hücre için, 
daha önce gördüğünüz gibi, her bir Y etiketinin 8 boyutlu vektörden oluştuğu, 
bir adet Y etiketi tanımlarsınız. Önce o (birim kare ızgara) örneklem hücresinde bir resmin var olup olmadığına bağlı olarak
 ilk önce PC 01 çıktısını verirsiniz, daha sonra eğer sınırlayıcı kutunun içersinde bir resim var ise, BX, BY, BH, BW değerlerini 
(anlaşıldığı kadarıyla (muhtemelen) kutunun X,Y koordinatları ile (H) yükseklik ve (W) genişlik boyutlarını)
 çıktı olarak verirsiniz. Önce o (birim kare ızgara) örneklem hücresinde bir resmin var olup olmadığına bağlı olarak
 ilk önce PC 01 çıktısını verirsiniz, daha sonra eğer sınırlayıcı kutunun içersinde bir resim var ise, BX, BY, BH, BW değerlerini 
(anlaşıldığı kadarıyla (muhtemelen) kutunun X,Y koordinatları ile (H) yükseklik ve (W) genişlik boyutlarını)
 çıktı olarak verirsiniz. Önce o (birim kare ızgara) örneklem hücresinde bir resmin var olup olmadığına bağlı olarak
 ilk önce PC 01 çıktısını verirsiniz, daha sonra eğer sınırlayıcı kutunun içersinde bir resim var ise, BX, BY, BH, BW değerlerini 
(anlaşıldığı kadarıyla (muhtemelen) kutunun X,Y koordinatları ile (H) yükseklik ve (W) genişlik boyutlarını)
 çıktı olarak verirsiniz. Önce o (birim kare ızgara) örneklem hücresinde bir resmin var olup olmadığına bağlı olarak
 ilk önce PC 01 çıktısını verirsiniz, daha sonra eğer sınırlayıcı kutunun içersinde bir resim var ise, BX, BY, BH, BW değerlerini 
(anlaşıldığı kadarıyla (muhtemelen) kutunun X,Y koordinatları ile (H) yükseklik ve (W) genişlik boyutlarını)
 çıktı olarak verirsiniz. Daha sonra, arka plandaki resmi bir sınıf olarak saymaz (olumsuz) dener ve
 diyelim C1, C2, C3 sınıfı olarak adlandırdığımız üç sınıf tanımlar isek. Daha sonra, arka plandaki resmi bir sınıf olarak saymaz (olumsuz) dener ve
 diyelim C1, C2, C3 sınıfı olarak adlandırdığımız üç sınıf tanımlar isek. Yani siz yayaların sınıfı, motorların sınıfı ve arka plan resminin sınıfını tanımlamaya çalışırsınız. Yani siz yayaların sınıfı, motorların sınıfı ve arka plan resminin sınıfını tanımlamaya çalışırsınız. O zaman C1 C2 C3 yaya, araba ve motor sınıfları olabilir. O zaman C1 C2 C3 yaya, araba ve motor sınıfları olabilir. Üzerinde 9 adet birim kare hücremiz olan bu resimde, Üzerinde 9 adet (birim kare) hücremiz olan bu resimde, her bir (birim karelik) hücre için bunun gibi bir vektörümüz olur. Şimdi sol üst köşedeki (birim karelik) hücreden başlayalım, tam buradakinden. Bu hücre içinde herhangi bir nesne yok. O zaman, sol üst köşedeki bu (birim karelik) hücrenin Y etiketi vektörleri sıfır olur, ve bu satırdaki diğer değerleri ilk değer sıfır olduğu için (içinde nesne olmadığı içi) dikkate almayız. Bu (birim kare) hücre için Y etiketi çıktısı, bu hücre için de ve bu hücre için de boş olur. Bu (birim kare) hücre için Y etiketi çıktısı, bu hücre için de ve bu hücre için ve diğer tüm hücreler için de boş olur, içlerinde (ilgi çekici) bir nesne olmaması nedeniyle. Peki bu hücre için ne söyleyebiliriz ? Daha fazla detay verebilmek için, bu resmin iki tane nesnesi var. YOLO algoritmasının yaptığı, iki nesnenin ulaşılabilen orta noktasını almak, ve daha sonra orta nokta (verisi) içeren nesneyi hücreye atamaktır. Böylece, soldaki araba bu hücreye atanmış, ve bu orta noktası olan sağdaki araba, ve bu orta noktası olan sağdaki araba, bu hücreye atanmış olur. Orta hücre her iki arabanın bazı bölümlerini içerse de, orta hücrenin herhangi ilgi çekici bir nesnesi olmadığını varsayacağız, böylece orta hücrenin Y sınıf etiketi bunun gibi nesnesiz bir vektör olarak görünür, ve böylece PC'nin ilk bileşeni, ve sonra kalanları de dikkate alınmaz (içinde nesne olmadığından) Gelelim bu hücreye, sol tarafta yeşil daireye aldığım bu hücre için, hedeflenen Y etiketi aşağıdaki gibi olurdu. Orada bir nesne var, ve siz bu sınırlayıcı kutunun pozisyonunu tanımlamak için BX, BY, BH, BW değerlerini yazarsınız. ve siz bu sınırlayıcı kutunun pozisyonunu tanımlamak için BX, BY, BH, BW değerlerini yazarsınız. Ve daha sonra siz şunlara sahip olursunuz, birlikte görelim, eğer sınıf 1 yaya olarak tanımlandıysa, o zaman o sıfırdı (yani bu resimde yaya yoktur) sınıf 2 araba olarak tanımlı ise, o bir (yani bu resimde araba var) sınıf 3 motor olarak tanımlandıysa , o zaman sıfırdı (yani bu resimde motor yok). Benzer bir şekilde, sağ taraftaki bu hücre, çünkü içinde bir nesne var, sağdaki hücrenin hedeflenen etiketine benzeyen böyle bir vektöre sahip olur. sağdaki hücrenin hedeflenen etiketine benzeyen böyle bir vektöre sahip olur. Sonunda, siz bu 9 hücreden her biri için, 8 boyutlu bir vektör çıktısı elde etmiş olursunuz. Ve siz 3x3 (yani 9) adet hücreye sahip olduğunuzdan, Ve siz 3x3 (yani 9) adet hücreye sahip olduğunuzdan, çıktının boyutu (hacmi) 3x3x8 olacaktır. Yani, hedef çıktı 3x3x8 olacaktır, çünkü sizin 3x3 adet hücreniz var. Ve her bir 3x3 adet hücre için, 8 boyutlu Y vektörünüz var. Böylece sizin hedeflenen çıktı boyutunuz 3x3x8 olur. Örneğin burada, bu sol üstteki 1x1x8 hacim 9 adet hücrenin sol üstteki hücresinin hedeflenen çıktı vektörüne karşılık gelir. 9 adet hücrenin sol üstteki hücresinin hedeflenen çıktı vektörüne karşılık gelir. Ve diğer 3x3 pozisyonun her biri için aynı şekilde bu 9 adet hücrenin her birine karşılık gelen, çıktı olarak elde etmek istediğiniz 8 boyutlu Y vektörü var mıdır? İçlerinde herhangi bir nesne (yok ise) olmayanlar (bunlardan bazıları) dikkate alınmaz. İçlerinde herhangi bir nesne (yok ise) olmayanlar (bunlardan bazıları) dikkate alınmaz. Ve bundan dolayı bu resim için çıktı etiketinin kendisi 
3x3x8 boyutunda olan toplam hedef çıktısıdır. Ve bundan dolayı bu resim için çıktı etiketinin kendisi
 3x3x8 boyutunda olan toplam hedef çıktısıdır. Böylece şimdi, yapay sinir ağınızı eğitmek için, 
girdi(boyutu) 100x100x3 (dır) olur 
 ki bu girdi resmidir. Böylece şimdi, yapay sinir ağınızı eğitmek için, 
girdi(boyutu) 100x100x3 (dır) olur 
 ki bu girdi resmidir. Böylece şimdi, yapay sinir ağınızı eğitmek için, 
girdi(boyutu) 100x100x3 (dır) olur 
 ki bu girdi resmidir. Ve sonra siz, maximum havuz katmanlarının katmanları ve benzerleri ile birlikte bir "convnet" (evrişimli ağ) sahibi olursunuz. Ve sonra siz, maximum havuz katmanlarının katmanları ve benzerleri ile birlikte bir "convnet" (evrişimli ağ) sahibi olursunuz. Böylece sonunda, buna sahip olursunuz, "conv" (evrişim) katmanlarını ve maximum havuz katmanlarını ve diğerlerini seçmelisiniz, ki bu sonunda 3x3x8 çıktı boyutundaki bir hacme ulaştırsın. Yani sizin yaptığınız, onun gibi resim girdisi olan bir X girdisine sahip olmak, ve 3x3x8'lik Y hedef etiketine sahip olmak, ve herhangi bir X girdisinden bu tip Y hacmine geçiş için
 harita yayılımını kullanmaktır. ve siz herhangi bir X girdisinden bu tip Y hacmine geçiş için
 harita yayılımını kullanmaktır. Yani bu algoritmanın avantajı, yapay sinir ağının aşağıdaki gibi hassas sınırlayıcı kutuları çıktı olarak vermesidir. Dolayısıyla test zamanında, sizi yaptığınız, bu Y çıktısını alıncaya kadar ileri yayılmayı çalıştırmak 
ve resim X girdisini beslemektir. sizi yaptığınız, bu Y çıktısını alıncaya kadar ileri yayılmayı çalıştırmak 
ve resim X girdisini beslemektir. Ve sonra, 3x3 posizyonluk 9 çıktının her birinden 1 ve 0'ları okuyabileceksiniz. Ve sonra, 3x3 posizyonluk 9 çıktının her birinden 1 ve 0'ları okuyabileceksiniz. Ve sonra, 3x3 posizyonluk 9 çıktının her birinden 1 ve 0'ları okuyabileceksiniz. Bu 9 pozisyonun herhangi biri ile bağlantısı olan bir nesne var mı? (Ve bir kare ile bağlantılı, o hücrenin içinde) bir nesne varsa, bu nesne nedir, o hücre içindeki nesne için sınırlayıcı kutu nerededir ? (Ve) her bir kare hücrenin içinde birden fazla nesne olmadığı sürece, bu algoritma (sorunsuz) çalışır (malıdır). (Ve) kare hücre içersinde birden fazla nesne bulunması problemini, daha sonra inceleyeceğiz (inceleyeceğimiz bir şeydir.) (Ve) kare hücre içersinde birden fazla nesne bulunması problemini, daha sonra inceleyeceğiz (inceleyeceğimiz bir şeydir.) Burada 3x3 birim karelik göreceli bir kullanıma karşılık, uygulamada, siz 19x19 birim karelik daha iyisini kullanabilirsiniz. uygulamada, siz 19x19 birim karelik daha iyisini kullanabilirsiniz. Bu şekilde 19x19x8'e karar verirseniz, bu sizin birim karelerinizi daha iyi yapar. Bu (detayda bir seçim) aynı kareye birden fazla nesne atanması olasılığını azaltır. Ve bir hatırlatıcı olarak sizin bir nesneyi bir kare hücreye atama yönteminiz, nesnenin orta noktasına bakmak ve sonra hangi kare hücre, nesnenin orta noktasını içeriyorsa, o nesneyi o ilgili kareye atamaktır. Böylece, her bir nesne, birden fazla kare hücreye yayılmış olsa bile, (orta noktası sadece bir kare hücrede bulunabileceğinden dolayı) 9 adetlik birim kareden sadece birine atanır, veya 3x3'lükten sadece birine atanır, veya 19x19 birim karelik hücrelerden sadece birine atanır. 19x19 birim karelik bir algoritmada, aynı hücre içinde (görünen) iki adet orta nokta (-yani iki-) nesne (nesnesinin) olma olasılığı biraz daha düşüktür. aynı hücre içinde (görünen) iki adet orta nokta (-yani iki-) nesne (nesnesinin) olma olasılığı biraz daha düşüktür. Böylece iki şeyin farkına varıyoruz, ilki, bu, bizim bu hafta üzerinde konuştuğumuz ilk videodaki resim sınıflandırma ve yerelleştirme algoritması gibi değil. bu, bizim bu hafta üzerinde konuştuğumuz ilk videodaki resim sınıflandırma ve yerelleştirme algoritması gibi değil. İkincisi, (bu algoritma) çıktı olarak sınırlayıcı topların koordinatlarını açıkça verir. (Ve) böylece bu, 
kayan pencereler sınıflan-dırıcısının çeşitli boyutlarda verdiği koordinatlardan çok daha hassas koordinatları çıktı olarak vermekle birlikte,
 ağınızın herhangi bir bakış açısı oranına sahip sınırlayıcı kutuları da çıktı olarak verme imkanı tanımaktadır. (Ve) böylece bu, 
kayan pencereler sınıflan-dırıcısının çeşitli boyutlarda verdiği koordinatlardan çok daha hassas koordinatları çıktı olarak vermekle birlikte,
 ağınızın herhangi bir bakış açısı oranına sahip sınırlayıcı kutuları da çıktı olarak verme imkanı tanımaktadır. (Ve) böylece bu, 
kayan pencereler sınıflan-dırıcısının çeşitli boyutlarda verdiği koordinatlardan çok daha hassas koordinatları çıktı olarak vermekle birlikte,
 ağınızın herhangi bir bakış açısı oranına sahip sınırlayıcı kutuları da çıktı olarak verme imkanı tanımaktadır. (Ve) böylece bu, 
kayan pencereler sınıflan-dırıcısının çeşitli boyutlarda verdiği koordinatlardan çok daha hassas koordinatları çıktı olarak vermekle birlikte,
 ağınızın herhangi bir bakış açısı oranına sahip sınırlayıcı kutuları da çıktı olarak verme imkanı tanımaktadır. Ve ikinci olarak, bu bir evrişimli uygulamadır ve bu algoritmayı 3x3 birim karede 9 defa uygulamazsınız veya 19x19 birim karede 19'un karesi yani 361 defa uygulamazsınız. Yani, siz aynı algoritmayı 361 defa veya 19'un karesi kadar çalıştırmazsınız. Onun yerine, bu,
 içinde 3x3'lük veya 19x19'luk hücrelerde ihtiyaç duyduğunuz hesaplamalar için
 ortaklaşa kullandığınız (tek bir uyumlu hesaplama olan) evrişimli bir uygulamadır. Onun yerine, bu,
 içinde 3x3'lük veya 19x19'luk hücrelerde ihtiyaç duyduğunuz hesaplamalar için
 ortaklaşa kullandığınız (tek bir uyumlu hesaplama olan) evrişimli bir uygulamadır. Onun yerine, bu,
 içinde 3x3'lük veya 19x19'luk hücrelerde ihtiyaç duyduğunuz hesaplamalar için
 ortaklaşa kullandığınız (tek bir uyumlu hesaplama olan) evrişimli bir uygulamadır. Yani, bu çok verimli bir algoritmadır. Ve aslında, YOLO algoritmasının güzel bir tarafı da, çok hızlı çalışan evrişimli bir uygulama olmasından dolayı
 azalmayan rağbetinin (popülerliğinin) olmasıdır. çok hızlı çalışan evrişimli bir uygulama olmasından dolayı
azalmayan rağbetinin (popülerliğinin) olmasıdır. Yani bu, gerçek zamanlı nesne algılama için bile çalışır. Şimdi, toparlamadan önce, sizinle paylaşacağım bir tane daha detay var, ki bu, sizin bx by, BH, BH sınırlayıcı kutularını nasıl kodlayacağınızdır. Bunu bir sonraki sunuda tartışalım. Şimdi, iki araba olduğunu, ve hatırlayın 3x3 birim karemiz olduğunu düşünelim. Sağ taraftaki arabayı örnek olarak alalım. Bu hücrede bir nesne var ve bu nesnenin y hedef etiketi 1, bu PC'nin 1'e eşit olması demekti. Ve sonra bx, by BH, BW ve sonra 0 1 0. Şimdi sınırlayıcı kutuyu nasıl tanımlarsınız ? YOLO algoritmasında, bu kareye göre, sol üst köşede 0 0 olan ve sağ altta 1 1 olan yapıyı aldığımda. sol üst köşede 0 0 olan ve sağ altta 1 1 olan yapıyı aldığımda. Yani o pozisyonun orta noktasını tanımlamak için, o turuncu nokta, bx olabilir, diyelim x aşağı yukarı 0.4 görünüyor. Belki sağındakine göre aşağı yukarı 0.4'tür. Ve sonra y, belki tahminime göre 0.3 gibi görünüyor. Ve sonra sınırlayıcı kutunun yüksekliği, kutunun toplam genişliğinin bir parçası olarak tanımlanmıştır. Yani, bu kırmızı kutunun genişliği belki şu mavi çizginin %90'ıdır. Ve yani, BH 0.9'dur ve bunun yüksekliği birim kare hücrelerin toplam yüksekliğinin yarısıdır. Yani bu durumda, BW 0.5 olurdu. Yani, diğer bir deyişle, bu bx, by, BH, BW birim kare hücreye bağlı olarak tanımlanmıştır. Ve böylece, bx ve by, (bu) 0 ile 1 arasında olmalıdır, doğru mu ? Çünkü, o hücrenin sınırları içinde olan turuncu nokta, tanım gereği atanmıştır. Çünkü, o hücrenin sınırları içinde olan turuncu nokta, tanım gereği atanmıştır. Eğer o (turuncu nokta) 0 ile 1 arasında olmasaydı ve karenin dışında olsaydı, o zaman biz başka bir birim kare hücreye atayacaktık. Ancak bunlar 1'den de büyük olabilirdi. Özellikle, arabanın içinde olduğu sınırlayıcı kutunun yüksekliği ve genişliği kutudan büyük olsaydı Özellikle, arabanın içinde olduğu sınırlayıcı kutunun yüksekliği ve genişliği kutudan büyük olsaydı, bu 1'den büyük olabilirdi. Yani, sınırlayıcı kutuların tanımlanmasının çok yolu var, ama bu oldukça makul bir yöntemdir (olabilir). Gerçi, YOLO araştırma makalelerini okuduysanız, diğer parametreleştirmelerin olduğu YOLO araştırma çizgileri
biraz daha iyi çalışmaktadır. diğer parametreleştirmelerin olduğu YOLO araştırma çizgileri
biraz daha iyi çalışmaktadır, ancak inanıyorum bu, iyi çalışan makul bir şart (durum) tanımaktadır. Gerçi, 0 ile 1 arasındaki bir değeri garantilemek için
 sigmoid fonksiyonlarını içeren daha karmaşık parametreleştirme yöntemleri (de) var. Gerçi, 0 ile 1 arasındaki bir değeri garantilemek için
 sigmoid fonksiyonlarını içeren daha karmaşık parametreleştirme yöntemleri (de) var. Açıklama parametreleştirmesinin negatif olmadığından emin olmak için
 0.9 ve 0.5 değerleri sıfırdan büyük değerler olarak (veya sıfıra eşit değerler) alınmıştır. Açıklama parametreleştirmesinin negatif olmadığından emin olmak için
 0.9 ve 0.5 değerleri sıfırdan büyük değerler olarak (veya sıfıra eşit değerler) alınmıştır. Üzerinde nesnelerin biraz daha iyi çalıştığı 
daha geliştirilmiş başka parametreleştirmeler de var 
ancak sizin gördüğünüz bu örnek de iyi çalışmaktadır (çalışmalıdır). Üzerinde nesnelerin biraz daha iyi çalıştığı 
daha geliştirilmiş başka parametreleştirmeler de var 
ancak sizin gördüğünüz bu örnek de iyi çalışmaktadır (çalışmalıdır). Üzerinde nesnelerin biraz daha iyi çalıştığı 
daha geliştirilmiş başka parametreleştirmeler de var 
ancak sizin gördüğünüz bu örnek de iyi çalışmaktadır (çalışmalıdır). Yani, YOLO veya Tek Bakış(ta) algoritması bu kadardır. (Ve) size, sonraki birkaç videoda, bu algoritmayı
 biraz daha iyi hale getirmeye yardımcı olacak diğer birkaç (farklı) yöntem (fikir) göstereceğim. (Ve) size, sonraki birkaç videoda, bu algoritmayı
 biraz daha iyi hale getirmeye yardımcı olacak diğer birkaç (farklı) yöntem (fikir) göstereceğim. Bu arada, isterseniz, birkaç slaytın alt kısmında geçmiş olan YOLO referans kağıdına (kaynağına, makalesine) bakabilirsiniz. birkaç slaytın alt kısmında geçmiş olan YOLO referans kağıdına (kaynağına, makalesine) bakabilirsiniz. Size sadece bir uyarı, bu kağıtlara (kaynaklara) baktığınızda, 
YOLO kağıdı (nın) bunların içinden okunması (anlaşılması) en zor olanlarından biri olduğunu görürsünüz (biridir). Size sadece bir uyarı, bu kağıtlara (kaynaklara) baktığınızda, 
YOLO kağıdı (nın) bunların içinden okunması (anlaşılması) en zor olanlarından biri olduğunu görürsünüz (biridir). Size sadece bir uyarı, bu kağıtlara (kaynaklara) baktığınızda, 
YOLO kağıdı (nın) bunların içinden okunması (anlaşılması) en zor olanlarından biri olduğunu görürsünüz (biridir). Hatırlıyorum, bu kağıdı ilk defa okuduğumda, ne olup bittiğini anlamakta oldukça zorlanmıştım. Ve benim anlamama yardım etmeleri için
 çok iyi araştırmacı olan birkaç arkadaşıma danışmak zorunda kalmıştım, Ve benim anlamama yardım etmeleri için
 çok iyi araştırmacı olan birkaç arkadaşıma danışmak zorunda kalmıştım, ve onlar bile bu kağıdın bazı detaylarını anlamakta zorluk çekmişlerdi. Yani, bu kağıda baktığınızda, anlamakta zorlanıyorsanız bu normaldir. Bu araştırma inceleme kağıtlarının daha yaygın (anlaşılabilir) olmasını isterdim, ama maalesef kıdemli araştırmacılar için bile o kadar yaygın (anlaşılabilir) değil, ama maalesef kıdemli araştırmacılar için bile o kadar yaygın (anlaşılabilir) değil, onlar da detaylarını anlamakta zorluk çekiyorlar. (Ve) açık kaynak koduna bakmak zorunda kalabilirsiniz, veya yazarı ile temas kurmak zorunda kalabilirsiniz, veya bu sonuçların detaylarını anlamak için başka şeyler de yapabilirsiniz. Ama (yine de) isterseniz ben sizi o kağıtlara bakmaktan alıkoymayayım, ama bu zor kağıtlardan biridir. Böylece, öyle de olsa, YOLO algoritmasının temellerini anlarsınız. (Şimdi) Bu algoritmayı daha iyi hale getirecek diğer ek bölümlere geçelim.
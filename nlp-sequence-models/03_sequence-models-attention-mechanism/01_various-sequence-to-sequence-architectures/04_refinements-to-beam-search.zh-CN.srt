1
00:00:00,650 --> 00:00:04,134
上个视频中⏎你看过基本的集束搜索算法。

2
00:00:04,134 --> 00:00:08,680
在本视频中,
您将学习作出一些小改动令它运作得更好。

3
00:00:10,240 --> 00:00:14,770
长度规范化是对集束搜索算法的一个小改动,帮

4
00:00:14,770 --> 00:00:16,447
你得到更好的结果。

5
00:00:16,447 --> 00:00:18,770
它是这样的

6
00:00:18,770 --> 00:00:22,526
集束搜索在最大化这个概率

7
00:00:22,526 --> 00:00:28,349
这个的乘积只是要表达

8
00:00:28,349 --> 00:00:35,028
给定x，p（y1）到y(ty）

9
00:00:35,028 --> 00:00:40,507
可以表示为p（y1）

10
00:00:40,507 --> 00:00:45,643
给定x*p(y2），给定x和

11
00:00:45,643 --> 00:00:50,779
y1乘以。。。一直到

12
00:00:50,779 --> 00:00:56,114
p（y，ty）给定x和y1直到y（t1-1）

13
00:00:56,114 --> 00:01:01,982
也许这个符号比它需要的更吓人,

14
00:01:01,982 --> 00:01:06,140
但这就是你以前看到的概率

15
00:01:07,430 --> 00:01:14,110
现在,如果你要执行这些,这些概率都是小于1的数字。

16
00:01:14,110 --> 00:01:16,170
通常它们远远少于1。

17
00:01:16,170 --> 00:01:20,190
乘以很多小于1的数字会导致一个非常非常小的,

18
00:01:20,190 --> 00:01:24,098
数字，这可能导致数值下溢

19
00:01:24,098 --> 00:01:26,150
意思是对于

20
00:01:26,150 --> 00:01:31,500
浮点表达准确的存储在计算机中来讲太小了。

21
00:01:31,500 --> 00:01:38,480
因此,在实践中,
我们不会将此数值最大化,而是进行log转换。

22
00:01:39,940 --> 00:01:45,420
如果你在那里插入log,则这个数值的log将成为log的总和,

23
00:01:45,420 --> 00:01:50,370
最大化的log概率的总和,应该给你

24
00:01:50,370 --> 00:01:55,710
同样的结果,就是选择最可能的句子y。

25
00:01:55,710 --> 00:02:00,470
所以,通过取log,你会得到一个更数值稳定

26
00:02:00,470 --> 00:02:05,890
的算法，不容易舍入取整的算法

27
00:02:05,890 --> 00:02:09,670
或真正的数值下溢

28
00:02:09,670 --> 00:02:13,170
因为使用了log函数,也就是对数函数,

29
00:02:13,170 --> 00:02:18,728
这是严格的单调增长函数,最大化P(y)。

30
00:02:20,110 --> 00:02:22,090
因为对数函数,

31
00:02:22,090 --> 00:02:26,910
这里的log函数,是一个严格的单调增长函数

32
00:02:26,910 --> 00:02:32,070
我们知道,最大化对数P(y)给定x应该给

33
00:02:32,070 --> 00:02:37,370
你与最大化P(y)给定的x相同的结果。

34
00:02:37,370 --> 00:02:43,350
在y值相同时,最大化这个也应该最大化那个。

35
00:02:43,350 --> 00:02:46,782
所以在大多数实现中,你要跟踪

36
00:02:46,782 --> 00:02:52,030
log的概率总和,而不是计算机协议的概率。

37
00:02:52,030 --> 00:02:56,780
现在,这个目标函数还有一个改变

38
00:02:56,780 --> 00:03:01,270
能使机器翻译算法运作得更好。

39
00:03:03,690 --> 00:03:08,160
如果你在看到这个原始目标

40
00:03:09,170 --> 00:03:13,040
如果你有一个很长的句子,这个句子的概率

41
00:03:13,040 --> 00:03:17,530
会很低,因为你在这里乘了很多项。

42
00:03:17,530 --> 00:03:22,260
乘了大量小于1的数字来估计该句子的概率

43
00:03:22,260 --> 00:03:25,798
所以如果你把这所有小于1的数字相乘,

44
00:03:25,798 --> 00:03:28,427
你会倾向于得到更小的概率

45
00:03:30,334 --> 00:03:34,787
所以这个目标函数有一个不良的影响,

46
00:03:34,787 --> 00:03:39,960
也许它不自然地倾向于喜欢非常短的翻译。

47
00:03:39,960 --> 00:03:42,260
它往往倾向于非常短的输出。

48
00:03:43,800 --> 00:03:48,062
因为短句的概率是由

49
00:03:48,062 --> 00:03:50,264
乘以比较少一点的小于1的数字

50
00:03:52,526 --> 00:03:56,060
因此,得到的输出不会太小。

51
00:03:57,190 --> 00:03:59,600
顺便说一句,同样的结论也适用于这边。

52
00:03:59,600 --> 00:04:05,407
这些概率的对数总是小于或等于1。

53
00:04:05,407 --> 00:04:07,660
你实际上是在这个范围的对数。

54
00:04:07,660 --> 00:04:12,064
所以在一起的项越多,这个输出就越小（负数）。

55
00:04:15,191 --> 00:04:20,118
所以还有一个改动过的算法,使其工作得更好,

56
00:04:20,118 --> 00:04:25,530
不是使用这个为你试图最大化的目标,

57
00:04:25,530 --> 00:04:30,970
你可以做的事情是通过翻译中的字数来规范化

58
00:04:30,970 --> 00:04:38,279
因此,这就需要每个单词的概率的平均对数。

59
00:04:38,279 --> 00:04:44,940
这大大降低了输出较长翻译的惩罚。

60
00:04:44,940 --> 00:04:50,280
在实践中,作为一个启发，不是除以Ty,

61
00:04:50,280 --> 00:04:54,610
不是除以在输出句中的单词,有时你用一种柔和的方法。

62
00:04:54,610 --> 00:05:00,349
我们可以ty对alpha的幂,在那里也许alpha等于0.7。

63
00:05:00,349 --> 00:05:05,200
所以如果alpha等于1,那么是,完全规范化的长度。

64
00:05:05,200 --> 00:05:07,690
如果alpha等于0,那么,

65
00:05:07,690 --> 00:05:12,710
那么,Ty到0将是1,那么你完全没有规范化。

66
00:05:12,710 --> 00:05:17,497
这一点在完全规范化和无规范化之间,

67
00:05:17,497 --> 00:05:22,080
alpha的另一个可调参数,你可以通过调它

68
00:05:22,080 --> 00:05:24,430
得到最好的结果。

69
00:05:26,330 --> 00:05:31,640
不得不承认,以这种方式,使用alpha这是一个启发或这是一个技巧。

70
00:05:31,640 --> 00:05:35,159
没有一个伟大的理论理由,但

71
00:05:35,159 --> 00:05:37,236
人们发现这个很好用。

72
00:05:37,236 --> 00:05:41,430
人们发现它在实践中运作良好,因此许多小组都这样做。

73
00:05:41,430 --> 00:05:45,680
你可以尝试不同的值α来

74
00:05:45,680 --> 00:05:47,490
看看哪一个给你最好的结果

75
00:05:49,350 --> 00:05:52,050
所以总结一下，你如何运行集束搜索,

76
00:05:52,050 --> 00:05:56,490
当你运行集束搜索你看到了很多句子,长度等于1,

77
00:05:56,490 --> 00:06:02,304
很多句子的长度等于2,很多句子的长度等于3。

78
00:06:03,350 --> 00:06:06,550
等等,也许你运行集束搜索30个步骤,

79
00:06:06,550 --> 00:06:11,790
比如说你认为输出句子长度是30。

80
00:06:11,790 --> 00:06:16,710
所以用宽度为3的集束,你将

81
00:06:16,710 --> 00:06:21,580
跟踪每个可能的句子长度的前三种可能性,

82
00:06:21,580 --> 00:06:25,820
1、2、3、4等,最多30个。

83
00:06:25,820 --> 00:06:30,800
然后,你会看到所有的输出

84
00:06:30,800 --> 00:06:37,270
句子然后通过这个分数给他们算分。

85
00:06:37,270 --> 00:06:42,790
所以你可以把你的最高概率的句子,然后计算这个

86
00:06:42,790 --> 00:06:49,660
你已经通过集束搜索过程看到的目标函数上的句子。

87
00:06:49,660 --> 00:06:54,484
最后,在你用这种方法验证的所有句子中,

88
00:06:54,484 --> 00:06:59,150
选择在这个规范化的对数中达到最高值

89
00:06:59,150 --> 00:07:00,920
概率目标的那个

90
00:07:00,920 --> 00:07:04,040
有时它被称为规范化的对数似然目标

91
00:07:04,040 --> 00:07:07,120
然后,这将是最终的翻译,你的产出。

92
00:07:08,510 --> 00:07:11,030
所以这就是你如何实现集束搜索,并

93
00:07:11,030 --> 00:07:15,040
你可以在本周的习题中练习这个过程。

94
00:07:15,040 --> 00:07:21,080
最后,一些实施上的细节,你怎么选择集束宽度B？

95
00:07:21,080 --> 00:07:24,990
B越大,你考虑的可能性越大,

96
00:07:24,990 --> 00:07:28,130
你可能找到的句子越好。

97
00:07:28,130 --> 00:07:31,534
但更大的B往往计算更复杂

98
00:07:31,534 --> 00:07:35,929
因为你也保持了更多的可能性

99
00:07:35,929 --> 00:07:37,624
好吧，最后

100
00:07:37,624 --> 00:07:42,480
让我们总结一下，如何选择集束宽度B的一些想法。

101
00:07:43,530 --> 00:07:49,020
所以,这里是设置B非常大或很小的利弊

102
00:07:49,020 --> 00:07:52,110
如果集束宽度很大,

103
00:07:52,110 --> 00:07:58,310
然后你考虑了很多可能性,所以你往往得到一个更好的结果

104
00:07:58,310 --> 00:08:03,270
因为你消耗了很多不同的选项,它会慢一些。

105
00:08:03,270 --> 00:08:07,790
而且内存要求也会增长,过程也会更慢。

106
00:08:08,900 --> 00:08:13,420
而如果你使用一个非常小的集束宽度,
那么你会得到一个更糟糕的结果,因为

107
00:08:13,420 --> 00:08:18,480
当算法正在运行时,您只是在考虑较少的可能性。

108
00:08:18,480 --> 00:08:24,600
但是你得到的结果更快,内存需求也会降低。

109
00:08:24,600 --> 00:08:29,720
所以在前面的视频中,
我们用在我们的运行示例中的集束宽度为三,

110
00:08:29,720 --> 00:08:32,630
所以我们要记住三种可能性。

111
00:08:32,630 --> 00:08:35,220
在实践中,
这是偏小的。

112
00:08:35,220 --> 00:08:39,990
在生产系统中,光束宽度可能在10左右,很常见,

113
00:08:39,990 --> 00:08:44,780
我认为集束宽度100是非常大的

114
00:08:44,780 --> 00:08:48,052
生产系统,取决于应用程序。

115
00:08:48,052 --> 00:08:52,880
但对于研究系统,人们拼尽全力从中获取最佳

116
00:08:52,880 --> 00:08:56,110
表现,以便以最好的结果发表论文。

117
00:08:56,110 --> 00:09:01,279
看到人们使用1000或3000的集束宽度并不少见,

118
00:09:01,279 --> 00:09:06,880
但这是非常适用的,它取决于领域的不同。

119
00:09:06,880 --> 00:09:12,850
因此,当您在应用程序中使用时,我会说试试B的各种值。

120
00:09:12,850 --> 00:09:17,525
但是当B变得非常大时,回报往往会减少。

121
00:09:18,997 --> 00:09:23,198
所以对于许多应用程序,
我希望看到一个巨大的增益,当你去

122
00:09:23,198 --> 00:09:28,011
从光束宽度1开始，
这是一个非常贪婪的搜索,到3,也许到10。

123
00:09:28,011 --> 00:09:33,827
但是从1000到3000的光束宽度的增益可能不会那么大。

124
00:09:34,847 --> 00:09:41,717
对于你们这些曾经参加过很多计算机科学课程的人来说,

125
00:09:41,717 --> 00:09:45,760
如果你熟悉计算机科学搜索算法,如bfs

126
00:09:45,760 --> 00:09:49,120
广度优先搜索,或DFS,深度优先搜索。

127
00:09:49,120 --> 00:09:52,990
考虑波束搜索的方法是,与其他算法不同的是,

128
00:09:52,990 --> 00:09:56,640
你已经学会了在计算机科学的算法课程,然后

129
00:09:56,640 --> 00:09:58,690
如果你没有听说过这些算法,也不用担心。

130
00:09:58,690 --> 00:10:02,650
但如果你听说过广度第一搜索和深度第一次搜索,

131
00:10:02,650 --> 00:10:05,770
不同于那些算法,是确切的查寻算法。

132
00:10:05,770 --> 00:10:11,690
光束搜索运行速度快得多,但不保证找到的确切最大值为

133
00:10:11,690 --> 00:10:14,940
你想找到的最大值。

134
00:10:14,940 --> 00:10:17,210
如果你没有听说过广度第一搜索或深度第一搜索,

135
00:10:17,210 --> 00:10:19,958
别担心,这对我们的课程并不重要。

136
00:10:19,958 --> 00:10:25,050
但是如果你有听过,这就是集束搜索与这些算法的关系

137
00:10:25,050 --> 00:10:29,080
因此,这就是集束搜索,一个广泛使用的算法

138
00:10:29,080 --> 00:10:33,300
在很多生产系统中或是许多商业系统中。

139
00:10:33,300 --> 00:10:37,480
在深入学习课程的过程中的圈子里,

140
00:10:37,480 --> 00:10:40,410
我们谈到了很多错误分析。

141
00:10:40,410 --> 00:10:44,090
事实证明,我发现最有用的工具之一就是能够做到

142
00:10:44,090 --> 00:10:46,180
集束搜索误差分析。

143
00:10:46,180 --> 00:10:48,710
所以你有时想知道,我应该增加我的集束宽度吗？

144
00:10:48,710 --> 00:10:50,830
我的集束宽度运转得好吗？

145
00:10:50,830 --> 00:10:53,720
还有一些简单的事情,你可以通过计算给你

146
00:10:53,720 --> 00:10:58,240
关于是否需要改进搜索算法的指导。

147
00:10:58,240 --> 00:11:00,090
我们将在下一个视频中讨论这一点
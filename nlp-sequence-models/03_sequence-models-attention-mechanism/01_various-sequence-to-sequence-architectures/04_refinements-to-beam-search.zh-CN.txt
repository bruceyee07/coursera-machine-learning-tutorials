上个视频中⏎你看过基本的集束搜索算法。 在本视频中,
您将学习作出一些小改动令它运作得更好。 长度规范化是对集束搜索算法的一个小改动,帮 你得到更好的结果。 它是这样的 集束搜索在最大化这个概率 这个的乘积只是要表达 给定x，p（y1）到y(ty） 可以表示为p（y1） 给定x*p(y2），给定x和 y1乘以。。。一直到 p（y，ty）给定x和y1直到y（t1-1） 也许这个符号比它需要的更吓人, 但这就是你以前看到的概率 现在,如果你要执行这些,这些概率都是小于1的数字。 通常它们远远少于1。 乘以很多小于1的数字会导致一个非常非常小的, 数字，这可能导致数值下溢 意思是对于 浮点表达准确的存储在计算机中来讲太小了。 因此,在实践中,
我们不会将此数值最大化,而是进行log转换。 如果你在那里插入log,则这个数值的log将成为log的总和, 最大化的log概率的总和,应该给你 同样的结果,就是选择最可能的句子y。 所以,通过取log,你会得到一个更数值稳定 的算法，不容易舍入取整的算法 或真正的数值下溢 因为使用了log函数,也就是对数函数, 这是严格的单调增长函数,最大化P(y)。 因为对数函数, 这里的log函数,是一个严格的单调增长函数 我们知道,最大化对数P(y)给定x应该给 你与最大化P(y)给定的x相同的结果。 在y值相同时,最大化这个也应该最大化那个。 所以在大多数实现中,你要跟踪 log的概率总和,而不是计算机协议的概率。 现在,这个目标函数还有一个改变 能使机器翻译算法运作得更好。 如果你在看到这个原始目标 如果你有一个很长的句子,这个句子的概率 会很低,因为你在这里乘了很多项。 乘了大量小于1的数字来估计该句子的概率 所以如果你把这所有小于1的数字相乘, 你会倾向于得到更小的概率 所以这个目标函数有一个不良的影响, 也许它不自然地倾向于喜欢非常短的翻译。 它往往倾向于非常短的输出。 因为短句的概率是由 乘以比较少一点的小于1的数字 因此,得到的输出不会太小。 顺便说一句,同样的结论也适用于这边。 这些概率的对数总是小于或等于1。 你实际上是在这个范围的对数。 所以在一起的项越多,这个输出就越小（负数）。 所以还有一个改动过的算法,使其工作得更好, 不是使用这个为你试图最大化的目标, 你可以做的事情是通过翻译中的字数来规范化 因此,这就需要每个单词的概率的平均对数。 这大大降低了输出较长翻译的惩罚。 在实践中,作为一个启发，不是除以Ty, 不是除以在输出句中的单词,有时你用一种柔和的方法。 我们可以ty对alpha的幂,在那里也许alpha等于0.7。 所以如果alpha等于1,那么是,完全规范化的长度。 如果alpha等于0,那么, 那么,Ty到0将是1,那么你完全没有规范化。 这一点在完全规范化和无规范化之间, alpha的另一个可调参数,你可以通过调它 得到最好的结果。 不得不承认,以这种方式,使用alpha这是一个启发或这是一个技巧。 没有一个伟大的理论理由,但 人们发现这个很好用。 人们发现它在实践中运作良好,因此许多小组都这样做。 你可以尝试不同的值α来 看看哪一个给你最好的结果 所以总结一下，你如何运行集束搜索, 当你运行集束搜索你看到了很多句子,长度等于1, 很多句子的长度等于2,很多句子的长度等于3。 等等,也许你运行集束搜索30个步骤, 比如说你认为输出句子长度是30。 所以用宽度为3的集束,你将 跟踪每个可能的句子长度的前三种可能性, 1、2、3、4等,最多30个。 然后,你会看到所有的输出 句子然后通过这个分数给他们算分。 所以你可以把你的最高概率的句子,然后计算这个 你已经通过集束搜索过程看到的目标函数上的句子。 最后,在你用这种方法验证的所有句子中, 选择在这个规范化的对数中达到最高值 概率目标的那个 有时它被称为规范化的对数似然目标 然后,这将是最终的翻译,你的产出。 所以这就是你如何实现集束搜索,并 你可以在本周的习题中练习这个过程。 最后,一些实施上的细节,你怎么选择集束宽度B？ B越大,你考虑的可能性越大, 你可能找到的句子越好。 但更大的B往往计算更复杂 因为你也保持了更多的可能性 好吧，最后 让我们总结一下，如何选择集束宽度B的一些想法。 所以,这里是设置B非常大或很小的利弊 如果集束宽度很大, 然后你考虑了很多可能性,所以你往往得到一个更好的结果 因为你消耗了很多不同的选项,它会慢一些。 而且内存要求也会增长,过程也会更慢。 而如果你使用一个非常小的集束宽度,
那么你会得到一个更糟糕的结果,因为 当算法正在运行时,您只是在考虑较少的可能性。 但是你得到的结果更快,内存需求也会降低。 所以在前面的视频中,
我们用在我们的运行示例中的集束宽度为三, 所以我们要记住三种可能性。 在实践中,
这是偏小的。 在生产系统中,光束宽度可能在10左右,很常见, 我认为集束宽度100是非常大的 生产系统,取决于应用程序。 但对于研究系统,人们拼尽全力从中获取最佳 表现,以便以最好的结果发表论文。 看到人们使用1000或3000的集束宽度并不少见, 但这是非常适用的,它取决于领域的不同。 因此,当您在应用程序中使用时,我会说试试B的各种值。 但是当B变得非常大时,回报往往会减少。 所以对于许多应用程序,
我希望看到一个巨大的增益,当你去 从光束宽度1开始，
这是一个非常贪婪的搜索,到3,也许到10。 但是从1000到3000的光束宽度的增益可能不会那么大。 对于你们这些曾经参加过很多计算机科学课程的人来说, 如果你熟悉计算机科学搜索算法,如bfs 广度优先搜索,或DFS,深度优先搜索。 考虑波束搜索的方法是,与其他算法不同的是, 你已经学会了在计算机科学的算法课程,然后 如果你没有听说过这些算法,也不用担心。 但如果你听说过广度第一搜索和深度第一次搜索, 不同于那些算法,是确切的查寻算法。 光束搜索运行速度快得多,但不保证找到的确切最大值为 你想找到的最大值。 如果你没有听说过广度第一搜索或深度第一搜索, 别担心,这对我们的课程并不重要。 但是如果你有听过,这就是集束搜索与这些算法的关系 因此,这就是集束搜索,一个广泛使用的算法 在很多生产系统中或是许多商业系统中。 在深入学习课程的过程中的圈子里, 我们谈到了很多错误分析。 事实证明,我发现最有用的工具之一就是能够做到 集束搜索误差分析。 所以你有时想知道,我应该增加我的集束宽度吗？ 我的集束宽度运转得好吗？ 还有一些简单的事情,你可以通过计算给你 关于是否需要改进搜索算法的指导。 我们将在下一个视频中讨论这一点
בסרטון האחרון דיברתי על איך, כאשר מתמודדים עם בעיה של למידת מכונה, יש הרבה רעיונות שונים איך לשפר את האלגוריתם. בסרטון הזה, בואו נדבר על הרעיון של ניתוח שגיאות. כשבתקווה זה ייתן לכם דרך יותר שיטתית לעשות כמה מההחלטות האלה. אם אתה מתחיל לעבוד על בעיה בלמידה חישובית, או בונה אפליקציה ללמידה חישובית. בדרך כלל זה יהיה רעיון טוב מאוד לא להתחיל בבניית מערכת מסובכת מאוד עם המון תכונות מורכבות וכן הלאה. אלא במקום זה להתחיל על ידי בנייה של אלגוריתם פשוט מאוד שאפשר ליישם אותו במהירות. וכאשר אני מתחיל עם בעייה של למידה חישובית מה שאני עושה בדרך כלל הוא לבלות לכל היותר יום אחד, ממש לכל היותר 24 שעות, כדי לנסות לבנות משהו ממש מהיר ומכוער. ברצינות ממש לא מערכת מתוחכמת אלא לבנות משהו ממש מהיר ומלוכלך ועובד, ליישם אותו ואז לבדוק אותו על נתוני האימות הצולב. אחרי שעושים את זה אפשר לשרטט עקומות למידה, הדבר הזה שדיברנו עליו בקבוצה הקודמת של קטעי וידאו. שרטוט של עקומת למידה של שגיאות אימון, אימות ומבחן ולנסות להבין אם האלגוריתם סובל אולי מהטיה גבוהה או משונות גבוהה או ממשהו. ולהשתמש בזה כדי לנסות להחליט אם הוספת נתונים, או תכונות נוספות, וכן הלאה עשויים לעזור. והסיבה לכך שזוהי גישה טובה היא כי הרבה פעמים כשאתה מתחיל לעבוד על בעיה בלמידה חישובית, אין באמת שום דרך לדעת מראש האם אתה תצטרך תכונות מורכבות יותר, או אולי אתה זקוק לעוד נתונים, או משהו אחר. וקשה מאוד לדעת את זה מראש בהעדר ראיות, כלומר - לפני שראינו עקומת למידה. זה פשוט קשה מאוד להחליט במה כדאי להשקיע את הזמן שלך. ולעתים קרובות על ידי יישום, אפילו יישום מאוד מאוד מהיר ומלוכלך ועל ידי שרטוט של עקומות למידה, זה מה שיעזור לך לקבל את ההחלטות האלה. אז אם תרצה אתה יכול לחשוב על זה כעל דרך להימנע ממה שמכונה לעתים אופטימיזציה מוקדמת מדי בתכנות מחשבים. והרעיון הזה אומר שאנחנו צריכים לתת לראיות לכוון את ההחלטות שלנו בקשר לאיפה כדאי להשקיע את הזמן שלנו ולא להשתמש בתחושות בטן,
שהן לעתים קרובות שגויות. בנוסף לשרטוט של עקומות למידה, יש עוד דבר אחד שהוא מאוד שימושי במקרים רבים והוא מה שנקרא ניתוח שגיאות. ומה שאני מתכוון הוא שכאשר אנחנו בונים נניח מסווג של דואר זבל אני הרבה פעמים מסתכל על סדרת האימות הצולב שלי ממש בעין, מסתכל על אותן הודעות דוא"ל שבהם האלגוריתם שלי שגה. כדאי להסתכל על דוא"ל שהוא דואר זבל ועל דוא"ל שאינו דואר זבל שאותם האלגוריתם סיווג לא נכון, ולראות אם אתה מצליח לזהות איזה היגיון בשיגעון -
באיזה סוג של דוגמאות הוא מסווג לא נכון. ולעתים קרובות הדבר הזה יכוון אותך לעיצוב של תכונות חדשות. או שהם יגלו מהם הדברים הנוכחיים או החסרונות הנוכחיים של המערכת. ויתנו לך את ההשראה שחסרה לך כדי למצוא לה שיפורים. באופן קונקרטי, הנה דוגמה ספציפית. נניח שבנית מסווג דואר זבל ויש לך 500 דוגמאות בקבוצת האימות הצולב שלך. ונניח בדוגמה זו שלאלגוריתם יש שיעור שגיאה גבוה מאוד. והוא מסווג בטעות 100 מתוך דוגמאות האימות הצולב האלה. אז מה שאני עושה הוא לבדוק באופן ידני את 100 השגיאות
ומסווג אותם באופן ידני. בהסתמך על דברים כמו איזה סוג של אימייל זה, אילו מאפיינים או תכונות אתה חושב שאולי היו עוזרים לאלגוריתם לסווג אותם כראוי. באופן ספציפי, לפי סוג הדואר האלקטרוני,
אם אני מסתכל על כל ה-100 שגיאות האלה, אני עשוי לגלות שאולי הסוגים הנפוצים ביותר של הודעות דואר זבל שהמסווג טעה בהם הם אולי הודעות דוא"ל על תרופות או בתי מרקחת,
הודעות שמנסות למכור חומרים. או אולי מיילים שמנסים למכור זיופים שונים כגון שעונים מזויפים, כל מיני דברים מזויפים, ואולי הודעות דוא"ל שמנסות לגנוב סיסמאות. הסוג הזה נקרא גם הודעות דוא"ל מתחזות, זו עוד קטגוריה גדולה של הודעות דוא"ל, ואולי קטגוריות אחרות. אז במטרה לסווג את ההודעות האלה של דואר אלקטרוני, הייתי ממש עובר וממיין את מאה ההודעות האלה. אולי אני אגלה ש-12 מהם הן הודעות דוא"ל של תרופות, או בית מרקחת וירטואלי, ואולי 4 מהם הם נסיונות למכור עותקים משוכפלים כמו שעונים מזויפים או משהו כזה. ואולי אני אגלה ש-53 מהם הן מה שנקרא התחזות או פישינג, הודעות דוא"ל שמנסות לשכנע אותך לגלות להם את הסיסמה שלך. ו-31 הודעות דוא"ל הם סוגים אחרים של הודעות דוא"ל. ועל ידי הספירה של מספר הודעות הדוא"ל בכל אחת מהקטגוריות השונות האלה, שאתה עשוי לגלות, למשל, שהאלגוריתם הוא באמת גרוע במיוחד על הודעות דוא"ל שמנסות לגנוב סיסמאות. מה שעשוי להציע לך שזה עשוי להיות שווה להשקיע ולהסתכל יותר בעיון על הסוג הזה של דוא"ל ולראות אם יש לך רעיון לתכונות טובות יותר כדי לסווג אותם כראוי. מה שאני עוד יכול לעשות הוא להסתכל על אילו רמזים או אילו תכונות נוספות אולי תעזורנה לאלגוריתם לסווג את הודעות הדוא"ל האלה בצורה נכונה. נניח שחלק מההשערות שלנו לגבי דברים או תכונות שעשויים לעזור לנו לסווג הודעות דוא"ל בצורה טובה יותר מנסות לזהות שגיאות כתיב מכוונות, או ניתוב דואר יוצא דופן או סימני פיסוק חריגים. כגון אם אנשים משתמשים בהרבה סימני קריאה. ושוב הייתי עובר ידנית ונניח שאני מוצא חמישה מקרים של זה ו-16 של זה ו-32 של זה וחוץ מזה עוד קבוצה של סוגים אחרים של הודעות. אם זה מה שאתה מקבל על קבוצת האימות הצולב שלך, אז זה בעצם אומר לך שאולי שגיאות איות מכוונות הן תופעה נדירה למדי, ואולי לא שווה לך לכתוב אלגוריתמים לזהות את זה. אבל אם אתה מגלה שהרבה שולחי דואר זבל משתמשים בפיסוק יוצא דופן, אז אולי זה סימן חזק שזה באמת כן עשוי להיות משתלם לך להשקיע את הזמן לפתח תכונות מתוחכמות יותר המבוססות על פיסוק. אז סוג כזה של ניתוח שגיאות, שהוא בעצם תהליך בדיקה ידנית של השגיאות של האלגוריתם, יכול הרבה פעמים לעזור להנחות אותך לכיוונים הכי מבטיחים להמשיך בהם. וזה גם מסביר מדוע אני בדרך כלל ממליץ לבנות יישום מהיר ומכוער של אלגוריתם. מה שאנחנו באמת רוצים לעשות הוא להבין מהן הדוגמאות הקשות ביותר עבור אלגוריתם לסווג. בהמון מקרים, לאלגוריתמים שונים, לאלגוריתמי למידה שונים לעתים קרובות מאוד יהיו קשיים בסיווג של אותן קטגוריות. ובניית יישום מהיר ומלוכלך היא בדרך כלל דרך מהירה לעזור לך לזהות את השגיאות ולזהות במהירות מהן הדוגמאות הקשות לאלגוריתם. ואז תוכל למקד את המאמצים שלך בדוגמאות האלה. עוד עניין, כאשר מפתחים אלגוריתמים של למידה, טיפ שימושי נוסף הוא לוודא שיש לך הערכה כמותית או מספרית של אלגוריתם הלמידה שלך. מה שאני מתכוון זה שאם אתה מפתח אלגוריתם למידה, זה יהיה בדרך כלל מאוד מועיל אם יש לך דרך מספרית ולא רק איכותית להעריך את אלגוריתם הלמידה שלך, משהו שנותן לך מספר ממשי אחד, רמת הדיוק, או אולי רמת השגיאה. אבל מספר ממשי אחד שאומר לך עד כמה טוב אלגוריתם הלמידה שלך. אני אדבר יותר על הרעיון הספציפי הזה בסרטונים מאוחרים יותר, אבל הנה דוגמה ספציפית. נניח שאנחנו מנסים להחליט אם אנחנו צריכים לטפל במילים כמו הנחה, הנחות, בהנחה, ההנחה כמילה אחת או לא. אז אולי אתם יודעים שאחת הדרכים לעשות זאת היא להסתכל רק על אותיות השורש של המילה, אם אתה מסתכל רק על אותיות השורש של מילה, אז אתה מבין שאולי בעצם לכל המילים האלה יש בערך משמעות דומה. בעיבוד שפה טבעית, האופן שבו זה נעשה הוא בעצם באמצעות סוג של תוכנה הנקראת תוכנת שורשים. ואם אתם רוצים לממש את זה בעצמכם, התחילו בחיפוש במנוע חיפוש באינטרנט את Porter Stemmer, זוהי תוכנה די סבירה שעושה את זה ומוצאת שורשים, מה שיאפשר לכם לטפל בכל המילים האלה, הנחה, הנחות , וכן הלאה, כמילה אחת. אבל שימוש בתוכנת שורשים שבעצם מסתכל רק על חלק מהאותיות של מילה פחות או יותר, זה יכול לעזור אבל זה יכול גם להזיק. זה יכול להזיק כי למשל, התוכנה עלולה לטעות ולחשוב ש"כדור" ו"דורה" הם בעלי אותו שורש ולכן אותה מילה. כי לשתי המילים האלה יש אותן אותיות שורש. אז כשאתם מנסים להחליט אם להשתמש בתוכנת שורשים כזו עבור מסווג דואר זבל, זה לא תמיד קל לדעת. ובמיוחד, ניתוח שגיאות עשוי לא להועיל באמת בהחלטה האם סוג כזה של רעיון הוא רעיון טוב. וזו דוגמה לסיבה בגללה הדרך הטובה ביותר להבין האם תוכנת שורשים כזו אכן תסייע לסיווג שלכם היא לבנות תוכנת סיווג שלדית ומהירה ואז פשוט לנסות את זה מהר מאוד ולראות אם זה עובד. וכדי לעשות זאת, דרך להעריך באופן מספרי את האלגוריתם שלך תהיה מאוד מועילה. באופן קונקרטי, אולי הדבר הטבעי ביותר לעשות הוא להסתכל על שגיאת האימות הצולב של ביצועי האלגוריתם עם השוואת שורשים ובלעדיה. אז אם אתה מפעיל את האלגוריתם שלך בלי שורשים ומקבל שגיאת סיווג של 5 אחוזים. ואז אתה מריץ אותו שוב עם שורשים ואתה מקבל שגיאת סיווג של רק 3 אחוזים, אז הירידה בשגיאה מאפשרת לך להחליט בקלות שזה נראה כאילו השורשים זה רעיון טוב. עבור הבעיה הזו ספציפית יש הערכה מספרית מאוד טבעית, יחידה ומדויקת, שהיא שגיאת האימות הצולב. אנו נראה יותר מאוחר דוגמאות שבהם להגיע לסוג זה של ערך מספרי בודד, הערכה אמיתית, נצטרך לעבוד יותר קשה. אבל כפי שנראה בסרטון מאוחר יותר, זה גם יאפשר לנו לקבל החלטות כאלה הרבה יותר מהר, כגון אם להשתמש בשורשים או לא. ורק כעוד דוגמה קצרה אחת, נניח שאתה גם מנסה להחליט אם להבחין בין כתיב מלא וכתיב חסר, או לא. לדוגמא, כמו המילה אמא בכתיב חסר, לעומת אימא בכתיב מלא, האם זה יטופל כאותה מילה או כשתי מילים שונות? האם יש להתייחס אליהן כאל תכונה זהה, או כתכונות שונות? אז שוב, מכיוון שיש לנו דרך להעריך את האלגוריתם שלנו. אם ננסה את זה כאן, אם אני לא מבדיל בין כתיב מלא וחסר, אולי אני מקבל 3.2 אחוזים של שגיאה. זאת אומרת שאני מוצא שזה יותר גרוע מאשר אם אני רק משתמש בשורשים. אז זה גורם לי להחליט מייד שכדאי לי דווקא כן להבחין בין כתיב מלא וחסר. כשאתה מפתח אלגוריתם למידה, לעתים קרובות אתה מנסה הרבה רעיונות חדשים והרבה גרסאות חדשות של אלגוריתם הלמידה שלך. אם בכל פעם שאתה מנסה רעיון חדש, אם בסופו של דבר אתה בודק קבוצה של דוגמאות שוב ושוב כדי לראות אם זה השתפר או הורע, זה יהיה לך די קשה לקבל החלטות. האם אתה משתמש בשורשים או לא? האם אתה מבדיל בין כתיב מלא וחסר או לא? אבל אם יש לך ערך מספרי ממשי שנותן לך הערכה אמיתית, אז אתה יכול פשוט להסתכל ולראות, האם הסמן שלך עלה או ירד? ואתה יכול להשתמש במספר הזה כדי לנסות רעיונות חדשים מהר יותר ולדעת כמעט מיד אם הרעיון החדש שלך שיפר או הרע את הביצועים של אלגוריתם הלמידה. וזה יאפשר לך בדרך כלל התקדמות מהירה יותר. אז הדרך המומלצת, הממש מומלצת בחום לעשות ניתוח שגיאה הוא על סדרת האימות הצולב ולא על סדרת המבחן. אבל יש אנשים שכן יעשו את זה על סדרת המבחן, למרות שמתמטית זה דבר שבהחלט פחות מתאים ובהחלט פחות מומלץ לעשות, מאשר לעשות ניתוח שגיאות על סדרת האימות הצולב. אז כדי לסכם את הוידאו הזה, כאשר מתחילים לעבוד על בעיה חדשה בלמידה ממוחשבת, מה שאני כמעט תמיד ממליץ לעשות הוא לכתוב יישום מהיר ומכוער של אלגוריתם הלמידה. ואני כמעט אף פעם לא ראיתי מישהו שבילה פחות מדי זמן על היישום המהיר והמלוכלך הזה. בדרך כלל אני רואה אנשים שמבלים הרבה יותר מדי זמן בבניית היישום המהיר והמלוכלך הראשון הזה שלהם. אז באמת, אל תדאגו שזה נראה מהיר מדי, ואל תדאגו שזה מלוכלך מדי. מה שכדאי לעשות הוא ליישם משהו הכי מהר שתוכלו. ברגע שיהיה לכם את היישום הראשוני הזה, יש לכם כלי רב עוצמה כדי להחליט היכן להמשיך ולהשקיע את הזמן. כי קודם כל אתם יכולים להסתכל על השגיאות של התכנית ולעשות סוג של ניתוח שגיאות לראות אילו טעויות אחרות הוא עושה, ולהשתמש בזה כדי לכוון את המשך הפיתוח. ושנית, בהנחה שהיישום המהיר והמלוכלך שלכם מסוגל לתת הערכה מספרית אובייקטיבית אחת זה יכול להיות כלי בשבילכם כדי לנסות במהירות רעיונות שונים כדי לראות אם הרעיונות השונים שאתם מנסים משפרים את הביצועים של האלגוריתם שלכם. וכך המדד מאפשר לכם לקבל החלטות מהר יותר על אילו דברים לזרוק ואילו דברים לשלב באלגוריתם הלמידה שלך.
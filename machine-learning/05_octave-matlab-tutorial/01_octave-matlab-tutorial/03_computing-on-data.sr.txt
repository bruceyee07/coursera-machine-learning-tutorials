Sada znate kako da učitate i sačuvate podatke u Oktav programu, kako da ih stavite u matrice i tako dalje. U ovome videu bih želeo da vam pokažem 
kako da vršite proračune nad podacima. A kasnije ćemo da koristimo to znanje da bismo implementirali naše algoritme učenja. Hajde da počnemo. Ovo je moj Oktav prozor. Samo da inicijalizujem neke varijable 
koje ću da koristim u primeru. Dakle, A će da bude 3x2 matrica, i B će da bude 3x2 matrica, a C neka bude 2x2 matrica, ovako. Recimo da hoću da pomnožim dve matrice. Recimo da želim da izračunam A * C, 
samo kucam A*C, pa je to 3x2 matrica puta 2x2 matrica, dobijamo ovu 3x2 matricu. Takođe možete da uradite i operacije po elementima, 
kao što je A.*B a to će da uzme svaki element iz A i da pomnoži
 odgovarajućim elementom iz B tako da je A.*B, ovo je A.*B. Na primer, kao prvi element dobijamo 1 puta 11 a to je 11. Drugi element dobijamo kao 2 puta 12 i dobijamo 24, i tako dalje. Dakle ovo je Hadamardov proizvod dve matrice. Uopšteno, tačka služi da bi, obično se koristi za obeležavanje operacija
 po elementima u Oktav programu. Dakle, ovo je matrica A a ako uradim A.^2, ovo će da nam da A na kvadrat po elementima. Pa tako, 1 na kvadrat je 1, 2 na kvadrat je 2 i tako dalje. Hajde da napravimo vektor v. Stavićemo v kao 1, 2, 3, to je vektor kolona. Takođe možemo da ukucamo 1./v da bismo dobili
 recipročnu vrednost vektora v po elementima, dakle, dobijamo 1/1, 1/2, 1/3, ovo pravi inverziju elemenata matrice, dakle 1./A mi daje
 inverziju elemenata matrice A. I još jednom, ova tačka ukazuje da 
se radi o operaciji po elementima. Takođe možemo da ukucamo log(v), 
to je logaritam od V po elementima. exp(v) je baza e eksponenta ovih elemenata. Dakle, ovo je e, ovo je e na kvadrat, e na kub, jer je ovo v, takođe mogu da ukucam abs(v) da bismo dobili
 apsolutne vrednosti vektora v po elementima. Dakle, v su pozitivne vrednosti, abs -1, 2, -3, apsolutna vrednost po elementima 
mi daje ove nenegativne vrednosti. A negativno v mi daje minus v. To je isto kao -1 * v ali se ovo obično piše kao -v umesto -1 * v. I šta još možete da uradite? Evo još jednog zgodnog trika. Dakle, da vidimo. Recima da želim da uzmem v i da svaki element povećam za 1. Jedan način je da napravite jedan 3x1 vektor jedinica i dodate ga vektoru v. Ako ovo uradimo, inkrementiraćemo v pa od 123 dobijamo 234. To sam uradio na sledeći način, length(v) je 3, tako je ones(length(v), 1) 3x1, pa je to ones(3, 1), u redu, a ja sam uradio v plus ones(3, 1), a to je sabralo vektor jedinica i v, a to povećava v za 1. A drugi jednostavan način da ovo uradite je da ukucate v + 1. Dakle, ovo je v a v + 1 takođe dodaje jedinicu svakome elementu vektora v. Hajde da sada govorimo o još nekim operacijama. Dakle, ovo je moja matrica A, ako želite da je transponujete, to radite tako što napišete A', to je znak apostrofa, to je levi navodnik, na vašoj tastaturi postoji levi navodnik i desni. U stvari ovo je standardni znak za navodnike. Samo unesite A', to nam daje A transponovano. I, naravno, A', ako je ponovo transponujemo, 
trebali bismo da dobijemo nazad našu matricu A. Još neke korisne funkcije. Recimo malo a je 
1 15 2 0.5, dakle 1x4 matrica. Recimo da unesem max(a) i to mi vraća maksimalnu vrednost od a što je u ovome slučaju 15 a mogu da ukucam val, ind max(a) a ovo mi vraća vrednost i indeks a to će da bude maksimalna vrednost u a, dakle 15, kao i indeks. Dakle, to je element broj 2 matrice a, to je 15 dakle ind je indeks. Jedno upozorenje, ako ukucate max(A), gde je A matrica, ovo će u stvari da izračuna maksimum po kolonama. Objasniću malo ovo na sekundu. Još uvek koristimo primer za matricu a. Ako ukucam a < 3, ovo pravi operaciju nad elementima. Poređenje po elementima, dakle prvi element matrice a je manji od 3 pa je to 1. Drugi element od a nije manji od 3 
pa je ova vrednost 0 jer je netačno. Treći i četvrti elementi matrice a su manji od 3, pa je to 1 1. Dakle, ovo je poređenje po elementima sva 4 elementa varijable. A vraća tačno ili netačno, 
u zavisnosti od toga da li je ili nije element manji od 3. Sada, ako uradim find(a < 3), ovo će da mi kaže koji elementi iz a, varijable a, su manji od 3, a u ovome slučaju, prvi, treći i četvrti elementi su manji od 3. Za naš sledeći primer, postaviću A da bude jednak magic(3). Funkcija magic vraća, ukucajmo help magic. Funkcija magic vraća ove matrice koje se zovu magični kvadrati. One imaju matematičku osobinu da je suma po svim njihovim vrstama, kolonama i dijagonalama jednaka. Dakle, znate, nije baš korisno za mašinsko učenje koliko ja znam, ali to koristim kao pogodan način pravljenja 3x3 matrica. A ovi magični kvadrati imaju osobinu da je zbir po svakoj vrsti, koloni i dijagonali isti, dakle to je neka vrsta matematičke konstrukcije. Ja koristim magic funkciju samo kad pokazujem ili kada podučavam Oktav kao ovo, ne koristim je za bilo kakvu aplikaciju mašinskog učenja. Ali, da vidimo, ako ukucam RC = find(A >= 7), ovo traži sve elemente matrice A koji su veći od 7, a R C označavaju redove (rows) i kolone (columns). Dakle, element 1, 1 je veći ili jednak 7, 
element 3, 2 je veći ili jednak 7, i element 2, 3 je veći ili jednak 7. Pa da vidimo. Element 2, 3, na primer, je A(2, 3), to je 7 a on je stvarno veći ili jednak 7. Usput, ja čak ni ne pamtim šta ove funkcije rade i šta sve ove stvari rade. A kada koristim find funkciju, ponekad zaboravim za šta tačno služi, pa ukucam help find da bih pogledao dokumentaciju. U redu, još dve stvari ću na brzinu da vam pokažem. Jedna je funkcija sum, dakle, ovo je a i kucam sum(a). Funkcija sabira sve elemente matrice a, 
a ako želim da ih pomnožim, kucam prod(a), prod šalje proizvod, a ovo vraća proizvod ova 
četiri elementa matrice a. floor(a) zaokružuje elemente matrice a na donju vrednost, 
pa će 0.5 da bude zaokruženo na 0. A ceil, ili ceiling(a) zaokružuje na
 najbližu višu celobrojnu vrednost, pa će 0.5 da bude zaokruženo na 1. Takođe možete, da vidimo, ukucaću rand(3), ovo generiše 3x3 matricu. Ako ukucam max(rand(3), rand(3)), ovo će da uzme maksimum po elementima od dve 3x3 matrice. Primetićete da svi ovi elementi teže da budu na većoj strani jer je svaki od njih maksimum po elementima dve matrice slučajnih brojeva. Ovo je moj magični broj, ovo je moja magična 3x3 kvadratna matrica. Recimo da ukucam max(A), a ovo će da bude [], 1, ovo će da ispiše maksimum po kolonama. Dakle, maksimum prve kolone je 8, druge je 9 a treće kolone je 7. Ovo 1 znači da će da uzme maksimum 
po prvoj dimenziji matrice A. Nasuprot tome, da sam ukucao max(A), ova smešna oznaka, 2, tada bi se izračunao maksimum po redovima. Pa tako maksimum prvog reda je 8, drugog je 7 a trećeg reda je 9, pa ste u mogućnosti da računate 
maksimume i po redovima i po kolonama. A podrazumevani način je po kolonama. Ako želite da nađete maksimum u celoj matrici A, možete da kucate max(max(A)), ovako, a to je 9. Ili možete da pretvorite matricu A 
u vektor i ukucate max(A(:)), ovako, ovo će da tretira matricu A kao vektor 
i da nađe najveći element tog vektora. Konačno, recimo da je A 9x9 kvadratna matrica. Zapamtite da magična matrica ima osobinu da su sume po svakoj koloni i vrsti iste, a takođe i po dijagonalama, dakle, 9x9 kvadratna matrica. Sada ću da ukucam sum(A, 1). Ovo će da sumira po kolonama, uzeće svaku kolonu matrice A i sabraće elemente tako da će da potvrdi da je stvarno zbir svih elemenata svake kolone isti, 369. Hajde da sumiramo po redovima. Dakle, sum(A, 2) a ovo će da sabere sve elemente po redovima i stvarno je takođe 369. Hajde da sada saberemo elemente po dijagonalama da bismo se uverili da su zbirovi isti. Ono što ću da uradim je da na pravim 9x9 jediničnu matricu, to je eye(9). Sada ću da uzmem matricu A i pomnožim je po elementima. Uradiću A.*eye(9). Ovo će da napravi proizvod po elementima ove dve matrice, pa će to da odbaci sve u matrici A osim elemenata dijagonale. I sada ću da uradim sabiranje elemenata matrice A pa ću da dobijem zbir ovih elemenata dijagonale i stvarno je 369. Takođe možete da saberete i elemente druge dijagonale. Ova počinje od gornjeg levog ugla do donjeg desnog, a možete da saberete suprotnu dijagonalu, 
od donjeg levog do gornjeg desnog. Komanda za ovo je više kriptovana, ovo stvarno ne želite da znate. Upravo vam to pokazujem, u slučaju da je neko od vas znatiželjan. Ali, da vidimo. flipud znači prevrni. Ali ako to uradite, 
ispostaviće se da ovo sabere elemente suprotne dijagonale. Dakle, suma elemenata druge dijagonale je 369. Evo, da vam pokažem. S obzirom da je eye(9) ova matrica, flipud(eye(9)) će da uzme jediničnu matricu i prevrnuće je vertikalno, pa ćete da dobijete, oprostite, flipud, dobićete jedinice na suprotnoj dijagonali. Još jedna, poslednja, komanda i to je to u ovome videu. Postavimo matricu A da bude 3x3 magična matrica. Ako želite da nađete inverznu matricu, kucate pinv(A). Ovo se zove pseudo-inverzna, ali nije bitno. Ovo možete da smatrate inverznom matricom matrice A. Pa tako mogu da kucam temp = pinv(A) i temp * A, ovo je stvarno jedinična matrica, sa jedinicama na dijagonali i nulama izvan dijagonale, zaokruženo. Dakle, to je sve o tome kako da pravimo razne operacije nad podacima i matricama. Nakon pokretanja algoritma učenja, 
često je jedna od najkorisnijih stvari da možete da vidite svoje rezultate, 
da ih iscrtate ili učinite vidljivim. U sledećem videu ću vam na brzinu pokazati kako u jednoj ili dve linije koda u Oktav programu možete da podatke učinite vidljivim, da ih iscrtate i da to iskoristite da biste bolje 
razumeli šta vaš algoritam učenja radi.
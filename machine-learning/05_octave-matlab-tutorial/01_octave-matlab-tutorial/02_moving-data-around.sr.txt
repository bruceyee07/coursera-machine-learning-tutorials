U ovome drugome videu kursa vezanog za Oktav, voleo bih da pričamo o tome kako da manipulišemo 
podacima u Oktav programu. Dakle, ako imate podatke koje ćete da koristite za mašinsko učenje, 
kako te podatke učitavate u Oktav? Kako ih smeštate u matricu? Kako radite sa tim matricama? Kako čuvate rezultate? Kako premeštate podatke i 
kako vršite operacije nad njima? Ovo je moj Oktav prozor od pre, ovde smo stali u prošlom videu. Ako ukucam A, to je matrica koju smo napravili, u redu, ovom komandom jednako je 1, 2 3, 4, 5, 6 i ovo je 3x2 matrica. Komanda size u Oktav vam omogućuje, 
prikazuje vam veličinu matrice. Tako size(A) vraća rezultat 3, 2. Ispostavlja se da komanda size u stvari vraća kao rezultat 1x2 matricu. Pa tako možete da postavite sz je jednako size(A) i sz je sada 1x2 matrica gde je prvi element ovo 3, a drugi element je 2. Pa, ako samo ukucate size(sz), ovo sz je 1x2 matrica čija dva elementa sadrže dimenzije matrice A. Takođe možete da ukucate size(A, 1) da biste dobili prvu dimenziju matrice A, veličinu prve dimenzije matrice A. Dakle, to je broj redova a size(A, 2) da biste dobili 2, a to je broj kolona u matrici A. Ako imate vektor v, recimo v je jednako 1, 2, 3, 4 i ukucate length(v). Ono što ćete da dobijete je veličina duže dimenzije. Dakle, možete takođe da ukucate length(A) jer je A jedna 3x2 matrica, duža dimenzija je 3, pa bi ovo trebalo da prikaže 3. Ali praksa je da se length 
obično primenjuje na vektore. Tako, znate, length(1, 2, 3, 4, 5) se češće primenjuje nego na matrice jer je to zbunjujuće. Sada ćemo da pogledamo kako da učitamo podatke i da ih pronađemo u fajl sistemu. Kada pokrenemo Oktav obično se nalazimo na putanji koja je, znate, lokacija gde je Oktav instaliran. Dakle, pwd komanda vam pokazuje direktorijum gde se nalazite, ili trenutnu putanju na kojoj je Oktav. Trenutno smo u nekom 
školskom direktorijumu kursa. cd komanda znači promeni direktorijum (Change Directory), tako da mogu da odem na C:/Users/Ang/Desktop i sada sam u Desktop direktorijumu a ako ukucam ls, ls je juniks ili linuks komanda, ls će da izlista direktorijume koji se nalaze 
u Desktop direktorijumu, tako da su to ovi fajlovi koji su upravo na mom desktopu. U stvari, u mom desktopu su dva fajla, featuresX i priceY koji su tu zbog problema mašinskog učenja koji hoću da rešim. Dakle, ovo je moj desktop. Ovo je featuresX a to je ovaj prozor, oprostite, to je ovaj fajl sa dve kolone podataka. To su u stvari podaci cena nekretnina. Dakle, mislim da imam 47 redova 
u ovome skupu podataka. Pa tako prva kuća ima veličinu 2004 kvadratna fita, 3 spavaće sobe, druga kuća ima 1600 kvadratnih fita, 3 spavaće sobe, i tako dalje. A priceY je ovaj fajl koji sadrži podatke o cenama u mome trening skupu. Dakle, featuresX i priceY su samo tekstualni fajlovi sa podacima. Kako da ove podatke učitam u Oktav? Pa, samo kucam komandu load featuresX.dat i ako to uradim, učitaću featuresX i mogu da učitam i priceY.dat. Usput, postoji više načina da se ovo uradi. Ova komanda, ako ukucate featuresX.dat u ovaj string, isto tako ćete učitati ovaj fajl. Ovo ovde je greška u kucanju. Ova komanda ima isti efekat. Dakle možete, na ovaj način stavljam ime fajla kao string, ime fajla u string a u Oktav programu se koristite apostrofi da bismo nešto označili kao string, ovako. Dakle, to je string i možemo da učitamo fajl čije ime označava taj string. A sada, who komanda nam govori koje promenjive imamo u Oktav radnom prostoru. Dakle, who nam pokazuje da li u memoriji Oktav programa postoji neka promenjiva. featuresX i priceY su među njima, kao i promenjive koje smo, znate, napravili nešto ranije u ovoj sesiji. Tako mogu da ukucam featuresX da bih prikazao featuresX. A ovo su moji podaci. A mogu da ukucam i size(featuresX) a to je moja 47x2 matrica. A size(priceY) će da mi da 47x1 vektor. Ovo je 47 dimenzionalni vektor. Ovo je vektor kolona koja sadrži sve cene trening skupa. who funkcija vam prikazuje promenjive koje se trenutno 
nalaze u radnom prostoru. Takođe postoji i whos funkcija koja vam daje malo detaljniji pregled. A to vam takođe, sa s dodatim na kraju, prikazuje promenjive sa razlikom što je sada prikazana i veličina. Dakle, A je 3x2 matrica a featuresX je 47x2 matrica. priceY je 47x2 matrica, što znači da je to vektor, a to vam pokazuje koliko 
bajtova memorije sve ovo zauzima. Kao i koji je tip podatka. Dabl znači dupla preciznost pokretnog zareza tako da je to realna vrednost, brojevi u pokretnom zarezu. Sada, ako želite da se rešite varijabli, možete da koristite clear komandu. Dakle, clear(featuresX) i ukucajte whos ponovo. Primećujete da je featuresX promenjiva sada nestala. A kako čuvamo podatke? Da vidimo. Uzmimo promenjivu v i recimo da je priceY kolona 10. To postavlja v na vrednost od prvih 10 elemenata vektora Y. Dakle, ukucajmo who ili whos. priceY je 47x1 vektor, dok je 10x1 vektor. v = priceY(1:10) ovo postavlja v na prvih 10 elemenata vektora priceY. Recimo da želim da sačuvam ove podatke na disk, komanda save hello.mat v; Ovo će da sačuva promenjivu v u fajlu koji se zove hello.mat. Tako da, hajde da uradimo to. A fajl se sada pojavio na mome desktopu, znate, pod imenom hello.mat. Slučajno imam matlab instaliran na ovome vindousu, i zbog toga ova ikonica izgleda ovako jer je vindous prepoznao ovaj fajl kao matlab fajl, ali ne brinite zbog toga ako ovaj fajl izgleda kao da ima drugačiju ikonicu na vašem računaru i recimo da očistim sve moje promenjive. Dakle, ako ukucate samo clear, bez ičega više, to će da obriše sve 
promenjive u vašem radnom prostoru. Dakle, ništa nije ostalo u radnome prostoru. A ako učitam hello.mat, sada mogu da vratim nazad moju promenjivu v, a to su podaci koje sam prethodno sačuvao u hello.mat fajlu. Dakle, hello.mat, upravo smo uradili save hello.mat v, to je sačuvalo podatke u binarnom formatu, nešto više kompresovan binarni format. Pa ako u v ima mnogo podataka, biće malo više kompresovani. Zauzeće malo manje prostora. Ako želite da sačuvate vaše podatke u formatu čitljivom ljudima tada treba da ukucate save hello.txt promenjivu v a onda -ascii. Dakle, ovo će da sačuva podatke kao tekst ili ascii format teksta. I sada kada sam završio ovo, imam ovaj fajl. hello.txt se upravo pojavio na mom desktopu i ako ga otvorim, vidimo da je to tekstualni fajl sa sačuvanim podacima. Dakle, ovako učitavamo i čuvamo podatke. Sada ćemo da govorimo malo o tome 
kako da radimo sa podacima. Hajde da postavimo a = ovoj matrici, dakle, to je 3x2 matrica. Evo malo indeksiranja. Kucam A 3, 2. Ovo indeksira 3, 2 elemenat matrice A. Dakle, ovo je, znate, obično bismo pisali ovo kao sabskript 3, 2 ili A sabskript, znate, 3, 2 a to je element trećeg reda druge kolone matrice A a to je element 6. Takođe mogu da kucam A 2, : da bih dobio sve elemente drugog reda. Dakle, dvotačka znači svaki element u tom redu ili koloni. Dakle, 2, : je drugi red matrice A. U redu? I slično tome, ako stavim :, 2 tada ovo znači sve elemente druge kolone matrice A. Dakle, to mi daje 2 4 6. U redu? Ovo znači A, sve, druga kolona. Dakle, to je druga kolona matrice A, a to su elementi 2 4 6. Sada, takođe možete da koristite najsloženije indekse u operacijama. Pokazaćemo na brzinu jedan primer. Možda ste ovo često radili, ali hajde da ovo uradim, A [1 3], :. Ovo znači svi elementi matrice A čiji je prvi indeks 1 ili 3. To znači da dobijam sve elemente prvog i trećeg reda matrice A iz svih kolona. Dakle, ovo je bila matrica A a A [1 3], : znači daj mi sve elemente iz prvog reda i iz drugog reda i, oprostite, i iz trećeg reda a dvotačka znači, znate, sve elemente iz oba reda a to mi daje ove elemente, 1 2 5 6. Ipak, koristićete izvor više sabskript indeks operacija, neke možda ne tako često. Evo da pokažem šta još možemo da uradimo. Ovo je matrica A a ovo je A dvotačka, da bih dobio drugu kolonu. Ovo takođe možete da koristite prilikom dodele vrednosti. Mogu da uzmem drugu kolonu matrice A i to dodelim vrednostima 10, 11, 12 a ako to uradim, znate, uzimam drugu kolonu matrice A i dodeljujem joj ovu vektor kolonu 10, 11, 12. Dakle, sada ova matrica izgleda ovako, 1 3 5 a druga kolona je zamenjena sa 10 11 12. A evo još jedne operacije. Recimo da je A jednako A, 100, 101, 102 ovako a ono što ćemo da dobijemo je dodana jedna vektor kolona sa desne strane. Dakle, sada, ups. Mislim da sam napravio malu grešku ovde. Trebao sam ovde da stavim tačku zarez, a A je sada jednako ovome. U redu? Nadam se da ovo ima smisla. Dakle ovo 100, 101, 102, to je vektor kolona a ono šta smo uradili je da smo postavili A, uzeli A i postavili na originalnu definiciju, a onda dodali ovu vektor kolonu sa desne strane i tako, dobili smo, uzeli smo matricu A, a to su ovih 6 elemenata sa leve strane, dakle, uzeli smo matricu A i dodali još jednu vektor kolonu sa desne strane, i zbog toga je sada matrica A 3x3 matrica koja izgleda ovako. I konačno, jedan pogodan trik koji koristim ponekad. Ako ukucate samo A i samo dvotačku, ovako, ovo je jedna vrsta specijalnog slučaja. Ovo znači: stavi sve elemente matrice A u jednu vektor kolonu a to mi daje 3x1 vektor. Ovo kombinuje sve elemente u jednu kolonu. Još nekoliko primera. Da vidimo, recimo A je jednako 12;34;56, u redu? I recimo da postavim B da je jednako 11, 12; 13, 14; 15, 16. Mogu da napravim novu matricu C kao A B. Ovo jednostavno znači, ovo je matrica A, a ovo matrica B i stavio sam C da je jednako A B. Ono što radim je da uzimam ove dve matrice i spajam ih jednu uz drugu. Dakle, matrica A na levoj strani i imam matricu B na desnoj strani. Tako se formira ova matrica C, spajanjem dve matrice. Takođe mogu da stavim C da je jednako A; B. Oznaka tačka zarez znači da sledeći član stavljam na dno. Dakle, uradiću C je A; B. Ovo takođe spaja matrice A i B sa razlikom što ih sada stavlja jednu iznad druge. Daklem sada imamo A iznad B i ovo C je sada 6x2 matrica. Dakle, samo da ponovim, tačka zarez obično znači stavljanje u novi red. Dakle C je sastavljeno od A i onda idemo na dno i onda stavljamo B na dno a usput, ovo A B je isto kao i A, B i tako, bilo koji način će da da isti rezultat. Zaključno sa ovim, nadam se da sada znate kako da napravite matrice i nadam se da ću sada moći da vam pokažem neke komande koje možete da koristite da biste na brzinu mogli da spojite matrice i da ih uzmete i, znate, kombinujete da biste napravili veće matrice, i sa samo par linija koda, Oktav je veoma pogodan u smislu da brzo možete da spojite kompleksne matrice i manipulišete podacima. Dakle, to je to što se tiče manipulacije podacima. U sledećem videu ćemo početi da govorimo kako da u stvari vršimo složene proračune nad našim podacima. Dakle, nadam se da ste dobili osećaj kako da, sa samo par komandi, možete da veoma brzo manipulišete 
podacima u Oktav programu. Kako da učitavate i čuvate vektore i matrice, učitavate i čuvate podatke, spajate matrice da biste dobili veće matrice, indeksirate ili pristupate određenim elementima matrica. Znam da sam spomenuo mnogo komandi, zato mislim da je najbolje da, nakon što završite sa videom, pogledate prepis onoga o čemu smo pričali. Znate, pogledajte to. Pogledajte sajt kursa i skinite prepis ove lekcije i prođite kroz prepis i ukucajte sami neke od ovih komandi u Oktav prozor pa ih pokrenite i vidite kako rade. I naravno, nema svrhe pamtiti sve ove komande. Ono što biste trebali da uradite, nadam se, je da iz ovoga videa dobijete osećaj o stvarima koje možete da uradite. Dakle, malo kasnije, kada budete pokušavali da samostalno programirate algoritme učenja, ako budete pokušali da nađete određenu komandu za koju mislite da Oktav može da izvrši jer mislite da ste je možda videli ovde, treba da se vratite na prepis ove lekcije i prođete kroz njih da biste našli one koje želite da koristite. Dakle, to je sve `što se tiče manipulacije podacima, a u sledećem videu bih želeo da počnemo da govorimo o tome kako se u stvari prave složeniji proračuni nad našim podacima, i kako da računate sa podacima, i u stvari da počnete da 
implementirate algoritme učenja.
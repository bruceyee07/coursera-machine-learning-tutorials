이제 Octave로 데이타를 어떻게 로드하고 저장하는지 알게 되었으니, 데이터를 행렬에 넣어보는 등의 작업을 해봅시다. 이 비디오에서는 데이터를 컴퓨터로 작업하는 방법을 설명하겠습니다. 나중에 우리가 만들 학습 알고리즘을 구현하기 위해 여기에서 배운 작업 소스들을 사용할 겁니다. 이제 시작하죠. 제 Octave 실행창이 여기 있습니다. 우리가 배울 예제에서 사용할 변수들을 
간단히 초기설정하겠습니다. A는 3 x 2 행렬이라 놓고, 
B도 3 x 2 행렬로 설정합니다. 그리고 C는 2 x 2행렬이라 합시다. 이제 두 개의 행렬을 곱하려고 합니다. 그래서 제가 A * C를 계산하고 싶어서, 
그냥 A * C를 입력했습니다. A는 3 x 2 행렬이고 B는 2 x 2 행렬이므로 
A * C는 3 x 2 행렬이 되겠죠. 행렬의 곱셈을 각 원소에서 할 수도 있습니다. A .* B 라고 입력하면 A의 각 원소는 각각 대응하는 B의 원소와 곱해집니다. 이것이 A, 이것이 B, 그리고 이것이 A*B 입니다. 가령 첫번째 원소의 경우 1 * 11 은 11 이 되고 두번째 원소는 2 * 12 은 24 가 되고, 이런 식으로요. 이것이 두 행렬 간의 원소 단위 곱셈입니다. 일반적으로, Octave 에서 점(.) 은 원소 단위의 연산을 의미합니다. 여기 행렬 A가 있고, 만약 A.^2 를 실행하면 A의 각 원소 값은 제곱이 됩니다. 1의 제곱은 1, 2의 제곱은 4, 이런 식이죠. 이제 벡터 v를 하나 생성합시다. v에 1,2,3 을 주어 열 벡터를 생성합니다. 또한 1 ./ v 라고 쓰면 v의 각 원소를 
역수로 만든 벡터를 얻을 수 있습니다. 즉 1/1, 1/2, 1/3 가 됩니다. 이걸 행렬에 적용해 1 ./ A 를 실행하면 A의 각 원소의 역수가 구해집니다. 다시 말해, 점(.)은 원소 단위로 연산을 실행합니다. log(v) 를 실행하면, v의 
각 원소 단위 로그값을 계산합니다. exp(v)는 밑이 e(오일러의 수)이고 
v의 원소로 각각 거듭제곱한 값을 계산합니다. 그래서 e의 1승, e의 2승, e의 3승이 됩니다. 
왜냐하면 원래 v값이 1 2 3이었으니까요. 또한, abs(v)는 v의 원소 단위 절대값을 구할 수 있습니다. v는 원래 양수였으니까,
 abs([-1; 2;-3]) 를 입력하면 음수값들에 대해서도 
원소 단위로 절대값이 얻어집니다. -v 는 v의 각 값들에 대한 음수값을 얻습니다. 이것은 -1 * v 와 같지만, 보통은 -1 * v 대신에 -v 를 씁니다. 또 어떤 것들이 가능할까요? 여기에 또다른 유용한 방법이 있습니다. 자, 봅시다. v의 각 원소들을 1씩 증가한 값을
 계산하고 싶다고 합시다. 한가지 방법은, 
모든 원소가 1인 3 X 1 행렬을 만들고, 그것을 v에 더하는 것입니다. 이렇게 하면, v의 값은 1,2,3 에서 2,3,4가 됩니다. 제가 한 것은, length(v)가 3이므로, ones(length(v),1)는 
ones(3,1)이 되고, ones(3,1)은 우측에 있게 되므로,
 따라서 v + ones(3,1) 즉 행렬 v에 ones를 더하면 
각 원소는 1씩 증가합니다 또다른 방법으로는 
v + 1 을 실행합니다. 즉 v 가 주어질 때, v + 1 이 의미하는 것은
v의 각 원소 단위로 1을 더하는 것입니다. 이제, 다른 연산에 대해 알아봅시다. 행렬 A가 주어질 때, 
A의 전치행렬을 구하는 방법은 A' 라고 입력하고, 여기서 ' 는 
시작할 때 쓰는 왼쪽 작은따옴표입니다. 키보드에 왼쪽 작은따옴표와 
오른쪽 작은따옴표가 있죠 이게 일반적인 표기 방법입니다. 그냥 A' 라고 치면 
A의 전치행렬을 구해줍니다. 물론, A의 전치행렬을 다시 전치시키면, 
원래의 행렬 A가 얻어지겠죠. 또 다른 몇 가지 유용한 함수들이 있습니다. 소문자 a를 1, 15, 2, 0.5 라는 
 1x4 행렬이라고 하고 val = max(A) 라고 치면
최대값을 구해 줍니다. 여기서는 15 이구요, [val, ind] = max(a) 라고 치면 A의 최대값인 15와 
그것의 인덱스 값도 구해줍니다. 여기서는 A의 두번째 원소이므로 
2가 인덱스 값이 됩니다. 주의할 점은, 행렬 A에 대해 max(A)를 구할 때, 열 단위로 최대값을 구한다는 것입니다. 이제 다른 연산을 알아봅시다. 지금 정의한 a를 예로 들어 설명하겠습니다. a < 3 를 치면,
이건 원소 단위 연산입니다. 원소 단위로 비교해서,
a의 첫번째 원소가 3보다 작으면 진실을 나타내는 1이 되지요. a의 두번째 원소는 3보다 작지 않으므로
거짓인 0이 됩니다. a의 3번째와 4번째 원소는 3보다 작으므로,
각각 1 1 이 됩니다. 이것이 a < 3 에 대한 
원소 단위 비교 방법입니다. 3보다 작은지 아닌지에 따라 
참 또는 거짓을 반환합니다. 이제, find (a < 3)를 실행하면,
a의 원소들 중 3보다 작은 원소들이 무엇인지 알려줍니다. 여기서는 1번째 3번째 및 4번째 원소가 
3보다 작음을 뜻합니다. 다음 예제로,
 A = magic(3)를 실행합니다. magic 함수의 결과값은, 
help magic 이라고 쳐봅시다. magic 함수는 
마방진 (magic squares) 행렬을 생성합니다. 마방진의 수학적인 성질은, 모든 행과 열, 대각선의 합계가 같다는 것입니다. 아시다시피, 기계 학습에서는 쓸모가 없지만 저는 이것을 3 X 3 행렬을 
간편하게 생성하는 방법으로 씁니다. 마방진은 각 행과, 열, 대각선의 합이 모두 같기 때문에, 일종의 수학적인 생성 방법 중
 하나로 볼수 있습니다. 저는 magic 함수를 설명할 때나
 octave를 가르칠 때만 사용하고 기계 학습에서 실제로 응용할 때에는 
사실 사용하지 않습니다. 이제 여기서 [r.c] = find (A >= 7) 이라고 치면, A의 모든 원소들 중 
7보다 크거나 같은 원소를 구합니다. r, c 는 각각 행(row), 열(column)을 뜻합니다. 여기서는 1,1 원소와, 3,2 원소, 2,3 원소가 7보다 큽니다. 자, 봅시다. 2,3 원소, 즉 A(2,3) 은 여기 있는 7이고,
7보다 크거나 같다고 할수 있죠. 그건 그렇고, 사실 저는 사용법을 일일이 
기억하지 않아요. 이런 find 함수가 뭘 하는지, 이러한 것들이 다 어떤 역할을 하는지 같은거요. find함수를 사용하려고 할때,
정확한 사용방법이 기억나지 않으면 help find를 쳐서 도움말을 봅니다. 자, 이제 2가지만 더 알아봅시다. 하나는 sum함수입니다.
여기에 행렬 a가 주어져 있고, sum(a)라고 치면 a의 모든 원소를 다 더합니다.
만약 한꺼번에 곱하고 싶으면 prod(a) 라고 치면, a의 모든 원소를 곱한 값을 구해 줍니다. floor(a) 는 a의 각 원소값을 끝자리 버림하고,
즉 0.5를 버림하면 0이 되죠. ceil 또는 ceiling(a)는 끝자리를 올림하여
가장 가까운 정수를 구합니다. 그래서 0.5를 올림하면 1이 되지요. 또한, 이런 것도 있는데요, rand(3)라고 치면, 난수(랜덤한 숫자)값을 
갖는 3 X 3 행렬을 생성합니다. max(rand(3),rand(3)) 이라고 치면, 랜덤한 3 X 3 행렬에서 원소 단위의 최대값을 반환합니다. 이 숫자들이 약간 큰 값을 갖는 것처럼 보이는 것은 실제로 랜덤하게 생성된 두 행렬의 원소들 중 원소 단위 최대값만 반환된 것이기 때문입니다. 이건 제가 사용하는 매직넘버입니다. 이건 마방진, 3 X 3 행렬 A이구요, max(A,[],1)이라고 치면, 1이 뭐냐면 열 단위로 
최대값을 구한다는 것입니다. 그러므로 첫번째 열의 최대값인 8, 두번째 열은 9, 3번째 열은 7이 되죠. 1이 의미하는 것은,
8이 해당 열의 원소 중 최대값이라는 뜻입니다. 반대로, 재밌는 표기법이지만 
만약 max(A,[],2) 라고 치면, 여기 2는, 이번에는 각 행의 최대값을 구합니다. 첫번째 행의 최대값은 8, 두번째 행은 7,
세번째 행은 9 이것이 각 행, 또는 각 열의 
최대값을 구하는 방법입니다. 그리고 기억해두세요, dafault는
(아무것도 안 쓰면) 열 단위입니다. 그래서 행렬 A의 모든 원소에 대한 
최대값을 구하고 싶으면 이렇게 max(max(A)) 라고 치면, 9가 얻어집니다. 또는 A를 벡터로 변환하는 A(:)를 사용해서 max(A(:))를 실행함으로써
 해당 벡터에 대한 최대값을 구할수도 있습니다. 마지막으로, A가 9 X 9 마방진 행렬이라고 합시다. 마방진이 모든 행과 열의 
합계가 같다는 성질을 기억하세요. 대각선의 합계도 같죠. 여기 9 X 9 마방진이 있습니다. 한 번 sum(A, 1)을 실행해 보죠. 이러면 열 단위의 합계를 구하므로, 이 9x9행렬에서 각각의 열의 합이 똑같이 369임을 확인할 수 있습니다. 이번에는 행 단위의 총합을 구해 보죠. sum(A,2)를 치면 A의 각 행의 합을 구할 수 있고 
이것도 다 369입니다. 이제, A의 대각선 원소의 합계를 구해서, 역시 합계가 똑같은지 확인합시다. 이제 할 것은 9 X 9 항등행렬을 만들고, 
eye(9)이죠. 다음으로 행렬 A에 이를 곱셈합니다.
여기 A에다가요. A .* eye(9) 라고 칩니다. 이러면 2개의 행렬의 각 원소 단위로 곱셈을 수행하고, 그래서 A의 대각선에 위치한 원소 외에 
나머지는 모두 지웁니다. 이제, sum(sum(A.*eye(9)))라고 쳐서 대각선에 위치한 원소들의 합이 
369임을 확인합니다. 반대쪽 대각선도 마찬가지로
 이와 같이 합계를 구할 수 있습니다. 좌측상단에서 우측하단의
대각선의 합계를 구한 것처럼 좌측하단에서 우측상단까지의
 대각선의 합계도 구할 수 있습니다. 이를 위한 명령어는 다소 복잡하지만, 그걸 다 알 필요는 없습니다. 그냥 여러분의 호기심을 위해서
어떻게 하는지 보겠습니다. 한번 봅시다. flipud함수는 뒤집기(flip up down)를 의미합니다. 이 함수를 실행하면 반대쪽에 있는 
원소들의 합계를 구합니다. 마찬가지로 합계가 369 입니다. 여기 보여드릴게요. eye(9) 를 쳐서 항등행렬을 구하고, flipup(eye(9))를 치면 이 항등행렬을 수직으로 뒤집어서, 결과적으로 이렇게 됩니다. 아 잘못쳤다, flip ud네요, 이렇게 쳐서 
반대쪽 대각선을 구할 수 있습니다. 이제 명령어 하나를 더 배울텐데, 
그게 이 비디오의 마지막입니다. A를 3 X 3 마방진 행렬로 생성합니다. 만약 역행렬을 구하고 싶으면, pinv(A)라고 칩니다. 보통은 pseudo-inverse 라고 부르는데, 
별로 신경쓰지 마세요. 그냥 기본적인 A의 역행렬이라고 생각하면 됩니다. 이렇게 temp = pinv(A) 라고 치고, temp 와 A를 곱하면 항등행렬이 계산되는데, 각 대각선은 1이고 대각선이 아닌 부분은 실수로 반올림해서 0 입니다. 이것이 행렬과 벡터의 곱셈입니다. 데이터와 행렬 사이에 서로 다른 계산을 
어떻게 수행하는지 살펴보았습니다. 학습 알고리즘을 실행시킨 후, 
결과를 확인할 때 제일 유용한 방법은, 결과를 그래프로
 보는 것(plot 또는 visualize사용)입니다. 다음 비디오에서, Octave를 사용하여 이를 한두 줄의 코드로 어떻게 실행하는지 보여드릴 것입니다. 빠르게 데이터를 가시화 (visualize 또는 plot) 할 수 있고, 학습 알고리즘이 어떻게 동작하는지 좀 더 잘 이해할 수 있을 겁니다.
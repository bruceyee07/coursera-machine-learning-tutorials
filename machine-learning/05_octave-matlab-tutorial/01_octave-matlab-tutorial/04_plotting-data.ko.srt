1
00:00:00,180 --> 00:00:02,402
학습 알고리즘을 개발할 때

2
00:00:02,402 --> 00:00:04,066
간단한 그래프(plot)를 그리면

3
00:00:04,066 --> 00:00:05,279
알고리즘이 무엇을 하고 있는지

4
00:00:05,279 --> 00:00:06,593
더 잘 이해할 수 있게 됩니다.

5
00:00:06,593 --> 00:00:08,423
뿐만아니라 알고리즘이 올바르게 
작동하고 있는지 체크하거나

6
00:00:08,423 --> 00:00:09,503
알고리즘이 수행해야 할 작업들이

7
00:00:09,510 --> 00:00:12,405
제대로 진행하고 있는지 알 수 있습니다

8
00:00:12,410 --> 00:00:13,924
예를 들어 지난번 비디오에서

9
00:00:13,924 --> 00:00:15,244
저는 비용 함수(cost function)

10
00:00:15,244 --> 00:00:16,826
J(θ)의 그래프를 그림으로써

11
00:00:16,826 --> 00:00:18,433
경사하강법(gradient descent)이 최소값에

12
00:00:18,433 --> 00:00:21,383
제대로 수렴하고 있는지 확인했습니다.

13
00:00:21,383 --> 00:00:23,084
또한, 데이터 혹은 학습 알고리즘의 결과를

14
00:00:23,084 --> 00:00:24,795
그래프로 그려 보면

15
00:00:24,810 --> 00:00:26,422
학습 알고리즘을 어떻게 
개선해야 할 지에 대한

16
00:00:26,422 --> 00:00:29,391
아이디어를 얻을 수도 있습니다.

17
00:00:29,391 --> 00:00:31,312
다행히도 옥타브(octave)에서는

18
00:00:31,330 --> 00:00:33,045
다양한 그래프(plot)를 만들기 위한

19
00:00:33,070 --> 00:00:34,534
간단한 도구들을 제공하고 있습니다

20
00:00:34,534 --> 00:00:36,518
저도 학습 알고리즘을 사용할 때

21
00:00:36,518 --> 00:00:38,082
데이터를 그래프로 그리거나,

22
00:00:38,082 --> 00:00:40,175
학습 알고리즘을 그래프로 그리거나,

23
00:00:40,175 --> 00:00:42,057
그 외 등등 그래프로 그리는 것이

24
00:00:42,060 --> 00:00:43,165
정말 중요하다는 것을 자주 느껴요.

25
00:00:43,165 --> 00:00:45,937
그래프로 그리면 어떻게 알고리즘을

26
00:00:45,980 --> 00:00:47,199
개선할 수 있을까 아이디어를 얻습니다. 그래서

27
00:00:47,199 --> 00:00:48,482
이번 비디오에서 저는 여러분에게 
Octave 도구들을 사용해

28
00:00:48,482 --> 00:00:52,773
데이터를 그래프로 그려 시각화하는 
방법에 대해 알려드리겠습니다.

29
00:00:53,700 --> 00:00:55,301
여기 Octave 실행창이 있습니다.

30
00:00:55,301 --> 00:00:57,471
우리가 그래프로 그릴 데이터를 간단히

31
00:00:57,471 --> 00:00:58,646
만들어 보겠습니다.

32
00:00:58,646 --> 00:00:59,724
여기 t를 입력했어요.

33
00:00:59,740 --> 00:01:02,181
t는, 여러분 아시겠어요? 
이 숫자들의 배열이에요.

34
00:01:02,210 --> 00:01:03,828
이게 t예요. 0부터 0.98까지의

35
00:01:03,828 --> 00:01:06,685
숫자들의 집합입니다.

36
00:01:06,700 --> 00:01:09,048
이제 y1을 sin(

37
00:01:09,060 --> 00:01:11,340
2π*4*t)라고 놓고요,

38
00:01:12,540 --> 00:01:16,102
이 sin 함수를 플롯하는 건 진짜 쉽습니다.

39
00:01:16,102 --> 00:01:17,918
그냥 plot(t, y1)라고 치고

40
00:01:17,918 --> 00:01:20,304
엔터를 누르면

41
00:01:20,320 --> 00:01:22,233
이렇게 생긴 그래프가 나오죠

42
00:01:22,233 --> 00:01:24,270
여기 보이는 가로축이

43
00:01:24,270 --> 00:01:25,515
변수 t를 나타내고

44
00:01:25,515 --> 00:01:26,946
세로축이 y1, 즉

45
00:01:26,960 --> 00:01:30,577
방금 계산한 sin함수의 
그래프인 걸 확인할 수 있습니다

46
00:01:30,990 --> 00:01:32,281
그럼 다음으로 y2를

47
00:01:32,281 --> 00:01:34,401
cos(2 * π * 4 * t)로

48
00:01:34,410 --> 00:01:38,735
놓아보았습니다. 이렇게요.

49
00:01:38,750 --> 00:01:41,403
그리고 나서

50
00:01:41,403 --> 00:01:43,835
plot(t, y2)를 입력하면

51
00:01:43,835 --> 00:01:45,045
Octave는 아까 그렸던

52
00:01:45,060 --> 00:01:46,988
sin그래프 대신에

53
00:01:46,988 --> 00:01:48,681
cos그래프를 보여줄 겁니다.

54
00:01:48,690 --> 00:01:51,322
코사인 함수라 1부터 시작하는 걸 볼 수 있죠.

55
00:01:51,330 --> 00:01:53,006
자 그럼

56
00:01:53,010 --> 00:01:54,581
만약에 sin함수와 cos함수를 동시에

57
00:01:54,610 --> 00:01:56,981
그래프에 출력하고 싶을 땐 어떻게 해야 할까요?

58
00:01:56,990 --> 00:01:59,702
이렇게 하면 됩니다

59
00:01:59,702 --> 00:02:01,164
plot(t, y1)을 먼저 입력하고

60
00:02:01,164 --> 00:02:03,332
그러면 이게 sin함수였죠

61
00:02:03,332 --> 00:02:06,958
그리고 'hold on'이라는
함수를 이용할 겁니다

62
00:02:06,958 --> 00:02:08,908
hold on이 뭘 하는거냐면

63
00:02:08,920 --> 00:02:10,247
Octave더러 여기

64
00:02:10,270 --> 00:02:11,490
기존에 있는 그래프 위에

65
00:02:11,490 --> 00:02:13,772
새로운 그래프를 그리라고 얘기하는 겁니다

66
00:02:13,772 --> 00:02:15,249
자 그럼 cos함수 (t.y2)는

67
00:02:15,249 --> 00:02:19,812
다른 색으로 출력해 볼게요.

68
00:02:19,850 --> 00:02:22,166
plot(t, y2)의 y2 뒤쪽에

69
00:02:22,180 --> 00:02:24,093
'r'을 추가로 넣어주면

70
00:02:24,093 --> 00:02:25,339
원래 있던 그래프가 사라지고 
새로 생기는 게 아니라

71
00:02:25,339 --> 00:02:26,615
cos함수의 그래프를

72
00:02:26,620 --> 00:02:28,499
원래 있던 sin함수 위에 그려주게 되고

73
00:02:28,499 --> 00:02:32,915
아까 넣은 'r'이 빨간색을 
의미해서 이렇게 됩니다.

74
00:02:32,915 --> 00:02:35,166
여기 추가적인 명령어들이 있습니다

75
00:02:35,166 --> 00:02:39,157
xlabel('time')을 치면 X 축(수평축)에<br />라벨을 붙여주게 되고

76
00:02:39,160 --> 00:02:41,451
ylabel('value')라고 치면

77
00:02:41,451 --> 00:02:44,688
y축(수직축)에 value라고 라벨을 붙여줍니다

78
00:02:44,688 --> 00:02:47,032
그리고 또

79
00:02:54,532 --> 00:02:57,616
그래프로 그려진 두 함수들에도<br />라벨을 붙일 수 있습니다

80
00:02:57,620 --> 00:03:01,514
legend('sin', 'cos')을 입력하면

81
00:03:01,514 --> 00:03:02,860
2개의 선이

82
00:03:02,890 --> 00:03:04,125
각각 어떤 것을 나타내는지

83
00:03:04,125 --> 00:03:05,122
오른쪽 위에 보여줍니다

84
00:03:05,122 --> 00:03:08,285
그리고 마지막으로 title('my plot')이라고

85
00:03:08,290 --> 00:03:12,753
입력하면 맨 위에 제목을 달아주게 되죠

86
00:03:12,753 --> 00:03:13,835
그리고 이 그래프를 저장하고 싶으면

87
00:03:13,835 --> 00:03:18,197
print -dpng

88
00:03:18,197 --> 00:03:20,128
'myplot.png'

89
00:03:20,128 --> 00:03:21,505
를 입력하면 됩니다.

90
00:03:21,505 --> 00:03:23,292
png는 이미지 파일의 포맷이고요.

91
00:03:23,292 --> 00:03:25,170
이렇게 하면 위의 그래프를

92
00:03:25,170 --> 00:03:27,612
이미지 파일로 저장할 수 있습니다

93
00:03:27,612 --> 00:03:28,902
실제로 이것을 해보기 위해

94
00:03:28,920 --> 00:03:31,287
디렉토리를 바꾸겠습니다

95
00:03:31,320 --> 00:03:35,114
이렇게 말이죠

96
00:03:35,130 --> 00:03:39,180
그리고 그 경로에 파일을 출력하겠습니다.

97
00:03:39,230 --> 00:03:41,692
이 이미지 저장과정은

98
00:03:41,700 --> 00:03:43,869
Octave 설정이 어떻게

99
00:03:43,890 --> 00:03:46,193
되어 있는지에 따라서

100
00:03:46,230 --> 00:03:48,891
몇 초정도 걸릴 수 있습니다. 하지만

101
00:03:48,900 --> 00:03:50,730
이렇게 저장 폴더를 바탕화면으로 하면

102
00:03:50,730 --> 00:03:53,943
이렇게 더 빨리 저장되었습니다.

103
00:03:54,750 --> 00:03:57,635
이렇게 하고나서 바탕화면으로 가보면

104
00:03:57,670 --> 00:03:59,358
여기 Octave가 저장해준

105
00:03:59,370 --> 00:04:00,720
myplot.png파일이 있죠

106
00:04:00,740 --> 00:04:03,481
여기에 png포맷으로 그래프가 
저장되어 있는 것을 알 수 있습니다.

107
00:04:03,481 --> 00:04:05,530
png뿐만 아니라 수천개의 다른 
포맷으로도 저장할 수 있습니다

108
00:04:05,530 --> 00:04:07,468
help plot을 치면

109
00:04:07,468 --> 00:04:09,497
png대신 어떤 포맷을

110
00:04:09,510 --> 00:04:11,512
사용해서 저장할 수

111
00:04:11,530 --> 00:04:13,377
있는지를

112
00:04:13,377 --> 00:04:15,149
볼 수 있습니다

113
00:04:15,149 --> 00:04:16,471
마지막으로

114
00:04:16,471 --> 00:04:18,507
그래프를 지우고 싶으면

115
00:04:18,540 --> 00:04:23,867
close를 치면

116
00:04:23,867 --> 00:04:24,963
그래프가

117
00:04:24,963 --> 00:04:26,628
바탕화면에서

118
00:04:26,628 --> 00:04:30,153
사라지게 됩니다.

119
00:04:30,640 --> 00:04:33,372
또 옥타브는 여러 그래프에 각각 
숫자를 부여할 수 있습니다

120
00:04:33,372 --> 00:04:36,935
figure(1); plot(t, y1)을 입력하면

121
00:04:36,935 --> 00:04:39,582
첫번째 그래프를 만들게 되고

122
00:04:39,670 --> 00:04:41,959
그 그래프 속에는 plot(t, y1)이 그려져 있죠

123
00:04:41,970 --> 00:04:45,075
만약에 또 다른 그래프를 그리고 싶으면 다른 숫자를 부여하면 됩니다

124
00:04:45,075 --> 00:04:47,765
figure(2); plot(t, y2)를 치면

125
00:04:47,780 --> 00:04:49,924
새로운 그래프가 생성되어

126
00:04:49,924 --> 00:04:53,084
2개의 개별적인 그래프가 만들어지죠

127
00:04:53,084 --> 00:04:54,625
그래프1과 그래프2라는 이름으로요.

128
00:04:54,625 --> 00:04:55,874
그래프1은 sin함수를

129
00:04:55,874 --> 00:04:59,169
그래프2는 cos함수를 나타내고 있습니다.

130
00:04:59,170 --> 00:05:00,498
비슷한 명령어로는 제가 자주 사용하는

131
00:05:00,498 --> 00:05:02,825
subplot이라는 명령어가 있습니다

132
00:05:02,825 --> 00:05:05,401
subplot(1, 2, 1)

133
00:05:05,401 --> 00:05:07,958
이 명령어는 앞에서부터

134
00:05:07,958 --> 00:05:11,200
두 개의 파라미터(1,2, 로

135
00:05:11,780 --> 00:05:13,760
화면을 1 x 2의 격자로

136
00:05:13,820 --> 00:05:16,010
분할하라고 지정합니다.

137
00:05:16,010 --> 00:05:17,607
마지막 파라미터 1)은

138
00:05:17,620 --> 00:05:19,335
첫 번째 원소부터

139
00:05:19,340 --> 00:05:21,714
시작하라는 의미입니다. 알겠죠?

140
00:05:21,714 --> 00:05:23,568
다시 말하자면 한 그래프 화면을

141
00:05:23,568 --> 00:05:24,913
1x2의 두 화면으로 분할하고,

142
00:05:24,913 --> 00:05:26,585
첫 번째 원소부터

143
00:05:26,585 --> 00:05:27,948
이제 시작하게 됩니다.

144
00:05:27,970 --> 00:05:30,435
명령어를 치게 되면

145
00:05:30,435 --> 00:05:32,722
이렇게 화면이 뜨고 이 분할된
화면의 왼쪽에 그래프가 있어요

146
00:05:32,760 --> 00:05:35,291
이제 여기에 plot(t, y1)을 치면

147
00:05:35,350 --> 00:05:37,682
첫 번째 원소를 왼쪽에

148
00:05:37,682 --> 00:05:40,462
먼저 채우게 됩니다.

149
00:05:40,462 --> 00:05:42,565
그리고 subplot(1, 2, 2)를 치면

150
00:05:42,565 --> 00:05:44,456
화면의 격자중 2번째인 오른쪽을

151
00:05:44,456 --> 00:05:48,724
쓰겠다고 지정하는 거예요.

152
00:05:49,270 --> 00:05:51,323
한 화면 안에 y2를 덤으로 받아서

153
00:05:51,323 --> 00:05:54,875
오른쪽에, 즉 두 번째 원소에 더 그릴 수 있는 거죠.

154
00:05:54,910 --> 00:05:56,114
이제 마지막으로 배울 명령어를 이용해서

155
00:05:56,114 --> 00:05:58,165
가로축/세로축의 범위를 바꿀 수 있습니다.

156
00:05:58,165 --> 00:06:00,308
axis([0.5 1 -1 1])을

157
00:06:00,330 --> 00:06:02,892
입력하면

158
00:06:02,892 --> 00:06:05,071
오른쪽의 그래프의

159
00:06:05,071 --> 00:06:07,448
x축과 y축의 범위를

160
00:06:07,448 --> 00:06:09,874
설정할 수 있습니다.

161
00:06:09,890 --> 00:06:12,381
좀더 구체적으로 얘기하면

162
00:06:12,381 --> 00:06:13,668
x축의 범위를

163
00:06:13,670 --> 00:06:14,856
0.5에서부터 1로 지정하고

164
00:06:14,856 --> 00:06:16,334
y축의 범위를

165
00:06:16,340 --> 00:06:19,572
-1부터 1까지로 지정하였습니다

166
00:06:19,572 --> 00:06:21,736
이 모든 명령어들을 외울 필요는 없습니다

167
00:06:21,736 --> 00:06:23,178
작업을 하다가 x/y축의

168
00:06:23,178 --> 00:06:24,773
범위를 바꿔야 할 순간에만

169
00:06:24,780 --> 00:06:25,703
이 코맨드를 알고 있으면 돼요. 여러분은 이제

170
00:06:25,703 --> 00:06:26,628
axis라는 명령어가 있다고 알고 있잖아요?

171
00:06:26,628 --> 00:06:28,364
그러면 구체적인 부분을 알고 싶을 때에

172
00:06:28,364 --> 00:06:31,590
Octave의 help axis 
코맨드에서 찾아볼 수 있어요.

173
00:06:31,600 --> 00:06:32,861
마지막으로 명령어 몇 가지를 더 알려드리자면

174
00:06:32,861 --> 00:06:35,449
clf를 입력하면

175
00:06:35,450 --> 00:06:38,362
화면을 지워줍니다 (clear figure)

176
00:06:38,362 --> 00:06:39,772
여기에 A를

177
00:06:39,772 --> 00:06:42,076
5x5의

178
00:06:42,076 --> 00:06:43,375
마방진이라고 놓았습니다.

179
00:06:43,380 --> 00:06:45,290
이제 A는 행렬입니다.

180
00:06:45,310 --> 00:06:47,581
이 행렬을 깔끔하게

181
00:06:47,581 --> 00:06:49,341
보고 싶을 때 제가 가끔씩 쓰는

182
00:06:49,350 --> 00:06:51,582
수법입니다. 이렇게

183
00:06:51,582 --> 00:06:54,792
imagesc 명령어를 사용하면

184
00:06:54,800 --> 00:06:56,362
이 명령어는

185
00:06:56,370 --> 00:06:58,056
5x5행렬을 격자로 나누어

186
00:06:58,056 --> 00:07:03,925
서로 다른 색을 칠해 행렬을 표현합니다.

187
00:07:03,925 --> 00:07:05,739
다른 색들이 각각 다른 값에

188
00:07:05,739 --> 00:07:09,011
대응해 A 행렬을 나타내고 있지요.

189
00:07:09,060 --> 00:07:13,262
색을 자세히 보려면 colorbar를 이용하면 됩니다.

190
00:07:13,630 --> 00:07:14,903
제가 좀 더

191
00:07:14,903 --> 00:07:16,715
세련된 명령어를 사용해 볼게요,

192
00:07:16,715 --> 00:07:19,608
imagesc(A), colorbar,

193
00:07:19,608 --> 00:07:22,454
colormap grey

194
00:07:22,454 --> 00:07:24,757
이건 사실 세 가지 명령어를 
한 번에 작동시킨 것 뿐입니다.

195
00:07:24,760 --> 00:07:26,286
imagesc를 수행하고

196
00:07:26,286 --> 00:07:28,943
그 다음에 colorbar를 그 다음으로 colormap gray를 말이죠

197
00:07:28,943 --> 00:07:30,142
이 명령어가 뭘 하냐면

198
00:07:30,160 --> 00:07:31,355
color map을 어떤 것을 쓸건지 설정합니다.

199
00:07:31,355 --> 00:07:32,749
gray라고 했으니 흑백으로 나오겠죠?

200
00:07:32,749 --> 00:07:35,333
또 오른쪽에 이렇게 color bar를 만들게 됩니다.

201
00:07:35,360 --> 00:07:37,525
여기 있는 colorbar는

202
00:07:37,550 --> 00:07:40,701
주어진 색이 어떤 값에 대응하는지를 보여줍니다

203
00:07:40,720 --> 00:07:42,704
구체적으로 얘기하자면

204
00:07:42,704 --> 00:07:44,494
A행렬의 왼쪽 위의

205
00:07:44,494 --> 00:07:46,358
원소인 17은

206
00:07:46,358 --> 00:07:49,297
여기쯤 해당하는 회색으로 나타낸다는 것입니다

207
00:07:49,297 --> 00:07:52,012
여기 행렬 A(1, 2)에

208
00:07:52,012 --> 00:07:53,210
해당하는 값이죠

209
00:07:53,280 --> 00:07:55,640
확인해보면

210
00:07:55,640 --> 00:07:57,716
A(1, 2)는 24인게 보이죠

211
00:07:57,716 --> 00:07:59,683
이 값은

212
00:07:59,690 --> 00:08:01,343
여기있는 사각형에 해당하고

213
00:08:01,360 --> 00:08:03,677
거의 흰색에 가까운 색을 띄고 있습니다.

214
00:08:03,677 --> 00:08:05,640
그리고 작은 숫자였던

215
00:08:05,690 --> 00:08:08,657
여기 이... A(4,5)

216
00:08:08,657 --> 00:08:12,260
아시다시피 이 값은

217
00:08:12,300 --> 00:08:14,346
3이었고, colorbar에서 보면

218
00:08:14,360 --> 00:08:15,548
이즈음에 대응하게 됩니다.

219
00:08:15,548 --> 00:08:16,618
아까 24보다 훨씬

220
00:08:16,618 --> 00:08:19,499
짙은 색으로 그림에 표시되었습니다.

221
00:08:19,499 --> 00:08:21,141
또 하나의 예제를 보도록 합시다.

222
00:08:21,141 --> 00:08:23,228
15 x 15행렬을

223
00:08:23,230 --> 00:08:24,768
magic(15)를

224
00:08:24,770 --> 00:08:26,029
통해 만들어서

225
00:08:26,029 --> 00:08:27,675
그려보면

226
00:08:27,680 --> 00:08:29,504
다음과 같은 행렬에 해당하는

227
00:08:29,504 --> 00:08:33,675
이미지를 얻을 수 있습니다

228
00:08:33,700 --> 00:08:35,225
마지막으로

229
00:08:35,225 --> 00:08:37,075
오늘 배운 내용을 정리해 보면

230
00:08:37,075 --> 00:08:38,318
여기 있는 명령어들의 나열은

231
00:08:38,318 --> 00:08:41,917
콤마(,)를 써서 명령어들이 순차적으로 실행되게 하였습니다

232
00:08:41,940 --> 00:08:43,195
이렇게 사용할 수 있죠

233
00:08:43,210 --> 00:08:44,638
만약에 제가 a = 1,

234
00:08:44,690 --> 00:08:46,613
b = 2, c = 3를

235
00:08:46,613 --> 00:08:48,620
입력하면

236
00:08:48,620 --> 00:08:50,628
이것은 실제로는

237
00:08:50,628 --> 00:08:52,039
3개의 명령어를 한번에 실행합니다.

238
00:08:52,040 --> 00:08:53,490
혹은 각각의 명령을 앞에서부터

239
00:08:53,490 --> 00:08:55,849
순차적으로 실행한다고도 할 수 있습니다.

240
00:08:55,849 --> 00:08:57,521
그리고 각각의 출력값이 나오죠

241
00:08:57,521 --> 00:08:58,417
이렇게 하는 대신에

242
00:08:58,417 --> 00:09:00,489
a = 1;

243
00:09:00,489 --> 00:09:01,755
b = 2; c = 3;라고

244
00:09:01,755 --> 00:09:03,532
, 대신에 ;을 이용해서 치면

245
00:09:03,540 --> 00:09:05,854
아무것도 출력하지 않습니다

246
00:09:05,854 --> 00:09:07,195
이것을, 즉

247
00:09:07,210 --> 00:09:08,865
연쇄적으로 실행하는 것을

248
00:09:08,870 --> 00:09:12,185
comma chaining이라고 합니다

249
00:09:12,240 --> 00:09:13,755
그리고, 이건 그냥 Octave 에서

250
00:09:13,755 --> 00:09:15,520
여러 가지의 명령어를

251
00:09:15,520 --> 00:09:17,778
좀 더 편하게 사용하는 방법입니다. 아까와 같이

252
00:09:17,778 --> 00:09:19,358
imagesc, colorbar, color map을

253
00:09:19,360 --> 00:09:22,919
같은 줄 상에서 함께 
수행할 수 있도록 말이죠.

254
00:09:22,930 --> 00:09:24,104
그래서, 이제 끝입니다.

255
00:09:24,104 --> 00:09:25,281
이제 여러분은

256
00:09:25,281 --> 00:09:27,504
어떻게 옥타브에서 데이터를 시각화 하는지 배웠습니다

257
00:09:27,504 --> 00:09:29,270
다음 동영상 강의에서는 여러분께

258
00:09:29,280 --> 00:09:30,430
알려드리고 싶었던 중요한 부분인데요,

259
00:09:30,460 --> 00:09:31,985
프로그램의 실행을 제어하는

260
00:09:31,985 --> 00:09:33,622
if, while, for과 같은

261
00:09:33,630 --> 00:09:35,294
제어 구문(control statement)과

262
00:09:35,294 --> 00:09:39,426
어떻게 함수를 선언하고
사용하는지에 대해 이야기하겠습니다.
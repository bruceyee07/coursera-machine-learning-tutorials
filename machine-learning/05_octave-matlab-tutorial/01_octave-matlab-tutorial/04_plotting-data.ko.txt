학습 알고리즘을 개발할 때 간단한 그래프(plot)를 그리면 알고리즘이 무엇을 하고 있는지 더 잘 이해할 수 있게 됩니다. 뿐만아니라 알고리즘이 올바르게 
작동하고 있는지 체크하거나 알고리즘이 수행해야 할 작업들이 제대로 진행하고 있는지 알 수 있습니다 예를 들어 지난번 비디오에서 저는 비용 함수(cost function) J(θ)의 그래프를 그림으로써 경사하강법(gradient descent)이 최소값에 제대로 수렴하고 있는지 확인했습니다. 또한, 데이터 혹은 학습 알고리즘의 결과를 그래프로 그려 보면 학습 알고리즘을 어떻게 
개선해야 할 지에 대한 아이디어를 얻을 수도 있습니다. 다행히도 옥타브(octave)에서는 다양한 그래프(plot)를 만들기 위한 간단한 도구들을 제공하고 있습니다 저도 학습 알고리즘을 사용할 때 데이터를 그래프로 그리거나, 학습 알고리즘을 그래프로 그리거나, 그 외 등등 그래프로 그리는 것이 정말 중요하다는 것을 자주 느껴요. 그래프로 그리면 어떻게 알고리즘을 개선할 수 있을까 아이디어를 얻습니다. 그래서 이번 비디오에서 저는 여러분에게 
Octave 도구들을 사용해 데이터를 그래프로 그려 시각화하는 
방법에 대해 알려드리겠습니다. 여기 Octave 실행창이 있습니다. 우리가 그래프로 그릴 데이터를 간단히 만들어 보겠습니다. 여기 t를 입력했어요. t는, 여러분 아시겠어요? 
이 숫자들의 배열이에요. 이게 t예요. 0부터 0.98까지의 숫자들의 집합입니다. 이제 y1을 sin( 2π*4*t)라고 놓고요, 이 sin 함수를 플롯하는 건 진짜 쉽습니다. 그냥 plot(t, y1)라고 치고 엔터를 누르면 이렇게 생긴 그래프가 나오죠 여기 보이는 가로축이 변수 t를 나타내고 세로축이 y1, 즉 방금 계산한 sin함수의 
그래프인 걸 확인할 수 있습니다 그럼 다음으로 y2를 cos(2 * π * 4 * t)로 놓아보았습니다. 이렇게요. 그리고 나서 plot(t, y2)를 입력하면 Octave는 아까 그렸던 sin그래프 대신에 cos그래프를 보여줄 겁니다. 코사인 함수라 1부터 시작하는 걸 볼 수 있죠. 자 그럼 만약에 sin함수와 cos함수를 동시에 그래프에 출력하고 싶을 땐 어떻게 해야 할까요? 이렇게 하면 됩니다 plot(t, y1)을 먼저 입력하고 그러면 이게 sin함수였죠 그리고 'hold on'이라는
함수를 이용할 겁니다 hold on이 뭘 하는거냐면 Octave더러 여기 기존에 있는 그래프 위에 새로운 그래프를 그리라고 얘기하는 겁니다 자 그럼 cos함수 (t.y2)는 다른 색으로 출력해 볼게요. plot(t, y2)의 y2 뒤쪽에 'r'을 추가로 넣어주면 원래 있던 그래프가 사라지고 
새로 생기는 게 아니라 cos함수의 그래프를 원래 있던 sin함수 위에 그려주게 되고 아까 넣은 'r'이 빨간색을 
의미해서 이렇게 됩니다. 여기 추가적인 명령어들이 있습니다 xlabel('time')을 치면 X 축(수평축)에<br />라벨을 붙여주게 되고 ylabel('value')라고 치면 y축(수직축)에 value라고 라벨을 붙여줍니다 그리고 또 그래프로 그려진 두 함수들에도<br />라벨을 붙일 수 있습니다 legend('sin', 'cos')을 입력하면 2개의 선이 각각 어떤 것을 나타내는지 오른쪽 위에 보여줍니다 그리고 마지막으로 title('my plot')이라고 입력하면 맨 위에 제목을 달아주게 되죠 그리고 이 그래프를 저장하고 싶으면 print -dpng 'myplot.png' 를 입력하면 됩니다. png는 이미지 파일의 포맷이고요. 이렇게 하면 위의 그래프를 이미지 파일로 저장할 수 있습니다 실제로 이것을 해보기 위해 디렉토리를 바꾸겠습니다 이렇게 말이죠 그리고 그 경로에 파일을 출력하겠습니다. 이 이미지 저장과정은 Octave 설정이 어떻게 되어 있는지에 따라서 몇 초정도 걸릴 수 있습니다. 하지만 이렇게 저장 폴더를 바탕화면으로 하면 이렇게 더 빨리 저장되었습니다. 이렇게 하고나서 바탕화면으로 가보면 여기 Octave가 저장해준 myplot.png파일이 있죠 여기에 png포맷으로 그래프가 
저장되어 있는 것을 알 수 있습니다. png뿐만 아니라 수천개의 다른 
포맷으로도 저장할 수 있습니다 help plot을 치면 png대신 어떤 포맷을 사용해서 저장할 수 있는지를 볼 수 있습니다 마지막으로 그래프를 지우고 싶으면 close를 치면 그래프가 바탕화면에서 사라지게 됩니다. 또 옥타브는 여러 그래프에 각각 
숫자를 부여할 수 있습니다 figure(1); plot(t, y1)을 입력하면 첫번째 그래프를 만들게 되고 그 그래프 속에는 plot(t, y1)이 그려져 있죠 만약에 또 다른 그래프를 그리고 싶으면 다른 숫자를 부여하면 됩니다 figure(2); plot(t, y2)를 치면 새로운 그래프가 생성되어 2개의 개별적인 그래프가 만들어지죠 그래프1과 그래프2라는 이름으로요. 그래프1은 sin함수를 그래프2는 cos함수를 나타내고 있습니다. 비슷한 명령어로는 제가 자주 사용하는 subplot이라는 명령어가 있습니다 subplot(1, 2, 1) 이 명령어는 앞에서부터 두 개의 파라미터(1,2, 로 화면을 1 x 2의 격자로 분할하라고 지정합니다. 마지막 파라미터 1)은 첫 번째 원소부터 시작하라는 의미입니다. 알겠죠? 다시 말하자면 한 그래프 화면을 1x2의 두 화면으로 분할하고, 첫 번째 원소부터 이제 시작하게 됩니다. 명령어를 치게 되면 이렇게 화면이 뜨고 이 분할된
화면의 왼쪽에 그래프가 있어요 이제 여기에 plot(t, y1)을 치면 첫 번째 원소를 왼쪽에 먼저 채우게 됩니다. 그리고 subplot(1, 2, 2)를 치면 화면의 격자중 2번째인 오른쪽을 쓰겠다고 지정하는 거예요. 한 화면 안에 y2를 덤으로 받아서 오른쪽에, 즉 두 번째 원소에 더 그릴 수 있는 거죠. 이제 마지막으로 배울 명령어를 이용해서 가로축/세로축의 범위를 바꿀 수 있습니다. axis([0.5 1 -1 1])을 입력하면 오른쪽의 그래프의 x축과 y축의 범위를 설정할 수 있습니다. 좀더 구체적으로 얘기하면 x축의 범위를 0.5에서부터 1로 지정하고 y축의 범위를 -1부터 1까지로 지정하였습니다 이 모든 명령어들을 외울 필요는 없습니다 작업을 하다가 x/y축의 범위를 바꿔야 할 순간에만 이 코맨드를 알고 있으면 돼요. 여러분은 이제 axis라는 명령어가 있다고 알고 있잖아요? 그러면 구체적인 부분을 알고 싶을 때에 Octave의 help axis 
코맨드에서 찾아볼 수 있어요. 마지막으로 명령어 몇 가지를 더 알려드리자면 clf를 입력하면 화면을 지워줍니다 (clear figure) 여기에 A를 5x5의 마방진이라고 놓았습니다. 이제 A는 행렬입니다. 이 행렬을 깔끔하게 보고 싶을 때 제가 가끔씩 쓰는 수법입니다. 이렇게 imagesc 명령어를 사용하면 이 명령어는 5x5행렬을 격자로 나누어 서로 다른 색을 칠해 행렬을 표현합니다. 다른 색들이 각각 다른 값에 대응해 A 행렬을 나타내고 있지요. 색을 자세히 보려면 colorbar를 이용하면 됩니다. 제가 좀 더 세련된 명령어를 사용해 볼게요, imagesc(A), colorbar, colormap grey 이건 사실 세 가지 명령어를 
한 번에 작동시킨 것 뿐입니다. imagesc를 수행하고 그 다음에 colorbar를 그 다음으로 colormap gray를 말이죠 이 명령어가 뭘 하냐면 color map을 어떤 것을 쓸건지 설정합니다. gray라고 했으니 흑백으로 나오겠죠? 또 오른쪽에 이렇게 color bar를 만들게 됩니다. 여기 있는 colorbar는 주어진 색이 어떤 값에 대응하는지를 보여줍니다 구체적으로 얘기하자면 A행렬의 왼쪽 위의 원소인 17은 여기쯤 해당하는 회색으로 나타낸다는 것입니다 여기 행렬 A(1, 2)에 해당하는 값이죠 확인해보면 A(1, 2)는 24인게 보이죠 이 값은 여기있는 사각형에 해당하고 거의 흰색에 가까운 색을 띄고 있습니다. 그리고 작은 숫자였던 여기 이... A(4,5) 아시다시피 이 값은 3이었고, colorbar에서 보면 이즈음에 대응하게 됩니다. 아까 24보다 훨씬 짙은 색으로 그림에 표시되었습니다. 또 하나의 예제를 보도록 합시다. 15 x 15행렬을 magic(15)를 통해 만들어서 그려보면 다음과 같은 행렬에 해당하는 이미지를 얻을 수 있습니다 마지막으로 오늘 배운 내용을 정리해 보면 여기 있는 명령어들의 나열은 콤마(,)를 써서 명령어들이 순차적으로 실행되게 하였습니다 이렇게 사용할 수 있죠 만약에 제가 a = 1, b = 2, c = 3를 입력하면 이것은 실제로는 3개의 명령어를 한번에 실행합니다. 혹은 각각의 명령을 앞에서부터 순차적으로 실행한다고도 할 수 있습니다. 그리고 각각의 출력값이 나오죠 이렇게 하는 대신에 a = 1; b = 2; c = 3;라고 , 대신에 ;을 이용해서 치면 아무것도 출력하지 않습니다 이것을, 즉 연쇄적으로 실행하는 것을 comma chaining이라고 합니다 그리고, 이건 그냥 Octave 에서 여러 가지의 명령어를 좀 더 편하게 사용하는 방법입니다. 아까와 같이 imagesc, colorbar, color map을 같은 줄 상에서 함께 
수행할 수 있도록 말이죠. 그래서, 이제 끝입니다. 이제 여러분은 어떻게 옥타브에서 데이터를 시각화 하는지 배웠습니다 다음 동영상 강의에서는 여러분께 알려드리고 싶었던 중요한 부분인데요, 프로그램의 실행을 제어하는 if, while, for과 같은 제어 구문(control statement)과 어떻게 함수를 선언하고
사용하는지에 대해 이야기하겠습니다.
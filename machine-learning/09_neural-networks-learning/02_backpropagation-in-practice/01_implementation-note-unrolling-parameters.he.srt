1
00:00:00,250 --> 00:00:01,530
בסרטון הקודם, דיברנו

2
00:00:01,850 --> 00:00:02,870
על אופן השימוש במסירה אחורה

3
00:00:03,980 --> 00:00:05,810
כדי לחשב את הנגזרות של פונקציית העלות.

4
00:00:06,780 --> 00:00:07,770
בסרטון זה, ברצוני

5
00:00:08,030 --> 00:00:10,260
לספר לכם במהירות על פרט יישום אחד של

6
00:00:11,220 --> 00:00:13,110
תרגום או שיטוח או פרישת הפרמטרים

7
00:00:13,670 --> 00:00:15,500
ממטריצות לוקטורים, להם אנו

8
00:00:15,610 --> 00:00:17,870
זקוקים כדי להשתמש בשגרות האופטימיזציה המתקדמות.

9
00:00:20,230 --> 00:00:21,470
באופן קונקרטי, נניח

10
00:00:21,640 --> 00:00:23,120
שבניתם פונקצייה

11
00:00:23,660 --> 00:00:24,870
שלוקחת את הקלט הזה, הפרמטרים

12
00:00:25,420 --> 00:00:28,690
תטא ומחזירה את פונקציית העלות ומחזירה נגזרות.

13
00:00:30,050 --> 00:00:31,260
אז עכשיו אפשר להעביר את הפונקציה הזו

14
00:00:31,510 --> 00:00:33,820
לאלגוריתמי אופטימיזציה מתקדמים על ידי fminunc,

15
00:00:34,080 --> 00:00:34,790
ו-fminunc

16
00:00:34,890 --> 00:00:35,900
היא לא האפשרות היחידה דרך אגב.

17
00:00:36,060 --> 00:00:38,660
יש גם אלגוריתמים מתקדמים אחרים לאופטימיזציה.

18
00:00:39,710 --> 00:00:40,910
אבל מה שכולם

19
00:00:41,030 --> 00:00:41,970
עושים הוא לקבל כקלט,

20
00:00:42,730 --> 00:00:43,560
מצביע לפונקצית העלות,

21
00:00:44,490 --> 00:00:45,730
ואיזשהו ערך ראשוני של תטא.

22
00:00:47,010 --> 00:00:48,490
והפונקציות האלה

23
00:00:48,730 --> 00:00:51,600
מניחות שתטא

24
00:00:51,740 --> 00:00:53,360
והערך הראשוני של תטא,

25
00:00:53,580 --> 00:00:55,410
שהם פרמטרים וקטורים, אולי

26
00:00:55,640 --> 00:00:57,040
ב-Rn או ב-Rn+1.

27
00:00:57,870 --> 00:01:00,440
בכל אופן אלו וקטורים, והפונקציה

28
00:01:00,530 --> 00:01:01,880
מניחה גם שפונקציה העלות

29
00:01:02,150 --> 00:01:03,770
מחזירה כערך

30
00:01:03,960 --> 00:01:05,640
שני את

31
00:01:05,830 --> 00:01:07,410
השיפוע וגם הוא ב-Rn

32
00:01:07,640 --> 00:01:09,860
או ב-Rn+1. אז גם הוא וקטור.

33
00:01:10,840 --> 00:01:11,890
זה עבד בסדר כאשר

34
00:01:12,040 --> 00:01:14,030
השתמשנו ברגרסיה לוגיסטית, אבל

35
00:01:14,220 --> 00:01:15,120
עכשיו כשאנחנו משתמשים ברשת

36
00:01:15,280 --> 00:01:17,160
עצבית הפרמטרים שלנו הם

37
00:01:17,220 --> 00:01:18,370
כבר לא וקטורים, אלא במקום זה

38
00:01:18,980 --> 00:01:21,110
הם מטריצות כי ברשת

39
00:01:21,310 --> 00:01:22,670
עצבית יש לנו

40
00:01:22,830 --> 00:01:26,050
פרמטרים Θ1, Θ2, Θ3 שהם מטריצות

41
00:01:26,700 --> 00:01:28,080
ושאנו עשויים לייצג אותם באוקטבה

42
00:01:28,680 --> 00:01:30,660
כמטריצות תטא1, תטא2, תטא3.

43
00:01:31,450 --> 00:01:33,160
ובאותו אופן גם הביטויים

44
00:01:33,760 --> 00:01:35,030
של השיפועים שצפויים לחזור מהפונקציה שלנו.

45
00:01:35,720 --> 00:01:36,890
ובכן, בסרטון הקודם הראינו

46
00:01:36,980 --> 00:01:38,430
כיצד לחשב את

47
00:01:38,840 --> 00:01:40,520
מטריצות הגרדיינטים האלו,

48
00:01:40,980 --> 00:01:42,290
D1, D2, D3,

49
00:01:42,560 --> 00:01:43,950
שאותם אנחנו

50
00:01:44,080 --> 00:01:46,130
יכולים לייצג באוקטבה לדוגמא כמטריצות D1, D2, D3.

51
00:01:48,080 --> 00:01:49,150
בסרטון הזה אני רוצה

52
00:01:49,480 --> 00:01:50,420
לספר לכם בקיצור על

53
00:01:50,510 --> 00:01:51,480
הרעיון של איך לקחת

54
00:01:51,980 --> 00:01:54,060
את המטריצות האלה ולפרוש אותם לתוך וקטורים.

55
00:01:54,590 --> 00:01:55,750
כך שהם נהיות

56
00:01:55,910 --> 00:01:57,790
בפורמט מתאים להיות

57
00:01:57,930 --> 00:02:00,090
מועברים כתטא כאן או

58
00:02:00,460 --> 00:02:01,850
לצאת כפלט של השיפוע שם.

59
00:02:03,220 --> 00:02:04,540
באופן קונקרטי, נניח שיש

60
00:02:04,670 --> 00:02:06,740
לנו רשת עצבית עם שכבת

61
00:02:06,950 --> 00:02:08,250
קלט אחת עם 10 יחידות,

62
00:02:09,010 --> 00:02:10,000
שכבה נסתרת עם עשר יחידות

63
00:02:10,540 --> 00:02:11,870
ושכבת פלט אחת עם

64
00:02:12,020 --> 00:02:13,090
יחידה אחת בלבד, אז s1

65
00:02:13,270 --> 00:02:14,030
הוא מספר היחידות בשכבה אחת

66
00:02:14,440 --> 00:02:15,710
ו-s2 הוא

67
00:02:15,860 --> 00:02:18,220
מספר היחידות בשכבה השניה, ו-s3 הוא מספר

68
00:02:18,520 --> 00:02:20,700
יחידות בשכבה השלישית.

69
00:02:21,560 --> 00:02:23,200
במקרה הזה, הממד של

70
00:02:23,460 --> 00:02:25,240
המטריצות Θ

71
00:02:25,350 --> 00:02:26,380
ו-D יהיו

72
00:02:26,570 --> 00:02:28,110
נתונים על ידי הביטויים האלה.

73
00:02:28,520 --> 00:02:30,300
לדוגמה, Θ1

74
00:02:30,630 --> 00:02:33,220
תהיה מטריצה 10 על 11 וכן הלאה.

75
00:02:34,420 --> 00:02:35,740
אז באוקטבה, אם אתה רוצה

76
00:02:35,950 --> 00:02:37,960
להמיר בין המטריצות האלה

77
00:02:38,580 --> 00:02:38,580
לבין וקטורים

78
00:02:39,330 --> 00:02:40,590
מה שאתה יכול לעשות זה לקחת

79
00:02:40,830 --> 00:02:42,130
את תטא1, תטא2,

80
00:02:42,350 --> 00:02:44,220
תטא3, ולכתוב את

81
00:02:44,410 --> 00:02:45,470
פיסת הקוד הזו

82
00:02:45,610 --> 00:02:46,820
שתיקח את כל האלמנטים

83
00:02:46,900 --> 00:02:48,540
של שלוש המטריצות שלך תטא,

84
00:02:48,770 --> 00:02:49,400
שתיקח את כל האלמנטים

85
00:02:49,860 --> 00:02:51,150
של תטא1, כל

86
00:02:51,260 --> 00:02:52,290
האלמנטים של תטא2, כל

87
00:02:52,400 --> 00:02:53,840
האלמנטים של תטא3,

88
00:02:54,130 --> 00:02:55,510
ותפרוש אותם ותשים

89
00:02:55,770 --> 00:02:57,420
את כל האלמנטים בתוך וקטור אחד ארוך.

90
00:02:58,540 --> 00:02:59,880
שייקרא thetaVec וכן

91
00:03:00,960 --> 00:03:02,510
הפקודה השנייה תיקח

92
00:03:02,830 --> 00:03:04,350
את כל המטריצות שלך D

93
00:03:04,490 --> 00:03:05,600
ותפרוש אותם לתוך וקטור

94
00:03:05,930 --> 00:03:07,340
אחד גדול שייקרא

95
00:03:07,510 --> 00:03:08,810
DVec. ובסוף,

96
00:03:09,370 --> 00:03:10,330
כשתרצה לחזור

97
00:03:10,520 --> 00:03:13,380
מהייצוג הוקטורי לייצוג המטריציוני.

98
00:03:14,620 --> 00:03:15,630
מה שתעשה כדי לחזור

99
00:03:15,840 --> 00:03:17,720
נניח לתטא1 הוא לקחת

100
00:03:17,940 --> 00:03:19,250
את thetaVec ולמשוך

101
00:03:19,530 --> 00:03:20,980
החוצה את 110 האיברים הראשונים.

102
00:03:21,470 --> 00:03:22,930
בתטא1 יש 110

103
00:03:23,390 --> 00:03:24,650
איברים כי היא

104
00:03:24,720 --> 00:03:26,420
מטריצה 10 על 11, אז זה

105
00:03:26,810 --> 00:03:28,200
ימשוך את 110 האיברים הראשונים

106
00:03:28,540 --> 00:03:30,200
ולאחר מכן השתמש

107
00:03:30,370 --> 00:03:32,960
בפקודה reshape כדי לעצב אותם מחדש בחזרה לתוך תטא1.

108
00:03:33,010 --> 00:03:34,730
ואז כדי להחזיר

109
00:03:34,900 --> 00:03:35,850
את תטא2 אתה שולף

110
00:03:36,280 --> 00:03:39,010
את 110 האלמנטים הבאים ומעצב מחדש גם אותם.

111
00:03:39,670 --> 00:03:41,410
וגם עבור תטא3, אתה שולף

112
00:03:41,450 --> 00:03:43,320
את אחד עשר האלמנטים האחרונים, ומפעיל

113
00:03:43,500 --> 00:03:45,210
reshape כדי להחזיר את תטא3.

114
00:03:48,840 --> 00:03:50,700
הנה הדגמה מהירה באוקטבה של התהליך הזה.

115
00:03:51,270 --> 00:03:52,370
אז עבור הדוגמה הזו

116
00:03:53,010 --> 00:03:54,530
בואו נגדיר את Theta1

117
00:03:55,340 --> 00:03:57,440
להיות מטריצת אחדות של 10 על

118
00:03:57,670 --> 00:03:59,580
11, אז זו מטריצה שכולה 1-ים.

119
00:04:00,360 --> 00:04:01,400
ופשוט כדי שיהיה קל לראות,

120
00:04:01,750 --> 00:04:03,060
בואו נגדיר את Theta2 להיות 2

121
00:04:03,280 --> 00:04:05,150
כפול מטריצת אחדות של 10 על

122
00:04:05,310 --> 00:04:07,390
11 וכן

123
00:04:07,600 --> 00:04:09,570
נגדיר את Theta3 שווה 3

124
00:04:10,290 --> 00:04:12,110
כפול מטריצת 1-ים של 1 על 11.

125
00:04:12,390 --> 00:04:13,680
אז זה 3

126
00:04:13,980 --> 00:04:17,030
מטריצות נפרדות: Theta1, Theta2 ו-Theta3.

127
00:04:17,770 --> 00:04:19,010
עכשיו אנחנו רוצים לשים את כל אלה בתור וקטור.

128
00:04:19,670 --> 00:04:22,740
thetaVec שווה

129
00:04:23,380 --> 00:04:26,660
Theta1(:) ; Theta2(:) ;

130
00:04:28,540 --> 00:04:28,990
Theta3(:).

131
00:04:29,260 --> 00:04:32,060
נכון, זה נקודתיים

132
00:04:32,540 --> 00:04:34,220
באינדקסים של המטריצות

133
00:04:35,350 --> 00:04:37,420
וכך עכשיו thetaVec

134
00:04:37,590 --> 00:04:40,090
הולך להיות וקטור ארוך מאוד.

135
00:04:41,050 --> 00:04:41,910
יש בו 231 אלמנטים.

136
00:04:42,970 --> 00:04:46,000
כשמציגים אותו, רואים

137
00:04:46,290 --> 00:04:47,640
שזה וקטור ארוך מאוד עם

138
00:04:47,780 --> 00:04:48,610
כל האלמנטים של המטריצה

139
00:04:48,880 --> 00:04:49,630
הראשונה, כל האלמנטים של

140
00:04:50,090 --> 00:04:52,360
המטריצה השנייה, ובסוף כל האלמנטים של המטריצה השלישית.

141
00:04:53,480 --> 00:04:54,450
ואם אני רוצה להחזיר

142
00:04:54,930 --> 00:04:56,420
את המטריצות המקוריות שלי, אני יכול

143
00:04:56,500 --> 00:05:00,040
לעצב מחדש את התטאות בעזרת הפקודה reshape.

144
00:05:01,400 --> 00:05:02,580
בואו נשלוף את 110 האלמנטים

145
00:05:03,100 --> 00:05:05,640
הראשונים ונעצב אותם מחדש למטריצה של 10 על 11.

146
00:05:06,810 --> 00:05:08,240
זה מחזיר לי את Theta1.

147
00:05:08,690 --> 00:05:09,770
ואם אני אז מושך

148
00:05:10,280 --> 00:05:12,220
את 110 האלמנטים הבאים.

149
00:05:12,720 --> 00:05:14,690
האינדקסים 111 עד 220.

150
00:05:14,850 --> 00:05:16,470
אני מקבל בחזרה את כל Theta2.

151
00:05:18,030 --> 00:05:19,330
ואם אני הולך

152
00:05:20,850 --> 00:05:22,110
מ-221 עד

153
00:05:22,280 --> 00:05:24,240
האלמנט האחרון, שהוא

154
00:05:24,440 --> 00:05:25,970
האלמנט ה-231, ומעצב אותו מחדש כמטריצה

155
00:05:26,070 --> 00:05:28,130
1 על 11, אני מקבל בחזרה את Theta3.

156
00:05:30,810 --> 00:05:32,110
כדי להפוך את התהליך הזה לבאמת ספציפי,

157
00:05:32,950 --> 00:05:34,750
הנה האופן שבו אנו משתמשים ברעיון

158
00:05:35,320 --> 00:05:36,990
הפרישה כדי ליישם את אלגוריתם הלמידה שלנו.

159
00:05:38,200 --> 00:05:39,180
נניח שיש לך ערך

160
00:05:39,490 --> 00:05:40,600
ראשוני של הפרמטרים

161
00:05:41,170 --> 00:05:42,410
Θ1, Θ2, Θ3.

162
00:05:42,950 --> 00:05:43,740
מה שאנחנו הולכים לעשות כאן,

163
00:05:44,020 --> 00:05:45,880
הוא לקחת אותם ולפרוש

164
00:05:46,290 --> 00:05:47,610
אותם לתוך וקטור ארוך,

165
00:05:47,960 --> 00:05:50,380
שלו אנחנו נקרא initialTheta

166
00:05:50,600 --> 00:05:52,170
ואותו נשלח ל-fminunc

167
00:05:52,360 --> 00:05:54,900
כהגדרה הראשונית של הפרמטרים Θ.

168
00:05:56,160 --> 00:05:58,310
הדבר השני שאנחנו צריכים לעשות הוא ליישם את פונקציית העלות.

169
00:05:59,310 --> 00:06:01,510
הנה היישום של פונקציית העלות.

170
00:06:02,900 --> 00:06:04,070
פונקצית עלות

171
00:06:04,160 --> 00:06:05,500
מקבלת כקלט את thetaVec,

172
00:06:05,980 --> 00:06:07,090
שהולך להיות שרשור

173
00:06:07,350 --> 00:06:08,770
של כל וקטורי הפרמטרים

174
00:06:08,870 --> 00:06:10,680
שנפרשו לתוך וקטור אחד.

175
00:06:11,960 --> 00:06:12,800
אז הדבר הראשון שאני צריך לעשות

176
00:06:13,000 --> 00:06:13,890
הוא להשתמש

177
00:06:14,100 --> 00:06:16,580
ב-thetaVec ואני אשתמש בפונקצית reshape.

178
00:06:17,040 --> 00:06:18,120
אז אני שולף את האלמנטים

179
00:06:18,320 --> 00:06:19,440
מ-thetaVec ומשתמש ב-reshape

180
00:06:19,750 --> 00:06:20,950
כדי להחזיר את

181
00:06:21,320 --> 00:06:23,560
מטריצות הפרמטרים המקוריים, Θ1, Θ2, ו-Θ3.

182
00:06:24,120 --> 00:06:26,530
אז אנחנו מקבלים כאן מטריצות.

183
00:06:26,620 --> 00:06:28,000
זה נותן לנו

184
00:06:28,060 --> 00:06:29,920
צורה נוחה יותר

185
00:06:30,130 --> 00:06:31,580
לשימוש במטריצות האלה, כך

186
00:06:31,750 --> 00:06:33,590
שעכשיו אפשר להריץ את המסירה לפנים

187
00:06:33,880 --> 00:06:35,400
והמסירה לאחור כדי לחשב

188
00:06:35,570 --> 00:06:38,140
את הנגזרות שלי, ולחשב את פונקצית העלות (J(Θ.

189
00:06:39,710 --> 00:06:40,900
ואחרי החישובים אנחנו

190
00:06:41,120 --> 00:06:42,620
לוקחים את מטריצות הנגזרות

191
00:06:43,030 --> 00:06:44,530
ופורשים אותם, ושומרים שהאיברים

192
00:06:45,140 --> 00:06:47,440
ישארו באותו סדר כמו שעשינו כאשר פרשנו את תטא.

193
00:06:48,390 --> 00:06:49,780
עכשיו אני עומד לפרוש את המטריצות D1, D2,

194
00:06:50,030 --> 00:06:51,330
D3 ולקבל מהן את gradientVec

195
00:06:52,190 --> 00:06:55,180
שזהו מה שפונקצית העלות יכולה להחזיר.

196
00:06:55,490 --> 00:06:57,420
היא יכולה להחזיר וקטור של הנגזרות האלה.

197
00:06:59,150 --> 00:07:00,310
אז אני מקווה שעכשיו

198
00:07:00,490 --> 00:07:01,650
קיבלתם תחושה טובה לגבי איך

199
00:07:01,890 --> 00:07:03,200
להמיר הלוך וחזור בין

200
00:07:03,360 --> 00:07:04,970
ייצוג מטריציוני של

201
00:07:05,090 --> 00:07:08,220
פרמטרים ובין ייצוג וקטורי של הפרמטרים.

202
00:07:09,360 --> 00:07:10,290
היתרון של ייצוג

203
00:07:10,760 --> 00:07:12,330
מטריצה הוא שכאשר

204
00:07:12,470 --> 00:07:13,530
הפרמטרים שלך מאוחסנים

205
00:07:13,670 --> 00:07:15,670
כמטריצות, זה יותר נוח לחשב

206
00:07:15,830 --> 00:07:17,430
כשאתה עושה מסירה קדימה

207
00:07:17,530 --> 00:07:19,110
ומסירה לאחור וזה קל יותר

208
00:07:19,850 --> 00:07:21,160
כאשר הפרמטרים שלך מאוחסנים

209
00:07:21,360 --> 00:07:22,770
כמטריצות לנצל

210
00:07:23,400 --> 00:07:24,780
את היישומים הוקטוריים של השפה.

211
00:07:26,230 --> 00:07:27,900
בעוד לעומת זאת היתרון של

212
00:07:28,090 --> 00:07:30,250
ייצוג וקטורי, כאשר יש

213
00:07:30,320 --> 00:07:31,820
לך דברים כמו thetaVec או DVec

214
00:07:32,500 --> 00:07:34,540
זה מאפשר להשתמש באלגוריתמים מתקדמים של אופטימיזציה.

215
00:07:34,770 --> 00:07:36,640
האלגוריתמים האלה נוטים

216
00:07:36,760 --> 00:07:37,730
להניח שיש לך

217
00:07:38,090 --> 00:07:40,730
את כל הפרמטרים שלך פרושים לתוך וקטור אחד ארוך.

218
00:07:41,720 --> 00:07:42,930
וכך עם מה שכרגע

219
00:07:43,140 --> 00:07:44,650
למדנו, אני מקווה שאתם יכולים עכשיו להמיר

220
00:07:45,410 --> 00:07:47,020
במהירות בין שני הייצוגים לפי הצורך.
בסרטון הזה, אני רוצה לדבר על סביבת למידת מכונה חדשה בקנה מידה גדול המכונה סביבת למידה מקוונת. סביבת הלמידה המקוונת מאפשרת לנו לעצב או למדל בעיות שבהם יש לנו שטף או זרם רציף של נתונים המגיעים אלינו ואנחנו רוצים אלגוריתם שילמד ממנו. כיום, רבים מהאתרים הגדולים ביותר, או רבות מהחברות בעלות האתרים הגדולים ביותר, משתמשים בגרסאות שונות של אלגוריתמים ללמידה מקוונת כדי ללמוד מהזרם של המשתמשים שמגיעים באופן שוטף לאתר. באופן ספציפי, אם יש לך זרם רציף של נתונים שנוצרים על ידי זרם רציף של משתמשים שמגיעים אל האתר שלך, מה שאפשר לעשות לפעמים הוא להשתמש באלגוריתם למידה מקוונת כדי לגלות את העדפות המשתמשים מתוך זרם הנתונים ולהשתמש במידע כדי לייעל חלק מההחלטות באתר שלך. נניח שאתה מפעיל שירות משלוחים, משתמשים באים ורוצים שתעזור להם לשלוח את החבילות שלהם ממיקום A למיקום B ונניח שאתה מפעיל אתר אינטרנט, שבו משתמשים חוזרים ואומרים לך מהיכן הם רוצים לשלוח את החבילה, ולהיכן הם רוצים לשלוח אותה (המוצא והיעד) ואתר האינטרנט שלך מציע לשלוח את החבילה תמורת איזה מחיר מסוים, אני אשלח את החבילה שלך עבור $50, אני אשלח עבור $20. ובהתאם למחיר שאתה מציע למשתמשים, המשתמשים לפעמים יבחרו להשתמש בשירות המשלוחים; זו דוגמה חיובית, ולפעמים הם עוזבים ומחליטים לא להשתמש בשירות המשלוח שלך. אז נניח שאנחנו רוצים שאלגוריתם למידה יעזור לנו לבצע אופטימיזציה של המחיר שאותו אנחנו רוצים להציע למשתמשים שלנו. ובפרט, נניח שיש לנו איזה סוג של תכונות שלוכדות תכונות של משתמשים. אנחנו יודעים משהו על הדמוגרפיה, אנחנו לומדים את המוצא ואת היעד של החבילה, לשם הם רוצים לשלוח את החבילה. ומה המחיר שאנו מציעים להם עבור משלוח החבילה. ומה שאנחנו רוצים לעשות הוא ללמוד מה ההסתברות שהם יבחרו לשלוח את החבילה באמצעות שירות המשלוח שלנו בהינתן התכונות האלה, ושוב רק כתזכורת התכונות האלה x גם זוכרות את המחיר שאנחנו מבקשים. אז אם נוכל להעריך את הסיכוי שהם יסכימו להשתמש בשירות שלנו עבור מחיר נתון מסוים, אז אנחנו יכולים לנסות לבחור מחיר, כך שיש סבירות גבוהה למדי שהם יבחרו באתר שלנו, ובו בזמן בתקווה אנחנו נקבל מחיר הוגן שייתן לנו רווח הוגן עבור משלוח החבילה שלהם. אז אם אנחנו יכולים ללמוד את ההסתברות של y שווה 1 בהינתן מחיר ותכונות אחרות, נוכל באמת להשתמש בזה כדי לבחור מחירים מתאימים כשמגיעים אלינו משתמשים חדשים. אז על מנת למדל את ההסתברות של y שווה 1, מה שאנחנו יכולים לעשות הוא להשתמש ברגרסיה לוגיסטית או ברשת עצבית או במין אלגוריתם אחר דומה. אבל בואו נתחיל ברגרסיה לוגיסטית. עכשיו אם יש לך אתר אינטרנט שפשוט פועל ברציפות, הנה מה שיעשה אלגוריתם למידה מקוונת. אני כותב "חזור שוב ושוב". זה פשוט אומר שהאתר שלנו מתכוון להישאר פתוח, מה שקורה באתר הוא לפעמים משתמש מגיע, ועבור המשתמש הזה נקבל איזשהו זוג x,y שמתאים למשתמש הזה באתר. אז התכונות x הם המקור והיעד שצוין על ידי המשתמש הזה והמחיר שהצענו הפעם, ו-y הוא 1 או 0 לפי אם הוא בחר או לא להשתמש בשירות המשלוח שלנו. עכשיו ברגע שאנחנו מקבלים את הזוג הזה (x, y), מה שעושה אלגוריתם הלמידה המקוונת הוא לעדכן את הפרמטרים θ רק לפי ה-x,y הזה, ובפירוט, אנחנו מעדכנים את הפרמטרים θ כ: θj מקבל θj פחות קצב הלמידה α כפול החוק הרגיל שלנו לירידה במדרון ברגרסיה לוגיסטית. אז אנחנו עושים את זה עבור j שווה אפס עד n, וכאן הסוגר המסולסל שלנו סוגר את הלולאה. אתם זוכרים שבאלגוריתמים אחרים ללמידה לא כתבנו x,y, אלא כתבנו דברים כמו xi, yi, אבל בסביבה של למידה מקוונת אנחנו זונחים את הרעיון שיש סדרת אימון קבועה, ובמקום זה יש לנו אלגוריתם. עכשיו מה שקורה הוא שאנחנו מקבלים דוגמה, ואז אנו לומדים את הדוגמה הזו כך, ואז אנחנו זורקים את הדוגמה. אנחנו מתעלמים מהדוגמה הזו, ולעולם לא נשתמש בה עוד, אנחנו פשוט מסתכלים על דוגמה אחת בכל פעם. אנחנו לומדים מהדוגמה הזאת. ואז אנחנו מתעלמים ממנה. וזו הסיבה שבגללה אנחנו גם זנחנו את הרעיון הזה שיש לנו מין סדרת אימון קבועה עם אינדקסים i. ואם אתה באמת מפעיל אתר אינטרנט גדול שבו באמת יש זרם מתמשך של משתמשים, אז הסוג הזה של אלגוריתם למידה מקוונת הוא למעשה אלגוריתם סביר למדי. מכיוון שהנתונים הם ממש בחינם, יש כל כך הרבה נתונים, שכמות הנתונים היא למעשה בלתי מוגבלת, אז באמת ייתכן שאין צורך להסתכל על דוגמת אימון יותר מפעם אחת. כמובן, אם היה לנו רק מספר קטן של משתמשים אז במקום להשתמש באלגוריתם למידה מקוונת כזה, יכול להיות טוב יותר לשמור את כל הנתונים כסדרת אימון קבועה ואז להפעיל איזה אלגוריתם על קבוצת האימון הזו. אבל אם יש לך זרם רציף של נתונים, אז אלגוריתם למידה מקוונת יכול להיות יעיל מאוד. אני צריך גם להזכיר שאפקט מעניין אחד של הסוג הזה של למידה מקוונת הוא שהאלגוריתם הזה יכול להסתגל לשינויים בהעדפות המשתמשים. ובפרט, אם לאורך הזמן בגלל שינויים בכלכלה אולי משתמשים מתחילים להיות יותר רגישים למחיר שהם מוכנים לשלם, פחות מוכנים לשלם מחירים גבוהים. או אם הם הופכים פחות רגישים למחיר והם מוכנים לשלם מחירים גבוהים יותר. או אם דברים שונים נהיים חשובים יותר למשתמשים, אם אתה מתחיל לראות סוגים חדשים של משתמשים שמגיעים לאתר שלך. הסוג הזה של אלגוריתם למידה מקוונת יכול להסתגל לשינויי ההעדפות של המשתמשים ולעקוב אחר מה שהאוכלוסייה המשתנה של המשתמשים שלך עשויה להיות מוכנה לשלם. והוא עושה את זה כי אם מאגר המשתמשים שלך משתנה, אז העדכונים לפרמטרים θ ישתנו לאיטם, פשוט כדי להתאים את הפרמטרים לאיך נראה המאגר הנוכחי של המשתמשים שלך. הנה דוגמה נוספת לסוג של יישום שבו ניתן ליישם למידה מקוונת. זהו יישום של חיפוש מוצר שבו אנו רוצים ליישם אלגוריתם למידה כדי ללמוד לתת רשימות טובות של תוצאות למשתמש. נניח שאתה מנהל חנות מקוונת שמוכרת טלפונים - שמוכרת טלפונים ניידים או סלולריים. ויש לך ממשק משתמש שבו משתמש יכול להגיע לאתר שלך ולהקליד שאילתה כמו "טלפון אנדרואיד מצלמה 1080p". אז 1080p הוא מין מפרט של מצלמת וידאו שאולי יש לך בטלפון הסלולרי או הנייד. נניח שיש לנו מאה טלפונים בחנות שלנו. ובגלל האופן שבו האתר שלנו בנוי, כאשר משתמש מריץ שאילתה, אם זו שאילתת חיפוש, אנחנו רוצים למצוא מבחר של עשרה טלפונים שונים כדי להראות או להציע למשתמש. מה שהיינו רוצים הוא אלגוריתם למידה שיעזור לנו להבין אילו עשרה טלפונים מתוך המאה שלנו אנחנו צריכים להראות למשתמש בתגובה לשאילתת חיפוש כמו זו כאן. הנה שיטה לענות על הבעיה. עבור כל טלפון ובהינתן שאילתת משתמש ספציפית; אנחנו יכולים לבנות וקטור תכונות x. וקטור התכונות x יכול ללכוד תכונות שונות של הטלפון. הוא יכול ללכוד דברים כמו עד כמה דומה שאילתת החיפוש של המשתמש לטלפון. אנו לוכדים דברים כמו כמה מילים בשאילתת החיפוש של המשתמש תואמות לשם הטלפון, כמה מילים בשאילתת החיפוש של המשתמש תואמות לתיאור הטלפון וכן הלאה. אז וקטור התכונות x לוכד תכונות של הטלפון והוא לוכד גם דברים בקשר לדמיון או לכמה טוב תואם הטלפון את שאילתת המשתמש בממדים שונים. מה שהיינו רוצים לעשות הוא להעריך את ההסתברות שמשתמש ילחץ על קישור לטלפון ספציפי, מכיוון שאנחנו רוצים להציג למשתמשים את הטלפונים שסביר שהם ירכשו, רוצים להראות טלפונים שיש סבירות גבוהה שהמשתמשים ילחצו עליהם בדפדפן. אז נגדיר y שווה 1 אם המשתמש לחץ על הקישור עבור הטלפון ו-y שווה אפס אחרת, ומה שהייתי רוצה לעשות הוא ללמוד את ההסתברות שהמשתמש ילחץ על טלפון מסוים בהינתן וקטור תכונות x, שמכיל תכונות של הטלפון ועד כמה תואמת השאילתה את הטלפון. כדי לתת לבעיה זו שם בשפה של אנשים שמפעילים אתרי אינטרנט כאלה, בעית הלמידה הזו נקראת למעשה בעיית הלמידה של שיעור הקליקים החזוי, ה-CTR החזוי. זה פשוט אומר ללמוד את ההסתברות שהמשתמש ילחץ על הקישור הספציפי שאתה מראה לו, CTR הוא קיצור של שיעור קליקים. ואם אתה יכול להעריך את ה-CTR עבור טלפון מסוים, אנחנו יכולים להשתמש בהערכה הזו כדי להציג למשתמש את עשרה הטלפונים שהכי סביר להניח שהם ילחצו עליהם, מכיוון שמתוך מאה הטלפונים, אנו יכולים לחשב את זה עבור כל אחד מ-100 הטלפונים ופשוט לבחור את 10 הטלפונים שלמשתמש יש הסיכוי הטוב ביותר ללחוץ עליהם, וזו תהיה דרך סבירה למדי להחליט אילו עשר תוצאות להראות למשתמש. רק שיהיה ברור, נניח שבכל פעם שמשתמש עושה חיפוש, נחזיר לו עשר תוצאות, מה שזה יעשה הוא למעשה לתת לנו עשרה זוגות (x,y), זה בעצם נותן לנו עשר דוגמאות אימון בכל פעם שהמשתמש מגיע לאתר שלנו כי עשרה הטלפונים שבחרנו להציג למשתמש, עבור כל אחד מאותם 10 טלפונים אנו נקבל וקטור תכונות x, ועל כל אחד מאותם 10 טלפונים שאנחנו מציגים למשתמש נוכל גם לקבל ערך עבור y, נקבל גם את הערך של y, לפי אם המשתמש לחץ על הלינק או לא. אחת הדרכים להריץ אתר כזה תהיה בכל פעם להציג למשתמש את עשרה הניחושים הטובים ביותר עבור הטלפונים, וכך כל פעם כשמשתמש מגיע, אנחנו נקבל עשר דוגמאות, עשרה זוגות x,y, ואז להשתמש באלגוריתם למידה מקוונת כדי לעדכן את הפרמטרים בשימוש בעצם ב-10 שלבים של ירידה במדרון על 10 הדוגמאות האלה, ואז אפשר פשוט לזרוק את הנתונים, ואם יש באמת זרם רציף של משתמשים שמגיעים אל האתר שלך, זו תהיה דרך סבירה למדי ללמוד פרמטרים עבור האלגוריתם שלך כדי להציג למשתמשים שלך את עשרה הטלפונים שיכולים להיות מבטיחים ביותר ובעלי הסיכוי הגבוה ביותר שילחצו עליהם. אז זוהי דוגמא של בעית חיפוש מוצר או למידה לדרג טלפונים, ללמוד לחפש טלפונים. אז אני אזכיר עוד כמה אחרים במהירות. בעייה אחת היא אם יש לך אתר אינטרנט ואתה מנסה להחליט אילו הצעות מיוחדות להציג למשתמש, זה דומה מאוד לטלפונים, או אם יש לך אתר אינטרנט ואתה מציג למשתמשים שונים מאמרים שונים. לדוגמא אם אתה אתר שמרכז חדשות ממקומות שונים, אז אתה יכול שוב להשתמש במערכת דומה כדי לבחור להראות למשתמש, מהם מאמרי החדשות שיש הסיכוי הטוב ביותר שהוא מתעניין בהם, ומה מאמרי החדשות שלהם הסיכוי הטוב ביותר שילחצו עליהם. קשורה קשר הדוק לבעיית ההצעות המיוחדות, ולשאלת ההמלצות. ולמעשה, אם יש לך מערכת סינון שיתופי, אפשר אפילו לדמיין מערכת סינון שיתופי שמוסיפה לך תכונות נוספות להזנה לתוך מסווג הרגרסיה הלוגיסטית כדי לנסות לחזות את שיעור הקליקים (CTR) של מוצרים שונים שאתה עשוי להמליץ למשתמש. כמובן, אני חייב לומר שכל אחת מהבעיות הללו יכולה גם להיות מנוסחת כבעיית למידת מכונה סטנדרטיות שבהם יש לך קבוצת אימון קבועה. אולי אתה יכול להפעיל את האתר שלך במשך כמה ימים ולשמור מתוכו ערכת אימון קבועה, ואז להפעיל על זה אלגוריתם למידה. ... אבל אלה הם סוגים אמיתיים של בעיות, שבהם אתה רואה חברות גדולות שמקבלות כל כך הרבה נתונים, שבאמת אולי אין שום צורך לשמור ערכת אימון קבועה, אלא במקום זה אפשר להשתמש באלגוריתם למידה מקוונת ופשוט ללמוד ברציפות מהנתונים שהמשתמשים מייצרים באתר שלך. אז זו היתה סביבת למידה מקוונת, וכפי שראינו, האלגוריתם שבו אנו משתמשים באמת דומה מאוד לאלגוריתם של ירידה סטוכסטית במדרון, אלא שבמקום לעבור על מערך אימון קבוע, אנחנו מקבלים דוגמה אחת ממשתמש, לומדים מהדוגמה הזו, ואז זורקים אותה וממשיכים הלאה. ואם יש לך זרם רציף של נתונים עבור יישום כלשהו, שווה לשקול את הסוג הזה של אלגוריתם עבור היישום שלך. וכמובן, יתרון אחד של למידה מקוונת הוא שאם יש לך מאגר משתנה של משתמשים, או אם הדברים שאתה מנסה לחזות משתנים לאט כמו אם הטעם של המשתמשים שלך משתנה עם הזמן, אלגוריתם הלמידה המקוון יכול להתאים עם הזמן את ההשערה שלמד לפי הדוגמאות האחרונות של התנהגויות המשתמשים.
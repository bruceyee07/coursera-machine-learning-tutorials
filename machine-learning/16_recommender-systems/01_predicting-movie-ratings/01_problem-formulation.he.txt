בסדרה הבאה של קטעי וידאו, אני רוצה לספר לכם על מערכות המלצה. ישנן שתי סיבות, שני מניעים למה אני רוצה לדבר על מערכות המלצה. הראשונה היא פשוט שזה יישום חשוב של למידת מכונה. במהלך השנים האחרונות אני מבקר לפעמים בחברות שונות, חברות טכנולוגיה כאן בעמק הסיליקון ואני מדבר הרבה פעמים עם אנשים שעובדים שם על יישומי למידת מכונה ושאלתי אנשים מהם היישומים החשובים ביותר של למידת מכונה או מהם יישומי הלמידה החישובית שלדעתם הכי נחוץ להשיג שיפור בביצועים שלהם. ואחת התשובות הנפוצות ביותר שאני שומע היא שיש קבוצות רבות שעובדות עכשיו בעמק הסיליקון ומנסות לבנות מערכות המלצה טובות יותר. אם תחשבו על מה עושים אתרי אינטרנט כמו אמזון, או נטפליקס או איביי או מה עושה אייטיונז ג'ניוס של אפל, ישנם הרבה אתרי אינטרנט או מערכות המנסות להמליץ למשתמשים על מוצרים חדשים המתאימים להם. אמזון ממליצה להם על ספרים חדשים, נטפליקס מנסה להמליץ על סרטים חדשים, וכן הלאה. והסוגים האלה של מערכות המלצה מסתכלות על ההיסטוריה של הספרים שאולי רכשת בעבר, או על הסרטים שנתת להם דירוג בעבר, אבל המערכות האלה אחראיות כיום לחלק ניכר של ההכנסות של אמזון, ועבור חברה כמו נטפליקס, ההמלצות שהם נותנים למשתמשים גם הן אחראיות לחלק ניכר מהסרטים שנצפים על ידי המשתמשים האלה. ולכן לשיפור בביצועים של מערכת המלצה יכול להיות השפעה ברורה ומיידית על השורה התחתונה של רבות מהחברות האלה. מערכות ההמלצה הן מין עוף מוזר בתוך ענף למידה ממוחשבת אקדמאית, כשמגיעים לכנס אקדמי של למידה ממוחשבת, הבעיה של מערכות המלצה מקבלת תשומת לב מועטה יחסית, או אפשר לומר שהיא חלק קטן יחסית ממה שקורה באקדמיה. אבל אם מסתכלים על מה שקורה בחברות טכנולוגיה רבות, שם היכולת לבנות את המערכות האלה נראית כעדיפות גבוהה בחברות רבות. וזו אחת הסיבות שאני רוצה לדבר עליהם בקורס הזה. הסיבה השנייה שאני רוצה לדבר על מערכות המלצה היא שכאשר אנו מתקרבים לסדרות האחרונות של קטעי וידאו של הקורס הזה, רציתי לדבר על כמה מהרעיונות הגדולים בלמידת מכונה ולשתף אתכם בכמה מהרעיונות החשובים בלמידת מכונה. וכבר ראינו בקורס הזה שמאפיינים או תכונות הן חשובות בלמידת מכונה, התכונות שתבחר תהיינה בעלות השפעה גדולה על הביצועים של אלגוריתם הלמידה שלך. אז יש הרעיון החשוב הזה בלמידת מכונה, והוא שעבור חלק מהבעיות, אולי לא כל הבעיות, אבל חלק מהבעיות, ישנם אלגוריתמים שיכולים לנסות ללמוד באופן אוטומטי סדרה טובה של תכונות בשבילך. במקום לנסות לתכנן ידנית, או לקודד ידנית את התכונות, וזה מה שעשינו בעיקר עד עכשיו, ישנן כמה סביבות שבהן אפשר לייצר אלגוריתם כדי ללמוד באילו תכונות להשתמש, ומערכות המלצה הן דוגמה אחת לסוג כזה של סביבה. ישנם סביבות רבות אחרות, אבל כשנעבור על מערכות המלצה, נוכל להיכנס קצת לתוך הרעיון הזה של לימוד התכונות ותוכלו לפחות לראות דוגמה אחת של הרעיון הגדול הזה בלמידת מכונה. אז, ללא דיבורים נוספת, בואו נתחיל לדבר על ניסוח הבעיה במערכות המלצה. כדוגמה חיה, אני אשתמש בבעיה המודרנית של חיזוי הדירוג של סרטים. אז הנה הבעיה. תאר לעצמך שאתה אתר או חברה שמוכרת או משכירה סרטים, או מה שלא יהיה. כמו לדוגמא אמזון ונטפליקס, ואני חושב שגם אייטיונז, הן דוגמאות של חברות שעושות את זה, ונניח שאתם נותנים למשתמשים שלכם לדרג סרטים שונים, תוך שימוש בדירוג של 1 עד 5 כוכבים. אז משתמשים יכולים לבחור משהו כמו אחד, שניים, שלושה, ארבעה או חמישה כוכבים. כדי לעשות את הדוגמה הזאת טיפה יותר נחמדה, אנחנו נאפשר 0 עד 5 כוכבים, כי זה פשוט גורם לקצת מהמתמטיקה לצאת יותר נחמדה. למרות שרוב אתרי האינטרנט האלה משתמשים בטבלה של 1 עד 5 כוכבים. אז הנה, יש לי 5 סרטים. אהבה סופסוף, רומנטיקה לנצח, גורים חמודים של אהבה, מרדפי מכוניות ללא הפסקה, וחרבות נגד קָרָטֵה. ויש לנו 4 משתמשים, שנקרא להם אליס, בוב, קרול, ודייב, עם ראשי התיבות A, B, C, ו-D, ועוד נקרא להם משתמשים 1, 2, 3, ו-4. אז נניח שאליס באמת אוהבת את "אהבה סופסוף" ונותנת לה 5 כוכבים, וגם לרומנטיקה לנצח היא מעניקה דירוג של 5 כוכבים. היא לא ראתה את "גורים חמודים של אהבה", ולא דרגה אותו, אז אין לנו דירוג בשביל זה, ואליס ממש לא אהבה את מרדפי המכונית או חרבות נגד קָרָטֵה. ומשתמש אחר, בוב, משתמש מספר שתיים, אולי דירג תת-קבוצה אחרת של סרטים, אולי הוא אהב את "אהבה סופסוף", לא ראה את "רומנטיקה לנצח", ונתן דירוג של 4, 0, 0, ואולי המשתמש השלישי שלנו, דרג את זה 0, לא ראה את זה, 0, 5, 5, בואו פשוט נמלא כאן כמה מספרים. בואו ונכניס קצת סימונים, הנה סימון שנשתמש בו לאורך כל הנושא הזה. אני מתכוון להשתמש ב-nᵤ כדי לציין את מספר המשתמשים. אז בדוגמה שלנו, nᵤ יהיה שווה ל 4. האינדקס u מייצג משתמשים. ונשתמש ב-nₘ כדי לציין את מספר הסרטים, אז כאן יש לנו חמישה סרטים אז nₘ שווה ל-5. בדוגמה הזו, יש לנו בגדול 3 סרטים רומנטיים או קומדיות רומנטיות ו-2 סרטי פעולה ואם מסתכלים על הדוגמה הקטנה הזו, זה נראה כאילו אליס ובוב נותנים דירוגים גבוהים לקומדיות הרומנטיות האלה, או לסרטים על אהבה, ונותנים דירוגים נמוכים מאוד לסרטי פעולה, ואצל קרול ודייב זה ההפך, נכון? קרול ודייב, משתמשים מספר שלוש וארבע, ממש אוהבים סרטי פעולה ומעניקים להם דירוגים גבוהים, אבל לא כל כך אוהבים רומנטיקה ואת סרטי האהבה. באופן ספציפי, בבעיית מערכת המלצות, אנחנו מקבלים את הנתונים הבאים. הנתונים שלנו כוללים את הדברים הבאים: יש לנו ערכים מהסוג (r(i,j, כאשר (r(i,j הוא 1 אם המשתמש j דרג את הסרט i. המשתמשים שלנו דרגו רק חלק מהסרטים, ולכן אין לנו דירוגים מהם עבור הסרטים האחרים. ובכל פעם ש-(r(i,j שווה ל-1, בכל פעם שהמשתמש j דרג את הסרט i, אנחנו מקבלים גם את המספר הזה (y(i,j, שהוא הדירוג שניתן על ידי המשתמש j לסרט i. אז (y(i,j יהיה מספר בין אפס לחמש, בהתאם לדירוג הכוכבים, בין אפס לחמישה כוכבים, שהמשתמש נתן לסרט מסוים. אז בעית מערכת ההמלצות היא, בהינתן הנתונים האלה, דהיינו בהינתן (r(i,j ו-(y(i,j, על המערכת להסתכל על הנתונים ולהסתכל על כל הסרטים שלהם אין דירוגים ולנסות לחזות אילו ערכים צריכים להיות במקום סימני השאלה. בדוגמה הספציפית שלנו, יש לנו מספר קטן מאוד של סרטים ומספר קטן מאוד של משתמשים, ולכן רוב המשתמשים דירגו את רוב הסרטים, אבל במצבים אמיתיים המשתמשים יכולים באופן מעשי לדרג רק חלק קטן מאוד מהסרטים, אבל כשמסתכלים על הנתונים האלה, אם אליס ובוב אוהבים את הסרטים הרומנטיים אולי אנחנו חושבים שאליס היתה נותנת לסרט הזה ציון חמש, ואולי אנחנו מאמינים שבוב היה נותן לזה 4.5 או ערך גבוה אחר, ומצד שני אנחנו חושבים שאולי קרול ודייב יתנו להם דירוגים נמוכים מאוד. ולגבי דייב, טוב, אם דייב באמת אוהב סרטי פעולה, אולי הוא היה נותן ל"חרבות נגד קראטה" דירוג של 4 או אולי 5, בסדר? אז התפקיד שלנו בפיתוח מערכת המלצות הוא לבנות אלגוריתם למידה שיכול באופן אוטומטי לעבור ולמלא את הערכים החסרים האלה בשבילנו, כך שנוכל לבחור למשל את הסרטים שהמשתמש עדיין לא צפה בהם, ולהמליץ למשתמש הזה על סרטים חדשים לצפות. אתה מנסה לחזות מה עוד יכול להיות מעניין למשתמש. אז זה התיאור הפורמלי של בעיית מערכת המלצות. בסרטון הבא נתחיל לפתח אלגוריתם למידה כדי לטפל בבעיה זו.
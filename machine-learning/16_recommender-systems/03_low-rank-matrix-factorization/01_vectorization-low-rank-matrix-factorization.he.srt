1
00:00:00,530 --> 00:00:01,650
בסרטונים האחרונים

2
00:00:01,730 --> 00:00:03,890
דיברנו על אלגוריתם סינון שיתופי.

3
00:00:04,830 --> 00:00:05,890
בסרטון הזה אני עומד

4
00:00:05,970 --> 00:00:07,120
לדבר קצת על

5
00:00:07,490 --> 00:00:09,090
היישום הווקטורי של האלגוריתם הזה.

6
00:00:09,980 --> 00:00:12,670
וגם לדבר קצת על דברים אחרים שאפשר לעשות עם האלגוריתם הזה.

7
00:00:13,340 --> 00:00:14,520
לדוגמה, אחד

8
00:00:14,600 --> 00:00:15,830
הדברים שאפשר לעשות הוא, כשנתון

9
00:00:16,180 --> 00:00:17,390
מוצר אחד אפשר למצוא

10
00:00:17,770 --> 00:00:19,160
מוצרים אחרים הקשורים אליו,

11
00:00:19,270 --> 00:00:20,210
למשל, אם

12
00:00:20,490 --> 00:00:23,140
משתמש הסתכל לאחרונה על מוצר אחד.

13
00:00:23,650 --> 00:00:24,990
האם יש מוצרים אחרים הקשורים אליו

14
00:00:25,520 --> 00:00:27,170
עליהם אפשר להמליץ למשתמש הזה?

15
00:00:27,620 --> 00:00:28,980
בואו נראה מה נוכל לעשות בקשר לזה.

16
00:00:30,170 --> 00:00:31,190
מה שאני רוצה לעשות הוא למצוא

17
00:00:31,550 --> 00:00:33,520
דרך חלופית

18
00:00:33,740 --> 00:00:35,710
לכתוב את התחזיות של אלגוריתם הסינון השיתופי.

19
00:00:37,370 --> 00:00:38,590
בתור התחלה, הנה

20
00:00:38,960 --> 00:00:40,440
מערכת הנתונים שלנו

21
00:00:40,750 --> 00:00:41,880
עם חמישה הסרטים ומה

22
00:00:42,160 --> 00:00:43,150
שאני אעשה הוא לקחת

23
00:00:43,390 --> 00:00:44,520
את כל הדירוגים שנעשו על ידי

24
00:00:44,850 --> 00:00:46,500
כל המשתמשים ולקבץ אותם

25
00:00:47,080 --> 00:00:48,800
למטריצה. אז כאן

26
00:00:49,200 --> 00:00:51,390
יש לנו חמישה סרטים

27
00:00:51,670 --> 00:00:53,390
וארבעה משתמשים, ולכן

28
00:00:53,670 --> 00:00:54,550
המטריצה y שלנו

29
00:00:54,910 --> 00:00:57,110
תהיה מטריצה 5 על 4. זה פשוט

30
00:00:57,340 --> 00:00:58,770
מקבץ את כל האיברים, את כל הנתונים.

31
00:00:59,820 --> 00:01:02,390
כולל סימני השאלה, ואוסף אותם לתוך המטריצה הזו.

32
00:01:03,290 --> 00:01:04,470
וכמובן האלמנטים של

33
00:01:04,650 --> 00:01:06,400
המטריצה הזו, האלמנט במקום ה-(i, j) של

34
00:01:06,500 --> 00:01:07,860
המטריצה הזו הוא בעצם

35
00:01:08,060 --> 00:01:09,710
מה שקראנו לו בעבר (y(i, j.

36
00:01:10,520 --> 00:01:12,090
...

37
00:01:12,220 --> 00:01:13,480
זהו הדירוג שניתן לסרט i

38
00:01:14,140 --> 00:01:15,640
על ידי המשתמש j. בהינתן

39
00:01:16,070 --> 00:01:17,290
המטריצה הזו של כל

40
00:01:17,430 --> 00:01:18,520
הדירוגים שיש לנו,

41
00:01:18,700 --> 00:01:20,500
קיימת דרך חלופית לכתוב

42
00:01:20,880 --> 00:01:23,340
את כל הדירוגים החזויים של האלגוריתם.

43
00:01:24,320 --> 00:01:26,210
ובפרט אם

44
00:01:26,430 --> 00:01:27,540
נסתכל על מה התחזית של

45
00:01:27,920 --> 00:01:29,480
משתמש מסוים לגבי

46
00:01:29,690 --> 00:01:31,250
סרט מסוים, מה צופה המשתמש j

47
00:01:31,950 --> 00:01:35,540
על הסרט i נתון על ידי הנוסחה הזו.

48
00:01:37,010 --> 00:01:38,570
אז אם יש לנו

49
00:01:39,440 --> 00:01:40,330
מטריצה של תחזיות

50
00:01:40,910 --> 00:01:42,000
של דירוגים, מה שיש

51
00:01:42,180 --> 00:01:43,600
לנו זו המטריצה

52
00:01:45,030 --> 00:01:48,140
הבאה שבה המקום ה-i,j

53
00:01:49,650 --> 00:01:51,440
מתאים לדירוג

54
00:01:52,000 --> 00:01:54,020
שאנחנו צופים שהצופה j

55
00:01:54,460 --> 00:01:55,690
ייתן לסרט i

56
00:01:57,130 --> 00:01:58,440
וזה בדיוק שווה

57
00:01:58,790 --> 00:02:00,680
ל-⁽θ⁽ʲ⁾ᵀx⁽ⁱ

58
00:02:00,900 --> 00:02:01,940
אז זו מטריצה

59
00:02:02,520 --> 00:02:04,310
שבה האלמנט הראשון,

60
00:02:04,750 --> 00:02:05,930
אלמנט במקום 1,1, הוא

61
00:02:06,220 --> 00:02:07,450
הניבוי שלנו לדירוג שמשתמש 1

62
00:02:07,760 --> 00:02:09,360
ייתן לסרט 1,

63
00:02:09,560 --> 00:02:11,070
והאיבר הזה, איבר 1,2,

64
00:02:11,430 --> 00:02:12,680
הוא הדירוג החזוי

65
00:02:13,470 --> 00:02:14,640
של משתמש 2 על סרט

66
00:02:14,930 --> 00:02:16,070
1, וכן הלאה,

67
00:02:16,630 --> 00:02:18,670
וזה

68
00:02:19,000 --> 00:02:20,130
הדירוג החזוי של משתמש 1

69
00:02:20,930 --> 00:02:23,380
על הסרט האחרון

70
00:02:23,640 --> 00:02:25,100
ואם אתם רוצים,

71
00:02:25,400 --> 00:02:26,870
הדירוג הזה הוא מה

72
00:02:27,020 --> 00:02:28,050
שהיינו מנבאים עבור הערך כאן

73
00:02:29,050 --> 00:02:32,470
והדירוג הזה הוא

74
00:02:32,650 --> 00:02:33,570
מה שהיינו מנבאים עבור הערך

75
00:02:33,910 --> 00:02:35,080
כאן, וכן הלאה.

76
00:02:36,180 --> 00:02:37,480
עכשיו, בהינתן מטריצה

77
00:02:37,560 --> 00:02:39,290
כזו של דירוגים חזויים ישנה

78
00:02:39,610 --> 00:02:42,670
דרך פשוטה יותר, או וקטורית, לכתוב את זה.

79
00:02:43,640 --> 00:02:44,640
בפרט אם אנחנו מגדירים

80
00:02:45,120 --> 00:02:46,850
את המטריצה X,

81
00:02:46,970 --> 00:02:48,090
שתהייה בדיוק

82
00:02:48,370 --> 00:02:50,980
כמו המטריצה שהיתה לנו מקודם עבור רגרסיה ליניארית להיות

83
00:02:52,070 --> 00:02:53,820
מין x1ᵀ,

84
00:02:55,050 --> 00:02:57,060
x2ᵀ, וכו' עד

85
00:02:58,530 --> 00:03:01,740
x(nₘ)ᵀ.

86
00:03:02,420 --> 00:03:03,320
בעצם אנחנו לוקחים את כל התכונות

87
00:03:04,210 --> 00:03:05,670
עבור הסרטים ומשכיבים

88
00:03:06,140 --> 00:03:07,260
אותם בשורות.

89
00:03:07,950 --> 00:03:08,860
אז אם נחשוב על

90
00:03:08,980 --> 00:03:09,810
כל סרט כדוגמה אחת,

91
00:03:10,350 --> 00:03:11,200
ונשכיב את כל התכונות

92
00:03:11,670 --> 00:03:13,460
של סרטים שונים בשורות.

93
00:03:14,290 --> 00:03:16,160
ואם גם נמצא

94
00:03:16,280 --> 00:03:18,550
מטריצה Θ (באות גדולה),

95
00:03:19,870 --> 00:03:20,840
ומה שאני הולך

96
00:03:21,180 --> 00:03:22,490
לעשות הוא לקחת כל אחד

97
00:03:22,750 --> 00:03:25,780
מווקטורי הפרמטרים

98
00:03:26,280 --> 00:03:28,520
של המשתמשים, ולהשכיב גם אותם בשורות, כך.

99
00:03:28,790 --> 00:03:29,690
אז זהו θ1, שהוא

100
00:03:30,220 --> 00:03:31,880
וקטור הפרמטרים עבור המשתמש הראשון.

101
00:03:33,430 --> 00:03:36,100
והנה θ2,

102
00:03:37,040 --> 00:03:38,100
אז צריך לערום

103
00:03:38,360 --> 00:03:39,470
אותם בשורות כאלה

104
00:03:39,650 --> 00:03:41,530
כדי להגדיר את המטריצה

105
00:03:42,070 --> 00:03:43,830
Θ גדולה אז יש לנו

106
00:03:45,870 --> 00:03:48,410
nᵤ וקטורי פרמטרים שוכבים בשורות ככה.

107
00:03:50,000 --> 00:03:51,390
עכשיו בהינתן ההגדרה הזו

108
00:03:52,080 --> 00:03:53,400
עבור המטריצה x

109
00:03:53,590 --> 00:03:54,870
וההגדרה הזו עבור המטריצה Θ,

110
00:03:55,820 --> 00:03:56,970
על מנת להריץ

111
00:03:57,290 --> 00:03:59,330
דרך וקטורית לחישוב

112
00:03:59,420 --> 00:04:00,330
המטריצה של כל התחזיות

113
00:04:01,060 --> 00:04:03,570
אפשר פשוט לחשב x כפול

114
00:04:04,710 --> 00:04:07,050
המטריצה Θᵀ,

115
00:04:07,160 --> 00:04:08,380
וזה נותן לנו דרך וקטורית

116
00:04:08,570 --> 00:04:10,530
לחישוב המטריצה הזו שבכאן.

117
00:04:11,680 --> 00:04:12,460
כדי לקרוא לאלגוריתם

118
00:04:12,480 --> 00:04:15,220
הסינון השיתופי שבו השתמשנו בשם אחר

119
00:04:16,070 --> 00:04:17,190
האלגוריתם שבו אנו משתמשים

120
00:04:17,660 --> 00:04:19,840
נקרא גם פירוק לגורמים

121
00:04:21,240 --> 00:04:22,540
של מטריצה מדרגה נמוכה.

122
00:04:24,280 --> 00:04:25,410
אז אם תשמעו

123
00:04:25,620 --> 00:04:26,760
מישהו מדבר על פירוק לגורמים

124
00:04:27,210 --> 00:04:29,490
של מטריצה מדרגה נמוכה, אז זה בעצם

125
00:04:30,390 --> 00:04:32,100
האלגוריתם שעליו אנחנו מדברים.

126
00:04:32,590 --> 00:04:33,900
והמונח הזה מקורו

127
00:04:33,990 --> 00:04:36,100
במאפיין שלמטריצה

128
00:04:36,770 --> 00:04:38,880
xΘᵀ יש

129
00:04:39,110 --> 00:04:40,780
תכונה מתמטית

130
00:04:41,030 --> 00:04:42,410
באלגברה ליניארית שאומרת

131
00:04:42,670 --> 00:04:43,820
שהמטריצה הזו היא מדרגה נמוכה

132
00:04:44,720 --> 00:04:45,800
ומכאן מגיע

133
00:04:46,060 --> 00:04:47,190
השם פירוק לגורמים

134
00:04:47,340 --> 00:04:48,570
של מטריצה מדרגה נמוכה

135
00:04:48,930 --> 00:04:50,240
עבור האלגוריתמים האלה, בגלל התכונה

136
00:04:50,410 --> 00:04:53,580
של דרגה נמוכה של המטריצה הזו xΘᵀ.

137
00:04:54,830 --> 00:04:55,640
ולמי שלא יודע מה

138
00:04:55,910 --> 00:04:57,310
פירוש דרגה נמוכה או מי

139
00:04:57,620 --> 00:04:59,770
שלא יודע מה זו מטריצה מדרגה נמוכה, זה לא חשוב.

140
00:04:59,970 --> 00:05:02,820
לא באמת צריך לדעת את זה כדי להשתמש באלגוריתם הזה.

141
00:05:03,740 --> 00:05:04,790
אבל למי שכן מומחה

142
00:05:04,890 --> 00:05:06,110
באלגברה ליניארית, זה מה שנותן

143
00:05:06,320 --> 00:05:07,580
לאלגוריתם הזה את השם החדש

144
00:05:07,850 --> 00:05:12,370
של פירוק לגורמים של מטריצה מדרגה נמוכה.

145
00:05:12,620 --> 00:05:14,090
ולבסוף, לאחר שהפעלנו

146
00:05:14,300 --> 00:05:16,350
אלגוריתם סינון שיתופי הנה

147
00:05:17,310 --> 00:05:18,160
עוד משהו שאפשר לעשות,

148
00:05:18,530 --> 00:05:20,060
והוא להשתמש בתכונות

149
00:05:20,320 --> 00:05:23,510
שהוא למד על מנת למצוא סרטים קשורים.

150
00:05:25,060 --> 00:05:26,810
בפרט עבור כל מוצר i,

151
00:05:27,050 --> 00:05:27,810
בעצם עבור כל סרט i,

152
00:05:28,810 --> 00:05:30,970
למדנו וקטור תכונות (x(i.

153
00:05:31,740 --> 00:05:32,880
אז כאשר לומדים

154
00:05:32,930 --> 00:05:34,220
תכונות מסוימות אנחנו לא יודעים

155
00:05:34,590 --> 00:05:35,420
מראש באמת מה

156
00:05:35,610 --> 00:05:37,850
המשמעות של התכונות, אבל אם

157
00:05:37,940 --> 00:05:39,550
מפעילים את האלגוריתם אז התכונות

158
00:05:39,990 --> 00:05:41,690
בדרך כלל נוטות ללכוד את

159
00:05:41,930 --> 00:05:43,490
ההיבטים החשובים של

160
00:05:43,730 --> 00:05:45,340
הסרטים השונים האלה או המוצרים השונים או מה שיש.

161
00:05:45,480 --> 00:05:47,120
מהם ההיבטים החשובים שגורמים

162
00:05:47,610 --> 00:05:48,600
למשתמשים מסוימים לאהוב

163
00:05:48,930 --> 00:05:49,830
סרטים מסוימים ולגרום למשתמשים מסוימים אחרים

164
00:05:50,210 --> 00:05:51,670
לאהוב קבוצות שונות של סרטים.

165
00:05:52,470 --> 00:05:53,380
אז אולי אנחנו מצאנו

166
00:05:53,540 --> 00:05:55,050
וקטור תכונות שבו x1

167
00:05:55,260 --> 00:05:56,550
שווה רומנטיקה, x2 שווה

168
00:05:57,060 --> 00:05:59,180
פעולה כמו

169
00:05:59,460 --> 00:06:00,590
בסרטים הקודמים שלנו ואולי

170
00:06:00,710 --> 00:06:02,100
למדנו עוד תכונה x3

171
00:06:02,210 --> 00:06:04,520
שמתארת עד כמה הסרט הוא קומדיה.

172
00:06:05,330 --> 00:06:07,000
או איזה תכונה x4 שהיא עוד משהו.

173
00:06:07,270 --> 00:06:09,750
ובסך הכל יש לנו

174
00:06:09,940 --> 00:06:11,600
n תכונות ואחרי

175
00:06:12,610 --> 00:06:14,420
שמצאנו את התכונות האלה, זה בעצם

176
00:06:14,750 --> 00:06:16,030
לעתים קרובות די קשה

177
00:06:16,420 --> 00:06:18,120
להגדיר לתכונות שמצאנו

178
00:06:18,390 --> 00:06:19,980
ולתת להם פרשנות אנושית

179
00:06:20,810 --> 00:06:22,850
של מה בעצם אומרות התכונות האלה.

180
00:06:22,950 --> 00:06:24,540
אבל בפועל,

181
00:06:24,620 --> 00:06:27,480
למרות שהתכונות האלה יכולות להיות קשות להגדיר בדיוק.

182
00:06:28,100 --> 00:06:29,570
יכול להיות קשה להבין בדיוק מה הן התכונות האלו.

183
00:06:31,070 --> 00:06:32,160
בדרך כלל, האלגוריתם שלנו ילמד

184
00:06:32,410 --> 00:06:33,400
תכונות שהן משמעותיות מאוד

185
00:06:33,960 --> 00:06:35,250
ללכידת המאפיינים

186
00:06:35,870 --> 00:06:37,120
החשובים ביותר או הבולטים ביותר

187
00:06:37,880 --> 00:06:39,300
של הסרט

188
00:06:39,710 --> 00:06:41,800
שגורמים לאדם לאהוב או לא לאהוב אותו,

189
00:06:41,860 --> 00:06:44,950
אז עכשיו נניח שאנחנו רוצים לטפל בבעיה הבאה.

190
00:06:45,970 --> 00:06:47,410
נניח שיש לנו סרט מסוים

191
00:06:47,790 --> 00:06:48,980
i ואנחנו רוצים

192
00:06:49,120 --> 00:06:50,750
למצוא סרטים אחרים j

193
00:06:51,620 --> 00:06:52,680
שקשורים לסרט הזה.

194
00:06:53,150 --> 00:06:54,770
אז למה שנרצה לעשות את זה?

195
00:06:54,920 --> 00:06:56,120
אז ברור, לדוגמא אם יש לנו

196
00:06:56,320 --> 00:06:57,840
משתמש שכרגע גולש בסרטים, והוא

197
00:06:58,360 --> 00:07:00,210
כרגע צופה בסרט j, אז

198
00:07:00,550 --> 00:07:01,820
איזה סרט סביר להמליץ לו

199
00:07:02,350 --> 00:07:04,110
לראות אחרי שהוא יסיים עם הסרט j?

200
00:07:04,530 --> 00:07:06,040
או אם מישהו רכש לאחרונה את

201
00:07:06,330 --> 00:07:07,470
סרט j, אז איזה סרט

202
00:07:07,730 --> 00:07:11,000
אחר יהיה סביר לנו להמליץ לו שישקול לרכוש.

203
00:07:12,190 --> 00:07:13,000
אז עכשיו, אחרי

204
00:07:13,080 --> 00:07:14,540
שלמדנו את התכונות הללו, זה נותן

205
00:07:14,640 --> 00:07:16,080
לנו דרך נוחה מאוד

206
00:07:16,250 --> 00:07:17,930
למדוד עד כמה דומים שני סרטים.

207
00:07:18,670 --> 00:07:20,530
בפרט, יש לנו

208
00:07:21,460 --> 00:07:22,340
וקטור תכונות (x(i של הסרט i.

209
00:07:23,290 --> 00:07:24,200
אז אם אפשר למצוא

210
00:07:24,640 --> 00:07:27,500
סרט אחר, j, כך

211
00:07:27,710 --> 00:07:29,300
שהמרחק בין

212
00:07:29,780 --> 00:07:30,800
(x(i לבין (x(j הוא קטן,

213
00:07:33,080 --> 00:07:34,010
אז זה סימן

214
00:07:34,430 --> 00:07:36,980
חזק למדי שהסרטים

215
00:07:37,830 --> 00:07:41,360
j ו-i דומים איכשהו.

216
00:07:42,320 --> 00:07:44,080
לפחות במובן הזה שאם כמה מהצופים

217
00:07:44,200 --> 00:07:46,950
אוהבים את הסרט i, אולי יותר סביר שיאהבו גם את הסרט j.

218
00:07:47,760 --> 00:07:49,940
אז, רק לסכם, אם

219
00:07:50,590 --> 00:07:52,130
המשתמש שלנו מסתכל

220
00:07:52,510 --> 00:07:53,710
על איזה סרט i

221
00:07:54,150 --> 00:07:55,060
ואנחנו רוצים למצוא את 5

222
00:07:55,310 --> 00:07:56,640
הסרטים הדומים ביותר

223
00:07:56,900 --> 00:07:57,860
לסרט הזה על מנת להמליץ לו

224
00:07:58,230 --> 00:07:59,590
על 5 סרטים חדשים,

225
00:07:59,690 --> 00:08:00,650
אנחנו נמצא

226
00:08:00,970 --> 00:08:02,260
את חמשת הסרטים j

227
00:08:02,340 --> 00:08:03,880
עם המרחק הקטן ביותר

228
00:08:04,190 --> 00:08:05,680
בין וקטורי התכונות של הסרטים השונים.

229
00:08:06,550 --> 00:08:09,220
וזה יכול לתת לנו כמה סרטים שונים להמליץ עליהם למשתמש שלנו.

230
00:08:10,010 --> 00:08:11,500
אז עכשיו, אני מקווה,

231
00:08:11,680 --> 00:08:13,350
עכשיו אתם יודעים איך להשתמש

232
00:08:13,700 --> 00:08:15,930
ביישום הוקטורי הזה כדי לחשב

233
00:08:16,560 --> 00:08:18,130
בו-זמנית את כל הדירוגים החזויים

234
00:08:18,210 --> 00:08:20,280
של כל המשתמשים ושל

235
00:08:20,390 --> 00:08:21,720
כל הסרטים, וגם איך לעשות

236
00:08:21,920 --> 00:08:23,300
דברים כמו להשתמש בתכונות שנלמדו

237
00:08:23,930 --> 00:08:25,360
כדי למצוא אילו סרטים אחרים

238
00:08:25,480 --> 00:08:27,490
ואילו מוצרים אחרים יכולים להיות קשורים אילו לאילו.
בשלב זה כבר ראיתם את האלגוריתם לזיהוי חריגים, ודיברנו גם על איך להעריך איכות של אלגוריתם לזיהוי חריגים. מתברר שכאשר מפעילים זיהוי חריגים, אחד הדברים שיש לו השפעה עצומה על איכות התוצאה הוא התכונות בהן משתמשים, מה התכונות שבחרתם להכניס לאלגוריתם הזיהוי. בסרטון הזה, אני רוצה לומר כמה מילים, לתת כמה הצעות והנחיות לגבי העיצוב או הבחירה של התכונות לתת לאלגוריתם זיהוי החריגים להשתמש בהם. באלגוריתם זיהוי החריגים שלנו, אחד הדברים שעשינו היה לבנות מודל של תכונות באמצעות התפלגות גאוסיאנית. עם xi עם פרמטרים μi ו-σ²i, נניח. אז דבר אחד שאני עושה לעתים קרובות הוא לשרטט את הנתונים או את ההיסטוגרמה של הנתונים, כדי לוודא שהנתונים נראים לפחות קצת גאוסיאניים לפני שאני מכניס אותם לאלגוריתם זיהוי החריגים. זה בדרך כלל עובד בסדר גם אם הנתונים אינם גאוסיאניים, אבל זו מין בדיקת שפיות נחמדה שכדאי להריץ. וכאמור אם הנתונים אינם גאוסיאניים, האלגוריתמים בדרך כלל יעבדו בסדר גמור. אבל באופן קונקרטי, אם אני מתווה את הנתונים כך, ואם הם נראים כמו היסטוגרמה כזאת, והדרך לשרטט היסטוגרמה היא להשתמש בפונקציה או הפקודה hist באוקטבה, אבל אם זה נראה ככה, זה נראה מספיק נורמלי, אז אם התכונות נראות כך, אני אזין בהם בשמחה את האלגוריתם שלי. אבל אם אני משרטט היסטוגרמה של הנתונים, וזה נראה כמו זה, אז זה בכלל לא נראה כמו עקומת פעמון, זו התפלגות מאוד אסימטרית עם נקודת שיא בצד. אם כך נראים הנתונים, מה שאני אעשה הרבה פעמים הוא לשחק עם טרנספורמציות שונות של הנתונים כדי לגרום להם להיראות יותר גאוסיאניים. ושוב, האלגוריתם יעבוד בדרך כלל בסדר, גם אם לא. אבל אם תשתמשו בטרנספורמציות האלה כדי לעשות את הנתונים יותר נורמלים, זה עשוי לעבוד קצת יותר טוב. אז אם אני מקבל ערכת נתונים שנראית ככה, אפשר להריץ פונקצית log על הנתונים ואם אחר כך נשרטט היסטוגרמה מחדש נקבל משהו כזה, היסטוגרמה שנראית כמו זֶה. וזה נראה הרבה יותר גאוסיאני, נכון? זה נראה הרבה יותר כמו עקומת פעמון, צורת פעמון קלאסית, שאפשר להתאים לה פרמטרים של ממוצע μ ו-σ. מה שאני מתכוון בהרצת פונקצית log הוא שאם יש לי איזו תכונה x1 וההיסטוגרמה של x1 נראית ככה, אז אני עשוי לקחת את התכונה x1 ולהחליף אותה בתכונה (log(x1 וה-x1 החדש שאשרטט את ההיסטוגרמה שלו מימין נראה הרבה יותר גאוסיאני. ולא רק log, ישנם דברים אחרים שאפשר לעשות, נניח שיש לי תכונה אחרת x2, אולי אני אחליף אותה ב-(log(x+1, או באופן כללי יותר עם לוג של x פלוס איזה קבוע c, והקבוע הזה יכול להיות משהו שנשחק איתו כדי לנסות לגרום לזה להיראות גאוסיאני ככל האפשר. או עבור תכונה אחרת x3, אולי אני אחליף אותו בשורש הריבועי של x3. השורש הריבועי הוא פשוט x3 בחזקת חצי, נכון? וה"חצי" הזה הוא עוד דוגמה של פרמטר שאפשר לשחק איתו. אז, אולי את x4 אני אחליף ב-x4 בחזקת משהו אחר, אולי בחזקת ⅓. וכל אלה, הפרמטר של מעריך החזקה או הפרמטר של הקבוע c, כל אלה הן דוגמאות של פרמטרים שאפשר לשחק איתם על מנת לגרום לנתונים להיראות קצת יותר גאוסיאניים. תנו לי להראות לכם הדגמה חיה של איך אני באמת משחק עם הנתונים שלי כדי לגרום להם להיראות יותר גאוסיאניים. אני העליתי לאוקטבה סדרה של תכונות x. העליתי לשם אלף דוגמאות. אז בואו נעלה היסטוגרמה של הנתונים. נשתמש בפקודה hist x. הנה ההיסטוגרמה שלי. כברירת מחדל, אני חושב שהוא משתמש ב-10 דליים בהיסטוגרמות, אבל אני רוצה לראות את ההיסטוגרמה ביותר עדין. אז אנחנו עושים hist x, 50, ומקבלים גרף עם 50 דליים. אוקיי, זה נראה יותר טוב. עכשיו, זה לא נראה מאוד גאוסיאני, נכון? אז בואו נתחיל לשחק עם הנתונים. בואו ננסה hist של x בחזקת 0.5. אנחנו לוקחים את השורש הריבועי של הנתונים, ומדפיסים את ההיסטוגרמה של זה. ו... בסדר, זה נראה קצת יותר גאוסיאני, אבל אנחנו עוד לא ממש שם, אז בואו ונשחק בפרמטר 0.5. בואו נראה. נשנה את זה ל- 0.2. נראה קצת יותר גאוסיאני. בואו נצמצם קצת יותר ל-0.1. כן, זה נראה די טוב. אני באמת יכול פשוט להשתמש ב-0.1. אבל בואו נקטין את זה ל-0.05. ומה אתם יודעים? אוקיי, זה נראה די גאוסיאני, אז אני יכול להגדיר תכונה חדשה x-חדש ששווה ל-x בחזקת 0.05, ועכשיו התכונה החדשה x-חדש נראית יותר גאוסיאני מאשר ה-x המקורי ואז אני יכול להשתמש במקום זה בתכונה החדשה ואותה להכניס לאלגוריתם לזיהוי חריגים. וכמובן, יש יותר מדרך אחת לעשות זאת. אפשר גם להריץ hist של (log(x, הנה עוד דוגמה של טרנספורמציה שאפשר לעשות. וגם זה נראה די גאוסיאני. אז אני יכול להגדיר גם את x-חדש שווה לוג של x. וגם זו תהיה בחירה טובה למדי של תכונה להשתמש בה. אז לסיכום, אם אתה מריץ היסטוגרמה של הנתונים ומגלה שהיא נראית לא גאוסיאנית, שווה לשחק קצת עם טרנספורמציות שונות כאלה, כדי לראות אם אפשר לגרום לנתונים להיראות קצת יותר גאוסיאניים לפני שמשתמשים בהם באלגוריתם הלמידה שלך, אם כי גם בלי זה זה יכול לעבוד בסדר. אבל אני בדרך כלל כן עושה את הצעד הזה. עכשיו, הדבר השני שאני רוצה לדבר עליו הוא איך מוצאים תכונות עבור אלגוריתם זיהוי חריגים. והדרך שבה אני עושה את זה לעתים קרובות, היא באמצעות תהליך ניתוח שגיאות. מה שאני מתכוון בזה הוא שזה דומה מאוד לנוהל ניתוח השגיאה שהיה לנו לגבי למידה בפיקוח, שבו עשינו אימון מלא של אלגוריתם, ואז מפעילים את האלגוריתם על קבוצת האימות הצולב, ורואים באילו דוגמאות הוא מפספס, ובודקים אם אנחנו יכולים למצוא תכונות נוספות כדי לסייע לאלגוריתם להשתפר על הדוגמאות שבהם הוא פישל על סדרת האימות. אז בואו ננסה לחשוב על דוגמה של התהליך הזה. בזיהוי חריגים אנחנו מקווים ש-p של x יהיה גדול עבור דוגמאות נורמליות וקטן עבור דוגמאות חריגות. אז בעיה נפוצה למדי תהיה אם p של x הוא באותו סדר גודל, לדוגמא הוא גדול גם עבור הדוגמאות הנורמליות וגם על הדוגמאות האנומליות. בואו נראה דוגמה ספציפית של זה. נניח שאלה הנתונים הלא מתויגים שלנו. אז כאן יש לי רק תכונה אחת, x1, ואני אתאים לה גאוסיאן. ואולי הגאוסיאן שאני מתאים לנתונים נראה ככה. ועכשיו נניח שיש לנו דוגמה חריגה, ונניח שהדוגמה החריגה מקבלת ערך x של 2.5. אז אני מתווה את הדוגמה החריגה שלי כאן. והוא קבור באמצע קבוצה של דוגמאות נורמליות, ולכן הדוגמה החריגה הזאת שציירתי בירוק מקבלת סבירות גבוהה למדי, בתוך הגובה של העקומה הכחולה, ולכן האלגוריתם לא יצליח לסמן אותה כדוגמה חריגה. עכשיו, אם זה היה אולי ייצור מנועי מטוסים או משהו דומה, הייתי מסתכל היטב על דוגמת האימון הזו ורואה מה השתבש עם המנוע המסוים הזה של המטוס, ומנסה לבחון האם מהסתכלות על הדוגמה הזו אני יכול לגלות תכונה חדשה x2, שתסייע להבחין בין הדוגמה הרעה הזו לבין שאר הדוגמאות האדומות, כל מנועי המטוס הלא-חריגים. ואם אני מצליח לעשות את זה, התקווה תהיה שאם אני יכול ליצור תכונה חדשה x2 כך שכאשר אני מתווה מחדש את הנתונים, אם אני לוקח את כל הדוגמאות הרגילות מסדרת האימון, אני מקווה שנמצא שכל דוגמאות האימון הן הצלבים האדומים האלה, ואני מקווה שכשנעשה את זה עם הדוגמה החריגה, אז התכונה x2 תקבל ערך יוצא דופן. הדוגמה הירוקה כאן, שהיא חריגה, כן, הערך של x1 שלה הוא עדיין 2.5. אבל אולי הערך x2 שלה, נקווה שהוא מקבל ערך גדול מאוד, לדוגמא 3.5 כאן, או ערך קטן מאוד. ועכשיו נקווה שאם נייצר מודל של הנתונים, נמצא שהאלגוריתם לגילוי חריגים נותן הסתברות גבוהה לנתונים באזורים מרכזיים, הסתברות קצת יותר נמוכה לזה, והסתברות עוד יותר נמוכה לזה. ולדוגמה הזו שנמצאת ממש רחוק כאן, האלגוריתם עכשיו ייתן הסתברות נמוכה מאוד. ... אז התהליך הוא בעצם להסתכל על אילו טעויות האלגוריתם עושה, להסתכל על הדוגמא החריגה שהוא לא סימן, ולראות אם זה נותן לך כיוון ליצור תכונה חדשה. למצוא משהו יוצא דופן במנוע הזה של מטוס ולהשתמש בו כדי ליצור תכונה חדשה, כך שבעזרת התכונה החדשה הזו זה נהיה יותר קל להבחין בין החריגים ובין הדוגמאות הטובות. אז זהו התהליך של ניתוח שגיאות ושימוש בזה כדי ליצור תכונות חדשות לזיהוי חריגים. לבסוף, תנו לי לחלוק איתכם את החשיבה שלי על השיטה בה אני משתמש בדרך כלל כדי לבחור את התכונות שיעזרו בזיהוי אנומליות. בדרך כלל, הדרך שבה אני חושב על בחירת התכונות היא שאני רוצה לבחור תכונות שיקבלו או ערכים מאוד מאוד גדולים, או ערכים מאוד מאוד קטנים, על דוגמאות שלדעתי עשויות להתברר כאנומליות. אז בואו שוב נשתמש בדוגמה שלנו של ניטור מחשבים במרכז הנתונים. אז יש לנו הרבה מכונות, אולי אלפי או עשרות אלפי מכונות במרכז הנתונים. ואנחנו רוצים לדעת אם אחת המכונות, אחד המחשבים שלנו עושה צרות, מתנהג בצורה מוזרה. אז הנה דוגמאות של תכונות שאפשר לבחור, אולי כמות הזיכרון בשימוש, מספר גישות לדיסק, עומס CPU, תעבורת הרשת. אבל עכשיו, נניח שאני חושד שאחד ממקרי הכישלון, נניח שבמערכת הנתונים שלי אני חושב שהעומס על המעבד ותעבורת הרשת נוטים לגדול באופן ליניארי זה עם זה. לדוגמא אם אני מפעיל קבוצה של שרתי אינטרנט, אז אם אחד השרתים שלי משרת הרבה משתמשים, יש עליו עומס CPU גבוה מאוד, ויש לו גם תעבורת רשת גבוהה מאוד. אבל נניח שאני חושד שאחד ממקרי הכישלון הוא אם אחד המחשבים שלי נתקע בלולאה אינסופית. אז אם אני חושב שאחד ממקרי הכישלון הוא שאחד משרתי האינטרנט שלי - קוד השרת - נתקע באיזו לולאה אינסופית, אז העומס על המעבד גדל, אבל תעבורת הרשת לא גדלה כי המחשב פשוט מסתובב על ריק ועושה הרבה עבודת CPU, כי הוא תקוע בלולאה אינסופית. במקרה כזה, כדי לזהות סוג כזה של חריג, אני עשוי ליצור תכונה חדשה, x5, שעשויה להיות עומס ה-CPU חלקי תעבורת הרשת. אז כאן x5 יקבל ערך גדול במיוחד אם על אחת המכונות יש עומס CPU גדול מאוד אבל לא הרבה תעבורת רשת ולכן זו תהיה תכונה שתסייע ללכוד את הסוג המסוים הזה של אנומליה. ואתם יכולים לחשוב בצורה יצירתית ולהמציא עוד תכונות אחרות. כמו אולי התכונה x6 שהיא עומס ה-CPU בריבוע חלקי תעבורת הרשת. וזוהי גרסה אחרת של תכונה כמו x5 שמנסה ללכוד אנומליות שבהן על אחת המכונות יש עומס CPU גבוה מאוד, שאולי לא קשור לתנועה רבה ברשת. ועל ידי יצירת תכונות כאלה, אתם יכולים להתחיל לתפוס אנומליות שתואמות לשילובים יוצאי דופן של ערכים של תכונות. אז בוידאו הזה דיברנו על איך לקחת תכונה, ואולי לשנות אותה קצת כך שתיעשה קצת יותר גאוסיאנית לפני שמכניסים אותה לאלגוריתם זיהוי אנומליה. וגם על ניתוח השגיאה בתהליך הזה של יצירת תכונות כדי לנסות לגלות סוגים שונים של אנומליות. וההנחיות האלה, אנחנו מקווים שיסייעו לכם לבחור תכונות טובות להאכיל בהם את האלגוריתם לזיהוי אנומליות, כדי לעזור לו לגלות כל מיני חריגות.
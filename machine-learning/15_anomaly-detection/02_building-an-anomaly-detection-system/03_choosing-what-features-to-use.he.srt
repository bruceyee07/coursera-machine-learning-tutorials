1
00:00:00,200 --> 00:00:01,770
בשלב זה כבר ראיתם את

2
00:00:02,250 --> 00:00:03,540
האלגוריתם לזיהוי חריגים,

3
00:00:03,740 --> 00:00:05,240
ודיברנו גם על איך

4
00:00:05,570 --> 00:00:06,870
להעריך איכות של אלגוריתם

5
00:00:07,330 --> 00:00:08,880
לזיהוי חריגים. מתברר

6
00:00:09,530 --> 00:00:10,800
שכאשר מפעילים זיהוי

7
00:00:11,170 --> 00:00:12,400
חריגים, אחד

8
00:00:12,460 --> 00:00:13,290
הדברים שיש לו השפעה

9
00:00:13,720 --> 00:00:14,860
עצומה על איכות

10
00:00:14,940 --> 00:00:16,440
התוצאה הוא התכונות בהן

11
00:00:16,520 --> 00:00:17,720
משתמשים, מה התכונות שבחרתם

12
00:00:18,530 --> 00:00:19,910
להכניס לאלגוריתם הזיהוי.

13
00:00:20,830 --> 00:00:22,170
בסרטון הזה, אני רוצה

14
00:00:22,280 --> 00:00:23,390
לומר כמה

15
00:00:23,480 --> 00:00:24,890
מילים, לתת כמה הצעות

16
00:00:25,000 --> 00:00:26,250
והנחיות לגבי

17
00:00:26,370 --> 00:00:27,920
העיצוב או הבחירה

18
00:00:28,470 --> 00:00:30,950
של התכונות לתת לאלגוריתם זיהוי החריגים להשתמש בהם.

19
00:00:33,920 --> 00:00:35,310
באלגוריתם זיהוי החריגים שלנו,

20
00:00:36,120 --> 00:00:37,270
אחד הדברים שעשינו היה

21
00:00:37,510 --> 00:00:40,330
לבנות מודל של תכונות באמצעות התפלגות גאוסיאנית.

22
00:00:41,180 --> 00:00:42,810
עם xi עם פרמטרים

23
00:00:43,120 --> 00:00:46,050
μi ו-σ²i, נניח.

24
00:00:46,550 --> 00:00:47,890
אז דבר אחד

25
00:00:47,950 --> 00:00:49,620
שאני עושה לעתים קרובות הוא לשרטט

26
00:00:50,670 --> 00:00:52,260
את הנתונים או את ההיסטוגרמה

27
00:00:52,330 --> 00:00:53,490
של הנתונים, כדי לוודא

28
00:00:53,940 --> 00:00:55,210
שהנתונים נראים לפחות קצת

29
00:00:55,540 --> 00:00:57,320
גאוסיאניים לפני שאני מכניס אותם

30
00:00:57,470 --> 00:00:58,830
לאלגוריתם זיהוי החריגים.

31
00:00:59,810 --> 00:01:01,040
זה בדרך כלל עובד בסדר

32
00:01:01,610 --> 00:01:02,820
גם אם הנתונים אינם גאוסיאניים,

33
00:01:03,400 --> 00:01:05,700
אבל זו מין בדיקת שפיות נחמדה שכדאי להריץ.

34
00:01:05,970 --> 00:01:06,860
וכאמור אם הנתונים

35
00:01:07,400 --> 00:01:09,540
אינם גאוסיאניים, האלגוריתמים בדרך כלל יעבדו בסדר גמור.

36
00:01:10,410 --> 00:01:12,070
אבל באופן קונקרטי, אם אני

37
00:01:12,430 --> 00:01:13,510
מתווה את הנתונים כך,

38
00:01:13,850 --> 00:01:15,280
ואם הם נראים כמו היסטוגרמה כזאת,

39
00:01:15,370 --> 00:01:16,480
והדרך

40
00:01:16,630 --> 00:01:17,800
לשרטט היסטוגרמה היא

41
00:01:17,950 --> 00:01:19,910
להשתמש בפונקציה

42
00:01:20,130 --> 00:01:21,820
או הפקודה hist באוקטבה,

43
00:01:21,910 --> 00:01:22,800
אבל אם זה נראה ככה, זה נראה

44
00:01:23,010 --> 00:01:24,770
מספיק נורמלי, אז אם

45
00:01:24,940 --> 00:01:26,200
התכונות נראות כך,

46
00:01:26,480 --> 00:01:29,970
אני אזין בהם בשמחה את האלגוריתם שלי.

47
00:01:30,180 --> 00:01:31,830
אבל אם אני משרטט היסטוגרמה

48
00:01:31,950 --> 00:01:33,070
של הנתונים, וזה נראה

49
00:01:33,210 --> 00:01:34,800
כמו זה, אז

50
00:01:35,060 --> 00:01:36,090
זה בכלל לא נראה כמו

51
00:01:36,220 --> 00:01:38,430
עקומת פעמון, זו התפלגות מאוד אסימטרית

52
00:01:39,410 --> 00:01:40,660
עם נקודת שיא בצד.

53
00:01:41,750 --> 00:01:42,660
אם כך נראים

54
00:01:42,800 --> 00:01:43,960
הנתונים, מה שאני אעשה

55
00:01:44,190 --> 00:01:45,370
הרבה פעמים הוא לשחק עם

56
00:01:45,730 --> 00:01:46,920
טרנספורמציות שונות של הנתונים

57
00:01:47,010 --> 00:01:48,850
כדי לגרום להם להיראות יותר גאוסיאניים.

58
00:01:49,480 --> 00:01:51,940
ושוב, האלגוריתם יעבוד בדרך כלל בסדר, גם אם לא.

59
00:01:52,590 --> 00:01:53,660
אבל אם תשתמשו בטרנספורמציות האלה

60
00:01:54,630 --> 00:01:56,590
כדי לעשות את הנתונים יותר נורמלים, זה עשוי לעבוד קצת יותר טוב.

61
00:01:58,030 --> 00:01:59,780
אז אם אני מקבל ערכת נתונים

62
00:02:00,140 --> 00:02:01,340
שנראית ככה,

63
00:02:01,430 --> 00:02:02,810
אפשר להריץ

64
00:02:03,010 --> 00:02:04,520
פונקצית log

65
00:02:04,660 --> 00:02:05,930
על הנתונים ואם

66
00:02:06,060 --> 00:02:07,810
אחר כך נשרטט היסטוגרמה

67
00:02:08,150 --> 00:02:09,110
מחדש נקבל

68
00:02:09,330 --> 00:02:10,500
משהו כזה,

69
00:02:11,130 --> 00:02:12,400
היסטוגרמה שנראית כמו זֶה.

70
00:02:12,540 --> 00:02:14,470
וזה נראה הרבה יותר גאוסיאני, נכון?

71
00:02:14,650 --> 00:02:15,720
זה נראה הרבה יותר כמו

72
00:02:16,690 --> 00:02:18,020
עקומת פעמון, צורת פעמון קלאסית,

73
00:02:18,710 --> 00:02:21,000
שאפשר להתאים לה פרמטרים של ממוצע μ ו-σ.

74
00:02:22,180 --> 00:02:22,940
מה שאני מתכוון בהרצת

75
00:02:23,230 --> 00:02:24,610
פונקצית log הוא

76
00:02:24,860 --> 00:02:26,140
שאם יש לי איזו תכונה x1

77
00:02:26,860 --> 00:02:28,260
וההיסטוגרמה של x1 נראית

78
00:02:28,720 --> 00:02:30,500
ככה, אז אני עשוי

79
00:02:31,070 --> 00:02:32,210
לקחת את התכונה x1

80
00:02:32,410 --> 00:02:33,890
ולהחליף אותה בתכונה

81
00:02:34,800 --> 00:02:36,730
(log(x1

82
00:02:36,860 --> 00:02:37,880
וה-x1 החדש שאשרטט

83
00:02:38,170 --> 00:02:40,000
את ההיסטוגרמה שלו מימין נראה הרבה

84
00:02:40,430 --> 00:02:42,350
יותר גאוסיאני.

85
00:02:44,000 --> 00:02:44,730
ולא רק log, ישנם דברים אחרים שאפשר

86
00:02:44,920 --> 00:02:46,020
לעשות, נניח

87
00:02:46,110 --> 00:02:47,720
שיש לי תכונה אחרת x2,

88
00:02:48,690 --> 00:02:49,840
אולי אני אחליף אותה

89
00:02:50,120 --> 00:02:52,560
ב-(log(x+1,

90
00:02:52,630 --> 00:02:54,720
או באופן כללי יותר עם לוג

91
00:02:56,360 --> 00:02:57,690
של x

92
00:02:58,430 --> 00:03:00,350
פלוס איזה קבוע c,

93
00:03:00,520 --> 00:03:01,540
והקבוע הזה יכול להיות משהו

94
00:03:01,890 --> 00:03:04,390
שנשחק איתו כדי לנסות לגרום לזה להיראות גאוסיאני ככל האפשר.

95
00:03:05,610 --> 00:03:06,820
או עבור תכונה אחרת x3, אולי

96
00:03:07,200 --> 00:03:08,610
אני אחליף אותו

97
00:03:09,730 --> 00:03:11,250
בשורש הריבועי של x3.

98
00:03:11,610 --> 00:03:14,180
השורש הריבועי הוא פשוט x3 בחזקת חצי, נכון?

99
00:03:15,260 --> 00:03:16,660
וה"חצי" הזה

100
00:03:17,130 --> 00:03:19,220
הוא עוד דוגמה של פרמטר שאפשר לשחק איתו.

101
00:03:19,640 --> 00:03:21,600
אז, אולי את x4

102
00:03:22,450 --> 00:03:23,820
אני אחליף

103
00:03:24,410 --> 00:03:25,370
ב-x4 בחזקת

104
00:03:25,730 --> 00:03:26,790
משהו אחר, אולי

105
00:03:26,890 --> 00:03:28,460
בחזקת ⅓.

106
00:03:28,940 --> 00:03:30,830
וכל אלה,

107
00:03:30,900 --> 00:03:32,320
הפרמטר

108
00:03:32,540 --> 00:03:33,670
של מעריך החזקה

109
00:03:33,810 --> 00:03:35,110
או הפרמטר של הקבוע c, כל אלה

110
00:03:35,380 --> 00:03:36,880
הן דוגמאות של פרמטרים

111
00:03:36,960 --> 00:03:38,110
שאפשר לשחק איתם על מנת

112
00:03:38,460 --> 00:03:40,420
לגרום לנתונים להיראות קצת יותר גאוסיאניים.

113
00:03:45,180 --> 00:03:46,210
תנו לי להראות לכם הדגמה חיה

114
00:03:46,740 --> 00:03:48,720
של איך אני באמת

115
00:03:49,150 --> 00:03:50,690
משחק עם הנתונים שלי כדי לגרום להם להיראות יותר גאוסיאניים.

116
00:03:51,650 --> 00:03:52,370
אני העליתי

117
00:03:52,750 --> 00:03:54,730
לאוקטבה סדרה

118
00:03:54,860 --> 00:03:56,170
של תכונות x. העליתי לשם

119
00:03:57,150 --> 00:03:57,870
אלף דוגמאות.

120
00:03:58,580 --> 00:04:00,100
אז בואו נעלה היסטוגרמה של הנתונים.

121
00:04:01,560 --> 00:04:02,570
נשתמש בפקודה hist x.

122
00:04:03,190 --> 00:04:04,100
הנה ההיסטוגרמה שלי.

123
00:04:05,660 --> 00:04:06,580
כברירת מחדל, אני חושב

124
00:04:06,680 --> 00:04:08,250
שהוא משתמש ב-10 דליים בהיסטוגרמות,

125
00:04:08,610 --> 00:04:10,400
אבל אני רוצה לראות את ההיסטוגרמה ביותר עדין.

126
00:04:11,330 --> 00:04:12,950
אז אנחנו עושים hist x, 50,

127
00:04:13,050 --> 00:04:14,970
ומקבלים גרף עם 50 דליים.

128
00:04:15,310 --> 00:04:15,660
אוקיי, זה נראה יותר טוב.

129
00:04:16,180 --> 00:04:18,570
עכשיו, זה לא נראה מאוד גאוסיאני, נכון?

130
00:04:18,930 --> 00:04:20,720
אז בואו נתחיל לשחק עם הנתונים.

131
00:04:20,900 --> 00:04:22,310
בואו ננסה hist

132
00:04:22,610 --> 00:04:24,810
של x בחזקת 0.5.

133
00:04:25,090 --> 00:04:26,590
אנחנו לוקחים

134
00:04:26,870 --> 00:04:28,820
את השורש הריבועי של הנתונים, ומדפיסים את ההיסטוגרמה של זה.

135
00:04:30,670 --> 00:04:31,680
ו... בסדר, זה נראה

136
00:04:31,800 --> 00:04:32,870
קצת יותר גאוסיאני, אבל אנחנו עוד לא

137
00:04:32,960 --> 00:04:34,550
ממש שם, אז בואו ונשחק בפרמטר 0.5.

138
00:04:34,790 --> 00:04:35,330
בואו נראה.

139
00:04:36,520 --> 00:04:38,110
נשנה את זה ל- 0.2.

140
00:04:38,280 --> 00:04:39,780
נראה קצת יותר גאוסיאני.

141
00:04:40,930 --> 00:04:43,150
בואו נצמצם קצת יותר ל-0.1.

142
00:04:44,450 --> 00:04:45,220
כן, זה נראה די טוב.

143
00:04:45,500 --> 00:04:48,440
אני באמת יכול פשוט להשתמש ב-0.1.

144
00:04:48,880 --> 00:04:50,190
אבל בואו נקטין את זה ל-0.05.

145
00:04:50,520 --> 00:04:50,910
ומה אתם יודעים?

146
00:04:51,740 --> 00:04:52,750
אוקיי, זה נראה די גאוסיאני,

147
00:04:53,230 --> 00:04:54,090
אז אני יכול להגדיר תכונה

148
00:04:54,190 --> 00:04:55,510
חדשה x-חדש ששווה

149
00:04:56,110 --> 00:04:58,940
ל-x בחזקת 0.05,

150
00:04:59,620 --> 00:05:01,380
ועכשיו התכונה

151
00:05:01,610 --> 00:05:03,050
החדשה x-חדש נראית יותר

152
00:05:03,250 --> 00:05:04,490
גאוסיאני מאשר ה-x המקורי

153
00:05:04,510 --> 00:05:05,560
ואז אני יכול להשתמש במקום זה

154
00:05:05,850 --> 00:05:07,070
בתכונה החדשה ואותה להכניס

155
00:05:07,380 --> 00:05:09,390
לאלגוריתם לזיהוי חריגים.

156
00:05:10,150 --> 00:05:12,100
וכמובן, יש יותר מדרך אחת לעשות זאת.

157
00:05:12,410 --> 00:05:14,530
אפשר גם להריץ hist של (log(x,

158
00:05:14,710 --> 00:05:17,320
הנה עוד דוגמה של טרנספורמציה שאפשר לעשות.

159
00:05:18,270 --> 00:05:20,410
וגם זה נראה די גאוסיאני.

160
00:05:20,870 --> 00:05:22,040
אז אני יכול להגדיר

161
00:05:22,230 --> 00:05:23,760
גם את x-חדש שווה לוג של x.

162
00:05:24,220 --> 00:05:25,120
וגם זו תהיה

163
00:05:25,300 --> 00:05:26,890
בחירה טובה למדי של תכונה להשתמש בה.

164
00:05:28,040 --> 00:05:29,400
אז לסיכום, אם אתה

165
00:05:29,520 --> 00:05:30,580
מריץ היסטוגרמה של הנתונים

166
00:05:31,000 --> 00:05:31,690
ומגלה שהיא נראית

167
00:05:31,940 --> 00:05:33,460
לא גאוסיאנית, שווה לשחק

168
00:05:33,740 --> 00:05:35,110
קצת עם

169
00:05:35,280 --> 00:05:37,120
טרנספורמציות שונות כאלה,

170
00:05:37,290 --> 00:05:38,190
כדי לראות אם אפשר

171
00:05:38,300 --> 00:05:39,410
לגרום לנתונים להיראות קצת יותר

172
00:05:39,570 --> 00:05:40,520
גאוסיאניים לפני שמשתמשים בהם

173
00:05:40,770 --> 00:05:41,970
באלגוריתם הלמידה שלך, אם כי גם

174
00:05:42,050 --> 00:05:43,550
בלי זה זה יכול לעבוד בסדר.

175
00:05:43,850 --> 00:05:45,070
אבל אני בדרך כלל כן עושה את הצעד הזה.

176
00:05:45,850 --> 00:05:46,880
עכשיו, הדבר השני שאני רוצה

177
00:05:46,970 --> 00:05:48,280
לדבר עליו הוא איך

178
00:05:48,400 --> 00:05:51,540
מוצאים תכונות עבור אלגוריתם זיהוי חריגים.

179
00:05:52,650 --> 00:05:53,780
והדרך שבה אני עושה

180
00:05:53,990 --> 00:05:56,490
את זה לעתים קרובות, היא באמצעות תהליך ניתוח שגיאות.

181
00:05:57,630 --> 00:05:58,590
מה שאני מתכוון בזה

182
00:05:58,970 --> 00:05:59,960
הוא שזה דומה מאוד

183
00:06:00,320 --> 00:06:02,320
לנוהל ניתוח השגיאה

184
00:06:02,450 --> 00:06:04,600
שהיה לנו לגבי למידה בפיקוח, שבו

185
00:06:04,860 --> 00:06:06,810
עשינו אימון

186
00:06:06,860 --> 00:06:08,220
מלא של אלגוריתם, ואז מפעילים

187
00:06:08,350 --> 00:06:09,980
את האלגוריתם על קבוצת האימות הצולב,

188
00:06:10,840 --> 00:06:11,870
ורואים באילו דוגמאות

189
00:06:12,230 --> 00:06:13,500
הוא מפספס, ובודקים אם

190
00:06:13,580 --> 00:06:14,800
אנחנו יכולים למצוא תכונות נוספות

191
00:06:15,370 --> 00:06:16,440
כדי לסייע לאלגוריתם

192
00:06:16,580 --> 00:06:17,870
להשתפר על הדוגמאות

193
00:06:18,280 --> 00:06:19,850
שבהם הוא פישל על סדרת האימות.

194
00:06:21,060 --> 00:06:23,380
אז בואו ננסה

195
00:06:24,040 --> 00:06:25,960
לחשוב על דוגמה של התהליך הזה.

196
00:06:26,950 --> 00:06:28,680
בזיהוי חריגים אנחנו

197
00:06:28,880 --> 00:06:29,690
מקווים ש-p של x יהיה

198
00:06:29,840 --> 00:06:30,910
גדול עבור דוגמאות נורמליות

199
00:06:31,760 --> 00:06:33,180
וקטן עבור דוגמאות חריגות.

200
00:06:34,400 --> 00:06:35,370
אז בעיה נפוצה למדי

201
00:06:35,950 --> 00:06:37,780
תהיה אם p של x הוא באותו סדר גודל,

202
00:06:38,480 --> 00:06:41,540
לדוגמא הוא גדול גם עבור הדוגמאות הנורמליות וגם על הדוגמאות האנומליות.

203
00:06:42,940 --> 00:06:44,380
בואו נראה דוגמה ספציפית של זה.

204
00:06:45,150 --> 00:06:46,760
נניח שאלה הנתונים הלא מתויגים שלנו.

205
00:06:47,120 --> 00:06:47,970
אז כאן יש לי רק

206
00:06:48,210 --> 00:06:51,130
תכונה אחת, x1, ואני אתאים לה גאוסיאן.

207
00:06:52,160 --> 00:06:55,990
ואולי הגאוסיאן שאני מתאים לנתונים נראה ככה.

208
00:06:57,300 --> 00:06:59,130
ועכשיו נניח שיש לנו דוגמה חריגה,

209
00:06:59,670 --> 00:07:00,480
ונניח שהדוגמה החריגה

210
00:07:01,080 --> 00:07:02,850
מקבלת ערך x של 2.5.

211
00:07:03,020 --> 00:07:06,420
אז אני מתווה את הדוגמה החריגה שלי כאן.

212
00:07:07,200 --> 00:07:08,120
והוא קבור

213
00:07:08,650 --> 00:07:09,730
באמצע קבוצה של

214
00:07:09,880 --> 00:07:11,690
דוגמאות נורמליות, ולכן

215
00:07:13,450 --> 00:07:14,850
הדוגמה החריגה הזאת

216
00:07:15,460 --> 00:07:16,780
שציירתי בירוק מקבלת

217
00:07:16,820 --> 00:07:18,550
סבירות גבוהה למדי, בתוך

218
00:07:18,730 --> 00:07:20,000
הגובה של העקומה הכחולה,

219
00:07:20,960 --> 00:07:22,280
ולכן האלגוריתם לא יצליח

220
00:07:22,390 --> 00:07:23,840
לסמן אותה כדוגמה חריגה.

221
00:07:25,320 --> 00:07:26,600
עכשיו, אם זה היה אולי ייצור מנועי

222
00:07:27,000 --> 00:07:29,540
מטוסים או משהו דומה,

223
00:07:29,680 --> 00:07:30,490
הייתי מסתכל

224
00:07:30,860 --> 00:07:32,370
היטב על דוגמת האימון הזו

225
00:07:32,840 --> 00:07:34,500
ורואה מה השתבש עם

226
00:07:34,730 --> 00:07:36,920
המנוע המסוים הזה של המטוס,

227
00:07:37,030 --> 00:07:38,360
ומנסה לבחון האם מהסתכלות

228
00:07:38,720 --> 00:07:40,720
על הדוגמה הזו אני יכול

229
00:07:40,860 --> 00:07:41,800
לגלות תכונה חדשה

230
00:07:42,290 --> 00:07:43,890
x2, שתסייע להבחין

231
00:07:44,650 --> 00:07:46,530
בין הדוגמה הרעה הזו לבין

232
00:07:46,900 --> 00:07:47,850
שאר

233
00:07:48,530 --> 00:07:49,850
הדוגמאות האדומות,

234
00:07:50,980 --> 00:07:51,600
כל מנועי המטוס הלא-חריגים.

235
00:07:52,790 --> 00:07:53,840
ואם אני מצליח לעשות

236
00:07:54,000 --> 00:07:54,910
את זה, התקווה תהיה

237
00:07:55,150 --> 00:07:56,540
שאם אני יכול ליצור

238
00:07:56,610 --> 00:07:59,360
תכונה חדשה x2 כך

239
00:07:59,610 --> 00:08:01,490
שכאשר אני מתווה מחדש את הנתונים, אם

240
00:08:01,580 --> 00:08:02,530
אני לוקח את כל הדוגמאות הרגילות

241
00:08:02,770 --> 00:08:04,420
מסדרת האימון, אני מקווה

242
00:08:04,750 --> 00:08:05,560
שנמצא שכל דוגמאות

243
00:08:05,710 --> 00:08:07,380
האימון הן הצלבים האדומים האלה,

244
00:08:08,210 --> 00:08:09,580
ואני מקווה שכשנעשה

245
00:08:09,860 --> 00:08:11,390
את זה עם הדוגמה החריגה,

246
00:08:11,480 --> 00:08:13,490
אז התכונה x2 תקבל ערך יוצא דופן.

247
00:08:14,470 --> 00:08:15,820
הדוגמה הירוקה

248
00:08:16,290 --> 00:08:18,670
כאן, שהיא חריגה, כן,

249
00:08:18,940 --> 00:08:20,800
הערך של x1 שלה הוא עדיין 2.5.

250
00:08:21,260 --> 00:08:22,900
אבל אולי הערך x2 שלה, נקווה

251
00:08:23,290 --> 00:08:24,530
שהוא מקבל ערך

252
00:08:24,840 --> 00:08:26,710
גדול מאוד, לדוגמא 3.5 כאן,

253
00:08:27,940 --> 00:08:28,450
או ערך קטן מאוד.

254
00:08:29,450 --> 00:08:30,530
ועכשיו נקווה שאם נייצר מודל

255
00:08:30,970 --> 00:08:32,480
של הנתונים, נמצא

256
00:08:33,050 --> 00:08:34,660
שהאלגוריתם לגילוי חריגים נותן

257
00:08:35,240 --> 00:08:36,830
הסתברות גבוהה לנתונים

258
00:08:37,190 --> 00:08:39,160
באזורים מרכזיים, הסתברות קצת יותר

259
00:08:39,200 --> 00:08:42,470
נמוכה לזה, והסתברות עוד יותר נמוכה לזה.

260
00:08:42,660 --> 00:08:43,960
ולדוגמה הזו שנמצאת

261
00:08:44,070 --> 00:08:45,450
ממש רחוק כאן, האלגוריתם עכשיו

262
00:08:45,630 --> 00:08:46,720
ייתן הסתברות נמוכה מאוד.

263
00:08:48,360 --> 00:08:48,360
...

264
00:08:48,510 --> 00:08:49,170
אז התהליך הוא

265
00:08:49,230 --> 00:08:50,320
בעצם להסתכל על

266
00:08:51,430 --> 00:08:52,570
אילו טעויות האלגוריתם עושה,

267
00:08:52,830 --> 00:08:54,370
להסתכל על הדוגמא החריגה שהוא

268
00:08:54,580 --> 00:08:56,020
לא סימן, ולראות

269
00:08:56,320 --> 00:08:59,100
אם זה נותן לך כיוון ליצור תכונה חדשה.

270
00:08:59,590 --> 00:09:01,180
למצוא משהו יוצא דופן

271
00:09:01,470 --> 00:09:02,590
במנוע הזה של מטוס ולהשתמש בו

272
00:09:02,800 --> 00:09:03,640
כדי ליצור תכונה חדשה,

273
00:09:04,530 --> 00:09:05,780
כך שבעזרת

274
00:09:05,900 --> 00:09:07,140
התכונה החדשה הזו זה נהיה יותר קל

275
00:09:07,400 --> 00:09:09,250
להבחין בין החריגים ובין הדוגמאות הטובות.

276
00:09:09,880 --> 00:09:11,170
אז זהו

277
00:09:11,280 --> 00:09:12,600
התהליך של ניתוח שגיאות

278
00:09:14,020 --> 00:09:15,360
ושימוש בזה כדי ליצור

279
00:09:15,750 --> 00:09:17,100
תכונות חדשות לזיהוי חריגים.

280
00:09:17,770 --> 00:09:18,980
לבסוף, תנו לי לחלוק

281
00:09:19,090 --> 00:09:20,440
איתכם את החשיבה שלי על השיטה

282
00:09:20,630 --> 00:09:23,190
בה אני משתמש בדרך כלל כדי לבחור את התכונות שיעזרו בזיהוי אנומליות.

283
00:09:24,350 --> 00:09:27,700
בדרך כלל, הדרך שבה אני חושב על בחירת התכונות היא

284
00:09:27,960 --> 00:09:29,160
שאני רוצה לבחור תכונות

285
00:09:29,270 --> 00:09:30,610
שיקבלו או ערכים מאוד מאוד

286
00:09:30,860 --> 00:09:32,000
גדולים, או ערכים מאוד מאוד

287
00:09:32,110 --> 00:09:33,890
קטנים, על דוגמאות

288
00:09:34,750 --> 00:09:36,420
שלדעתי עשויות להתברר כאנומליות.

289
00:09:37,850 --> 00:09:38,710
אז בואו שוב נשתמש בדוגמה שלנו

290
00:09:39,060 --> 00:09:41,820
של ניטור מחשבים במרכז הנתונים.

291
00:09:42,250 --> 00:09:43,560
אז יש לנו הרבה

292
00:09:43,630 --> 00:09:44,930
מכונות, אולי אלפי או עשרות

293
00:09:45,170 --> 00:09:47,830
אלפי מכונות במרכז הנתונים.

294
00:09:48,310 --> 00:09:49,410
ואנחנו רוצים לדעת אם אחת

295
00:09:49,580 --> 00:09:50,640
המכונות, אחד

296
00:09:50,710 --> 00:09:53,320
המחשבים שלנו עושה צרות, מתנהג בצורה מוזרה.

297
00:09:54,180 --> 00:09:56,050
אז הנה דוגמאות של תכונות שאפשר לבחור,

298
00:09:57,020 --> 00:09:59,630
אולי כמות הזיכרון בשימוש, מספר גישות לדיסק, עומס CPU, תעבורת הרשת.

299
00:10:01,040 --> 00:10:01,960
אבל עכשיו, נניח שאני

300
00:10:02,220 --> 00:10:03,040
חושד שאחד ממקרי

301
00:10:03,470 --> 00:10:04,580
הכישלון, נניח

302
00:10:05,230 --> 00:10:06,970
שבמערכת הנתונים שלי אני חושב

303
00:10:07,150 --> 00:10:08,460
שהעומס על המעבד ותעבורת הרשת

304
00:10:08,990 --> 00:10:10,820
נוטים לגדול באופן ליניארי זה עם זה.

305
00:10:11,110 --> 00:10:12,120
לדוגמא אם אני מפעיל קבוצה

306
00:10:12,220 --> 00:10:13,370
של שרתי אינטרנט, אז

307
00:10:13,750 --> 00:10:15,050
אם אחד השרתים שלי

308
00:10:15,310 --> 00:10:16,530
משרת הרבה משתמשים,

309
00:10:16,850 --> 00:10:19,050
יש עליו עומס CPU גבוה מאוד, ויש לו גם תעבורת רשת גבוהה מאוד.

310
00:10:20,230 --> 00:10:21,360
אבל נניח

311
00:10:21,840 --> 00:10:23,280
שאני חושד

312
00:10:23,390 --> 00:10:24,890
שאחד ממקרי הכישלון הוא

313
00:10:25,180 --> 00:10:26,240
אם אחד המחשבים שלי

314
00:10:26,530 --> 00:10:29,590
נתקע בלולאה אינסופית.

315
00:10:29,670 --> 00:10:30,750
אז אם אני חושב שאחד

316
00:10:30,800 --> 00:10:32,240
ממקרי הכישלון הוא שאחד

317
00:10:32,420 --> 00:10:33,470
משרתי האינטרנט שלי

318
00:10:34,380 --> 00:10:36,020
- קוד השרת -

319
00:10:36,680 --> 00:10:37,990
נתקע באיזו לולאה אינסופית,

320
00:10:38,230 --> 00:10:39,550
אז העומס על המעבד גדל,

321
00:10:40,380 --> 00:10:41,490
אבל תעבורת הרשת לא גדלה כי

322
00:10:41,560 --> 00:10:42,790
המחשב פשוט מסתובב על ריק

323
00:10:42,940 --> 00:10:44,570
ועושה הרבה עבודת CPU,

324
00:10:44,870 --> 00:10:46,000
כי הוא תקוע בלולאה אינסופית.

325
00:10:46,930 --> 00:10:47,850
במקרה כזה, כדי לזהות

326
00:10:48,240 --> 00:10:49,610
סוג כזה של חריג, אני עשוי

327
00:10:49,780 --> 00:10:52,440
ליצור תכונה חדשה, x5,

328
00:10:53,170 --> 00:10:55,130
שעשויה להיות עומס ה-CPU

329
00:10:56,600 --> 00:11:00,120
חלקי תעבורת הרשת.

330
00:11:01,230 --> 00:11:02,810
אז כאן x5 יקבל

331
00:11:03,180 --> 00:11:04,860
ערך גדול במיוחד

332
00:11:05,700 --> 00:11:06,410
אם על אחת המכונות יש

333
00:11:06,790 --> 00:11:08,190
עומס CPU גדול מאוד אבל

334
00:11:08,470 --> 00:11:09,980
לא הרבה תעבורת רשת

335
00:11:10,250 --> 00:11:11,030
ולכן זו תהיה

336
00:11:11,160 --> 00:11:12,390
תכונה שתסייע

337
00:11:12,490 --> 00:11:14,180
ללכוד את הסוג המסוים הזה של אנומליה.

338
00:11:15,000 --> 00:11:16,700
ואתם יכולים

339
00:11:16,840 --> 00:11:19,060
לחשוב בצורה יצירתית ולהמציא עוד תכונות אחרות.

340
00:11:19,230 --> 00:11:20,090
כמו אולי התכונה

341
00:11:20,570 --> 00:11:22,050
x6 שהיא עומס ה-CPU

342
00:11:22,880 --> 00:11:25,540
בריבוע חלקי תעבורת הרשת.

343
00:11:27,030 --> 00:11:28,280
וזוהי גרסה אחרת

344
00:11:28,950 --> 00:11:29,910
של תכונה כמו x5 שמנסה

345
00:11:30,020 --> 00:11:32,120
ללכוד אנומליות שבהן על אחת

346
00:11:32,280 --> 00:11:33,650
המכונות יש עומס CPU

347
00:11:33,800 --> 00:11:35,030
גבוה מאוד, שאולי

348
00:11:35,290 --> 00:11:37,100
לא קשור לתנועה רבה ברשת.

349
00:11:38,540 --> 00:11:40,080
ועל ידי יצירת תכונות

350
00:11:40,290 --> 00:11:41,560
כאלה, אתם יכולים להתחיל לתפוס

351
00:11:42,770 --> 00:11:44,550
אנומליות שתואמות

352
00:11:45,690 --> 00:11:48,270
לשילובים יוצאי דופן של ערכים של תכונות.

353
00:11:50,990 --> 00:11:52,090
אז בוידאו הזה

354
00:11:52,260 --> 00:11:53,550
דיברנו על איך

355
00:11:53,690 --> 00:11:54,670
לקחת תכונה, ואולי לשנות

356
00:11:55,120 --> 00:11:56,680
אותה קצת כך

357
00:11:56,830 --> 00:11:57,910
שתיעשה קצת יותר גאוסיאנית

358
00:11:58,260 --> 00:12:00,480
לפני שמכניסים אותה לאלגוריתם זיהוי אנומליה.

359
00:12:00,950 --> 00:12:02,110
וגם על ניתוח השגיאה

360
00:12:02,740 --> 00:12:04,220
בתהליך הזה של יצירת תכונות

361
00:12:04,870 --> 00:12:06,710
כדי לנסות לגלות סוגים שונים של אנומליות.

362
00:12:07,550 --> 00:12:10,300
וההנחיות האלה, אנחנו מקווים שיסייעו לכם

363
00:12:10,850 --> 00:12:12,180
לבחור תכונות טובות

364
00:12:12,460 --> 00:12:14,310
להאכיל בהם את האלגוריתם לזיהוי אנומליות,

365
00:12:14,430 --> 00:12:15,920
כדי לעזור לו לגלות כל מיני חריגות.